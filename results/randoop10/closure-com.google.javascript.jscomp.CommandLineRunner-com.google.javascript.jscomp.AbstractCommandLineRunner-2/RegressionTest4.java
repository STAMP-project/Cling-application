import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        boolean boolean7 = builder6.getPyGenericServices();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder9 = builder6.newBuilderForField(fieldDescriptor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.UnknownFieldSet unknownFieldSet1 = com.google.protobuf.UnknownFieldSet.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = builder2.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder2.addExtension(builder5);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder8 = builder2.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder9 = builder8.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        com.google.protobuf.UnknownFieldSet unknownFieldSet22 = builder17.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream23 = null;
        unknownFieldSet22.writeTo(codedOutputStream23);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder25 = builder9.setUnknownFields(unknownFieldSet22);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto26 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean27 = methodDescriptorProto26.hasOutputType();
        byte[] byteArray28 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions30 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray28, extensionRegistryLite29);
        com.google.protobuf.CodedOutputStream codedOutputStream33 = com.google.protobuf.CodedOutputStream.newInstance(byteArray28, (int) (short) 0, 1);
        methodDescriptorProto26.writeTo(codedOutputStream33);
        unknownFieldSet22.writeTo(codedOutputStream33);
        unknownFieldSet1.writeTo(codedOutputStream33);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream33.writeInt64NoTag(1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(unknownFieldSet1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(unknownFieldSet22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(methodDescriptorProto26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(methodOptions30);
        org.junit.Assert.assertNotNull(codedOutputStream33);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        java.lang.String str1 = methodDescriptorProto0.getOutputType();
        java.io.PrintStream printStream3 = new java.io.PrintStream("goog.abstractMethod");
        methodDescriptorProto0.writeTo((java.io.OutputStream) printStream3);
        boolean boolean5 = methodDescriptorProto0.hasOptions();
        java.lang.String str6 = methodDescriptorProto0.getName();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        com.google.protobuf.CodedInputStream codedInputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap functionInformationMap1 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(codedInputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean11 = strSet9.isEmpty();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate(100);
        boolean boolean14 = strSet9.equals((java.lang.Object) byteBuffer13);
        int int15 = strSet9.size();
        compilerOptions0.stripTypes = strSet9;
        compilerOptions0.setCollapseObjectLiterals(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long3 = fileTime1.to(timeUnit2);
        java.lang.Thread thread4 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeUnit2.timedJoin(thread4, 4320000000000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        java.lang.String str8 = compiler5.toSource();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode0 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.LITE_RUNTIME;
        org.junit.Assert.assertTrue("'" + optimizeMode0 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.LITE_RUNTIME + "'", optimizeMode0.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.LITE_RUNTIME));
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isThis();
        int int10 = node3.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption3 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Entry entry4 = com.google.javascript.jscomp.FunctionInformationMap.Entry.parseFrom(byteArray0);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Message missing required fields: id, source_name, line_number, module_name, size, name, compiled_source");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(uninterpretedOption3);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.Descriptors.FileDescriptor fileDescriptor1 = descriptor0.getFile();
        java.util.List<com.google.protobuf.Descriptors.FileDescriptor> fileDescriptorList2 = fileDescriptor1.getDependencies();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(fileDescriptor1);
        org.junit.Assert.assertNotNull(fileDescriptorList2);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        byte[] byteArray6 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions8 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray6, extensionRegistryLite7);
        com.google.protobuf.CodedOutputStream codedOutputStream11 = com.google.protobuf.CodedOutputStream.newInstance(byteArray6, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto13 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray6, extensionRegistryLite12);
        com.google.protobuf.CodedOutputStream codedOutputStream14 = com.google.protobuf.CodedOutputStream.newInstance(byteArray6);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label16 = builder15.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto17 = builder15.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = fieldDescriptorProto17.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto17);
        java.io.File file22 = null;
        java.io.File file23 = java.io.File.createTempFile("hi!", "ISO", file22);
        boolean boolean26 = file23.setWritable(false, false);
        java.net.URI uRI27 = file23.toURI();
        java.io.PrintStream printStream28 = new java.io.PrintStream(file23);
        printStream28.print((int) (byte) 0);
        printStream28.print(10.0d);
        printStream28.close();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        boolean boolean40 = strSet38.isEmpty();
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocate(100);
        boolean boolean43 = strSet38.equals((java.lang.Object) byteBuffer42);
        java.nio.IntBuffer intBuffer44 = byteBuffer42.asIntBuffer();
        double double45 = byteBuffer42.getDouble();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer42.put((int) (short) 1, (byte) 1);
        byte[] byteArray49 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite50 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions51 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray49, extensionRegistryLite50);
        com.google.protobuf.CodedOutputStream codedOutputStream54 = com.google.protobuf.CodedOutputStream.newInstance(byteArray49, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite55 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto56 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray49, extensionRegistryLite55);
        com.google.protobuf.CodedOutputStream codedOutputStream57 = com.google.protobuf.CodedOutputStream.newInstance(byteArray49);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer42.get(byteArray49);
        printStream28.write(byteArray49, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream62 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite63 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location64 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream62, extensionRegistryLite63);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder65 = builder19.mergeFrom(byteArray49, extensionRegistryLite63);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto66 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray6, extensionRegistryLite63);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodOptions methodOptions67 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(codedInputStream5, extensionRegistryLite63);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(methodOptions8);
        org.junit.Assert.assertNotNull(codedOutputStream11);
        org.junit.Assert.assertNotNull(fileDescriptorProto13);
        org.junit.Assert.assertNotNull(codedOutputStream14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + label16 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label16.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/tmp/hi!4321594505334542122ISO");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intBuffer44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(methodOptions51);
        org.junit.Assert.assertNotNull(codedOutputStream54);
        org.junit.Assert.assertNotNull(fileDescriptorProto56);
        org.junit.Assert.assertNotNull(codedOutputStream57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(extensionRegistryLite63);
        org.junit.Assert.assertNotNull(location64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(fileDescriptorProto66);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        java.nio.DoubleBuffer doubleBuffer1 = java.nio.DoubleBuffer.allocate(37);
        org.junit.Assert.assertNotNull(doubleBuffer1);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES;
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor1 = type0.getDescriptorForType();
        com.google.protobuf.Descriptors.Descriptor descriptor2 = enumDescriptor1.getContainingType();
        com.google.protobuf.Descriptors.Descriptor descriptor3 = enumDescriptor1.getContainingType();
        java.util.List<com.google.protobuf.Descriptors.EnumValueDescriptor> enumValueDescriptorList4 = enumDescriptor1.getValues();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES + "'", type0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES));
        org.junit.Assert.assertNotNull(enumDescriptor1);
        org.junit.Assert.assertNotNull(descriptor2);
        org.junit.Assert.assertNotNull(descriptor3);
        org.junit.Assert.assertNotNull(enumValueDescriptorList4);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label7 = builder6.getLabel();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.MessageLite.Builder builder9 = builder6.mergeFrom(inputStream8);
        com.google.protobuf.UnknownFieldSet unknownFieldSet10 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = builder6.setUnknownFields(unknownFieldSet10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder2.addExtension((-1), builder6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + label7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label7.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.CodedOutputStream codedOutputStream6 = com.google.protobuf.CodedOutputStream.newInstance(byteArray1, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto8 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray1, extensionRegistryLite7);
        com.google.protobuf.CodedOutputStream codedOutputStream9 = com.google.protobuf.CodedOutputStream.newInstance(byteArray1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto12 = builder10.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = fieldDescriptorProto12.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto12);
        java.io.File file17 = null;
        java.io.File file18 = java.io.File.createTempFile("hi!", "ISO", file17);
        boolean boolean21 = file18.setWritable(false, false);
        java.net.URI uRI22 = file18.toURI();
        java.io.PrintStream printStream23 = new java.io.PrintStream(file18);
        printStream23.print((int) (byte) 0);
        printStream23.print(10.0d);
        printStream23.close();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean35 = strSet33.isEmpty();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocate(100);
        boolean boolean38 = strSet33.equals((java.lang.Object) byteBuffer37);
        java.nio.IntBuffer intBuffer39 = byteBuffer37.asIntBuffer();
        double double40 = byteBuffer37.getDouble();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer37.put((int) (short) 1, (byte) 1);
        byte[] byteArray44 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite45 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions46 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray44, extensionRegistryLite45);
        com.google.protobuf.CodedOutputStream codedOutputStream49 = com.google.protobuf.CodedOutputStream.newInstance(byteArray44, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite50 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto51 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray44, extensionRegistryLite50);
        com.google.protobuf.CodedOutputStream codedOutputStream52 = com.google.protobuf.CodedOutputStream.newInstance(byteArray44);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer37.get(byteArray44);
        printStream23.write(byteArray44, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream57 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite58 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location59 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream57, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder60 = builder14.mergeFrom(byteArray44, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto61 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray1, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption62 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(inputStream0, extensionRegistryLite58);
        double double63 = uninterpretedOption62.getDoubleValue();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart> namePartList64 = uninterpretedOption62.getNameList();
        boolean boolean65 = uninterpretedOption62.isInitialized();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(codedOutputStream6);
        org.junit.Assert.assertNotNull(fileDescriptorProto8);
        org.junit.Assert.assertNotNull(codedOutputStream9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file18.toString(), "/tmp/hi!3829683815407750531ISO");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intBuffer39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(methodOptions46);
        org.junit.Assert.assertNotNull(codedOutputStream49);
        org.junit.Assert.assertNotNull(fileDescriptorProto51);
        org.junit.Assert.assertNotNull(codedOutputStream52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(extensionRegistryLite58);
        org.junit.Assert.assertNotNull(location59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(fileDescriptorProto61);
        org.junit.Assert.assertNotNull(uninterpretedOption62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(namePartList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder1 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder4 = builder1.mergeFrom(inputStream2, extensionRegistryLite3);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap5 = builder1.getAllFields();
        java.io.File file8 = null;
        java.io.File file9 = java.io.File.createTempFile("hi!", "ISO", file8);
        boolean boolean12 = file9.setWritable(false, false);
        java.net.URI uRI13 = file9.toURI();
        java.io.PrintStream printStream14 = new java.io.PrintStream(file9);
        printStream14.print((int) (byte) 0);
        printStream14.print(10.0d);
        printStream14.close();
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat23 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions20.errorFormat = errorFormat23;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy25 = null;
        compilerOptions20.variableRenaming = variableRenamingPolicy25;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode27 = compilerOptions20.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder28 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder30 = builder28.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder31 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label32 = builder31.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = builder28.addExtension(builder31);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder28.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder35 = builder34.getOptionsBuilder();
        java.io.InputStream inputStream36 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions37 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream36);
        boolean boolean38 = enumOptions37.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder39 = builder35.mergeFrom(enumOptions37);
        byte[] byteArray40 = enumOptions37.toByteArray();
        compilerOptions20.setInputPropertyMapSerialized(byteArray40);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite42 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location43 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray40, extensionRegistryLite42);
        printStream14.write(byteArray40, 1970, 152);
        byte[] byteArray47 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions49 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray47, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption50 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray47);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder51 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label52 = builder51.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto53 = builder51.buildPartial();
        int int54 = fieldDescriptorProto53.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder55 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto53);
        java.io.InputStream inputStream56 = null;
        java.io.InputStream inputStream57 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite58 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location59 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream57, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder60 = builder55.mergeFrom(inputStream56, extensionRegistryLite58);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap61 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray47, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder62 = builder1.mergeFrom(byteArray40, extensionRegistryLite58);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart63 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.parseFrom(inputStream0, extensionRegistryLite58);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Message missing required fields: name_part, is_extension");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldDescriptorMap5);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/tmp/hi!8063564621245313890ISO");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(errorFormat23);
        org.junit.Assert.assertTrue("'" + tracerMode27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode27.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + label32 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label32.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(enumOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(location43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(methodOptions49);
        org.junit.Assert.assertNotNull(uninterpretedOption50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + label52 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label52.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(extensionRegistryLite58);
        org.junit.Assert.assertNotNull(location59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(functionInformationMap61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder1 = builder0.getSourceCodeInfoBuilder();
        boolean boolean2 = builder1.isInitialized();
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.of(localDateTime14, (java.time.ZoneId) zoneOffset18);
        java.time.Clock clock21 = java.time.Clock.fixed(instant3, (java.time.ZoneId) zoneOffset18);
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.now(clock21);
        java.time.LocalDate localDate23 = java.time.LocalDate.now(clock21);
        com.google.protobuf.Descriptors.Descriptor descriptor24 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto25 = descriptor24.toProto();
        boolean boolean26 = descriptorProto25.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList27 = descriptorProto25.getNestedTypeList();
        int int28 = descriptorProto25.getExtensionRangeCount();
        boolean boolean29 = localDate23.equals((java.lang.Object) descriptorProto25);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = descriptorProto25.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList31 = builder30.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet32 = builder30.getUnknownFields();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder33 = builder1.mergeUnknownFields(unknownFieldSet32);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder35 = builder33.clearField(fieldDescriptor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(descriptor24);
        org.junit.Assert.assertNotNull(descriptorProto25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptorProtoList31);
        org.junit.Assert.assertNotNull(unknownFieldSet32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        java.time.Month month0 = java.time.Month.JANUARY;
        int int1 = month0.maxLength();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 31 + "'", int1 == 31);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        boolean boolean2 = priorityMap0.isEmpty();
        java.lang.String str3 = priorityMap0.toString();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = builder4.clearCcGenericServices();
        boolean boolean6 = builder4.isInitialized();
        com.google.protobuf.MessageLite messageLite7 = priorityMap0.get((java.lang.Object) builder4);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder4.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.ByteString byteString12 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder10.mergeFrom(byteString12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location15 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString12, extensionRegistryLite14);
        com.google.protobuf.MessageLite.Builder builder16 = builder4.mergeFrom(byteString12);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto17 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(byteString12);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder18 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder21 = builder18.mergeFrom(inputStream19, extensionRegistryLite20);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap22 = builder18.getAllFields();
        java.io.File file25 = null;
        java.io.File file26 = java.io.File.createTempFile("hi!", "ISO", file25);
        boolean boolean29 = file26.setWritable(false, false);
        java.net.URI uRI30 = file26.toURI();
        java.io.PrintStream printStream31 = new java.io.PrintStream(file26);
        printStream31.print((int) (byte) 0);
        printStream31.print(10.0d);
        printStream31.close();
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat40 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions37.errorFormat = errorFormat40;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy42 = null;
        compilerOptions37.variableRenaming = variableRenamingPolicy42;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode44 = compilerOptions37.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder45 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder47 = builder45.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder48 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label49 = builder48.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder50 = builder45.addExtension(builder48);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder51 = builder45.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder52 = builder51.getOptionsBuilder();
        java.io.InputStream inputStream53 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions54 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream53);
        boolean boolean55 = enumOptions54.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder56 = builder52.mergeFrom(enumOptions54);
        byte[] byteArray57 = enumOptions54.toByteArray();
        compilerOptions37.setInputPropertyMapSerialized(byteArray57);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location60 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray57, extensionRegistryLite59);
        printStream31.write(byteArray57, 1970, 152);
        byte[] byteArray64 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite65 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions66 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray64, extensionRegistryLite65);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption67 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray64);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder68 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label69 = builder68.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto70 = builder68.buildPartial();
        int int71 = fieldDescriptorProto70.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder72 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto70);
        java.io.InputStream inputStream73 = null;
        java.io.InputStream inputStream74 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite75 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location76 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream74, extensionRegistryLite75);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder77 = builder72.mergeFrom(inputStream73, extensionRegistryLite75);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap78 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray64, extensionRegistryLite75);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder79 = builder18.mergeFrom(byteArray57, extensionRegistryLite75);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange80 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(byteString12, extensionRegistryLite75);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(messageLite7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(location15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(fieldDescriptorProto17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(fieldDescriptorMap22);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertEquals(file26.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file26.toString(), "/tmp/hi!9156733207062313706ISO");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(uRI30);
        org.junit.Assert.assertNotNull(errorFormat40);
        org.junit.Assert.assertTrue("'" + tracerMode44 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode44.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + label49 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label49.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(enumOptions54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(location60);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(methodOptions66);
        org.junit.Assert.assertNotNull(uninterpretedOption67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + label69 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label69.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(extensionRegistryLite75);
        org.junit.Assert.assertNotNull(location76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(functionInformationMap78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(extensionRange80);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto1 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(inputStream0);
        int int2 = enumDescriptorProto1.getValueCount();
        org.junit.Assert.assertNotNull(enumDescriptorProto1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        boolean boolean6 = node4.isThrow();
        boolean boolean7 = node4.isVarArgs();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean12 = node11.isFromExterns();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean17 = node16.isFromExterns();
        java.lang.String str18 = node16.toString();
        com.google.javascript.rhino.Node node19 = node11.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean30 = node29.isStringKey();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((-1), node4, node16, node23, node29, 16384, 16);
        boolean boolean34 = node16.isWhile();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        com.google.javascript.rhino.Node node39 = node38.getLastChild();
        com.google.javascript.rhino.Node node40 = node16.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean45 = node44.isVar();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean50 = node49.isStringKey();
        boolean boolean51 = node49.isThrow();
        boolean boolean52 = node49.isVarArgs();
        boolean boolean53 = node49.isHook();
        com.google.javascript.rhino.Node node54 = node49.cloneNode();
        com.google.javascript.rhino.Node node55 = node44.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean60 = node59.isFromExterns();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean65 = node64.isFromExterns();
        java.lang.String str66 = node64.toString();
        com.google.javascript.rhino.Node node67 = node59.copyInformationFrom(node64);
        int int68 = node59.getLineno();
        boolean boolean69 = node59.isLabel();
        java.lang.String str70 = node59.getSourceFileName();
        boolean boolean71 = node59.isDec();
        com.google.javascript.rhino.Node node72 = node54.useSourceInfoFrom(node59);
        node40.addChildToFront(node72);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean78 = node77.isVar();
        java.lang.String str79 = node77.getSourceFileName();
        java.lang.String str83 = node77.toString(false, false, false);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node84 = node72.removeChildAfter(node77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 52.0 0" + "'", str18, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER 52.0 0" + "'", str66, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "NUMBER 52.0" + "'", str83, "NUMBER 52.0");
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition0 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        int int6 = localDateTime5.getYear();
        java.time.LocalDate localDate7 = localDateTime5.toLocalDate();
        int int8 = localDateTime5.getNano();
        java.time.Instant instant9 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.OffsetDateTime offsetDateTime15 = java.time.OffsetDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset13);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime15.minusDays((long) (short) 100);
        java.lang.String str18 = offsetDateTime15.toString();
        java.time.ZoneOffset zoneOffset19 = offsetDateTime15.getOffset();
        java.lang.String str20 = zoneOffset19.toString();
        java.time.Instant instant21 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.OffsetDateTime offsetDateTime27 = java.time.OffsetDateTime.ofInstant(instant21, (java.time.ZoneId) zoneOffset25);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusDays((long) (short) 100);
        java.lang.String str30 = offsetDateTime27.toString();
        java.time.ZoneOffset zoneOffset31 = offsetDateTime27.getOffset();
        java.lang.String str32 = zoneOffset31.toString();
        java.time.LocalDateTime localDateTime33 = timeDefinition0.createDateTime(localDateTime5, zoneOffset19, zoneOffset31);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.of(localDateTime38, (java.time.ZoneId) zoneOffset42);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.LocalDateTime localDateTime48 = localDateTime38.plus((long) 1970, temporalUnit47);
        java.time.LocalTime localTime49 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime48);
        java.time.Period period50 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod51 = period50.normalized();
        java.time.Period period53 = period50.plusMonths((long) ' ');
        java.time.LocalDateTime localDateTime54 = localDateTime48.minus((java.time.temporal.TemporalAmount) period50);
        java.time.Period period56 = period50.withMonths(999);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime57 = localDateTime33.plus((java.time.temporal.TemporalAmount) period56);
        java.lang.String str58 = period56.toString();
        org.junit.Assert.assertTrue("'" + timeDefinition0 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL + "'", timeDefinition0.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str18, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:52" + "'", str20, "+00:00:52");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str30, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:52" + "'", str32, "+00:00:52");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField46.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "P999M" + "'", str58, "P999M");
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        int int7 = codedInputStream5.pushLimit((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long8 = codedInputStream5.readUInt64();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.clearExtension();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder31 = builder27.clearName();
        com.google.protobuf.ByteString.Output output33 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream35 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output33, (int) 'a');
        byte[] byteArray36 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions38 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray36, extensionRegistryLite37);
        output33.write(byteArray36);
        com.google.protobuf.CodedInputStream codedInputStream42 = com.google.protobuf.CodedInputStream.newInstance(byteArray36, 21, 4);
        byte[] byteArray43 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions45 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray43, extensionRegistryLite44);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite46 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto47 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray43, extensionRegistryLite46);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder48 = enumDescriptorProto47.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor49 = builder48.getDescriptorForType();
        boolean boolean50 = builder48.hasName();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder51 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder52 = builder51.clearCcGenericServices();
        boolean boolean53 = builder51.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder55 = builder51.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder56 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label57 = builder56.getLabel();
        com.google.protobuf.ByteString byteString58 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder59 = builder56.mergeFrom(byteString58);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite60 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder61 = builder55.mergeFrom(byteString58, extensionRegistryLite60);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions63 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString58, extensionRegistryLite62);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite64 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions65 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString58, extensionRegistryLite64);
        com.google.protobuf.ByteString byteString66 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite67 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions68 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString66, extensionRegistryLite67);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder69 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label70 = builder69.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto71 = builder69.buildPartial();
        int int72 = fieldDescriptorProto71.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder73 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto71);
        java.io.InputStream inputStream74 = null;
        java.io.InputStream inputStream75 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite76 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location77 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream75, extensionRegistryLite76);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder78 = builder73.mergeFrom(inputStream74, extensionRegistryLite76);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap79 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString66, extensionRegistryLite76);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder80 = builder48.mergeFrom(byteString58, extensionRegistryLite76);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder81 = builder31.mergeFrom(codedInputStream42, extensionRegistryLite76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(output33);
        org.junit.Assert.assertNotNull(codedOutputStream35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(methodOptions38);
        org.junit.Assert.assertNotNull(codedInputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(methodOptions45);
        org.junit.Assert.assertNotNull(enumDescriptorProto47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(descriptor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + label57 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label57.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(enumValueOptions63);
        org.junit.Assert.assertNotNull(messageOptions65);
        org.junit.Assert.assertNotNull(byteString66);
        org.junit.Assert.assertNotNull(enumOptions68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + label70 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label70.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(extensionRegistryLite76);
        org.junit.Assert.assertNotNull(location77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(functionInformationMap79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.plusDays((long) '4');
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getRangeUnit();
        long long27 = chronoField24.checkValidValue((long) 2);
        long long28 = zonedDateTime23.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.ValueRange valueRange29 = zonedDateTime12.range((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.Instant instant33 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.OffsetDateTime offsetDateTime39 = java.time.OffsetDateTime.ofInstant(instant33, (java.time.ZoneId) zoneOffset37);
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime39.minusDays((long) (short) 100);
        java.lang.String str42 = offsetDateTime39.toString();
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int44 = offsetDateTime39.get((java.time.temporal.TemporalField) chronoField43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime39.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime46.withOffsetSameLocal(zoneOffset47);
        boolean boolean49 = chronoField32.isSupportedBy((java.time.temporal.TemporalAccessor) zoneOffset47);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 8, 10, zoneOffset47);
        java.time.ZonedDateTime zonedDateTime51 = zonedDateTime12.withZoneSameLocal((java.time.ZoneId) zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField24.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertNotNull(valueRange29);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField32.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str42, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        byte[] byteArray5 = compilerOptions0.inputPropertyMapSerialized;
        compilerOptions0.exportTestFunctions = false;
        compilerOptions0.setProcessObjectPropertyString(true);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray5);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        codedOutputStream3.writeSInt64(999, 3600000L);
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = builder3.getUnknownFields();
        java.lang.String str5 = unknownFieldSet4.toString();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(unknownFieldSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        java.util.stream.LongStream longStream8 = longStream4.skip(0L);
        java.util.function.LongPredicate longPredicate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream10 = longStream4.filter(longPredicate9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(longStream8);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        java.nio.file.Path path0 = null;
        java.nio.file.LinkOption linkOption1 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { linkOption1 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.FileChannel fileChannel3 = java.nio.channels.FileChannel.open(path0, openOptionArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + linkOption1 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption1.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
        org.junit.Assert.assertNotNull(openOptionArray2);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        com.google.protobuf.WireFormat.FieldType fieldType0 = com.google.protobuf.WireFormat.FieldType.INT32;
        com.google.protobuf.WireFormat.JavaType javaType1 = fieldType0.getJavaType();
        org.junit.Assert.assertTrue("'" + fieldType0 + "' != '" + com.google.protobuf.WireFormat.FieldType.INT32 + "'", fieldType0.equals(com.google.protobuf.WireFormat.FieldType.INT32));
        org.junit.Assert.assertTrue("'" + javaType1 + "' != '" + com.google.protobuf.WireFormat.JavaType.INT + "'", javaType1.equals(com.google.protobuf.WireFormat.JavaType.INT));
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        java.util.function.UnaryOperator<com.google.javascript.jscomp.DiagnosticGroup> diagnosticGroupUnaryOperator0 = java.util.function.UnaryOperator.identity();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup1 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroupUnaryOperator0.apply(diagnosticGroup1);
        com.google.javascript.jscomp.DiagnosticGroups.TWEAKS = diagnosticGroup2;
        org.junit.Assert.assertNotNull(diagnosticGroupUnaryOperator0);
        org.junit.Assert.assertNotNull(diagnosticGroup1);
        org.junit.Assert.assertNotNull(diagnosticGroup2);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder7 = com.google.protobuf.DescriptorProtos.MessageOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions8 = builder7.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder9 = builder6.mergeFrom(messageOptions8);
        byte[] byteArray10 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions12 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray10, extensionRegistryLite11);
        com.google.protobuf.CodedOutputStream codedOutputStream15 = com.google.protobuf.CodedOutputStream.newInstance(byteArray10, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto17 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray10, extensionRegistryLite16);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray10);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label20 = builder19.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto21 = builder19.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = fieldDescriptorProto21.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder23 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto21);
        java.io.File file26 = null;
        java.io.File file27 = java.io.File.createTempFile("hi!", "ISO", file26);
        boolean boolean30 = file27.setWritable(false, false);
        java.net.URI uRI31 = file27.toURI();
        java.io.PrintStream printStream32 = new java.io.PrintStream(file27);
        printStream32.print((int) (byte) 0);
        printStream32.print(10.0d);
        printStream32.close();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        boolean boolean44 = strSet42.isEmpty();
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocate(100);
        boolean boolean47 = strSet42.equals((java.lang.Object) byteBuffer46);
        java.nio.IntBuffer intBuffer48 = byteBuffer46.asIntBuffer();
        double double49 = byteBuffer46.getDouble();
        java.nio.ByteBuffer byteBuffer52 = byteBuffer46.put((int) (short) 1, (byte) 1);
        byte[] byteArray53 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite54 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions55 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray53, extensionRegistryLite54);
        com.google.protobuf.CodedOutputStream codedOutputStream58 = com.google.protobuf.CodedOutputStream.newInstance(byteArray53, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto60 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray53, extensionRegistryLite59);
        com.google.protobuf.CodedOutputStream codedOutputStream61 = com.google.protobuf.CodedOutputStream.newInstance(byteArray53);
        java.nio.ByteBuffer byteBuffer62 = byteBuffer46.get(byteArray53);
        printStream32.write(byteArray53, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream66 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite67 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location68 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream66, extensionRegistryLite67);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder69 = builder23.mergeFrom(byteArray53, extensionRegistryLite67);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto70 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray10, extensionRegistryLite67);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite73 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder74 = builder6.mergeFrom(byteArray10, 999, (int) (byte) 10, extensionRegistryLite73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(messageOptions8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(methodOptions12);
        org.junit.Assert.assertNotNull(codedOutputStream15);
        org.junit.Assert.assertNotNull(fileDescriptorProto17);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + label20 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label20.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertEquals(file27.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file27.toString(), "/tmp/hi!909657600335319870ISO");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(uRI31);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intBuffer48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(methodOptions55);
        org.junit.Assert.assertNotNull(codedOutputStream58);
        org.junit.Assert.assertNotNull(fileDescriptorProto60);
        org.junit.Assert.assertNotNull(codedOutputStream61);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(extensionRegistryLite67);
        org.junit.Assert.assertNotNull(location68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(fileDescriptorProto70);
        org.junit.Assert.assertNotNull(extensionRegistryLite73);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.javascript.jscomp.WarningsGuard.Priority priority2 = com.google.javascript.jscomp.WarningsGuard.Priority.MAX;
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions3 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList4 = fileOptions3.getUninterpretedOptionList();
        boolean boolean5 = fileOptions3.getCcGenericServices();
        int int6 = fileOptions3.getSerializedSize();
        com.google.protobuf.MessageLite messageLite7 = priorityMap0.replace(priority2, (com.google.protobuf.MessageLite) fileOptions3);
        com.google.javascript.jscomp.WarningsGuard.Priority priority8 = com.google.javascript.jscomp.WarningsGuard.Priority.SUPPRESS_DOC;
        com.google.protobuf.MessageLite messageLite9 = null;
        java.io.InputStream inputStream10 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange12 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream10, extensionRegistryLite11);
        int int13 = extensionRange12.getEnd();
        boolean boolean14 = extensionRange12.hasStart();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder15 = extensionRange12.newBuilderForType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = priorityMap0.replace(priority8, messageLite9, (com.google.protobuf.MessageLite) extensionRange12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + priority2 + "' != '" + com.google.javascript.jscomp.WarningsGuard.Priority.MAX + "'", priority2.equals(com.google.javascript.jscomp.WarningsGuard.Priority.MAX));
        org.junit.Assert.assertNotNull(fileOptions3);
        org.junit.Assert.assertNotNull(uninterpretedOptionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(messageLite7);
        org.junit.Assert.assertTrue("'" + priority8 + "' != '" + com.google.javascript.jscomp.WarningsGuard.Priority.SUPPRESS_DOC + "'", priority8.equals(com.google.javascript.jscomp.WarningsGuard.Priority.SUPPRESS_DOC));
        org.junit.Assert.assertNotNull(extensionRange12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.io.InputStream inputStream1 = null;
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location4 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream2, extensionRegistryLite3);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder5 = builder0.mergeFrom(inputStream1, extensionRegistryLite3);
        java.io.InputStream inputStream6 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder7 = builder0.mergeFrom(inputStream6);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor8 = null;
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean15 = strSet13.isEmpty();
        java.nio.ByteBuffer byteBuffer17 = java.nio.ByteBuffer.allocate(100);
        boolean boolean18 = strSet13.equals((java.lang.Object) byteBuffer17);
        java.nio.IntBuffer intBuffer19 = byteBuffer17.asIntBuffer();
        java.nio.IntBuffer intBuffer20 = intBuffer19.duplicate();
        java.nio.IntBuffer intBuffer21 = intBuffer20.duplicate();
        java.nio.IntBuffer intBuffer22 = intBuffer21.duplicate();
        java.nio.IntBuffer intBuffer23 = intBuffer21.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder24 = builder0.addRepeatedField(fieldDescriptor8, (java.lang.Object) intBuffer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(extensionRegistryLite3);
        org.junit.Assert.assertNotNull(location4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intBuffer19);
        org.junit.Assert.assertNotNull(intBuffer20);
        org.junit.Assert.assertNotNull(intBuffer21);
        org.junit.Assert.assertNotNull(intBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap7 = null;
        compilerOptions0.customPasses = customPassExecutionTimeMultimap7;
        compilerOptions0.locale = "type";
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = builder5.clearField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant5 = instant3.plusMillis((long) (byte) -1);
        boolean boolean6 = instant0.isBefore(instant5);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.of(localDateTime13, (java.time.ZoneId) zoneOffset17);
        java.time.chrono.Chronology chronology20 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 6, (int) 'a', zoneOffset17);
        java.time.OffsetTime offsetTime22 = java.time.OffsetTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset17);
        java.time.LocalTime localTime23 = java.time.LocalTime.MIN;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.of(localDateTime28, (java.time.ZoneId) zoneOffset32);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField36.getBaseUnit();
        java.time.LocalDateTime localDateTime38 = localDateTime28.plus((long) 1970, temporalUnit37);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset43);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset48);
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.of(localDateTime44, (java.time.ZoneId) zoneOffset48);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit53 = chronoField52.getBaseUnit();
        java.time.LocalDateTime localDateTime54 = localDateTime44.plus((long) 1970, temporalUnit53);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime55 = localDateTime38.minus((long) 43, temporalUnit53);
        java.time.LocalDateTime localDateTime57 = localDateTime38.minusHours((long) 1024);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset61);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset66);
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.of(localDateTime62, (java.time.ZoneId) zoneOffset66);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean70 = localDateTime62.isSupported((java.time.temporal.TemporalField) chronoField69);
        int int71 = localDateTime57.get((java.time.temporal.TemporalField) chronoField69);
        java.time.LocalTime localTime73 = localTime23.with((java.time.temporal.TemporalField) chronoField69, (long) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime75 = offsetTime22.with((java.time.temporal.TemporalField) chronoField69, (long) 1024);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for ClockHourOfAmPm (valid values 1 - 12): 1024");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField36.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField52.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit53 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit53.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField69.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(localTime73);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor0 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.getDescriptor();
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor2 = enumDescriptor0.findValueByNumber((int) (byte) 10);
        java.lang.String str3 = enumDescriptor0.getFullName();
        org.junit.Assert.assertNotNull(enumDescriptor0);
        org.junit.Assert.assertNull(enumValueDescriptor2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "google.protobuf.FileOptions.OptimizeMode" + "'", str3, "google.protobuf.FileOptions.OptimizeMode");
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        boolean boolean2 = builder0.hasCompiledSource();
        com.google.protobuf.Descriptors.Descriptor descriptor3 = builder0.getDescriptorForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(descriptor3);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        boolean boolean4 = builder2.hasOptions();
        int int5 = builder2.getMessageTypeCount();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = builder2.getRepeatedField(fieldDescriptor6, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        int int10 = byteBuffer8.arrayOffset();
        java.nio.Buffer buffer11 = byteBuffer8.clear();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(buffer11);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        boolean boolean4 = builder3.hasOptions();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder5.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder5.addExtension(builder8);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder11 = builder5.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder12 = builder11.getOptionsBuilder();
        java.io.InputStream inputStream13 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions14 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream13);
        boolean boolean15 = enumOptions14.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder12.mergeFrom(enumOptions14);
        com.google.protobuf.UnknownFieldSet unknownFieldSet17 = builder12.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder18 = builder3.mergeUnknownFields(unknownFieldSet17);
        java.io.InputStream inputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = builder3.mergeDelimitedFrom(inputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(enumOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(unknownFieldSet17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        float[] floatArray2 = floatBuffer1.array();
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            float float6 = floatBuffer3.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.util.stream.LongStream longStream21 = java.util.stream.LongStream.of((long) (-1));
        longStream21.close();
        boolean boolean23 = clock18.equals((java.lang.Object) longStream21);
        java.lang.Runnable runnable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream25 = longStream21.onClose(runnable24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(longStream21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder14 = builder11.setNegativeIntValue((long) 55);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder16 = builder11.setIdentifierValue("MethodDescriptorProto");
        byte[] byteArray17 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions19 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray17, extensionRegistryLite18);
        com.google.protobuf.CodedInputStream codedInputStream22 = com.google.protobuf.CodedInputStream.newInstance(byteArray17, 16, (int) 'a');
        int int24 = codedInputStream22.pushLimit((int) 'a');
        java.io.InputStream inputStream25 = null;
        byte[] byteArray26 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite27 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions28 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray26, extensionRegistryLite27);
        com.google.protobuf.CodedOutputStream codedOutputStream31 = com.google.protobuf.CodedOutputStream.newInstance(byteArray26, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray26, extensionRegistryLite32);
        com.google.protobuf.CodedOutputStream codedOutputStream34 = com.google.protobuf.CodedOutputStream.newInstance(byteArray26);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label36 = builder35.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto37 = builder35.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder38 = fieldDescriptorProto37.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder39 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto37);
        java.io.File file42 = null;
        java.io.File file43 = java.io.File.createTempFile("hi!", "ISO", file42);
        boolean boolean46 = file43.setWritable(false, false);
        java.net.URI uRI47 = file43.toURI();
        java.io.PrintStream printStream48 = new java.io.PrintStream(file43);
        printStream48.print((int) (byte) 0);
        printStream48.print(10.0d);
        printStream48.close();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        boolean boolean60 = strSet58.isEmpty();
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocate(100);
        boolean boolean63 = strSet58.equals((java.lang.Object) byteBuffer62);
        java.nio.IntBuffer intBuffer64 = byteBuffer62.asIntBuffer();
        double double65 = byteBuffer62.getDouble();
        java.nio.ByteBuffer byteBuffer68 = byteBuffer62.put((int) (short) 1, (byte) 1);
        byte[] byteArray69 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite70 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions71 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray69, extensionRegistryLite70);
        com.google.protobuf.CodedOutputStream codedOutputStream74 = com.google.protobuf.CodedOutputStream.newInstance(byteArray69, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite75 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto76 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray69, extensionRegistryLite75);
        com.google.protobuf.CodedOutputStream codedOutputStream77 = com.google.protobuf.CodedOutputStream.newInstance(byteArray69);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer62.get(byteArray69);
        printStream48.write(byteArray69, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream82 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite83 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location84 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream82, extensionRegistryLite83);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder85 = builder39.mergeFrom(byteArray69, extensionRegistryLite83);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto86 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray26, extensionRegistryLite83);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption87 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(inputStream25, extensionRegistryLite83);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder88 = builder16.mergeFrom(codedInputStream22, extensionRegistryLite83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(methodOptions19);
        org.junit.Assert.assertNotNull(codedInputStream22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(methodOptions28);
        org.junit.Assert.assertNotNull(codedOutputStream31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(codedOutputStream34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + label36 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label36.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/tmp/hi!5790586914255799067ISO");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(uRI47);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intBuffer64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(methodOptions71);
        org.junit.Assert.assertNotNull(codedOutputStream74);
        org.junit.Assert.assertNotNull(fileDescriptorProto76);
        org.junit.Assert.assertNotNull(codedOutputStream77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(extensionRegistryLite83);
        org.junit.Assert.assertNotNull(location84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(fileDescriptorProto86);
        org.junit.Assert.assertNotNull(uninterpretedOption87);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        java.util.Locale locale3 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.util.Locale locale7 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str8 = locale3.getDisplayLanguage(locale7);
        java.lang.String str9 = locale3.getDisplayVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals(locale7.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.jscomp.SourceAst sourceAst4 = null;
        com.google.javascript.rhino.InputId inputId5 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput(sourceAst4, inputId5, true);
        com.google.javascript.jscomp.SourceAst sourceAst8 = null;
        com.google.javascript.rhino.InputId inputId9 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput11 = new com.google.javascript.jscomp.CompilerInput(sourceAst8, inputId9, true);
        com.google.javascript.rhino.InputId inputId12 = compilerInput11.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst13 = null;
        com.google.javascript.rhino.InputId inputId14 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput16 = new com.google.javascript.jscomp.CompilerInput(sourceAst13, inputId14, true);
        com.google.javascript.rhino.InputId inputId17 = compilerInput16.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst18 = null;
        com.google.javascript.rhino.InputId inputId19 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput21 = new com.google.javascript.jscomp.CompilerInput(sourceAst18, inputId19, true);
        java.io.PrintStream printStream22 = null;
        com.google.javascript.jscomp.Compiler compiler23 = new com.google.javascript.jscomp.Compiler(printStream22);
        com.google.javascript.jscomp.ErrorManager errorManager24 = compiler23.getErrorManager();
        compilerInput21.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler23);
        com.google.javascript.jscomp.SourceAst sourceAst26 = null;
        com.google.javascript.rhino.InputId inputId27 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceAst26, inputId27, true);
        com.google.javascript.rhino.InputId inputId30 = compilerInput29.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst31 = null;
        com.google.javascript.rhino.InputId inputId32 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput34 = new com.google.javascript.jscomp.CompilerInput(sourceAst31, inputId32, true);
        com.google.javascript.jscomp.SourceAst sourceAst35 = null;
        com.google.javascript.rhino.InputId inputId36 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput38 = new com.google.javascript.jscomp.CompilerInput(sourceAst35, inputId36, true);
        java.io.PrintStream printStream39 = null;
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler(printStream39);
        com.google.javascript.jscomp.ErrorManager errorManager41 = compiler40.getErrorManager();
        compilerInput38.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler40);
        com.google.javascript.jscomp.SourceAst sourceAst43 = null;
        com.google.javascript.rhino.InputId inputId44 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput46 = new com.google.javascript.jscomp.CompilerInput(sourceAst43, inputId44, true);
        com.google.javascript.jscomp.CompilerInput[] compilerInputArray47 = new com.google.javascript.jscomp.CompilerInput[] { compilerInput34, compilerInput38, compilerInput46 };
        com.google.common.collect.ImmutableSet<com.google.javascript.jscomp.CompilerInput> compilerInputSet48 = com.google.common.collect.ImmutableSet.of(compilerInput3, compilerInput7, compilerInput11, compilerInput16, compilerInput21, compilerInput29, compilerInputArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = compilerInput3.getLine(16384);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(errorManager24);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertNotNull(errorManager41);
        org.junit.Assert.assertNotNull(compilerInputArray47);
        org.junit.Assert.assertNotNull(compilerInputSet48);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor30 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto31 = descriptor30.toProto();
        boolean boolean32 = descriptorProto31.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions33 = descriptorProto31.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder34 = messageOptions33.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder36 = builder34.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder37 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output39 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream41 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output39, (int) 'a');
        byte[] byteArray42 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions44 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray42, extensionRegistryLite43);
        output39.write(byteArray42);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder46 = builder37.mergeFrom(byteArray42);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions47 = builder37.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder48 = builder37.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption49 = builder48.buildPartial();
        java.lang.String str50 = uninterpretedOption49.getIdentifierValue();
        int int51 = uninterpretedOption49.getNameCount();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder52 = builder36.addUninterpretedOption(uninterpretedOption49);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption53 = uninterpretedOption49.getDefaultInstanceForType();
        boolean boolean54 = uninterpretedOption49.hasAggregateValue();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder55 = builder28.addUninterpretedOption(16, uninterpretedOption49);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 16, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(descriptor30);
        org.junit.Assert.assertNotNull(descriptorProto31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(messageOptions33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(output39);
        org.junit.Assert.assertNotNull(codedOutputStream41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(methodOptions44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(methodOptions47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(uninterpretedOption49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(uninterpretedOption53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap6 = builder3.getAllFields();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location8 = builder3.getLocation(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 101");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(fieldDescriptorMap6);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = fileDescriptorProto7.getOptionsOrBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto> serviceDescriptorProtoList10 = fileDescriptorProto7.getServiceList();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertNotNull(serviceDescriptorProtoList10);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = builder3.clone();
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = builder3.mergeDelimitedFrom(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime14);
        java.time.LocalDateTime localDateTime17 = localDateTime14.minusMinutes((long) '0');
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder6 = sourceCodeInfo5.newBuilderForType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap7 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj8 = priorityMap7.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean10 = priorityMap7.containsValue((java.lang.Object) builder9);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder12 = builder9.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder14 = builder9.mergeFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder16 = builder6.mergeFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions18 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap19 = serviceOptions18.getAllFields();
        int int20 = serviceOptions18.getUninterpretedOptionCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(serviceOptions18);
        org.junit.Assert.assertNotNull(fieldDescriptorMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        printStream8.print((int) (byte) 0);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean13 = charBuffer12.isDirect();
        java.nio.CharBuffer charBuffer15 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer17 = charBuffer15.put('a');
        char[] charArray19 = new char[] { '4' };
        java.nio.CharBuffer charBuffer20 = charBuffer17.get(charArray19);
        java.nio.CharBuffer charBuffer21 = charBuffer17.compact();
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer25 = charBuffer23.put('a');
        java.nio.CharBuffer charBuffer27 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer29 = charBuffer27.put('a');
        char[] charArray31 = new char[] { '4' };
        java.nio.CharBuffer charBuffer32 = charBuffer29.get(charArray31);
        java.nio.CharBuffer charBuffer33 = charBuffer29.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet34 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer17, (java.lang.Appendable) charBuffer23, (java.lang.Appendable) charBuffer33);
        boolean boolean35 = charBuffer33.isDirect();
        char[] charArray36 = charBuffer33.array();
        java.nio.CharBuffer charBuffer38 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean39 = charBuffer38.isDirect();
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer43 = charBuffer41.put('a');
        char[] charArray45 = new char[] { '4' };
        java.nio.CharBuffer charBuffer46 = charBuffer43.get(charArray45);
        java.nio.CharBuffer charBuffer47 = charBuffer43.compact();
        java.nio.CharBuffer charBuffer49 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer51 = charBuffer49.put('a');
        java.nio.CharBuffer charBuffer53 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer55 = charBuffer53.put('a');
        char[] charArray57 = new char[] { '4' };
        java.nio.CharBuffer charBuffer58 = charBuffer55.get(charArray57);
        java.nio.CharBuffer charBuffer59 = charBuffer55.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet60 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer38, (java.lang.Appendable) charBuffer43, (java.lang.Appendable) charBuffer49, (java.lang.Appendable) charBuffer59);
        boolean boolean61 = charBuffer59.isDirect();
        int int62 = charBuffer33.read(charBuffer59);
        char[] charArray63 = new char[] {};
        java.nio.CharBuffer charBuffer64 = charBuffer33.get(charArray63);
        printStream8.print(charArray63);
        java.io.PrintStream printStream67 = new java.io.PrintStream((java.io.OutputStream) printStream8, true);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1503686551365549833ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(appendableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(charBuffer49);
        org.junit.Assert.assertNotNull(charBuffer51);
        org.junit.Assert.assertNotNull(charBuffer53);
        org.junit.Assert.assertNotNull(charBuffer55);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer58);
        org.junit.Assert.assertNotNull(charBuffer59);
        org.junit.Assert.assertNotNull(appendableSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[]");
        org.junit.Assert.assertNotNull(charBuffer64);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE));
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        int int7 = codedInputStream5.pushLimit((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap functionInformationMap8 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(codedInputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.JSModule jSModule2 = new com.google.javascript.jscomp.JSModule("/");
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        java.lang.String str5 = sourceFile4.getOriginalPath();
        jSModule2.add(sourceFile4);
        com.google.javascript.jscomp.SourceAst sourceAst7 = null;
        com.google.javascript.rhino.InputId inputId8 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput10 = new com.google.javascript.jscomp.CompilerInput(sourceAst7, inputId8, true);
        java.io.PrintStream printStream11 = null;
        com.google.javascript.jscomp.Compiler compiler12 = new com.google.javascript.jscomp.Compiler(printStream11);
        com.google.javascript.jscomp.ErrorManager errorManager13 = compiler12.getErrorManager();
        compilerInput10.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler12);
        jSModule2.add(compilerInput10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = compiler0.toSource(jSModule2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "/" + "'", str5, "/");
        org.junit.Assert.assertNotNull(errorManager13);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder30.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder33 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label34 = builder33.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = builder30.addExtension(builder33);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder36 = builder30.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder37 = builder36.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder40 = builder38.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label42 = builder41.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder43 = builder38.addExtension(builder41);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder44 = builder38.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder45 = builder44.getOptionsBuilder();
        java.io.InputStream inputStream46 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions47 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream46);
        boolean boolean48 = enumOptions47.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder49 = builder45.mergeFrom(enumOptions47);
        com.google.protobuf.UnknownFieldSet unknownFieldSet50 = builder45.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream51 = null;
        unknownFieldSet50.writeTo(codedOutputStream51);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder53 = builder37.setUnknownFields(unknownFieldSet50);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder54 = builder27.setUnknownFields(unknownFieldSet50);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto56 = builder54.getExtension((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + label34 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label34.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + label42 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label42.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(enumOptions47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(unknownFieldSet50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList1 = serviceDescriptorProto0.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceOptionsOrBuilder serviceOptionsOrBuilder2 = serviceDescriptorProto0.getOptionsOrBuilder();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList1);
        org.junit.Assert.assertNotNull(serviceOptionsOrBuilder2);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        java.io.PrintStream printStream1 = new java.io.PrintStream("goog.abstractMethod");
        java.util.Locale locale2 = null;
        java.security.ProtectionDomain protectionDomain4 = null;
        java.security.ProtectionDomain[] protectionDomainArray5 = new java.security.ProtectionDomain[] { protectionDomain4 };
        java.security.AccessControlContext accessControlContext6 = new java.security.AccessControlContext(protectionDomainArray5);
        java.io.PrintStream printStream7 = printStream1.format(locale2, "hi!", (java.lang.Object[]) protectionDomainArray5);
        printStream1.println(false);
        org.junit.Assert.assertNotNull(protectionDomainArray5);
        org.junit.Assert.assertNotNull(printStream7);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean13 = localDateTime5.isSupported((java.time.temporal.TemporalField) chronoField12);
        java.time.LocalDateTime localDateTime15 = localDateTime5.minusDays((long) 4);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal17 = chronoField0.adjustInto((java.time.temporal.Temporal) localDateTime5, 57700L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AmPmOfDay (valid values 0 - 1): 57700");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = builder29.getField(fieldDescriptor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry2 = builder0.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder4 = builder0.setLineNumber(7);
        boolean boolean5 = builder0.hasLineNumber();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(entry2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto7 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean8 = methodDescriptorProto7.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream9 = null;
        methodDescriptorProto7.writeTo(codedOutputStream9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder11 = methodDescriptorProto7.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder13 = builder11.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder14 = builder11.clearInputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder15 = builder2.addMethod(0, builder14);
        byte[] byteArray16 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray16, extensionRegistryLite17);
        com.google.protobuf.CodedOutputStream codedOutputStream21 = com.google.protobuf.CodedOutputStream.newInstance(byteArray16, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto23 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray16, extensionRegistryLite22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto25 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray16, extensionRegistryLite24);
        com.google.protobuf.UnknownFieldSet unknownFieldSet26 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray16);
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto27 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteArray16);
        java.io.InputStream inputStream30 = null;
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.CodedOutputStream codedOutputStream36 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray31, extensionRegistryLite37);
        com.google.protobuf.CodedOutputStream codedOutputStream39 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label41 = builder40.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto42 = builder40.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder43 = fieldDescriptorProto42.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder44 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto42);
        java.io.File file47 = null;
        java.io.File file48 = java.io.File.createTempFile("hi!", "ISO", file47);
        boolean boolean51 = file48.setWritable(false, false);
        java.net.URI uRI52 = file48.toURI();
        java.io.PrintStream printStream53 = new java.io.PrintStream(file48);
        printStream53.print((int) (byte) 0);
        printStream53.print(10.0d);
        printStream53.close();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        boolean boolean65 = strSet63.isEmpty();
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocate(100);
        boolean boolean68 = strSet63.equals((java.lang.Object) byteBuffer67);
        java.nio.IntBuffer intBuffer69 = byteBuffer67.asIntBuffer();
        double double70 = byteBuffer67.getDouble();
        java.nio.ByteBuffer byteBuffer73 = byteBuffer67.put((int) (short) 1, (byte) 1);
        byte[] byteArray74 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite75 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions76 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray74, extensionRegistryLite75);
        com.google.protobuf.CodedOutputStream codedOutputStream79 = com.google.protobuf.CodedOutputStream.newInstance(byteArray74, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite80 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto81 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray74, extensionRegistryLite80);
        com.google.protobuf.CodedOutputStream codedOutputStream82 = com.google.protobuf.CodedOutputStream.newInstance(byteArray74);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer67.get(byteArray74);
        printStream53.write(byteArray74, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream87 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite88 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location89 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream87, extensionRegistryLite88);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder90 = builder44.mergeFrom(byteArray74, extensionRegistryLite88);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto91 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray31, extensionRegistryLite88);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption92 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(inputStream30, extensionRegistryLite88);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder93 = builder14.mergeFrom(byteArray16, 4096, 100, extensionRegistryLite88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(methodDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(codedOutputStream21);
        org.junit.Assert.assertNotNull(fileDescriptorProto23);
        org.junit.Assert.assertNotNull(serviceDescriptorProto25);
        org.junit.Assert.assertNotNull(unknownFieldSet26);
        org.junit.Assert.assertNotNull(descriptorProto27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(codedOutputStream36);
        org.junit.Assert.assertNotNull(fileDescriptorProto38);
        org.junit.Assert.assertNotNull(codedOutputStream39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + label41 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label41.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/tmp/hi!9219234098552082273ISO");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(uRI52);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intBuffer69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(methodOptions76);
        org.junit.Assert.assertNotNull(codedOutputStream79);
        org.junit.Assert.assertNotNull(fileDescriptorProto81);
        org.junit.Assert.assertNotNull(codedOutputStream82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(extensionRegistryLite88);
        org.junit.Assert.assertNotNull(location89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(fileDescriptorProto91);
        org.junit.Assert.assertNotNull(uninterpretedOption92);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        java.lang.String str2 = jSDocInfo0.getOriginalCommentString();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        jSDocInfo0.addSuppression("goog.exportProperty");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream.Builder builder2 = builder0.add((double) 15);
        java.util.stream.DoubleStream.Builder builder4 = builder2.add((double) 55);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_DAY;
        java.time.temporal.ValueRange valueRange1 = chronoField0.range();
        long long2 = valueRange1.getSmallestMaximum();
        boolean boolean4 = valueRange1.isValidIntValue(0L);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 86399999L + "'", long2 == 86399999L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions12 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString7, extensionRegistryLite11);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList13 = enumValueOptions12.getUninterpretedOptionList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption15 = enumValueOptions12.getUninterpretedOption(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumValueOptions12);
        org.junit.Assert.assertNotNull(uninterpretedOptionList13);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, true);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        com.google.common.collect.ImmutableMap.Builder<java.time.format.ResolverStyle, com.google.javascript.jscomp.JSModule> resolverStyleBuilder0 = com.google.common.collect.ImmutableMap.builder();
        org.junit.Assert.assertNotNull(resolverStyleBuilder0);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap6 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray0);
        byte[] byteArray7 = variableMap6.toBytes();
        byte[] byteArray8 = variableMap6.toBytes();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertNotNull(variableMap6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions29 = builder27.getOptions();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto30 = builder27.getDefaultInstanceForType();
        int int31 = descriptorProto30.getSerializedSize();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(messageOptions29);
        org.junit.Assert.assertNotNull(descriptorProto30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE));
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.of(localDateTime13, (java.time.ZoneId) zoneOffset17);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit23 = chronoField22.getBaseUnit();
        boolean boolean24 = zonedDateTime21.isSupported(temporalUnit23);
        java.time.LocalDate localDate25 = java.time.LocalDate.now();
        java.lang.String str26 = localDate25.toString();
        boolean boolean27 = temporalUnit23.isSupportedBy((java.time.temporal.Temporal) localDate25);
        boolean boolean28 = localDate8.isSupported(temporalUnit23);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField22.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit23 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit23.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21" + "'", str26, "2022-02-21");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage.Builder builder3 = builder1.appendStringPart("16:00:52+00:00:52");
        com.google.javascript.jscomp.JsMessage.Builder builder5 = builder1.setSourceName("{}");
        com.google.javascript.jscomp.JsMessage jsMessage6 = builder1.build();
        com.google.javascript.jscomp.JsMessage.Builder builder8 = builder1.setIsHidden(true);
        boolean boolean9 = builder1.hasParts();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(jsMessage6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.renamePrefixNamespace = "1970-01-01";
        compilerOptions0.printInputDelimiter = true;
        compilerOptions0.collapseVariableDeclarations = false;
        compilerOptions0.checkMissingGetCssNameBlacklist = "1970-01-01T00:00:00Z";
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.of(localDateTime28, (java.time.ZoneId) zoneOffset32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit38 = chronoField37.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime39 = zonedDateTime34.truncatedTo(temporalUnit38);
        java.time.Duration duration40 = temporalUnit38.getDuration();
        boolean boolean41 = charBuffer12.equals((java.lang.Object) duration40);
        boolean boolean42 = duration40.isNegative();
        java.time.Duration duration44 = duration40.minusMinutes(0L);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit38 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit38.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray5 = new char[] { '/', '+', '/' };
        printWriter1.println(charArray5);
        printWriter1.flush();
        printWriter1.write((int) '4');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray15 = new char[] { '/', '+', '/' };
        printWriter11.println(charArray15);
        printWriter1.print(charArray15);
        printWriter1.println();
        printWriter1.print(10.0f);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "/+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "/+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[/, +, /]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "/+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "/+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[/, +, /]");
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label3 = builder2.getLabel();
        java.io.InputStream inputStream4 = null;
        com.google.protobuf.MessageLite.Builder builder5 = builder2.mergeFrom(inputStream4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type6 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = builder2.setType(type6);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder8 = builder0.addExtension(999, builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 999, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + label3 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label3.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + type6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES + "'", type6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES));
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry9.createObjectType(objectType10);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType16);
        com.google.javascript.rhino.Node node18 = objectType11.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry21.createObjectType(objectType22);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair29 = objectType23.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = objectType11.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType11);
        com.google.javascript.rhino.jstype.FunctionType functionType32 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry35.createObjectType(objectType36);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry40.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair43 = objectType37.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType42);
        java.lang.String str44 = objectType42.getDisplayName();
        objectType42.clearResolved();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean50 = node49.isStringKey();
        boolean boolean51 = node49.isThrow();
        boolean boolean52 = node49.isVarArgs();
        boolean boolean53 = node49.isHook();
        boolean boolean54 = node49.isAssign();
        boolean boolean55 = objectType42.equals((java.lang.Object) boolean54);
        boolean boolean56 = objectType42.isOrdinaryFunction();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType57 = jSTypeRegistry2.createFunctionTypeWithNewThisType(functionType32, objectType42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(typePair29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(typePair43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.OptionalInt optionalInt6 = intStream5.findAny();
        java.util.stream.IntStream.Builder builder7 = java.util.stream.IntStream.builder();
        builder7.accept(28);
        builder7.accept(1024);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream12 = intStream5.peek((java.util.function.IntConsumer) builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(optionalInt6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        int int3 = fieldDescriptorProto2.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions5 = builder4.getOptions();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList6 = fieldOptions5.getUninterpretedOptionList();
        boolean boolean7 = fieldOptions5.getPacked();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldOptions5);
        org.junit.Assert.assertNotNull(uninterpretedOptionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        // The following exception was thrown during execution in test generation
        try {
            codedInputStream10.checkLastTagWas((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Protocol message end-group tag did not match expected tag.");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.javascript.jscomp.WarningsGuard.Priority priority2 = com.google.javascript.jscomp.WarningsGuard.Priority.MAX;
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions3 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList4 = fileOptions3.getUninterpretedOptionList();
        boolean boolean5 = fileOptions3.getCcGenericServices();
        int int6 = fileOptions3.getSerializedSize();
        com.google.protobuf.MessageLite messageLite7 = priorityMap0.replace(priority2, (com.google.protobuf.MessageLite) fileOptions3);
        boolean boolean8 = fileOptions3.hasJavaMultipleFiles();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + priority2 + "' != '" + com.google.javascript.jscomp.WarningsGuard.Priority.MAX + "'", priority2.equals(com.google.javascript.jscomp.WarningsGuard.Priority.MAX));
        org.junit.Assert.assertNotNull(fileOptions3);
        org.junit.Assert.assertNotNull(uninterpretedOptionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(messageLite7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        com.google.protobuf.CodedOutputStream codedOutputStream17 = com.google.protobuf.CodedOutputStream.newInstance(byteArray12, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray12, extensionRegistryLite18);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto21 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray12, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto24 = builder22.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder25 = fieldDescriptorProto24.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto24);
        java.io.File file29 = null;
        java.io.File file30 = java.io.File.createTempFile("hi!", "ISO", file29);
        boolean boolean33 = file30.setWritable(false, false);
        java.net.URI uRI34 = file30.toURI();
        java.io.PrintStream printStream35 = new java.io.PrintStream(file30);
        printStream35.print((int) (byte) 0);
        printStream35.print(10.0d);
        printStream35.close();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        boolean boolean47 = strSet45.isEmpty();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocate(100);
        boolean boolean50 = strSet45.equals((java.lang.Object) byteBuffer49);
        java.nio.IntBuffer intBuffer51 = byteBuffer49.asIntBuffer();
        double double52 = byteBuffer49.getDouble();
        java.nio.ByteBuffer byteBuffer55 = byteBuffer49.put((int) (short) 1, (byte) 1);
        byte[] byteArray56 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions58 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray56, extensionRegistryLite57);
        com.google.protobuf.CodedOutputStream codedOutputStream61 = com.google.protobuf.CodedOutputStream.newInstance(byteArray56, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto63 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray56, extensionRegistryLite62);
        com.google.protobuf.CodedOutputStream codedOutputStream64 = com.google.protobuf.CodedOutputStream.newInstance(byteArray56);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer49.get(byteArray56);
        printStream35.write(byteArray56, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream69 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite70 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location71 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream69, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder72 = builder26.mergeFrom(byteArray56, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder73 = builder0.mergeFrom(byteArray12, extensionRegistryLite70);
        com.google.protobuf.Descriptors.Descriptor descriptor74 = builder73.getDescriptorForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(codedOutputStream17);
        org.junit.Assert.assertNotNull(fileDescriptorProto19);
        org.junit.Assert.assertNotNull(serviceDescriptorProto21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/tmp/hi!9189790478746996031ISO");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intBuffer51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(methodOptions58);
        org.junit.Assert.assertNotNull(codedOutputStream61);
        org.junit.Assert.assertNotNull(fileDescriptorProto63);
        org.junit.Assert.assertNotNull(codedOutputStream64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(extensionRegistryLite70);
        org.junit.Assert.assertNotNull(location71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(descriptor74);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        builder0.accept(1645437268288L);
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setInlineVariables(true);
        compilerOptions0.removeUnusedVars = true;
        boolean boolean13 = compilerOptions0.removeUnusedLocalVars;
        compilerOptions0.setAppNameStr("{1276638193}");
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.Scope scope2 = compiler1.getTopScope();
        org.junit.Assert.assertNull(scope2);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output6 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output6, (int) 'a');
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        output6.write(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder13 = builder4.mergeFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder4.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption16 = builder15.buildPartial();
        java.lang.String str17 = uninterpretedOption16.getIdentifierValue();
        int int18 = uninterpretedOption16.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder19 = builder1.addUninterpretedOption(uninterpretedOption16);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder20 = builder1.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder22 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder23 = builder20.setName(101, builder22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(output6);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(uninterpretedOption16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder2 = builder0.mergeFrom(inputStream1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions4 = builder2.getOptions();
        int int5 = serviceOptions4.getUninterpretedOptionCount();
        int int6 = serviceOptions4.getSerializedSize();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = serviceOptions4.getField(fieldDescriptor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceOptions4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException1 = new java.security.NoSuchAlgorithmException("READ_ONLY");
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str1 = builder0.getCompiledSource();
        boolean boolean2 = builder0.hasName();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder3.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label7 = builder6.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder3.addExtension(builder6);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder9 = builder3.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder10 = builder9.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = builder11.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label15 = builder14.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder16 = builder11.addExtension(builder14);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder17 = builder11.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder18 = builder17.getOptionsBuilder();
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions20 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream19);
        boolean boolean21 = enumOptions20.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder22 = builder18.mergeFrom(enumOptions20);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = builder18.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream24 = null;
        unknownFieldSet23.writeTo(codedOutputStream24);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder10.setUnknownFields(unknownFieldSet23);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto27 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean28 = methodDescriptorProto27.hasOutputType();
        byte[] byteArray29 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions31 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray29, extensionRegistryLite30);
        com.google.protobuf.CodedOutputStream codedOutputStream34 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29, (int) (short) 0, 1);
        methodDescriptorProto27.writeTo(codedOutputStream34);
        unknownFieldSet23.writeTo(codedOutputStream34);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder37 = builder0.setUnknownFields(unknownFieldSet23);
        com.google.protobuf.Descriptors.Descriptor descriptor38 = builder37.getDescriptorForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + label7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label7.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + label15 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label15.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(enumOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(methodDescriptorProto27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(methodOptions31);
        org.junit.Assert.assertNotNull(codedOutputStream34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(descriptor38);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        java.time.Month month0 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month0);
        java.time.Month month2 = month0.firstMonthOfQuarter();
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZonedDateTime zonedDateTime13 = java.time.ZonedDateTime.of(localDateTime7, (java.time.ZoneId) zoneOffset11);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime13.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime13.truncatedTo(temporalUnit17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime13.plusHours((long) 37);
        java.time.temporal.Temporal temporal21 = month2.adjustInto((java.time.temporal.Temporal) zonedDateTime13);
        java.time.DayOfWeek dayOfWeek22 = zonedDateTime13.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.APRIL + "'", month0.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.APRIL + "'", month2.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField16.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(temporal21);
        org.junit.Assert.assertTrue("'" + dayOfWeek22 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek22.equals(java.time.DayOfWeek.THURSDAY));
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions27 = builder7.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(enumOptions27);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("/");
        java.util.List<java.lang.String> strList2 = jSModule1.getProvides();
        java.util.stream.Stream<java.lang.String> strStream3 = strList2.stream();
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strStream3);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray7 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter1.println(charArray7);
        java.security.SignatureException signatureException10 = new java.security.SignatureException();
        java.security.SignatureException signatureException11 = new java.security.SignatureException();
        java.security.SignatureException signatureException12 = new java.security.SignatureException();
        java.security.SignatureException signatureException13 = new java.security.SignatureException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray15 = new java.security.SignatureException[] { signatureException10, signatureException11, signatureException12, signatureException13, signatureException14 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet16 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray15);
        java.io.PrintWriter printWriter17 = printWriter1.format("ISO", (java.lang.Object[]) signatureExceptionArray15);
        char[] charArray22 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.wrap(charArray22);
        printWriter1.println(charArray22);
        printWriter1.print('4');
        java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer30 = charBuffer28.put('a');
        char[] charArray32 = new char[] { '4' };
        java.nio.CharBuffer charBuffer33 = charBuffer30.get(charArray32);
        java.nio.CharBuffer charBuffer35 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer37 = charBuffer35.put('a');
        char[] charArray39 = new char[] { '4' };
        java.nio.CharBuffer charBuffer40 = charBuffer37.get(charArray39);
        java.nio.CharBuffer charBuffer41 = charBuffer30.put(charArray39);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write(charArray39, 21, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray15);
        org.junit.Assert.assertNotNull(signatureExceptionSet16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#,  , :,  ]");
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(charBuffer35);
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer40);
        org.junit.Assert.assertNotNull(charBuffer41);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) ' ', 0);
        int int9 = codedOutputStream8.spaceLeft();
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream11, extensionRegistryLite12);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream8.writeGroup((int) '#', (com.google.protobuf.MessageLite) methodOptions13);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.CodedOutputStream.OutOfSpaceException; message: CodedOutputStream was writing to a flat byte array and ran out of space.");
        } catch (com.google.protobuf.CodedOutputStream.OutOfSpaceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(methodOptions13);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime10.toLocalTime();
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.of(localDateTime19, (java.time.ZoneId) zoneOffset23);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.LocalDateTime localDateTime29 = localDateTime19.plus((long) 1970, temporalUnit28);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime41 = java.time.ZonedDateTime.of(localDateTime35, (java.time.ZoneId) zoneOffset39);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit44 = chronoField43.getBaseUnit();
        java.time.LocalDateTime localDateTime45 = localDateTime35.plus((long) 1970, temporalUnit44);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime46 = localDateTime29.minus((long) 43, temporalUnit44);
        java.time.LocalDateTime localDateTime48 = localDateTime29.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime50 = localDateTime48.plusHours((long) 0);
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset54);
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset59);
        java.time.ZonedDateTime zonedDateTime61 = java.time.ZonedDateTime.of(localDateTime55, (java.time.ZoneId) zoneOffset59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime61.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        boolean boolean66 = zonedDateTime63.isSupported(temporalUnit65);
        java.time.LocalDate localDate67 = java.time.LocalDate.now();
        java.lang.String str68 = localDate67.toString();
        boolean boolean69 = temporalUnit65.isSupportedBy((java.time.temporal.Temporal) localDate67);
        java.time.LocalDateTime localDateTime70 = localDateTime48.truncatedTo(temporalUnit65);
        boolean boolean71 = temporalUnit65.isTimeBased();
        java.time.LocalTime localTime72 = localTime13.plus((long) 50, temporalUnit65);
        long long73 = localTime72.toNanoOfDay();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit44 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit44.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField64.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-21" + "'", str68, "2022-02-21");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 7352000000000L + "'", long73 == 7352000000000L);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.LocalTime localTime10 = offsetDateTime6.toLocalTime();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZonedDateTime zonedDateTime21 = java.time.ZonedDateTime.of(localDateTime15, (java.time.ZoneId) zoneOffset19);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit24 = chronoField23.getBaseUnit();
        java.time.LocalDateTime localDateTime25 = localDateTime15.plus((long) 1970, temporalUnit24);
        java.time.LocalTime localTime26 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime25);
        boolean boolean27 = localTime10.isBefore(localTime26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        int int33 = localDateTime32.getYear();
        java.time.LocalDate localDate34 = localDateTime32.toLocalDate();
        java.time.chrono.Chronology chronology35 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate34);
        boolean boolean36 = localDate34.isLeapYear();
        java.time.LocalDate localDate38 = localDate34.plusDays((long) 12);
        java.time.Period period39 = java.time.Period.ZERO;
        java.time.chrono.ChronoLocalDate chronoLocalDate40 = localDate34.minus((java.time.temporal.TemporalAmount) period39);
        java.time.LocalDateTime localDateTime41 = localTime26.atDate(localDate34);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        boolean boolean43 = localDate34.isSupported((java.time.temporal.TemporalField) chronoField42);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset47);
        int int49 = localDateTime48.getYear();
        java.time.LocalDate localDate50 = localDateTime48.toLocalDate();
        java.time.chrono.Chronology chronology51 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate50);
        boolean boolean52 = localDate50.isLeapYear();
        java.time.LocalDate localDate54 = localDate50.plusDays((long) 12);
        boolean boolean55 = localDate34.isEqual((java.time.chrono.ChronoLocalDate) localDate50);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField23.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit24 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit24.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(chronoLocalDate40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField42.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto12 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean13 = serviceDescriptorProto12.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto12);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto15 = builder14.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions16 = builder14.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder17 = serviceOptions16.toBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.setOptions(builder17);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = builder17.getRepeatedField(fieldDescriptor19, 28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serviceDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serviceDescriptorProto15);
        org.junit.Assert.assertNotNull(serviceOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("hi!");
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.temporal.ValueRange valueRange8 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime7);
        java.time.OffsetDateTime offsetDateTime10 = offsetDateTime7.withYear(16384);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(valueRange8);
        org.junit.Assert.assertNotNull(offsetDateTime10);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.ByteString.Output output8 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream10 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output8, (int) 'a');
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        output8.write(byteArray11);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder0.mergeFrom(byteArray11);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = builder16.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = builder18.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder20 = builder18.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo21 = builder20.getDefaultInstanceForType();
        int int22 = sourceCodeInfo21.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder23 = builder15.mergeSourceCodeInfo(sourceCodeInfo21);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(output8);
        org.junit.Assert.assertNotNull(codedOutputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(sourceCodeInfo21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.MILLISECONDS;
        org.junit.Assert.assertNotNull(timeUnit0);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        java.time.temporal.TemporalUnit temporalUnit1 = chronoField0.getRangeUnit();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField0.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertTrue("'" + temporalUnit1 + "' != '" + java.time.temporal.ChronoUnit.YEARS + "'", temporalUnit1.equals(java.time.temporal.ChronoUnit.YEARS));
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat22 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions19.errorFormat = errorFormat22;
        java.lang.String[] strArray30 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        compilerOptions19.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList31);
        compilerOptions19.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRecordFunctionInformation(true);
        compilerOptions36.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions36.checkMissingGetCssNameLevel;
        compilerOptions19.setCheckProvides(checkLevel41);
        boolean boolean43 = compilerOptions19.removeUnusedPrototypePropertiesInExterns;
        boolean boolean44 = compilerOptions19.generatePseudoNames;
        compiler14.initOptions(compilerOptions19);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder46 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label47 = builder46.getLabel();
        com.google.protobuf.ByteString byteString48 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder49 = builder46.mergeFrom(byteString48);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite50 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location51 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString48, extensionRegistryLite50);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto52 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString48);
        com.google.javascript.jscomp.CompilerOptions compilerOptions53 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions53.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat56 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions53.errorFormat = errorFormat56;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy58 = null;
        compilerOptions53.variableRenaming = variableRenamingPolicy58;
        compilerOptions53.setSummaryDetailLevel(999);
        boolean boolean62 = compilerOptions53.getInferTypes();
        boolean boolean63 = compilerOptions53.ideMode;
        compilerOptions53.setGroupVariableDeclarations(true);
        compilerOptions53.setCheckCaja(false);
        boolean boolean68 = byteString48.equals((java.lang.Object) compilerOptions53);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        boolean boolean75 = strSet73.isEmpty();
        java.nio.ByteBuffer byteBuffer77 = java.nio.ByteBuffer.allocate(100);
        boolean boolean78 = strSet73.equals((java.lang.Object) byteBuffer77);
        java.nio.IntBuffer intBuffer79 = byteBuffer77.asIntBuffer();
        double double80 = byteBuffer77.getDouble();
        java.nio.ByteBuffer byteBuffer83 = byteBuffer77.put((int) (short) 1, (byte) 1);
        byte[] byteArray84 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite85 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions86 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray84, extensionRegistryLite85);
        com.google.protobuf.CodedOutputStream codedOutputStream89 = com.google.protobuf.CodedOutputStream.newInstance(byteArray84, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite90 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto91 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray84, extensionRegistryLite90);
        com.google.protobuf.CodedOutputStream codedOutputStream92 = com.google.protobuf.CodedOutputStream.newInstance(byteArray84);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer77.get(byteArray84);
        byteString48.copyTo(byteArray84, (int) (short) 0);
        compilerOptions19.inputPropertyMapSerialized = byteArray84;
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(errorFormat22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + label47 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label47.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(location51);
        org.junit.Assert.assertNotNull(serviceDescriptorProto52);
        org.junit.Assert.assertNotNull(errorFormat56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intBuffer79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(methodOptions86);
        org.junit.Assert.assertNotNull(codedOutputStream89);
        org.junit.Assert.assertNotNull(fileDescriptorProto91);
        org.junit.Assert.assertNotNull(codedOutputStream92);
        org.junit.Assert.assertNotNull(byteBuffer93);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.stream.Stream<java.lang.Integer> intStream7 = intStream5.boxed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.IntSummaryStatistics intSummaryStatistics8 = intStream5.summaryStatistics();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(intStream7);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = builder34.hasField(fieldDescriptor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = codingConvention8.getAssertionFunctions();
        java.lang.String str10 = codingConvention8.getAbstractMethodName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(1);
        com.google.javascript.rhino.Node node13 = node12.cloneNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean18 = node17.isStringKey();
        boolean boolean19 = node17.isTrue();
        boolean boolean20 = node17.isNot();
        java.lang.String str21 = codingConvention8.extractClassNameIfProvide(node13, node17);
        int int22 = node17.getLineno();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.abstractMethod" + "'", str10, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap4 = builder0.getAllFields();
        java.io.File file7 = null;
        java.io.File file8 = java.io.File.createTempFile("hi!", "ISO", file7);
        boolean boolean11 = file8.setWritable(false, false);
        java.net.URI uRI12 = file8.toURI();
        java.io.PrintStream printStream13 = new java.io.PrintStream(file8);
        printStream13.print((int) (byte) 0);
        printStream13.print(10.0d);
        printStream13.close();
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat22 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions19.errorFormat = errorFormat22;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy24 = null;
        compilerOptions19.variableRenaming = variableRenamingPolicy24;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode26 = compilerOptions19.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder27.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder27.addExtension(builder30);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder34 = builder33.getOptionsBuilder();
        java.io.InputStream inputStream35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream35);
        boolean boolean37 = enumOptions36.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder38 = builder34.mergeFrom(enumOptions36);
        byte[] byteArray39 = enumOptions36.toByteArray();
        compilerOptions19.setInputPropertyMapSerialized(byteArray39);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location42 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray39, extensionRegistryLite41);
        printStream13.write(byteArray39, 1970, 152);
        byte[] byteArray46 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite47 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions48 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray46, extensionRegistryLite47);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption49 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray46);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder50 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label51 = builder50.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto52 = builder50.buildPartial();
        int int53 = fieldDescriptorProto52.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder54 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto52);
        java.io.InputStream inputStream55 = null;
        java.io.InputStream inputStream56 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location58 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream56, extensionRegistryLite57);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder59 = builder54.mergeFrom(inputStream55, extensionRegistryLite57);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap60 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray46, extensionRegistryLite57);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder61 = builder0.mergeFrom(byteArray39, extensionRegistryLite57);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor62 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder63 = builder0.newBuilderForField(fieldDescriptor62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(fieldDescriptorMap4);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/tmp/hi!205055536879019369ISO");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNotNull(errorFormat22);
        org.junit.Assert.assertTrue("'" + tracerMode26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode26.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(location42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(methodOptions48);
        org.junit.Assert.assertNotNull(uninterpretedOption49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + label51 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label51.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(extensionRegistryLite57);
        org.junit.Assert.assertNotNull(location58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(functionInformationMap60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder1 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder1.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label5 = builder4.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = builder1.addExtension(builder4);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder7 = builder1.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder8 = builder7.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder9.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label13 = builder12.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = builder9.addExtension(builder12);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder15 = builder9.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder15.getOptionsBuilder();
        java.io.InputStream inputStream17 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions18 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream17);
        boolean boolean19 = enumOptions18.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder16.mergeFrom(enumOptions18);
        com.google.protobuf.UnknownFieldSet unknownFieldSet21 = builder16.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream22 = null;
        unknownFieldSet21.writeTo(codedOutputStream22);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder8.setUnknownFields(unknownFieldSet21);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder25 = builder0.mergeUnknownFields(unknownFieldSet21);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder27 = builder0.addUninterpretedOptionBuilder(38);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 38, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + label5 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label5.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + label13 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label13.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(enumOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(unknownFieldSet21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MIN;
        org.junit.Assert.assertNotNull(offsetTime0);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        java.net.URLConnection.setDefaultRequestProperty("ClockHourOfAmPm", "1970-01-01+00:00:52");
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        boolean boolean3 = builder0.getJavaGenericServices();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList4 = builder0.getUninterpretedOptionList();
        boolean boolean5 = builder0.hasJavaGenericServices();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder6.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label10 = builder9.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder6.addExtension(builder9);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder12 = builder6.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder13 = builder12.getOptionsBuilder();
        java.io.InputStream inputStream14 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions15 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream14);
        boolean boolean16 = enumOptions15.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder13.mergeFrom(enumOptions15);
        com.google.protobuf.UnknownFieldSet unknownFieldSet18 = builder13.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream19 = null;
        unknownFieldSet18.writeTo(codedOutputStream19);
        byte[] byteArray21 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions23 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray21, extensionRegistryLite22);
        com.google.protobuf.CodedOutputStream codedOutputStream26 = com.google.protobuf.CodedOutputStream.newInstance(byteArray21, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream29 = com.google.protobuf.CodedOutputStream.newInstance(byteArray21, (int) ' ', 0);
        java.io.InputStream inputStream30 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location31 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream30);
        boolean boolean32 = location31.isInitialized();
        codedOutputStream29.writeGroupNoTag((com.google.protobuf.MessageLite) location31);
        unknownFieldSet18.writeAsMessageSetTo(codedOutputStream29);
        java.util.Map<java.lang.Integer, com.google.protobuf.UnknownFieldSet.Field> intMap35 = unknownFieldSet18.asMap();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder36 = builder0.setUnknownFields(unknownFieldSet18);
        com.google.protobuf.UnknownFieldSet.Field field38 = unknownFieldSet18.getField(32);
        com.google.protobuf.UnknownFieldSet.Field.Builder builder39 = com.google.protobuf.UnknownFieldSet.Field.newBuilder(field38);
        java.util.List<java.lang.Integer> intList40 = field38.getFixed32List();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uninterpretedOptionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + label10 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label10.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(enumOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(unknownFieldSet18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(methodOptions23);
        org.junit.Assert.assertNotNull(codedOutputStream26);
        org.junit.Assert.assertNotNull(codedOutputStream29);
        org.junit.Assert.assertNotNull(location31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(intMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(intList40);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        java.lang.String str3 = sourceFile1.getLine((int) 'a');
        int int5 = sourceFile1.getLineOfOffset(43);
        com.google.javascript.jscomp.CompilerInput compilerInput6 = new com.google.javascript.jscomp.CompilerInput(sourceFile1);
        com.google.javascript.jscomp.Region region8 = compilerInput6.getRegion((int) '/');
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(region8);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = builder28.getRepeatedFieldCount(fieldDescriptor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        java.util.Date date3 = new java.util.Date((int) (byte) -1, 43, 16384);
        date3.setSeconds(4);
        java.util.Date date12 = new java.util.Date(2, 4, (int) (byte) -1, 32, 0, 28);
        boolean boolean13 = date3.after(date12);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Jun 09 00:00:04 UTC 1947");
        org.junit.Assert.assertEquals(date12.toString(), "Wed Apr 30 08:00:28 UTC 1902");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        org.junit.Assert.assertNotNull(offsetTime0);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isStringKey();
        boolean boolean10 = node8.isThrow();
        boolean boolean11 = node8.isVarArgs();
        boolean boolean12 = node8.isHook();
        com.google.javascript.rhino.Node node13 = node8.cloneNode();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFromForTree(node13);
        boolean boolean15 = node3.isThis();
        int int16 = node3.getCharno();
        boolean boolean17 = node3.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE));
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getCalendarType();
        java.util.List<java.time.chrono.Era> eraList4 = isoChronology2.eras();
        java.time.Month month5 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology6 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month5);
        java.lang.String str7 = chronology6.toString();
        java.time.Instant instant8 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.OffsetDateTime offsetDateTime14 = java.time.OffsetDateTime.ofInstant(instant8, (java.time.ZoneId) zoneOffset12);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.of(localDateTime19, (java.time.ZoneId) zoneOffset23);
        java.time.Clock clock26 = java.time.Clock.fixed(instant8, (java.time.ZoneId) zoneOffset23);
        java.time.chrono.ChronoLocalDate chronoLocalDate27 = chronology6.dateNow(clock26);
        long long28 = clock26.millis();
        java.time.Instant instant29 = java.time.Instant.now(clock26);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.of(localDateTime34, (java.time.ZoneId) zoneOffset38);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField42.getBaseUnit();
        java.time.LocalDateTime localDateTime44 = localDateTime34.plus((long) 1970, temporalUnit43);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset49);
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset54);
        java.time.ZonedDateTime zonedDateTime56 = java.time.ZonedDateTime.of(localDateTime50, (java.time.ZoneId) zoneOffset54);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit59 = chronoField58.getBaseUnit();
        java.time.LocalDateTime localDateTime60 = localDateTime50.plus((long) 1970, temporalUnit59);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime61 = localDateTime44.minus((long) 43, temporalUnit59);
        java.time.LocalDateTime localDateTime63 = localDateTime44.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime65 = localDateTime63.plusHours((long) 0);
        java.time.Instant instant66 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset70);
        java.time.OffsetDateTime offsetDateTime72 = java.time.OffsetDateTime.ofInstant(instant66, (java.time.ZoneId) zoneOffset70);
        java.time.OffsetDateTime offsetDateTime74 = offsetDateTime72.minusDays((long) (short) 100);
        java.lang.String str75 = offsetDateTime72.toString();
        java.time.ZoneOffset zoneOffset76 = offsetDateTime72.getOffset();
        java.time.Instant instant77 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset81);
        java.time.OffsetDateTime offsetDateTime83 = java.time.OffsetDateTime.ofInstant(instant77, (java.time.ZoneId) zoneOffset81);
        java.time.ZonedDateTime zonedDateTime84 = java.time.ZonedDateTime.ofLocal(localDateTime63, (java.time.ZoneId) zoneOffset76, zoneOffset81);
        java.time.ZonedDateTime zonedDateTime85 = isoChronology2.zonedDateTime(instant29, (java.time.ZoneId) zoneOffset81);
        java.time.Instant instant87 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant89 = instant87.plusMillis((long) (byte) -1);
        java.lang.String str90 = instant89.toString();
        boolean boolean91 = instant29.isAfter(instant89);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "iso8601" + "'", str3, "iso8601");
        org.junit.Assert.assertNotNull(eraList4);
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.APRIL + "'", month5.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISO" + "'", str7, "ISO");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(clock26);
        org.junit.Assert.assertNotNull(chronoLocalDate27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField42.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField58.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit59 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit59.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str75, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertNotNull(zonedDateTime84);
        org.junit.Assert.assertNotNull(zonedDateTime85);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1969-12-31T23:59:58.999Z" + "'", str90, "1969-12-31T23:59:58.999Z");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        int int0 = com.google.javascript.rhino.Node.INPUT_ID;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 53 + "'", int0 == 53);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto1 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseDelimitedFrom(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        int int0 = com.google.javascript.rhino.jstype.JSType.ENUMDECL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.parse((java.lang.CharSequence) "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '????????????????????????????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        org.junit.Assert.assertNotNull(localDateTime0);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions30 = builder27.getOptions();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder31 = builder27.clone();
        com.google.protobuf.DescriptorProtos.MessageOptionsOrBuilder messageOptionsOrBuilder32 = builder31.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder33 = builder31.getOptionsBuilder();
        java.io.InputStream inputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = builder31.mergeDelimitedFrom(inputStream34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(messageOptions30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(messageOptionsOrBuilder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        codedOutputStream3.writeSFixed64((int) 'a', (long) 10);
        codedOutputStream3.writeSFixed32((int) (byte) 0, 16);
        com.google.protobuf.Descriptors.Descriptor descriptor11 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto12 = descriptor11.toProto();
        boolean boolean13 = descriptorProto12.isInitialized();
        int int14 = descriptorProto12.getExtensionCount();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList15 = descriptorProto12.getNestedTypeList();
        int int16 = descriptorProto12.getExtensionRangeCount();
        codedOutputStream3.writeGroup(8, (com.google.protobuf.MessageLite) descriptorProto12);
        codedOutputStream3.writeSInt32(4095, (int) ':');
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(descriptor11);
        org.junit.Assert.assertNotNull(descriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(descriptorProtoList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str1 = builder0.getCompiledSource();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder3 = builder0.clearField(fieldDescriptor2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        boolean boolean4 = builder3.isInitialized();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder3.build();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder6 = builder3.clear();
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        compilerOptions0.setCheckCaja(false);
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat18 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions15.errorFormat = errorFormat18;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy20 = null;
        compilerOptions15.variableRenaming = variableRenamingPolicy20;
        compilerOptions15.setSummaryDetailLevel(999);
        boolean boolean24 = compilerOptions15.getInferTypes();
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat28 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions25.errorFormat = errorFormat28;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy30 = null;
        compilerOptions25.variableRenaming = variableRenamingPolicy30;
        compilerOptions25.setSummaryDetailLevel(999);
        boolean boolean34 = compilerOptions25.getInferTypes();
        compilerOptions25.setDefineToStringLiteral("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]", "1970-01-01");
        java.lang.String str38 = compilerOptions25.renamePrefixNamespace;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRecordFunctionInformation(true);
        boolean boolean42 = compilerOptions39.checkControlStructures;
        compilerOptions39.setCollapseProperties(false);
        compilerOptions39.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions47 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions47.optimizeCalls = false;
        compilerOptions47.preferLineBreakAtEndOfFile = false;
        boolean boolean52 = compilerOptions47.markNoSideEffectCalls;
        boolean boolean53 = compilerOptions47.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions54 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        boolean boolean61 = strSet59.isEmpty();
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocate(100);
        boolean boolean64 = strSet59.equals((java.lang.Object) byteBuffer63);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        boolean boolean71 = strSet69.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream72 = strSet69.stream();
        boolean boolean73 = strSet59.retainAll((java.util.Collection<java.lang.String>) strSet69);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions74 = dependencyOptions54.setEntryPoints((java.util.Collection<java.lang.String>) strSet59);
        compilerOptions47.setDependencyOptions(dependencyOptions54);
        com.google.javascript.jscomp.CheckLevel checkLevel76 = compilerOptions47.checkGlobalThisLevel;
        compilerOptions39.reportMissingOverride = checkLevel76;
        compilerOptions25.setCheckUnreachableCode(checkLevel76);
        compilerOptions15.setCheckProvides(checkLevel76);
        com.google.javascript.jscomp.CheckLevel checkLevel80 = compilerOptions15.checkUnreachableCode;
        compilerOptions0.setCheckProvides(checkLevel80);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorFormat18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(errorFormat28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dependencyOptions74);
        org.junit.Assert.assertTrue("'" + checkLevel76 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel76.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel80 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel80.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        boolean boolean24 = charBuffer22.isDirect();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer27 = charBuffer22.put(32, '+');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isThis();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean14 = node13.isStringKey();
        boolean boolean15 = node13.isTrue();
        boolean boolean16 = node13.isInstanceOf();
        com.google.javascript.rhino.Node node17 = node3.srcref(node13);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList3 = descriptorProto1.getNestedTypeList();
        int int4 = descriptorProto1.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder5 = descriptorProto1.toBuilder();
        boolean boolean6 = descriptorProto1.hasName();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(12L, (long) (short) 100);
        java.util.PrimitiveIterator.OfLong ofLong3 = longStream2.iterator();
        java.io.InputStream inputStream4 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions5 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream4);
        boolean boolean6 = enumOptions5.isInitialized();
        int int7 = enumOptions5.getUninterpretedOptionCount();
        com.google.common.collect.ImmutableMap<java.util.PrimitiveIterator.OfLong, com.google.protobuf.GeneratedMessage.ExtendableMessage<com.google.protobuf.DescriptorProtos.EnumOptions>> ofLongMap8 = com.google.common.collect.ImmutableMap.of(ofLong3, (com.google.protobuf.GeneratedMessage.ExtendableMessage<com.google.protobuf.DescriptorProtos.EnumOptions>) enumOptions5);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(ofLong3);
        org.junit.Assert.assertNotNull(enumOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(ofLongMap8);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.Period period11 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod12 = period11.normalized();
        int int13 = period11.getYears();
        java.time.Period period14 = period11.negated();
        boolean boolean15 = period14.isNegative();
        java.time.LocalDate localDate16 = localDate6.minus((java.time.temporal.TemporalAmount) period14);
        int int17 = localDate16.getDayOfYear();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder37 = builder35.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label39 = builder38.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder40 = builder35.addExtension(builder38);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder41 = builder35.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder42 = builder41.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions43 = builder42.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor44 = builder42.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder45 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output47 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream49 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output47, (int) 'a');
        byte[] byteArray50 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite51 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions52 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray50, extensionRegistryLite51);
        output47.write(byteArray50);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder54 = builder45.mergeFrom(byteArray50);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions55 = builder45.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder56 = builder45.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption57 = builder56.buildPartial();
        java.lang.String str58 = uninterpretedOption57.getIdentifierValue();
        int int59 = uninterpretedOption57.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder60 = builder42.addUninterpretedOption(uninterpretedOption57);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder61 = builder30.setOptions(builder42);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto63 = builder30.getValue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + label39 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label39.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(enumOptions43);
        org.junit.Assert.assertNotNull(descriptor44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(output47);
        org.junit.Assert.assertNotNull(codedOutputStream49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(methodOptions52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(methodOptions55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(uninterpretedOption57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        java.util.function.IntUnaryOperator intUnaryOperator0 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator1 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator2 = intUnaryOperator0.andThen(intUnaryOperator1);
        java.util.function.IntUnaryOperator intUnaryOperator3 = java.util.function.IntUnaryOperator.identity();
        java.util.function.IntUnaryOperator intUnaryOperator4 = intUnaryOperator2.compose(intUnaryOperator3);
        org.junit.Assert.assertNotNull(intUnaryOperator0);
        org.junit.Assert.assertNotNull(intUnaryOperator1);
        org.junit.Assert.assertNotNull(intUnaryOperator2);
        org.junit.Assert.assertNotNull(intUnaryOperator3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode0 = com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE;
        org.junit.Assert.assertTrue("'" + tracerMode0 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE + "'", tracerMode0.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.RAW_SIZE));
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions0 = com.google.protobuf.DescriptorProtos.MessageOptions.getDefaultInstance();
        boolean boolean1 = messageOptions0.getNoStandardDescriptorAccessor();
        org.junit.Assert.assertNotNull(messageOptions0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        boolean boolean3 = compilerOptions0.checkControlStructures;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.aliasStringsBlacklist = "hi!";
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRecordFunctionInformation(true);
        boolean boolean11 = compilerOptions8.checkControlStructures;
        compilerOptions8.setCollapseProperties(false);
        compilerOptions8.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.optimizeCalls = false;
        compilerOptions16.preferLineBreakAtEndOfFile = false;
        boolean boolean21 = compilerOptions16.markNoSideEffectCalls;
        boolean boolean22 = compilerOptions16.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions23 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        boolean boolean30 = strSet28.isEmpty();
        java.nio.ByteBuffer byteBuffer32 = java.nio.ByteBuffer.allocate(100);
        boolean boolean33 = strSet28.equals((java.lang.Object) byteBuffer32);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        boolean boolean40 = strSet38.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream41 = strSet38.stream();
        boolean boolean42 = strSet28.retainAll((java.util.Collection<java.lang.String>) strSet38);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions43 = dependencyOptions23.setEntryPoints((java.util.Collection<java.lang.String>) strSet28);
        compilerOptions16.setDependencyOptions(dependencyOptions23);
        com.google.javascript.jscomp.CheckLevel checkLevel45 = compilerOptions16.checkGlobalThisLevel;
        compilerOptions8.reportMissingOverride = checkLevel45;
        compilerOptions0.checkProvides = checkLevel45;
        byte[] byteArray48 = compilerOptions0.inputVariableMapSerialized;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dependencyOptions43);
        org.junit.Assert.assertTrue("'" + checkLevel45 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel45.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNull(byteArray48);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileOptions.getDescriptor();
        org.junit.Assert.assertNotNull(descriptor0);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        boolean boolean6 = node4.isThrow();
        boolean boolean7 = node4.isVarArgs();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean12 = node11.isFromExterns();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean17 = node16.isFromExterns();
        java.lang.String str18 = node16.toString();
        com.google.javascript.rhino.Node node19 = node11.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean30 = node29.isStringKey();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((-1), node4, node16, node23, node29, 16384, 16);
        boolean boolean34 = node23.isGetElem();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 52.0 0" + "'", str18, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.getDescriptor();
        org.junit.Assert.assertNotNull(enumDescriptor0);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        byte[] byteArray5 = compilerOptions0.inputPropertyMapSerialized;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder6.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label10 = builder9.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder6.addExtension(builder9);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder12 = builder6.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder13 = builder12.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder14 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output16 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output16, (int) 'a');
        byte[] byteArray19 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions21 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray19, extensionRegistryLite20);
        output16.write(byteArray19);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder23 = builder14.mergeFrom(byteArray19);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder13.mergeFrom(byteArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.wrap(byteArray19);
        compilerOptions0.inputPropertyMapSerialized = byteArray19;
        compilerOptions0.checkControlStructures = false;
        byte[] byteArray29 = compilerOptions0.inputVariableMapSerialized;
        boolean boolean30 = compilerOptions0.exportTestFunctions;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + label10 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label10.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(output16);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(methodOptions21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        int int2 = period0.getYears();
        java.time.Period period3 = period0.negated();
        java.time.Period period5 = period0.plusYears((long) 2);
        java.time.Period period7 = period0.multipliedBy(2);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor0 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.getDescriptor();
        java.util.List<com.google.protobuf.Descriptors.EnumValueDescriptor> enumValueDescriptorList1 = enumDescriptor0.getValues();
        java.util.List<com.google.protobuf.Descriptors.EnumValueDescriptor> enumValueDescriptorList2 = enumDescriptor0.getValues();
        org.junit.Assert.assertNotNull(enumDescriptor0);
        org.junit.Assert.assertNotNull(enumValueDescriptorList1);
        org.junit.Assert.assertNotNull(enumValueDescriptorList2);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream5 = java.util.stream.LongStream.concat(longStream2, longStream4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong6 = longStream4.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.Node node11 = objectType4.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = objectType4.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType16);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry31.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair34 = objectType28.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.Node node35 = objectType28.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry38.createObjectType(objectType39);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry43.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair46 = objectType40.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType45);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = objectType28.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType40);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry50.createObjectType(objectType51);
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry55.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair58 = objectType52.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType57);
        com.google.javascript.rhino.Node node59 = objectType52.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60, false);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType64 = jSTypeRegistry62.createObjectType(objectType63);
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        com.google.javascript.rhino.jstype.ObjectType objectType68 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType69 = jSTypeRegistry67.createObjectType(objectType68);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair70 = objectType64.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType69);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = objectType52.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue47.or(ternaryValue71);
        com.google.javascript.rhino.ErrorReporter errorReporter73 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter73, false);
        com.google.javascript.rhino.jstype.ObjectType objectType76 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType77 = jSTypeRegistry75.createObjectType(objectType76);
        com.google.javascript.rhino.ErrorReporter errorReporter78 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter78, false);
        com.google.javascript.rhino.jstype.ObjectType objectType81 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType82 = jSTypeRegistry80.createObjectType(objectType81);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair83 = objectType77.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType82);
        com.google.javascript.rhino.Node node84 = objectType77.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter85 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry87 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter85, false);
        com.google.javascript.rhino.jstype.ObjectType objectType88 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry87.createObjectType(objectType88);
        com.google.javascript.rhino.ErrorReporter errorReporter90 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry92 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter90, false);
        com.google.javascript.rhino.jstype.ObjectType objectType93 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType94 = jSTypeRegistry92.createObjectType(objectType93);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair95 = objectType89.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType94);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue96 = objectType77.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType89);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue97 = ternaryValue47.and(ternaryValue96);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue98 = ternaryValue23.xor(ternaryValue96);
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(typePair34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNotNull(typePair46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNotNull(typePair58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(objectType64);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(typePair70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(typePair83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNotNull(typePair95);
        org.junit.Assert.assertNotNull(ternaryValue96);
        org.junit.Assert.assertNotNull(ternaryValue97);
        org.junit.Assert.assertNotNull(ternaryValue98);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder2 = enumOptions1.toBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = enumOptions1.getRepeatedField(fieldDescriptor3, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isStringKey();
        boolean boolean10 = node8.isThrow();
        boolean boolean11 = node8.isVarArgs();
        boolean boolean12 = node8.isHook();
        com.google.javascript.rhino.Node node13 = node8.cloneNode();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFromForTree(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean19 = node18.isFromExterns();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isFromExterns();
        java.lang.String str25 = node23.toString();
        com.google.javascript.rhino.Node node26 = node18.copyInformationFrom(node23);
        int int27 = node18.getLineno();
        boolean boolean28 = node18.isLabel();
        java.lang.String str29 = node18.getSourceFileName();
        boolean boolean30 = node18.isDec();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node18);
        com.google.javascript.rhino.Node node32 = node13.cloneNode();
        boolean boolean33 = node13.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER 52.0 0" + "'", str25, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean13 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream14 = null;
        methodDescriptorProto12.writeTo(codedOutputStream14);
        boolean boolean16 = methodDescriptorProto12.hasOutputType();
        boolean boolean17 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.addMethod(methodDescriptorProto12);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = builder19.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder19.addExtension(builder22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder25 = builder19.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder25.getOptionsBuilder();
        java.io.InputStream inputStream27 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions28 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream27);
        boolean boolean29 = enumOptions28.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder30 = builder26.mergeFrom(enumOptions28);
        com.google.protobuf.UnknownFieldSet unknownFieldSet31 = builder26.getUnknownFields();
        byte[] byteArray32 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions34 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray32, extensionRegistryLite33);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray32, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto39 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray32, extensionRegistryLite38);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto41 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray32, extensionRegistryLite40);
        com.google.protobuf.UnknownFieldSet unknownFieldSet42 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray32);
        com.google.protobuf.ByteString byteString43 = unknownFieldSet42.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder45 = builder26.mergeFrom(byteString43, extensionRegistryLite44);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder46 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder47 = builder46.clearCcGenericServices();
        boolean boolean48 = builder46.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder50 = builder46.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder51 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label52 = builder51.getLabel();
        com.google.protobuf.ByteString byteString53 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder54 = builder51.mergeFrom(byteString53);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite55 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder56 = builder50.mergeFrom(byteString53, extensionRegistryLite55);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions58 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString53, extensionRegistryLite57);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto60 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString53, extensionRegistryLite59);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder61 = builder18.mergeFrom(byteString43, extensionRegistryLite59);
        boolean boolean62 = builder61.hasOptions();
        java.lang.String str63 = builder61.getName();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(enumOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(unknownFieldSet31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(methodOptions34);
        org.junit.Assert.assertNotNull(codedOutputStream37);
        org.junit.Assert.assertNotNull(fileDescriptorProto39);
        org.junit.Assert.assertNotNull(serviceDescriptorProto41);
        org.junit.Assert.assertNotNull(unknownFieldSet42);
        org.junit.Assert.assertNotNull(byteString43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + label52 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label52.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(enumValueOptions58);
        org.junit.Assert.assertNotNull(extensionRegistryLite59);
        org.junit.Assert.assertNotNull(descriptorProto60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        boolean boolean10 = builder9.isInitialized();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder12 = builder9.removeUninterpretedOption(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isFromExterns();
        java.lang.String str10 = node8.toString();
        com.google.javascript.rhino.Node node11 = node3.copyInformationFrom(node8);
        boolean boolean12 = node11.hasOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 52.0 0" + "'", str10, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions6 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder7 = builder5.mergeOptions(serviceOptions6);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder7.setName("1970-01-01");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto10 = builder7.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions11 = serviceDescriptorProto10.getOptions();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serviceDescriptorProto10);
        org.junit.Assert.assertNull(serviceOptions11);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        int int0 = com.google.javascript.rhino.Node.SOURCENAME_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16 + "'", int0 == 16);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        java.time.Period period1 = java.time.Period.ofYears((int) 'a');
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.of(localDateTime6, (java.time.ZoneId) zoneOffset10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime12.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime12.truncatedTo(temporalUnit16);
        java.time.Duration duration18 = temporalUnit16.getDuration();
        long long19 = duration18.toDays();
        java.time.Duration duration21 = duration18.minusDays(999L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period22 = period1.plus((java.time.temporal.TemporalAmount) duration18);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField15.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList3 = descriptorProto1.getNestedTypeList();
        int int4 = descriptorProto1.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder5 = descriptorProto1.toBuilder();
        com.google.protobuf.DescriptorProtos.MessageOptionsOrBuilder messageOptionsOrBuilder6 = descriptorProto1.getOptionsOrBuilder();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(messageOptionsOrBuilder6);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.time.temporal.TemporalQuery[] temporalQueryArray3 = new java.time.temporal.TemporalQuery[0];
        @SuppressWarnings("unchecked")
        java.time.temporal.TemporalQuery<?>[] wildcardTemporalQueryArray4 = (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray3;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor5 = dateTimeFormatter0.parseBest((java.lang.CharSequence) "java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]", (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: At least two queries must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(temporalQueryArray3);
        org.junit.Assert.assertNotNull(wildcardTemporalQueryArray4);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = builder5.setNumber((int) (short) 100);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder7.clear();
        java.io.InputStream inputStream9 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder10 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.io.InputStream inputStream11 = null;
        java.io.InputStream inputStream12 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location14 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream12, extensionRegistryLite13);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder15 = builder10.mergeFrom(inputStream11, extensionRegistryLite13);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = builder7.mergeFrom(inputStream9, extensionRegistryLite13);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder17 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = builder17.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder20 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label21 = builder20.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder22 = builder17.addExtension(builder20);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder23 = builder17.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder23.getOptionsBuilder();
        java.io.InputStream inputStream25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions26 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream25);
        boolean boolean27 = enumOptions26.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder24.mergeFrom(enumOptions26);
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder24.getUnknownFields();
        byte[] byteArray30 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions32 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray30, extensionRegistryLite31);
        com.google.protobuf.CodedOutputStream codedOutputStream35 = com.google.protobuf.CodedOutputStream.newInstance(byteArray30, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite36 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto37 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray30, extensionRegistryLite36);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto39 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray30, extensionRegistryLite38);
        com.google.protobuf.UnknownFieldSet unknownFieldSet40 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray30);
        com.google.protobuf.ByteString byteString41 = unknownFieldSet40.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite42 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder43 = builder24.mergeFrom(byteString41, extensionRegistryLite42);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions44 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString41);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder45 = fieldOptions44.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder46 = builder16.setOptions(builder45);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(extensionRegistryLite13);
        org.junit.Assert.assertNotNull(location14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + label21 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label21.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(enumOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(methodOptions32);
        org.junit.Assert.assertNotNull(codedOutputStream35);
        org.junit.Assert.assertNotNull(fileDescriptorProto37);
        org.junit.Assert.assertNotNull(serviceDescriptorProto39);
        org.junit.Assert.assertNotNull(unknownFieldSet40);
        org.junit.Assert.assertNotNull(byteString41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(fieldOptions44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        char char0 = java.util.Locale.PRIVATE_USE_EXTENSION;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + 'x' + "'", char0 == 'x');
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.CodedOutputStream codedOutputStream6 = com.google.protobuf.CodedOutputStream.newInstance(byteArray1, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto8 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray1, extensionRegistryLite7);
        com.google.protobuf.CodedOutputStream codedOutputStream9 = com.google.protobuf.CodedOutputStream.newInstance(byteArray1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto12 = builder10.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = fieldDescriptorProto12.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto12);
        java.io.File file17 = null;
        java.io.File file18 = java.io.File.createTempFile("hi!", "ISO", file17);
        boolean boolean21 = file18.setWritable(false, false);
        java.net.URI uRI22 = file18.toURI();
        java.io.PrintStream printStream23 = new java.io.PrintStream(file18);
        printStream23.print((int) (byte) 0);
        printStream23.print(10.0d);
        printStream23.close();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean35 = strSet33.isEmpty();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocate(100);
        boolean boolean38 = strSet33.equals((java.lang.Object) byteBuffer37);
        java.nio.IntBuffer intBuffer39 = byteBuffer37.asIntBuffer();
        double double40 = byteBuffer37.getDouble();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer37.put((int) (short) 1, (byte) 1);
        byte[] byteArray44 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite45 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions46 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray44, extensionRegistryLite45);
        com.google.protobuf.CodedOutputStream codedOutputStream49 = com.google.protobuf.CodedOutputStream.newInstance(byteArray44, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite50 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto51 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray44, extensionRegistryLite50);
        com.google.protobuf.CodedOutputStream codedOutputStream52 = com.google.protobuf.CodedOutputStream.newInstance(byteArray44);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer37.get(byteArray44);
        printStream23.write(byteArray44, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream57 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite58 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location59 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream57, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder60 = builder14.mergeFrom(byteArray44, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto61 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray1, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption62 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(inputStream0, extensionRegistryLite58);
        boolean boolean63 = uninterpretedOption62.hasDoubleValue();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(codedOutputStream6);
        org.junit.Assert.assertNotNull(fileDescriptorProto8);
        org.junit.Assert.assertNotNull(codedOutputStream9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file18.toString(), "/tmp/hi!2866494507398115114ISO");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intBuffer39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(methodOptions46);
        org.junit.Assert.assertNotNull(codedOutputStream49);
        org.junit.Assert.assertNotNull(fileDescriptorProto51);
        org.junit.Assert.assertNotNull(codedOutputStream52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(extensionRegistryLite58);
        org.junit.Assert.assertNotNull(location59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(fileDescriptorProto61);
        org.junit.Assert.assertNotNull(uninterpretedOption62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions0 = com.google.protobuf.DescriptorProtos.MessageOptions.getDefaultInstance();
        com.google.protobuf.MessageLite.Builder builder1 = messageOptions0.toBuilder();
        com.google.protobuf.MessageLite messageLite2 = builder1.buildPartial();
        org.junit.Assert.assertNotNull(messageOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(messageLite2);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        compilerOptions0.setDefineToStringLiteral("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]", "1970-01-01");
        java.lang.String str13 = compilerOptions0.renamePrefixNamespace;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRecordFunctionInformation(true);
        boolean boolean17 = compilerOptions14.checkControlStructures;
        compilerOptions14.setCollapseProperties(false);
        compilerOptions14.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.optimizeCalls = false;
        compilerOptions22.preferLineBreakAtEndOfFile = false;
        boolean boolean27 = compilerOptions22.markNoSideEffectCalls;
        boolean boolean28 = compilerOptions22.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions29 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean36 = strSet34.isEmpty();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocate(100);
        boolean boolean39 = strSet34.equals((java.lang.Object) byteBuffer38);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        boolean boolean46 = strSet44.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream47 = strSet44.stream();
        boolean boolean48 = strSet34.retainAll((java.util.Collection<java.lang.String>) strSet44);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions49 = dependencyOptions29.setEntryPoints((java.util.Collection<java.lang.String>) strSet34);
        compilerOptions22.setDependencyOptions(dependencyOptions29);
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions22.checkGlobalThisLevel;
        compilerOptions14.reportMissingOverride = checkLevel51;
        compilerOptions0.setCheckUnreachableCode(checkLevel51);
        com.google.javascript.jscomp.SourceMap.Format format54 = null;
        compilerOptions0.setSourceMapFormat(format54);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dependencyOptions49);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        int int0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.SERVICE_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 6 + "'", int0 == 6);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isVar();
        java.lang.String str5 = node3.getSourceFileName();
        java.lang.String str9 = node3.toString(false, false, false);
        node3.setSourceEncodedPosition(64);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 52.0" + "'", str9, "NUMBER 52.0");
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        java.time.Month month0 = java.time.Month.JULY;
        int int1 = month0.getValue();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JULY + "'", month0.equals(java.time.Month.JULY));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        int int2 = com.google.protobuf.CodedOutputStream.computeEnumSize(39, 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) '/');
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        com.google.protobuf.WireFormat.JavaType javaType0 = com.google.protobuf.WireFormat.JavaType.BOOLEAN;
        org.junit.Assert.assertTrue("'" + javaType0 + "' != '" + com.google.protobuf.WireFormat.JavaType.BOOLEAN + "'", javaType0.equals(com.google.protobuf.WireFormat.JavaType.BOOLEAN));
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        java.util.logging.Level level0 = java.util.logging.Level.FINE;
        org.junit.Assert.assertNotNull(level0);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions4 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions5 = descriptorProto1.getOptions();
        boolean boolean6 = messageOptions5.hasNoStandardDescriptorAccessor();
        int int7 = messageOptions5.getUninterpretedOptionCount();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(messageOptions4);
        org.junit.Assert.assertNotNull(messageOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        com.google.javascript.jscomp.Region region21 = compiler14.getSourceRegion("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", 0);
        com.google.javascript.jscomp.JSError[] jSErrorArray22 = compiler14.getWarnings();
        com.google.javascript.jscomp.Result result23 = compiler14.getResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(region21);
        org.junit.Assert.assertNotNull(jSErrorArray22);
        org.junit.Assert.assertNotNull(result23);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant5 = instant3.plusMillis((long) (byte) -1);
        boolean boolean6 = instant0.isBefore(instant5);
        java.time.Instant instant7 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.OffsetDateTime offsetDateTime13 = java.time.OffsetDateTime.ofInstant(instant7, (java.time.ZoneId) zoneOffset11);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusDays((long) (short) 100);
        java.lang.String str16 = offsetDateTime13.toString();
        java.time.LocalTime localTime17 = offsetDateTime13.toLocalTime();
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        int int24 = localDateTime23.getYear();
        java.time.Instant instant25 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.ofInstant(instant25, (java.time.ZoneId) zoneOffset29);
        java.time.Instant instant32 = localDateTime23.toInstant(zoneOffset29);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.of(localDateTime38, (java.time.ZoneId) zoneOffset42);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.LocalDateTime localDateTime48 = localDateTime38.plus((long) 1970, temporalUnit47);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset58);
        java.time.ZonedDateTime zonedDateTime60 = java.time.ZonedDateTime.of(localDateTime54, (java.time.ZoneId) zoneOffset58);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField62.getBaseUnit();
        java.time.LocalDateTime localDateTime64 = localDateTime54.plus((long) 1970, temporalUnit63);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime65 = localDateTime48.minus((long) 43, temporalUnit63);
        java.time.Instant instant66 = instant32.plus((long) 16384, temporalUnit63);
        java.time.LocalTime localTime67 = localTime17.plus((long) 64, temporalUnit63);
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset71);
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset76);
        java.time.ZonedDateTime zonedDateTime78 = java.time.ZonedDateTime.of(localDateTime72, (java.time.ZoneId) zoneOffset76);
        java.time.OffsetTime offsetTime79 = java.time.OffsetTime.of(localTime67, zoneOffset76);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant80 = instant5.with((java.time.temporal.TemporalAdjuster) localTime67);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str16, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField46.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField62.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zonedDateTime78);
        org.junit.Assert.assertNotNull(offsetTime79);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        boolean boolean7 = node6.isFor();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = node6.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime2 = java.time.LocalTime.of(50, 4);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 50");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node4.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator8 = ancestorIterable7.spliterator();
        int int9 = nodeSpliterator8.characteristics();
        boolean boolean11 = nodeSpliterator8.hasCharacteristics(102);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean6 = node5.isStringKey();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0, node5);
        int int8 = node7.getType();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean14 = node13.isStringKey();
        boolean boolean15 = node13.isThrow();
        boolean boolean16 = node13.isVarArgs();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean21 = node20.isFromExterns();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean26 = node25.isFromExterns();
        java.lang.String str27 = node25.toString();
        com.google.javascript.rhino.Node node28 = node20.copyInformationFrom(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean33 = node32.isStringKey();
        boolean boolean34 = node32.isThrow();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean39 = node38.isStringKey();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((-1), node13, node25, node32, node38, 16384, 16);
        node32.setVarArgs(true);
        boolean boolean45 = node32.hasOneChild();
        com.google.javascript.rhino.Node node46 = null;
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean51 = node50.isFromExterns();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean56 = node55.isFromExterns();
        java.lang.String str57 = node55.toString();
        com.google.javascript.rhino.Node node58 = node50.copyInformationFrom(node55);
        int int59 = node50.getLineno();
        int int60 = node50.getType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(18, node7, node32, node46, node50, (-2), 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER 52.0 0" + "'", str27, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER 52.0 0" + "'", str57, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 39 + "'", int60 == 39);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions8 = builder7.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = enumOptions8.getRepeatedFieldCount(fieldDescriptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions8);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = builder28.getField(fieldDescriptor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        compiler14.reportCodeChange();
        com.google.javascript.jscomp.PassConfig passConfig20 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler14.setPassConfig(passConfig20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.Period period11 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod12 = period11.normalized();
        int int13 = period11.getYears();
        java.time.Period period14 = period11.negated();
        boolean boolean15 = period14.isNegative();
        java.time.LocalDate localDate16 = localDate6.minus((java.time.temporal.TemporalAmount) period14);
        java.time.Period period18 = period14.plusDays((long) 50);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        java.time.Clock clock0 = java.time.Clock.systemDefaultZone();
        java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.now(clock0);
        java.lang.Object obj2 = null;
        boolean boolean3 = clock0.equals(obj2);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(zonedDateTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) -1, (byte) 10 };
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray5, 39, (int) '+');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Entry entry9 = com.google.javascript.jscomp.FunctionInformationMap.Entry.parseFrom(codedInputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(codedInputStream8);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.canEncode();
        java.nio.charset.CharsetEncoder charsetEncoder2 = charset0.newEncoder();
        float float3 = charsetEncoder2.maxBytesPerChar();
        java.nio.charset.CharsetEncoder charsetEncoder4 = charsetEncoder2.reset();
        float float5 = charsetEncoder4.maxBytesPerChar();
        byte[] byteArray6 = charsetEncoder4.replacement();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 1.0f + "'", float5 == 1.0f);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[63]");
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder3 = builder2.getOptionsOrBuilder();
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        com.google.protobuf.CodedOutputStream codedOutputStream9 = com.google.protobuf.CodedOutputStream.newInstance(byteArray4, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance(byteArray4, (int) ' ', 0);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = builder2.mergeFrom(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = builder2.getExtensionBuilder((int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 47, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedOutputStream9);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.sourceMapOutputPath = "South Korea";
        compilerOptions0.setAssumeStrictThis(false);
        compilerOptions0.skipAllCompilerPasses();
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int11 = offsetDateTime6.get((java.time.temporal.TemporalField) chronoField10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime6.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.withOffsetSameLocal(zoneOffset14);
        java.time.Instant instant16 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.OffsetDateTime offsetDateTime22 = java.time.OffsetDateTime.ofInstant(instant16, (java.time.ZoneId) zoneOffset20);
        java.time.OffsetDateTime offsetDateTime24 = offsetDateTime22.plusWeeks((long) (-1));
        java.time.OffsetDateTime offsetDateTime26 = offsetDateTime22.withDayOfYear(16);
        java.time.OffsetDateTime offsetDateTime27 = offsetDateTime15.with((java.time.temporal.TemporalAdjuster) offsetDateTime22);
        java.time.Period period28 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod29 = period28.normalized();
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant31 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.OffsetDateTime offsetDateTime37 = java.time.OffsetDateTime.ofInstant(instant31, (java.time.ZoneId) zoneOffset35);
        java.time.temporal.ValueRange valueRange38 = chronoField30.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime37);
        java.time.temporal.Temporal temporal39 = period28.subtractFrom((java.time.temporal.Temporal) offsetDateTime37);
        java.time.Month month40 = java.time.Month.AUGUST;
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset49);
        java.time.ZonedDateTime zonedDateTime51 = java.time.ZonedDateTime.of(localDateTime45, (java.time.ZoneId) zoneOffset49);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean53 = localDateTime45.isSupported((java.time.temporal.TemporalField) chronoField52);
        boolean boolean54 = month40.isSupported((java.time.temporal.TemporalField) chronoField52);
        long long55 = offsetDateTime37.getLong((java.time.temporal.TemporalField) chronoField52);
        int int56 = offsetDateTime27.get((java.time.temporal.TemporalField) chronoField52);
        java.time.Instant instant57 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset61);
        java.time.OffsetDateTime offsetDateTime63 = java.time.OffsetDateTime.ofInstant(instant57, (java.time.ZoneId) zoneOffset61);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset67);
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset72);
        java.time.ZonedDateTime zonedDateTime74 = java.time.ZonedDateTime.of(localDateTime68, (java.time.ZoneId) zoneOffset72);
        java.time.Clock clock75 = java.time.Clock.fixed(instant57, (java.time.ZoneId) zoneOffset72);
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.now(clock75);
        java.time.LocalDate localDate77 = java.time.LocalDate.now(clock75);
        com.google.protobuf.Descriptors.Descriptor descriptor78 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto79 = descriptor78.toProto();
        boolean boolean80 = descriptorProto79.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList81 = descriptorProto79.getNestedTypeList();
        int int82 = descriptorProto79.getExtensionRangeCount();
        boolean boolean83 = localDate77.equals((java.lang.Object) descriptorProto79);
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        java.time.temporal.ValueRange valueRange85 = localDate77.range((java.time.temporal.TemporalField) chronoField84);
        long long86 = offsetDateTime27.getLong((java.time.temporal.TemporalField) chronoField84);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField10.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronoPeriod29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(temporal39);
        org.junit.Assert.assertTrue("'" + month40 + "' != '" + java.time.Month.AUGUST + "'", month40.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField52.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 12L + "'", long55 == 12L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(clock75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(descriptor78);
        org.junit.Assert.assertNotNull(descriptorProto79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField84.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(valueRange85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        int int1 = priorityMap0.size();
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        int int7 = localDateTime6.getYear();
        java.time.LocalDate localDate8 = localDateTime6.toLocalDate();
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.of(localDateTime13, (java.time.ZoneId) zoneOffset17);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        java.time.LocalDateTime localDateTime23 = localDateTime13.plus((long) 1970, temporalUnit22);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.OffsetDateTime offsetDateTime30 = java.time.OffsetDateTime.of(localDate8, localTime24, zoneOffset28);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean35 = node34.isFromExterns();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean40 = node39.isFromExterns();
        java.lang.String str41 = node39.toString();
        com.google.javascript.rhino.Node node42 = node34.copyInformationFrom(node39);
        boolean boolean43 = zoneOffset28.equals((java.lang.Object) node39);
        boolean boolean44 = node39.isVar();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean50 = node49.isStringKey();
        boolean boolean51 = node49.isThrow();
        boolean boolean52 = node49.isVarArgs();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean57 = node56.isFromExterns();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean62 = node61.isFromExterns();
        java.lang.String str63 = node61.toString();
        com.google.javascript.rhino.Node node64 = node56.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean69 = node68.isStringKey();
        boolean boolean70 = node68.isThrow();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean75 = node74.isStringKey();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((-1), node49, node61, node68, node74, 16384, 16);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean83 = node82.isStringKey();
        boolean boolean84 = node82.isThrow();
        boolean boolean85 = node82.isVarArgs();
        boolean boolean86 = node82.isHook();
        boolean boolean87 = node82.isAssign();
        boolean boolean88 = node82.isVar();
        com.google.javascript.jscomp.CodingConvention.Bind bind89 = new com.google.javascript.jscomp.CodingConvention.Bind(node39, node74, node82);
        boolean boolean90 = priorityMap0.containsValue((java.lang.Object) node74);
        boolean boolean91 = node74.isThis();
        boolean boolean92 = node74.isDefaultCase();
        com.google.javascript.rhino.Node node93 = node74.getNext();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField21.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER 52.0 0" + "'", str41, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER 52.0 0" + "'", str63, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(node93);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("/");
        java.util.List<java.lang.String> strList2 = jSModule1.getProvides();
        java.util.Set<com.google.javascript.jscomp.JSModule> jSModuleSet3 = jSModule1.getAllDependencies();
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(jSModuleSet3);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption3 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray0);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption4 = uninterpretedOption3.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(uninterpretedOption3);
        org.junit.Assert.assertNotNull(uninterpretedOption4);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        int int0 = java.util.Spliterator.SORTED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        com.google.protobuf.MessageLite messageLite1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.google.protobuf.CodedOutputStream.computeMessageSize((int) ' ', messageLite1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions0 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList1 = fileOptions0.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions2 = fileOptions0.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = fileOptions0.getField(fieldDescriptor3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileOptions0);
        org.junit.Assert.assertNotNull(uninterpretedOptionList1);
        org.junit.Assert.assertNotNull(fileOptions2);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder.getDescriptor();
        org.junit.Assert.assertNotNull(descriptor0);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.Node node11 = objectType4.getRootNode();
        objectType4.clearCachedValues();
        com.google.javascript.rhino.jstype.TemplateType templateType13 = objectType4.toMaybeTemplateType();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry16.createObjectType(objectType17);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry21.createObjectType(objectType22);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair24 = objectType18.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType23);
        java.lang.String str25 = objectType23.getDisplayName();
        boolean boolean26 = objectType23.isRecordType();
        java.lang.String str27 = objectType23.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType28 = objectType4.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType23);
        boolean boolean29 = objectType4.matchesNumberContext();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(templateType13);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(typePair24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(jSType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        byte[] byteArray7 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption10 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray7);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label12 = builder11.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto13 = builder11.buildPartial();
        int int14 = fieldDescriptorProto13.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto13);
        java.io.InputStream inputStream16 = null;
        java.io.InputStream inputStream17 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location19 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream17, extensionRegistryLite18);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder20 = builder15.mergeFrom(inputStream16, extensionRegistryLite18);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap21 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray7, extensionRegistryLite18);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder22 = builder4.mergeFrom(byteArray7);
        byte[] byteArray23 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions25 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray23, extensionRegistryLite24);
        com.google.protobuf.CodedOutputStream codedOutputStream28 = com.google.protobuf.CodedOutputStream.newInstance(byteArray23, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto30 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray23, extensionRegistryLite29);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto32 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray23, extensionRegistryLite31);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder35 = builder22.mergeFrom(byteArray23, (int) (short) 1, (int) '+');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(uninterpretedOption10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + label12 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label12.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(extensionRegistryLite18);
        org.junit.Assert.assertNotNull(location19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(functionInformationMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(methodOptions25);
        org.junit.Assert.assertNotNull(codedOutputStream28);
        org.junit.Assert.assertNotNull(fileDescriptorProto30);
        org.junit.Assert.assertNotNull(serviceDescriptorProto32);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder13 = builder11.clearStringValue();
        byte[] byteArray14 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions16 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray14, extensionRegistryLite15);
        com.google.protobuf.CodedOutputStream codedOutputStream19 = com.google.protobuf.CodedOutputStream.newInstance(byteArray14, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream22 = com.google.protobuf.CodedOutputStream.newInstance(byteArray14, (int) ' ', 0);
        java.io.InputStream inputStream23 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location24 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream23);
        boolean boolean25 = location24.isInitialized();
        codedOutputStream22.writeGroupNoTag((com.google.protobuf.MessageLite) location24);
        int int27 = location24.getSpanCount();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder28 = builder11.mergeFrom((com.google.protobuf.Message) location24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mergeFrom(Message) can only merge messages of the same type.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(methodOptions16);
        org.junit.Assert.assertNotNull(codedOutputStream19);
        org.junit.Assert.assertNotNull(codedOutputStream22);
        org.junit.Assert.assertNotNull(location24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.FRIDAY;
        java.time.DayOfWeek dayOfWeek2 = dayOfWeek0.minus((long) ':');
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        java.time.temporal.ValueRange valueRange4 = chronoField3.range();
        // The following exception was thrown during execution in test generation
        try {
            long long5 = dayOfWeek0.getLong((java.time.temporal.TemporalField) chronoField3);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfMonth");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + dayOfWeek2 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek2.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField3.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(valueRange4);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction2 = charsetDecoder1.malformedInputAction();
        float float3 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder5 = charset4.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction6 = charsetDecoder5.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction7 = charsetDecoder5.unmappableCharacterAction();
        java.nio.charset.CharsetDecoder charsetDecoder8 = charsetDecoder1.onMalformedInput(codingErrorAction7);
        float float9 = charsetDecoder1.averageCharsPerByte();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(codingErrorAction2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(charsetDecoder5);
        org.junit.Assert.assertNotNull(codingErrorAction6);
        org.junit.Assert.assertNotNull(codingErrorAction7);
        org.junit.Assert.assertNotNull(charsetDecoder8);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) -1, (byte) 10 };
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray5, 39, (int) '+');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = codedInputStream8.skipField(31);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Protocol message tag had invalid wire type.");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(codedInputStream8);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        boolean boolean4 = doubleStream3.isParallel();
        java.util.stream.DoubleStream doubleStream5 = doubleStream3.unordered();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.sequential();
        java.util.stream.Stream<java.lang.Double> doubleStream7 = doubleStream5.boxed();
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry9.createObjectType(objectType10);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType16);
        boolean boolean18 = objectType11.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry2.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType11, "NUMBER 52.0 0", "OffsetSeconds", 256, (int) (short) 10);
        com.google.javascript.rhino.jstype.FunctionType functionType24 = objectType11.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope25 = objectType11.getParentScope();
        boolean boolean27 = objectType11.isPropertyTypeDeclared("");
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertNull(functionType24);
        org.junit.Assert.assertNotNull(jSTypeStaticScope25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4);
        boolean boolean12 = methodOptions11.isInitialized();
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString6 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder7 = builder2.mergeFrom(byteString6);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions8 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString6);
        boolean boolean9 = serviceOptions8.isInitialized();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder10 = serviceOptions8.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList11 = builder10.getUninterpretedOptionBuilderList();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteString6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serviceOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builderList11);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto6 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(codedInputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isThis();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean15 = node14.isStringKey();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node14);
        boolean boolean17 = node16.isFor();
        node16.setLineno(0);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFromForTree(node16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = node16.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) ' ', 0);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream8.writeFixed64(3, 100L);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.CodedOutputStream.OutOfSpaceException; message: CodedOutputStream was writing to a flat byte array and ran out of space.");
        } catch (com.google.protobuf.CodedOutputStream.OutOfSpaceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(codedOutputStream8);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.getDefaultInstance();
        boolean boolean1 = fieldDescriptorProto0.hasNumber();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label2 = fieldDescriptorProto0.getLabel();
        org.junit.Assert.assertNotNull(fieldDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + label2 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label2.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder2 = enumOptions1.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output5 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream7 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output5, (int) 'a');
        byte[] byteArray8 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray8, extensionRegistryLite9);
        output5.write(byteArray8);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder12 = builder3.mergeFrom(byteArray8);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = builder3.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder14 = builder3.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption15 = builder14.buildPartial();
        java.lang.String str16 = uninterpretedOption15.getIdentifierValue();
        int int17 = uninterpretedOption15.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder18 = builder2.addUninterpretedOption(uninterpretedOption15);
        byte[] byteArray19 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions21 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray19, extensionRegistryLite20);
        com.google.protobuf.CodedInputStream codedInputStream24 = com.google.protobuf.CodedInputStream.newInstance(byteArray19, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap25 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite26 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto27 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray19, extensionRegistryLite26);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder30 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output32 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream34 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output32, (int) 'a');
        byte[] byteArray35 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite36 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions37 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray35, extensionRegistryLite36);
        output32.write(byteArray35);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder39 = builder30.mergeFrom(byteArray35);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList40 = builder39.getUninterpretedOptionBuilderList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList41 = builder39.getUninterpretedOptionList();
        java.io.InputStream inputStream42 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions43 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder44 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions43);
        java.io.InputStream inputStream45 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder46 = builder44.mergeFrom(inputStream45);
        com.google.protobuf.ByteString byteString47 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto48 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString47);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite49 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto50 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString47, extensionRegistryLite49);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite51 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions52 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString47, extensionRegistryLite51);
        java.io.InputStream inputStream53 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite54 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location55 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream53, extensionRegistryLite54);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder56 = builder46.mergeFrom(byteString47, extensionRegistryLite54);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder57 = builder39.mergeFrom(inputStream42, extensionRegistryLite54);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder58 = builder18.mergeFrom(byteArray19, 16, 365, extensionRegistryLite54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(output5);
        org.junit.Assert.assertNotNull(codedOutputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(uninterpretedOption15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(methodOptions21);
        org.junit.Assert.assertNotNull(codedInputStream24);
        org.junit.Assert.assertNotNull(variableMap25);
        org.junit.Assert.assertNotNull(enumDescriptorProto27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(output32);
        org.junit.Assert.assertNotNull(codedOutputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(methodOptions37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builderList40);
        org.junit.Assert.assertNotNull(uninterpretedOptionList41);
        org.junit.Assert.assertNotNull(enumValueOptions43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(byteString47);
        org.junit.Assert.assertNotNull(methodDescriptorProto48);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto50);
        org.junit.Assert.assertNotNull(methodOptions52);
        org.junit.Assert.assertNotNull(extensionRegistryLite54);
        org.junit.Assert.assertNotNull(location55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FieldOptions.getDescriptor();
        com.google.protobuf.Descriptors.FileDescriptor fileDescriptor1 = descriptor0.getFile();
        java.util.List<com.google.protobuf.Descriptors.FileDescriptor> fileDescriptorList2 = fileDescriptor1.getDependencies();
        java.util.List<com.google.protobuf.Descriptors.FieldDescriptor> fieldDescriptorList3 = fileDescriptor1.getExtensions();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(fileDescriptor1);
        org.junit.Assert.assertNotNull(fileDescriptorList2);
        org.junit.Assert.assertNotNull(fieldDescriptorList3);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        com.google.javascript.jscomp.FunctionInformationMap.Module module1 = builder0.buildPartial();
        boolean boolean2 = module1.hasCompiledSource();
        boolean boolean3 = module1.isInitialized();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(module1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.stream.Stream<java.lang.Integer> intStream7 = intStream5.boxed();
        java.lang.Runnable runnable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream9 = intStream5.onClose(runnable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(intStream7);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        short[] shortArray1 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer2 = java.nio.ShortBuffer.wrap(shortArray1);
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray1);
        java.lang.String str4 = shortBuffer3.toString();
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.nio.HeapShortBuffer[pos=0 lim=1 cap=1]" + "'", str4, "java.nio.HeapShortBuffer[pos=0 lim=1 cap=1]");
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.lang.String str8 = builder6.getName();
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        com.google.protobuf.CodedOutputStream codedOutputStream14 = com.google.protobuf.CodedOutputStream.newInstance(byteArray9, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto16 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray9, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto18 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray9, extensionRegistryLite17);
        com.google.protobuf.UnknownFieldSet unknownFieldSet19 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto20 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder21 = builder6.mergeFrom(byteArray9);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = builder21.getField(fieldDescriptor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(codedOutputStream14);
        org.junit.Assert.assertNotNull(fileDescriptorProto16);
        org.junit.Assert.assertNotNull(serviceDescriptorProto18);
        org.junit.Assert.assertNotNull(unknownFieldSet19);
        org.junit.Assert.assertNotNull(descriptorProto20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        longStream1.close();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong3 = longStream1.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_STRING;
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor1 = type0.getValueDescriptor();
        java.lang.String str2 = enumValueDescriptor1.getFullName();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_STRING + "'", type0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_STRING));
        org.junit.Assert.assertNotNull(enumValueDescriptor1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "google.protobuf.FieldDescriptorProto.Type.TYPE_STRING" + "'", str2, "google.protobuf.FieldDescriptorProto.Type.TYPE_STRING");
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withHour(16);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime12.withLaterOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime12.minusDays(0L);
        java.time.Period period16 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod17 = period16.normalized();
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant19 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.OffsetDateTime offsetDateTime25 = java.time.OffsetDateTime.ofInstant(instant19, (java.time.ZoneId) zoneOffset23);
        java.time.temporal.ValueRange valueRange26 = chronoField18.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime25);
        java.time.temporal.Temporal temporal27 = period16.subtractFrom((java.time.temporal.Temporal) offsetDateTime25);
        java.time.Month month28 = java.time.Month.AUGUST;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZonedDateTime zonedDateTime39 = java.time.ZonedDateTime.of(localDateTime33, (java.time.ZoneId) zoneOffset37);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean41 = localDateTime33.isSupported((java.time.temporal.TemporalField) chronoField40);
        boolean boolean42 = month28.isSupported((java.time.temporal.TemporalField) chronoField40);
        long long43 = offsetDateTime25.getLong((java.time.temporal.TemporalField) chronoField40);
        int int44 = offsetDateTime25.getNano();
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset48);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZonedDateTime zonedDateTime55 = java.time.ZonedDateTime.of(localDateTime49, (java.time.ZoneId) zoneOffset53);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit58 = chronoField57.getBaseUnit();
        java.time.LocalDateTime localDateTime59 = localDateTime49.plus((long) 1970, temporalUnit58);
        boolean boolean60 = offsetDateTime25.isSupported(temporalUnit58);
        boolean boolean61 = zonedDateTime15.isSupported(temporalUnit58);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronoPeriod17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(valueRange26);
        org.junit.Assert.assertNotNull(temporal27);
        org.junit.Assert.assertTrue("'" + month28 + "' != '" + java.time.Month.AUGUST + "'", month28.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField40.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 12L + "'", long43 == 12L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField57.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit58 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit58.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder1 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder4 = builder1.mergeFrom(inputStream2, extensionRegistryLite3);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap5 = builder1.getAllFields();
        java.io.File file8 = null;
        java.io.File file9 = java.io.File.createTempFile("hi!", "ISO", file8);
        boolean boolean12 = file9.setWritable(false, false);
        java.net.URI uRI13 = file9.toURI();
        java.io.PrintStream printStream14 = new java.io.PrintStream(file9);
        printStream14.print((int) (byte) 0);
        printStream14.print(10.0d);
        printStream14.close();
        com.google.javascript.jscomp.CompilerOptions compilerOptions20 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions20.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat23 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions20.errorFormat = errorFormat23;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy25 = null;
        compilerOptions20.variableRenaming = variableRenamingPolicy25;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode27 = compilerOptions20.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder28 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder30 = builder28.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder31 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label32 = builder31.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = builder28.addExtension(builder31);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder28.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder35 = builder34.getOptionsBuilder();
        java.io.InputStream inputStream36 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions37 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream36);
        boolean boolean38 = enumOptions37.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder39 = builder35.mergeFrom(enumOptions37);
        byte[] byteArray40 = enumOptions37.toByteArray();
        compilerOptions20.setInputPropertyMapSerialized(byteArray40);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite42 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location43 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray40, extensionRegistryLite42);
        printStream14.write(byteArray40, 1970, 152);
        byte[] byteArray47 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions49 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray47, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption50 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray47);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder51 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label52 = builder51.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto53 = builder51.buildPartial();
        int int54 = fieldDescriptorProto53.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder55 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto53);
        java.io.InputStream inputStream56 = null;
        java.io.InputStream inputStream57 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite58 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location59 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream57, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder60 = builder55.mergeFrom(inputStream56, extensionRegistryLite58);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap61 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray47, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder62 = builder1.mergeFrom(byteArray40, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions63 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(inputStream0, extensionRegistryLite58);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldDescriptorMap5);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/tmp/hi!2324801364089073529ISO");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(errorFormat23);
        org.junit.Assert.assertTrue("'" + tracerMode27 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode27.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + label32 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label32.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(enumOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(location43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(methodOptions49);
        org.junit.Assert.assertNotNull(uninterpretedOption50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + label52 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label52.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(extensionRegistryLite58);
        org.junit.Assert.assertNotNull(location59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(functionInformationMap61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(enumValueOptions63);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.ByteString byteString2 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.mergeFrom(byteString2);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label5 = builder4.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto6 = builder4.buildPartial();
        int int7 = fieldDescriptorProto6.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto6);
        java.io.InputStream inputStream9 = null;
        java.io.InputStream inputStream10 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location12 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream10, extensionRegistryLite11);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder8.mergeFrom(inputStream9, extensionRegistryLite11);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location14 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString2, extensionRegistryLite11);
        java.lang.Class class16 = null;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto18 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        int int19 = com.google.protobuf.CodedOutputStream.computeMessageSetExtensionSize((int) (byte) -1, (com.google.protobuf.MessageLite) methodDescriptorProto18);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.GeneratedMessage.GeneratedExtension<com.google.protobuf.AbstractMessage, java.time.temporal.ChronoField> abstractMessageGeneratedExtension20 = com.google.protobuf.GeneratedMessage.newMessageScopedGeneratedExtension((com.google.protobuf.Message) location14, 42, class16, (com.google.protobuf.Message) methodDescriptorProto18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + label5 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label5.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(extensionRegistryLite11);
        org.junit.Assert.assertNotNull(location12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(location14);
        org.junit.Assert.assertNotNull(methodDescriptorProto18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.ByteString.Output output8 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream10 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output8, (int) 'a');
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        output8.write(byteArray11);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder0.mergeFrom(byteArray11);
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList16 = builder0.getExtensionList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto18 = builder0.getEnumType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(output8);
        org.junit.Assert.assertNotNull(codedOutputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList16);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap2 = enumOptions1.getAllFields();
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(fieldDescriptorMap2);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        int int7 = codedInputStream5.pushLimit((int) 'a');
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder8 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.io.InputStream inputStream9 = null;
        java.io.InputStream inputStream10 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location12 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream10, extensionRegistryLite11);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder13 = builder8.mergeFrom(inputStream9, extensionRegistryLite11);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo14 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(codedInputStream5, extensionRegistryLite11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(extensionRegistryLite11);
        org.junit.Assert.assertNotNull(location12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        typePosition0.setPositionInformation(12, (int) (byte) 100, 4095, (int) (short) 0);
        int int11 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((-1));
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        double[] doubleArray7 = doubleStream6.toArray();
        java.util.stream.DoubleStream doubleStream8 = doubleStream6.sequential();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream9 = doubleStream8.distinct();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry9.createObjectType(objectType10);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType16);
        boolean boolean18 = objectType11.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry2.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType11, "NUMBER 52.0 0", "OffsetSeconds", 256, (int) (short) 10);
        boolean boolean24 = jSType23.isNumber();
        boolean boolean25 = jSType23.isNoType();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withHour(16);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime12.withLaterOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime12.minusDays(0L);
        java.time.Month month16 = java.time.Month.AUGUST;
        java.time.Month month17 = java.time.Month.AUGUST;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.of(localDateTime22, (java.time.ZoneId) zoneOffset26);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean30 = localDateTime22.isSupported((java.time.temporal.TemporalField) chronoField29);
        boolean boolean31 = month17.isSupported((java.time.temporal.TemporalField) chronoField29);
        boolean boolean32 = month16.isSupported((java.time.temporal.TemporalField) chronoField29);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime33 = zonedDateTime15.with((java.time.temporal.TemporalAdjuster) month16);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + month16 + "' != '" + java.time.Month.AUGUST + "'", month16.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertTrue("'" + month17 + "' != '" + java.time.Month.AUGUST + "'", month17.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField29.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime33);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime6.minusMonths(0L);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime11.minusMinutes((long) 32);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime11.plusHours(999L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        java.time.Month month12 = java.time.Month.AUGUST;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean25 = localDateTime17.isSupported((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = month12.isSupported((java.time.temporal.TemporalField) chronoField24);
        long long27 = offsetDateTime9.getLong((java.time.temporal.TemporalField) chronoField24);
        int int28 = offsetDateTime9.getNano();
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZonedDateTime zonedDateTime39 = java.time.ZonedDateTime.of(localDateTime33, (java.time.ZoneId) zoneOffset37);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit42 = chronoField41.getBaseUnit();
        java.time.LocalDateTime localDateTime43 = localDateTime33.plus((long) 1970, temporalUnit42);
        boolean boolean44 = offsetDateTime9.isSupported(temporalUnit42);
        int int45 = offsetDateTime9.getMinute();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertTrue("'" + month12 + "' != '" + java.time.Month.AUGUST + "'", month12.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField24.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 12L + "'", long27 == 12L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField41.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit42 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit42.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        boolean boolean6 = builder3.hasDefaultValue();
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = builder3.mergeFrom(inputStream7, extensionRegistryLite8);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location13 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream11, extensionRegistryLite12);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = builder9.mergeFrom(inputStream10, extensionRegistryLite12);
        java.lang.String str15 = builder14.getName();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = builder14.hasField(fieldDescriptor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(extensionRegistryLite12);
        org.junit.Assert.assertNotNull(location13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        boolean boolean9 = compiler5.isTypeCheckingEnabled();
        com.google.javascript.jscomp.JsAst jsAst10 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler5.addNewScript(jsAst10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        printStream8.print((int) (byte) 0);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative11 = com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE;
        printStream8.print((java.lang.Object) jSTypeNative11);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!7670681372933364015ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + jSTypeNative11 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE + "'", jSTypeNative11.equals(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_TYPE));
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.SourceFile sourceFile7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", generator6);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat11 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions8.errorFormat = errorFormat11;
        compilerOptions8.setRemoveDeadCode(false);
        com.google.javascript.jscomp.Result result15 = compiler1.compile(sourceFile4, sourceFile7, compilerOptions8);
        compilerOptions8.setTweakToBooleanLiteral("{}: ERROR - Unknown class name\n", false);
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertNotNull(errorFormat11);
        org.junit.Assert.assertNotNull(result15);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        boolean boolean7 = node6.isFor();
        node6.setLineno(0);
        boolean boolean10 = node6.isThrow();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node.AncestorIterable ancestorIterable5 = node4.getAncestors();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.getDefaultInstance();
        boolean boolean1 = fieldDescriptorProto0.hasNumber();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type2 = fieldDescriptorProto0.getType();
        org.junit.Assert.assertNotNull(fieldDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + type2 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE + "'", type2.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE));
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.Node node23 = objectType16.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType24 = objectType16.toMaybeEnumType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean29 = node28.isStringKey();
        boolean boolean30 = node28.isThrow();
        boolean boolean31 = node28.isVarArgs();
        boolean boolean32 = node28.isStringKey();
        boolean boolean33 = objectType9.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType16, node28);
        objectType16.clearResolved();
        boolean boolean35 = objectType16.isGlobalThisType();
        boolean boolean36 = objectType16.isInterface();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(enumType24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions30 = builder27.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRangeOrBuilder extensionRangeOrBuilder32 = builder27.getExtensionRangeOrBuilder((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(messageOptions30);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.Node node11 = objectType4.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        boolean boolean24 = objectType16.isPropertyInExterns("hi!");
        com.google.javascript.rhino.jstype.JSType jSType25 = objectType16.getTypeOfThis();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = objectType4.differsFrom(jSType25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType25);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (byte) 1);
        int int3 = fieldPosition2.getField();
        int int4 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field5 = fieldPosition2.getFieldAttribute();
        fieldPosition2.setBeginIndex(43);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(field5);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder> builderList3 = builder0.getServiceBuilderList();
        com.google.protobuf.DescriptorProtos.SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder4 = builder0.getSourceCodeInfoOrBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.clearDependency();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder0.clearField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builderList3);
        org.junit.Assert.assertNotNull(sourceCodeInfoOrBuilder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getBaseUnit();
        java.time.LocalDateTime localDateTime21 = localDateTime11.plus((long) 1970, temporalUnit20);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.of(localDate6, localTime22, zoneOffset26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean33 = node32.isFromExterns();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean38 = node37.isFromExterns();
        java.lang.String str39 = node37.toString();
        com.google.javascript.rhino.Node node40 = node32.copyInformationFrom(node37);
        boolean boolean41 = zoneOffset26.equals((java.lang.Object) node37);
        boolean boolean42 = node37.isVar();
        node37.putBooleanProp(24, true);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField19.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 52.0 0" + "'", str39, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        java.text.MessageFormat messageFormat1 = new java.text.MessageFormat("hi!");
        java.util.Locale locale2 = messageFormat1.getLocale();
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime9.minusDays((long) (short) 100);
        java.lang.String str12 = offsetDateTime9.toString();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int14 = offsetDateTime9.get((java.time.temporal.TemporalField) chronoField13);
        boolean boolean15 = chronoField13.isDateBased();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = messageFormat1.format((java.lang.Object) chronoField13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.time.temporal.ChronoField cannot be cast to [Ljava.lang.Object;");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str12, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder2 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean3 = builder2.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry4 = builder2.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.mergeFrom(entry4);
        boolean boolean6 = builder0.hasSourceName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entry4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions30 = builder27.getOptions();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder31 = builder27.clone();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder33 = builder31.removeExtensionRange((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(messageOptions30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        boolean boolean3 = compilerOptions0.checkControlStructures;
        compilerOptions0.setColorizeErrorOutput(true);
        compilerOptions0.setGeneratePseudoNames(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(charSet1);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = codingConvention8.getAssertionFunctions();
        java.lang.String str10 = codingConvention8.getAbstractMethodName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection11 = codingConvention8.getAssertionFunctions();
        boolean boolean14 = codingConvention8.isExported("1970-01-01T00:00:00Z", false);
        java.lang.String str15 = codingConvention8.getExportPropertyFunction();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean20 = node19.isFromExterns();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(1);
        com.google.javascript.rhino.Node node23 = node19.clonePropsFrom(node22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = codingConvention8.isInlinableFunction(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.abstractMethod" + "'", str10, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile2 = builder0.buildFromFile("ClockHourOfAmPm");
        boolean boolean3 = sourceFile2.isExtern();
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        java.lang.String str27 = descriptorProto22.getName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProtoOrBuilder descriptorProtoOrBuilder29 = descriptorProto22.getNestedTypeOrBuilder(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "FileDescriptorProto" + "'", str27, "FileDescriptorProto");
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        boolean boolean37 = builder30.hasName();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList38 = builder30.getExtensionList();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList38);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        java.util.Date date3 = new java.util.Date((int) (byte) -1, 43, 16384);
        java.time.Instant instant4 = date3.toInstant();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.ZonedDateTime zonedDateTime15 = java.time.ZonedDateTime.of(localDateTime9, (java.time.ZoneId) zoneOffset13);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.LocalDateTime localDateTime19 = localDateTime9.plus((long) 1970, temporalUnit18);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.of(localDateTime25, (java.time.ZoneId) zoneOffset29);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit34 = chronoField33.getBaseUnit();
        java.time.LocalDateTime localDateTime35 = localDateTime25.plus((long) 1970, temporalUnit34);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime36 = localDateTime19.minus((long) 43, temporalUnit34);
        java.time.LocalDateTime localDateTime38 = localDateTime19.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime40 = localDateTime38.plusHours((long) 0);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset49);
        java.time.ZonedDateTime zonedDateTime51 = java.time.ZonedDateTime.of(localDateTime45, (java.time.ZoneId) zoneOffset49);
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime51.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField54.getBaseUnit();
        boolean boolean56 = zonedDateTime53.isSupported(temporalUnit55);
        java.time.LocalDate localDate57 = java.time.LocalDate.now();
        java.lang.String str58 = localDate57.toString();
        boolean boolean59 = temporalUnit55.isSupportedBy((java.time.temporal.Temporal) localDate57);
        java.time.LocalDateTime localDateTime60 = localDateTime38.truncatedTo(temporalUnit55);
        boolean boolean61 = temporalUnit55.isTimeBased();
        boolean boolean62 = instant4.isSupported(temporalUnit55);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Jun 09 00:00:00 UTC 1947");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField17.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField33.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit34 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit34.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField54.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-21" + "'", str58, "2022-02-21");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        java.time.temporal.TemporalAccessor temporalAccessor0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime1 = java.time.chrono.ChronoLocalDateTime.from(temporalAccessor0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = methodOptions11.getRepeatedField(fieldDescriptor12, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
        org.junit.Assert.assertNotNull(methodOptions11);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.FRIDAY;
        java.time.DayOfWeek dayOfWeek2 = dayOfWeek0.minus((long) ':');
        java.time.format.TextStyle textStyle3 = java.time.format.TextStyle.FULL;
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.lang.String str6 = dayOfWeek2.getDisplayName(textStyle3, locale5);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter("1970-03-24T02:02:32");
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.text.MessageFormat messageFormat12 = new java.text.MessageFormat("hi!");
        java.text.Format[] formatArray13 = messageFormat12.getFormatsByArgumentIndex();
        java.io.PrintWriter printWriter14 = printWriter8.format(locale9, "file", (java.lang.Object[]) formatArray13);
        java.lang.String str15 = locale5.getDisplayLanguage(locale9);
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + dayOfWeek2 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek2.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertTrue("'" + textStyle3 + "' != '" + java.time.format.TextStyle.FULL + "'", textStyle3.equals(java.time.format.TextStyle.FULL));
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc218\uc694\uc77c" + "'", str6, "\uc218\uc694\uc77c");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(formatArray13);
        org.junit.Assert.assertNotNull(printWriter14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u671d\u9c9c\u6587" + "'", str15, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setColorizeErrorOutput(false);
        compilerOptions0.setCrossModuleCodeMotion(false);
        compilerOptions0.setAppNameStr("google.protobuf");
        compilerOptions0.crossModuleCodeMotion = false;
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset14);
        boolean boolean17 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        int int23 = localDateTime22.getYear();
        java.time.LocalDate localDate24 = localDateTime22.toLocalDate();
        int int25 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        long long28 = localDateTime4.getLong((java.time.temporal.TemporalField) chronoField26);
        java.time.LocalTime localTime29 = localDateTime4.toLocalTime();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime36.minusDays((long) (short) 100);
        java.lang.String str39 = offsetDateTime36.toString();
        java.time.LocalTime localTime40 = offsetDateTime36.toLocalTime();
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        int int47 = localDateTime46.getYear();
        java.time.Instant instant48 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset52);
        java.time.OffsetDateTime offsetDateTime54 = java.time.OffsetDateTime.ofInstant(instant48, (java.time.ZoneId) zoneOffset52);
        java.time.Instant instant55 = localDateTime46.toInstant(zoneOffset52);
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset60);
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset65);
        java.time.ZonedDateTime zonedDateTime67 = java.time.ZonedDateTime.of(localDateTime61, (java.time.ZoneId) zoneOffset65);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit70 = chronoField69.getBaseUnit();
        java.time.LocalDateTime localDateTime71 = localDateTime61.plus((long) 1970, temporalUnit70);
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset76);
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset81);
        java.time.ZonedDateTime zonedDateTime83 = java.time.ZonedDateTime.of(localDateTime77, (java.time.ZoneId) zoneOffset81);
        java.time.temporal.ChronoField chronoField85 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit86 = chronoField85.getBaseUnit();
        java.time.LocalDateTime localDateTime87 = localDateTime77.plus((long) 1970, temporalUnit86);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime88 = localDateTime71.minus((long) 43, temporalUnit86);
        java.time.Instant instant89 = instant55.plus((long) 16384, temporalUnit86);
        java.time.LocalTime localTime90 = localTime40.plus((long) 64, temporalUnit86);
        java.time.LocalDateTime localDateTime91 = localDateTime4.truncatedTo(temporalUnit86);
        java.time.Month month92 = localDateTime91.getMonth();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField26.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 12L + "'", long28 == 12L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str39, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField69.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit70 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit70.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zonedDateTime83);
        org.junit.Assert.assertTrue("'" + chronoField85 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField85.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit86 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit86.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime88);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + month92 + "' != '" + java.time.Month.JANUARY + "'", month92.equals(java.time.Month.JANUARY));
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition13 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        int int19 = localDateTime18.getYear();
        java.time.Instant instant20 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.OffsetDateTime offsetDateTime26 = java.time.OffsetDateTime.ofInstant(instant20, (java.time.ZoneId) zoneOffset24);
        java.time.Instant instant27 = localDateTime18.toInstant(zoneOffset24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofHours(9);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.Instant instant33 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.OffsetDateTime offsetDateTime39 = java.time.OffsetDateTime.ofInstant(instant33, (java.time.ZoneId) zoneOffset37);
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime39.minusDays((long) (short) 100);
        java.lang.String str42 = offsetDateTime39.toString();
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int44 = offsetDateTime39.get((java.time.temporal.TemporalField) chronoField43);
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime39.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime46.withOffsetSameLocal(zoneOffset47);
        boolean boolean49 = chronoField32.isSupportedBy((java.time.temporal.TemporalAccessor) zoneOffset47);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 8, 10, zoneOffset47);
        java.time.LocalDateTime localDateTime51 = timeDefinition13.createDateTime(localDateTime18, zoneOffset29, zoneOffset47);
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime10.withZoneSameInstant((java.time.ZoneId) zoneOffset29);
        java.lang.String str53 = zoneOffset29.getId();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + timeDefinition13 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL + "'", timeDefinition13.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL));
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField32.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str42, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 12 + "'", int44 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+09:00" + "'", str53, "+09:00");
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        compilerOptions0.resetWarningsGuard();
        boolean boolean11 = compilerOptions0.collapseVariableDeclarations;
        compilerOptions0.setFlowSensitiveInlineVariables(true);
        com.google.javascript.jscomp.CheckLevel checkLevel14 = compilerOptions0.checkRequires;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + checkLevel14 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel14.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range(12L, (long) (short) 100);
        java.util.PrimitiveIterator.OfLong ofLong3 = longStream2.iterator();
        java.util.stream.LongStream.Builder builder4 = java.util.stream.LongStream.builder();
        ofLong3.forEachRemaining((java.util.function.LongConsumer) builder4);
        java.util.stream.LongStream longStream8 = java.util.stream.LongStream.range(12L, (long) (short) 100);
        java.util.PrimitiveIterator.OfLong ofLong9 = longStream8.iterator();
        java.util.stream.LongStream.Builder builder10 = java.util.stream.LongStream.builder();
        ofLong9.forEachRemaining((java.util.function.LongConsumer) builder10);
        java.util.function.LongConsumer longConsumer12 = builder4.andThen((java.util.function.LongConsumer) builder10);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(ofLong3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(ofLong9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(longConsumer12);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(50, 0, 50, 50);
        com.google.javascript.rhino.Node node6 = typePosition0.getItem();
        int int7 = typePosition0.getPositionOnEndLine();
        int int8 = typePosition0.getStartLine();
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.Period period11 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod12 = period11.normalized();
        int int13 = period11.getYears();
        java.time.Period period14 = period11.negated();
        boolean boolean15 = period14.isNegative();
        java.time.LocalDate localDate16 = localDate6.minus((java.time.temporal.TemporalAmount) period14);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.getDisplayCountry();
        java.time.format.DateTimeFormatter dateTimeFormatter20 = java.time.format.DateTimeFormatter.ofPattern("16:00:52+00:00:52", locale18);
        java.lang.String str21 = localDate6.format(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str19, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "16:00:52+00:00:52" + "'", str21, "16:00:52+00:00:52");
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        int int12 = codedInputStream10.setSizeLimit((int) '/');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module module13 = com.google.javascript.jscomp.FunctionInformationMap.Module.parseFrom(codedInputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 67108864 + "'", int12 == 67108864);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry9.createObjectType(objectType10);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType16);
        com.google.javascript.rhino.Node node18 = objectType11.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry21.createObjectType(objectType22);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair29 = objectType23.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = objectType11.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType11);
        boolean boolean32 = objectType11.isFunctionType();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(typePair29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        compilerOptions0.coalesceVariableNames = false;
        compilerOptions0.setDefineToDoubleLiteral("{634185401}", (double) 10L);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        java.time.LocalTime localTime0 = java.time.LocalTime.NOON;
        org.junit.Assert.assertNotNull(localTime0);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder13 = builder11.clearStringValue();
        int int14 = builder11.getNameCount();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder16 = builder11.newBuilderForField(fieldDescriptor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.Period period11 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod12 = period11.normalized();
        int int13 = period11.getYears();
        java.time.Period period14 = period11.negated();
        boolean boolean15 = period14.isNegative();
        java.time.LocalDate localDate16 = localDate6.minus((java.time.temporal.TemporalAmount) period14);
        java.time.Instant instant17 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant17, (java.time.ZoneId) zoneOffset21);
        java.time.OffsetDateTime offsetDateTime25 = offsetDateTime23.minusDays((long) (short) 100);
        java.lang.String str26 = offsetDateTime23.toString();
        java.time.LocalTime localTime27 = offsetDateTime23.toLocalTime();
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        int int34 = localDateTime33.getYear();
        java.time.Instant instant35 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.ofInstant(instant35, (java.time.ZoneId) zoneOffset39);
        java.time.Instant instant42 = localDateTime33.toInstant(zoneOffset39);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset47);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset52);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.of(localDateTime48, (java.time.ZoneId) zoneOffset52);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        java.time.LocalDateTime localDateTime58 = localDateTime48.plus((long) 1970, temporalUnit57);
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset63);
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset68);
        java.time.ZonedDateTime zonedDateTime70 = java.time.ZonedDateTime.of(localDateTime64, (java.time.ZoneId) zoneOffset68);
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit73 = chronoField72.getBaseUnit();
        java.time.LocalDateTime localDateTime74 = localDateTime64.plus((long) 1970, temporalUnit73);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime75 = localDateTime58.minus((long) 43, temporalUnit73);
        java.time.Instant instant76 = instant42.plus((long) 16384, temporalUnit73);
        java.time.LocalTime localTime77 = localTime27.plus((long) 64, temporalUnit73);
        java.time.ZoneOffset zoneOffset82 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime83 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset82);
        java.time.ZoneOffset zoneOffset87 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime88 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset87);
        java.time.ZonedDateTime zonedDateTime89 = java.time.ZonedDateTime.of(localDateTime83, (java.time.ZoneId) zoneOffset87);
        java.time.temporal.ChronoField chronoField91 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit92 = chronoField91.getBaseUnit();
        java.time.LocalDateTime localDateTime93 = localDateTime83.plus((long) 1970, temporalUnit92);
        java.time.LocalTime localTime94 = localTime27.plus(4L, temporalUnit92);
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime95 = localDate6.atTime(localTime27);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str26, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField56.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField72.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit73 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit73.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(zoneOffset82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(zoneOffset87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(zonedDateTime89);
        org.junit.Assert.assertTrue("'" + chronoField91 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField91.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit92 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit92.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime95);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions0 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList1 = fileOptions0.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions2 = fileOptions0.getDefaultInstanceForType();
        boolean boolean3 = fileOptions0.hasJavaGenericServices();
        org.junit.Assert.assertNotNull(fileOptions0);
        org.junit.Assert.assertNotNull(uninterpretedOptionList1);
        org.junit.Assert.assertNotNull(fileOptions2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions4 = builder2.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder5 = serviceOptions4.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder7 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output9 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream11 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output9, (int) 'a');
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        output9.write(byteArray12);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder16 = builder7.mergeFrom(byteArray12);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = builder7.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder18 = builder7.addUninterpretedOptionBuilder();
        boolean boolean19 = builder18.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder21 = builder18.setNegativeIntValue((long) 55);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder22 = builder5.addUninterpretedOption((int) 'a', builder21);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceOptions4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(output9);
        org.junit.Assert.assertNotNull(codedOutputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange2 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream0, extensionRegistryLite1);
        int int3 = extensionRange2.getEnd();
        boolean boolean4 = extensionRange2.hasStart();
        int int5 = extensionRange2.getStart();
        int int6 = extensionRange2.getEnd();
        org.junit.Assert.assertNotNull(extensionRange2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        com.google.common.collect.ImmutableCollection<java.util.stream.LongStream> longStreamCollection6 = compilerMap5.values();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean13 = strSet11.isEmpty();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate(100);
        boolean boolean16 = strSet11.equals((java.lang.Object) byteBuffer15);
        java.nio.IntBuffer intBuffer17 = byteBuffer15.asIntBuffer();
        double double18 = byteBuffer15.getDouble();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.asReadOnlyBuffer();
        boolean boolean20 = byteBuffer15.hasArray();
        short short21 = byteBuffer15.getShort();
        java.nio.ByteOrder byteOrder22 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer23 = byteBuffer15.order(byteOrder22);
        java.util.stream.LongStream longStream24 = compilerMap5.get((java.lang.Object) byteOrder22);
        com.google.common.collect.ImmutableCollection<java.util.stream.LongStream> longStreamCollection25 = compilerMap5.values();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(longStreamCollection6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 0 + "'", short21 == (short) 0);
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNull(longStream24);
        org.junit.Assert.assertNotNull(longStreamCollection25);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto> enumValueDescriptorProtoList6 = enumDescriptorProto4.getValueList();
        int int7 = enumDescriptorProto4.getSerializedSize();
        boolean boolean8 = enumDescriptorProto4.hasName();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumValueDescriptorProtoList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        int int3 = fieldDescriptorProto2.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions5 = builder4.getOptions();
        boolean boolean6 = fieldOptions5.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions.CType cType7 = fieldOptions5.getCtype();
        com.google.protobuf.DescriptorProtos.FieldOptions.CType cType8 = fieldOptions5.getCtype();
        int int9 = cType8.getNumber();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + cType7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING + "'", cType7.equals(com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING));
        org.junit.Assert.assertTrue("'" + cType8 + "' != '" + com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING + "'", cType8.equals(com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        com.google.protobuf.ByteString byteString0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString0, extensionRegistryLite1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withHour(16);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime10.plusDays((long) 12);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        compilerOptions0.coalesceVariableNames = false;
        compilerOptions0.setRuntimeTypeCheckLogFunction("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        compilerOptions0.setLocale("");
        compilerOptions0.recordFunctionInformation = false;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        com.google.protobuf.Descriptors.FieldDescriptor.JavaType javaType0 = com.google.protobuf.Descriptors.FieldDescriptor.JavaType.STRING;
        org.junit.Assert.assertTrue("'" + javaType0 + "' != '" + com.google.protobuf.Descriptors.FieldDescriptor.JavaType.STRING + "'", javaType0.equals(com.google.protobuf.Descriptors.FieldDescriptor.JavaType.STRING));
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        java.io.InputStream inputStream4 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder5.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder5.addExtension(builder8);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder11 = builder5.addEnumTypeBuilder();
        com.google.protobuf.ByteString.Output output13 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream15 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output13, (int) 'a');
        byte[] byteArray16 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray16, extensionRegistryLite17);
        output13.write(byteArray16);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = builder5.mergeFrom(byteArray16);
        byte[] byteArray21 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions23 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray21, extensionRegistryLite22);
        com.google.protobuf.CodedOutputStream codedOutputStream26 = com.google.protobuf.CodedOutputStream.newInstance(byteArray21, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite27 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto28 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray21, extensionRegistryLite27);
        com.google.protobuf.CodedOutputStream codedOutputStream29 = com.google.protobuf.CodedOutputStream.newInstance(byteArray21);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto32 = builder30.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder33 = fieldDescriptorProto32.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder34 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto32);
        java.io.File file37 = null;
        java.io.File file38 = java.io.File.createTempFile("hi!", "ISO", file37);
        boolean boolean41 = file38.setWritable(false, false);
        java.net.URI uRI42 = file38.toURI();
        java.io.PrintStream printStream43 = new java.io.PrintStream(file38);
        printStream43.print((int) (byte) 0);
        printStream43.print(10.0d);
        printStream43.close();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        boolean boolean55 = strSet53.isEmpty();
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocate(100);
        boolean boolean58 = strSet53.equals((java.lang.Object) byteBuffer57);
        java.nio.IntBuffer intBuffer59 = byteBuffer57.asIntBuffer();
        double double60 = byteBuffer57.getDouble();
        java.nio.ByteBuffer byteBuffer63 = byteBuffer57.put((int) (short) 1, (byte) 1);
        byte[] byteArray64 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite65 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions66 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray64, extensionRegistryLite65);
        com.google.protobuf.CodedOutputStream codedOutputStream69 = com.google.protobuf.CodedOutputStream.newInstance(byteArray64, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite70 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto71 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray64, extensionRegistryLite70);
        com.google.protobuf.CodedOutputStream codedOutputStream72 = com.google.protobuf.CodedOutputStream.newInstance(byteArray64);
        java.nio.ByteBuffer byteBuffer73 = byteBuffer57.get(byteArray64);
        printStream43.write(byteArray64, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream77 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite78 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location79 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream77, extensionRegistryLite78);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder80 = builder34.mergeFrom(byteArray64, extensionRegistryLite78);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto81 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray21, extensionRegistryLite78);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto82 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteArray16, extensionRegistryLite78);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite83 = extensionRegistryLite78.getUnmodifiable();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder84 = builder0.mergeFrom(inputStream4, extensionRegistryLite78);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(output13);
        org.junit.Assert.assertNotNull(codedOutputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(methodOptions23);
        org.junit.Assert.assertNotNull(codedOutputStream26);
        org.junit.Assert.assertNotNull(fileDescriptorProto28);
        org.junit.Assert.assertNotNull(codedOutputStream29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertEquals(file38.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file38.toString(), "/tmp/hi!6100890847640633180ISO");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(uRI42);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intBuffer59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(methodOptions66);
        org.junit.Assert.assertNotNull(codedOutputStream69);
        org.junit.Assert.assertNotNull(fileDescriptorProto71);
        org.junit.Assert.assertNotNull(codedOutputStream72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(extensionRegistryLite78);
        org.junit.Assert.assertNotNull(location79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(fileDescriptorProto81);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto82);
        org.junit.Assert.assertNotNull(extensionRegistryLite83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        byte[] byteArray5 = compilerOptions0.inputPropertyMapSerialized;
        compilerOptions0.optimizeReturns = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap8 = null;
        compilerOptions0.setCssRenamingMap(cssRenamingMap8);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray5);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        int int3 = fieldDescriptorProto2.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions5 = builder4.getOptions();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList6 = fieldOptions5.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder7 = fieldOptions5.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldOptions5);
        org.junit.Assert.assertNotNull(uninterpretedOptionList6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto5 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean6 = serviceDescriptorProto5.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto5);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto8 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean9 = serviceDescriptorProto8.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder10 = builder7.mergeFrom(serviceDescriptorProto8);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder2.addService((int) 'a', builder10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(serviceDescriptorProto5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serviceDescriptorProto8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset16);
        java.time.Clock clock19 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset16);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.now(clock19);
        java.time.LocalDate localDate21 = java.time.LocalDate.now(clock19);
        com.google.protobuf.Descriptors.Descriptor descriptor22 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto23 = descriptor22.toProto();
        boolean boolean24 = descriptorProto23.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList25 = descriptorProto23.getNestedTypeList();
        int int26 = descriptorProto23.getExtensionRangeCount();
        boolean boolean27 = localDate21.equals((java.lang.Object) descriptorProto23);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder28 = descriptorProto23.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList29 = builder28.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet30 = builder28.getUnknownFields();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions31 = builder28.getOptions();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder32 = builder28.clone();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = builder0.addMessageType(builder32);
        byte[] byteArray34 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions36 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray34, extensionRegistryLite35);
        com.google.protobuf.CodedInputStream codedInputStream39 = com.google.protobuf.CodedInputStream.newInstance(byteArray34, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap40 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray34);
        byte[] byteArray41 = variableMap40.toBytes();
        byte[] byteArray42 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions44 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray42, extensionRegistryLite43);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite45 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto46 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray42, extensionRegistryLite45);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder47 = enumDescriptorProto46.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor48 = builder47.getDescriptorForType();
        boolean boolean49 = builder47.hasName();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder50 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder51 = builder50.clearCcGenericServices();
        boolean boolean52 = builder50.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder54 = builder50.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder55 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label56 = builder55.getLabel();
        com.google.protobuf.ByteString byteString57 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder58 = builder55.mergeFrom(byteString57);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder60 = builder54.mergeFrom(byteString57, extensionRegistryLite59);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite61 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions62 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString57, extensionRegistryLite61);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite63 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions64 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString57, extensionRegistryLite63);
        com.google.protobuf.ByteString byteString65 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite66 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions67 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString65, extensionRegistryLite66);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder68 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label69 = builder68.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto70 = builder68.buildPartial();
        int int71 = fieldDescriptorProto70.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder72 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto70);
        java.io.InputStream inputStream73 = null;
        java.io.InputStream inputStream74 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite75 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location76 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream74, extensionRegistryLite75);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder77 = builder72.mergeFrom(inputStream73, extensionRegistryLite75);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap78 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString65, extensionRegistryLite75);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder79 = builder47.mergeFrom(byteString57, extensionRegistryLite75);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption80 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray41, extensionRegistryLite75);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder83 = builder33.mergeFrom(byteArray41, (int) (byte) 100, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(descriptor22);
        org.junit.Assert.assertNotNull(descriptorProto23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(descriptorProtoList29);
        org.junit.Assert.assertNotNull(unknownFieldSet30);
        org.junit.Assert.assertNotNull(messageOptions31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(methodOptions36);
        org.junit.Assert.assertNotNull(codedInputStream39);
        org.junit.Assert.assertNotNull(variableMap40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(methodOptions44);
        org.junit.Assert.assertNotNull(enumDescriptorProto46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(descriptor48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + label56 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label56.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(enumValueOptions62);
        org.junit.Assert.assertNotNull(messageOptions64);
        org.junit.Assert.assertNotNull(byteString65);
        org.junit.Assert.assertNotNull(enumOptions67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + label69 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label69.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(extensionRegistryLite75);
        org.junit.Assert.assertNotNull(location76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(functionInformationMap78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(uninterpretedOption80);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset16);
        java.time.Clock clock19 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset16);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.now(clock19);
        java.time.LocalDate localDate21 = java.time.LocalDate.now(clock19);
        com.google.protobuf.Descriptors.Descriptor descriptor22 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto23 = descriptor22.toProto();
        boolean boolean24 = descriptorProto23.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList25 = descriptorProto23.getNestedTypeList();
        int int26 = descriptorProto23.getExtensionRangeCount();
        boolean boolean27 = localDate21.equals((java.lang.Object) descriptorProto23);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder28 = descriptorProto23.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList29 = builder28.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet30 = builder28.getUnknownFields();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions31 = builder28.getOptions();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder32 = builder28.clone();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = builder0.addMessageType(builder32);
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder> builderList34 = builder0.getServiceBuilderList();
        com.google.protobuf.DescriptorProtos.SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder35 = builder0.getSourceCodeInfoOrBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(descriptor22);
        org.junit.Assert.assertNotNull(descriptorProto23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(descriptorProtoList29);
        org.junit.Assert.assertNotNull(unknownFieldSet30);
        org.junit.Assert.assertNotNull(messageOptions31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builderList34);
        org.junit.Assert.assertNotNull(sourceCodeInfoOrBuilder35);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions6 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder7 = builder5.mergeOptions(serviceOptions6);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder7.setName("1970-01-01");
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder11 = builder7.addMethodBuilder((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        java.time.Instant instant5 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.OffsetDateTime offsetDateTime11 = java.time.OffsetDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.Clock clock23 = java.time.Clock.fixed(instant5, (java.time.ZoneId) zoneOffset20);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.now(clock23);
        java.time.LocalDate localDate25 = java.time.LocalDate.now(clock23);
        com.google.protobuf.Descriptors.Descriptor descriptor26 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto27 = descriptor26.toProto();
        boolean boolean28 = descriptorProto27.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList29 = descriptorProto27.getNestedTypeList();
        int int30 = descriptorProto27.getExtensionRangeCount();
        boolean boolean31 = localDate25.equals((java.lang.Object) descriptorProto27);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder32 = descriptorProto27.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList33 = builder32.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet34 = builder32.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = builder32.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString36 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString36, extensionRegistryLite37);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder39 = builder35.mergeFrom(byteString36);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder40 = builder4.mergeFrom(byteString36);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto41 = builder4.build();
        java.io.InputStream inputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = builder4.mergeDelimitedFrom(inputStream42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(descriptor26);
        org.junit.Assert.assertNotNull(descriptorProto27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(descriptorProtoList33);
        org.junit.Assert.assertNotNull(unknownFieldSet34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(byteString36);
        org.junit.Assert.assertNotNull(fileDescriptorProto38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(methodDescriptorProto41);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        int int8 = uRI7.getPort();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!2831441325676155907ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        com.google.javascript.jscomp.JsMessage.Builder builder0 = new com.google.javascript.jscomp.JsMessage.Builder();
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = fieldDescriptorProto2.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto3);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto5 = builder4.build();
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldDescriptorProto5);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.Descriptors.Descriptor descriptor8 = builder6.getDescriptorForType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap9 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj10 = priorityMap9.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean12 = priorityMap9.containsValue((java.lang.Object) builder11);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder14 = builder11.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString15 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder16 = builder11.mergeFrom(byteString15);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder17 = builder6.addValue(builder11);
        com.google.protobuf.DescriptorProtos.EnumOptionsOrBuilder enumOptionsOrBuilder18 = builder17.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto19 = builder17.build();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueDescriptorProtoOrBuilder enumValueDescriptorProtoOrBuilder21 = enumDescriptorProto19.getValueOrBuilder(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 43, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(descriptor8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteString15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptionsOrBuilder18);
        org.junit.Assert.assertNotNull(enumDescriptorProto19);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        java.util.Set<java.lang.String> strSet13 = java.time.ZoneId.getAvailableZoneIds();
        compilerOptions0.stripNamePrefixes = strSet13;
        boolean boolean15 = compilerOptions0.computeFunctionSideEffects;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions16.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat19 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions16.errorFormat = errorFormat19;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy21 = null;
        compilerOptions16.variableRenaming = variableRenamingPolicy21;
        compilerOptions16.setSummaryDetailLevel(999);
        compilerOptions16.checkSuspiciousCode = true;
        byte[] byteArray27 = compilerOptions16.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.optimizeCalls = false;
        compilerOptions28.preferLineBreakAtEndOfFile = false;
        boolean boolean33 = compilerOptions28.markNoSideEffectCalls;
        boolean boolean34 = compilerOptions28.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions35 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        boolean boolean42 = strSet40.isEmpty();
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocate(100);
        boolean boolean45 = strSet40.equals((java.lang.Object) byteBuffer44);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        boolean boolean52 = strSet50.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream53 = strSet50.stream();
        boolean boolean54 = strSet40.retainAll((java.util.Collection<java.lang.String>) strSet50);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions55 = dependencyOptions35.setEntryPoints((java.util.Collection<java.lang.String>) strSet40);
        compilerOptions28.setDependencyOptions(dependencyOptions35);
        com.google.javascript.jscomp.CheckLevel checkLevel57 = compilerOptions28.checkGlobalThisLevel;
        compilerOptions16.checkMissingReturn = checkLevel57;
        compilerOptions0.checkMissingReturn = checkLevel57;
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean64 = node63.isStringKey();
        boolean boolean65 = node63.isTrue();
        com.google.javascript.rhino.InputId inputId67 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node63.setInputId(inputId67);
        com.google.javascript.jscomp.SourceAst sourceAst69 = null;
        com.google.javascript.rhino.InputId inputId70 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput72 = new com.google.javascript.jscomp.CompilerInput(sourceAst69, inputId70, true);
        java.io.PrintStream printStream73 = null;
        com.google.javascript.jscomp.Compiler compiler74 = new com.google.javascript.jscomp.Compiler(printStream73);
        com.google.javascript.jscomp.ErrorManager errorManager75 = compiler74.getErrorManager();
        compilerInput72.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler74);
        com.google.javascript.jscomp.CodingConvention codingConvention77 = compiler74.getCodingConvention();
        boolean boolean78 = inputId67.equals((java.lang.Object) compiler74);
        com.google.javascript.jscomp.Region region81 = compiler74.getSourceRegion("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", 0);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode82 = compiler74.languageMode();
        compilerOptions0.setLanguageIn(languageMode82);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(errorFormat19);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dependencyOptions55);
        org.junit.Assert.assertTrue("'" + checkLevel57 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel57.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(errorManager75);
        org.junit.Assert.assertNotNull(codingConvention77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(region81);
        org.junit.Assert.assertTrue("'" + languageMode82 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode82.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        com.google.common.collect.ImmutableMap.Builder<java.util.stream.LongStream, com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder> longStreamBuilder0 = new com.google.common.collect.ImmutableMap.Builder<java.util.stream.LongStream, com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder>();
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        int int3 = fieldDescriptorProto2.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions5 = builder4.getOptions();
        boolean boolean6 = fieldOptions5.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions.CType cType7 = fieldOptions5.getCtype();
        boolean boolean8 = fieldOptions5.getPacked();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + cType7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING + "'", cType7.equals(com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = node9.isFromExterns();
        java.lang.String str11 = node9.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node9.siblings();
        typePosition0.setItem(node9);
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(37, 5, 23, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 37?end-line: 23");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 52.0 0" + "'", str11, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(nodeIterable12);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output6 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output6, (int) 'a');
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        output6.write(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder13 = builder4.mergeFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder4.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption16 = builder15.buildPartial();
        java.lang.String str17 = uninterpretedOption16.getIdentifierValue();
        int int18 = uninterpretedOption16.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder19 = builder1.addUninterpretedOption(uninterpretedOption16);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder20 = builder1.addUninterpretedOptionBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart> namePartList21 = builder20.getNameList();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(output6);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(uninterpretedOption16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(namePartList21);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = fieldDescriptorProto2.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto3);
        int int5 = com.google.protobuf.CodedOutputStream.computeMessageSizeNoTag((com.google.protobuf.MessageLite) fieldDescriptorProto3);
        com.google.protobuf.DescriptorProtos.FieldOptionsOrBuilder fieldOptionsOrBuilder6 = fieldDescriptorProto3.getOptionsOrBuilder();
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(fieldOptionsOrBuilder6);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile8 = com.google.javascript.jscomp.JSSourceFile.fromFile(file3);
        com.google.javascript.jscomp.Region region10 = jSSourceFile8.getRegion(4095);
        java.lang.String str12 = jSSourceFile8.getLine(4095);
        jSSourceFile8.clearCachedSource();
        java.lang.String str14 = jSSourceFile8.toString();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!3925862994319982200ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(jSSourceFile8);
        org.junit.Assert.assertNull(region10);
        org.junit.Assert.assertNull(str12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "/tmp/hi!3925862994319982200ISO" + "'", str14, "/tmp/hi!3925862994319982200ISO");
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter8 = new java.io.PrintWriter(file3, "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!7532738204821999233ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap4 = builder3.getAllFields();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(fieldDescriptorMap4);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location1 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream0);
        boolean boolean2 = location1.isInitialized();
        java.util.List<java.lang.Integer> intList3 = location1.getPathList();
        java.util.List<java.lang.Integer> intList4 = location1.getPathList();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto5 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean6 = methodDescriptorProto5.hasOutputType();
        byte[] byteArray7 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray7, extensionRegistryLite8);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance(byteArray7, (int) (short) 0, 1);
        methodDescriptorProto5.writeTo(codedOutputStream12);
        location1.writeTo(codedOutputStream12);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream12.writeTag(2, 4095);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(location1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(intList3);
        org.junit.Assert.assertNotNull(intList4);
        org.junit.Assert.assertNotNull(methodDescriptorProto5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(codedOutputStream12);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        boolean boolean2 = enumOptions1.isInitialized();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = enumOptions1.getRepeatedField(fieldDescriptor3, (int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        org.junit.Assert.assertNotNull(duration0);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray7 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter1.println(charArray7);
        printWriter1.flush();
        printWriter1.println((double) 0.0f);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , a, a, :]");
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        com.google.protobuf.ByteString byteString28 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto30 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString28, extensionRegistryLite29);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange31 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(byteString28);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder32 = builder27.mergeFrom(byteString28);
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder> builderList33 = builder27.getExtensionBuilderList();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteString28);
        org.junit.Assert.assertNotNull(fileDescriptorProto30);
        org.junit.Assert.assertNotNull(extensionRange31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builderList33);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getBaseUnit();
        java.time.LocalDateTime localDateTime21 = localDateTime11.plus((long) 1970, temporalUnit20);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.of(localDate6, localTime22, zoneOffset26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean33 = node32.isFromExterns();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean38 = node37.isFromExterns();
        java.lang.String str39 = node37.toString();
        com.google.javascript.rhino.Node node40 = node32.copyInformationFrom(node37);
        boolean boolean41 = zoneOffset26.equals((java.lang.Object) node37);
        node37.setSourceEncodedPositionForTree(42);
        java.lang.String str44 = node37.toString();
        boolean boolean45 = node37.isSyntheticBlock();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField19.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 52.0 0" + "'", str39, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER 52.0 0" + "'", str44, "NUMBER 52.0 0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime35 = localDateTime33.plusHours((long) 0);
        java.time.Instant instant36 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.OffsetDateTime offsetDateTime42 = java.time.OffsetDateTime.ofInstant(instant36, (java.time.ZoneId) zoneOffset40);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusDays((long) (short) 100);
        java.lang.String str45 = offsetDateTime42.toString();
        java.time.ZoneOffset zoneOffset46 = offsetDateTime42.getOffset();
        java.time.Instant instant47 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.OffsetDateTime offsetDateTime53 = java.time.OffsetDateTime.ofInstant(instant47, (java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.ofLocal(localDateTime33, (java.time.ZoneId) zoneOffset46, zoneOffset51);
        java.time.chrono.Chronology chronology55 = localDateTime33.getChronology();
        java.time.LocalDateTime localDateTime57 = localDateTime33.minusWeeks(76L);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str45, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_OBJECT_TYPE));
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility1);
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output3 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output3, (int) 'a');
        byte[] byteArray6 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions8 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray6, extensionRegistryLite7);
        output3.write(byteArray6);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder10 = builder1.mergeFrom(byteArray6);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = builder1.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder12 = builder1.addUninterpretedOptionBuilder();
        boolean boolean13 = builder12.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder12.setNegativeIntValue((long) 55);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder17 = builder12.setIdentifierValue("MethodDescriptorProto");
        boolean boolean18 = inetAddress0.equals((java.lang.Object) builder12);
        boolean boolean20 = inetAddress0.isReachable(1024);
        boolean boolean21 = inetAddress0.isMCOrgLocal();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(output3);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(methodOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setInlineVariables(true);
        compilerOptions0.aliasStringsBlacklist = "goog.global";
        compilerOptions0.setIgnoreCajaProperties(false);
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.lang.String str8 = uRI7.getSchemeSpecificPart();
        java.lang.String str9 = uRI7.getScheme();
        java.lang.String str10 = uRI7.getScheme();
        java.lang.String str11 = uRI7.getRawPath();
        java.net.URI uRI12 = uRI7.parseServerAuthority();
        java.io.File file15 = null;
        java.io.File file16 = java.io.File.createTempFile("hi!", "ISO", file15);
        boolean boolean19 = file16.setWritable(false, false);
        java.net.URI uRI20 = file16.toURI();
        java.lang.String str21 = uRI20.getSchemeSpecificPart();
        java.lang.String str22 = uRI20.getScheme();
        java.lang.String str23 = uRI20.getScheme();
        java.lang.String str24 = uRI20.getRawPath();
        java.net.URI uRI25 = uRI20.parseServerAuthority();
        java.net.URI uRI26 = uRI7.resolve(uRI20);
        int int27 = uRI7.getPort();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!3783385152280189129ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/tmp/hi!3783385152280189129ISO" + "'", str8, "/tmp/hi!3783385152280189129ISO");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "file" + "'", str9, "file");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "file" + "'", str10, "file");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "/tmp/hi!3783385152280189129ISO" + "'", str11, "/tmp/hi!3783385152280189129ISO");
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertEquals(file16.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file16.toString(), "/tmp/hi!1304079325398814668ISO");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(uRI20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "/tmp/hi!1304079325398814668ISO" + "'", str21, "/tmp/hi!1304079325398814668ISO");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "file" + "'", str22, "file");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "file" + "'", str23, "file");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "/tmp/hi!1304079325398814668ISO" + "'", str24, "/tmp/hi!1304079325398814668ISO");
        org.junit.Assert.assertNotNull(uRI25);
        org.junit.Assert.assertNotNull(uRI26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.Set<java.lang.String> strSet5 = strMap0.keySet();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        boolean boolean12 = strSet10.isEmpty();
        java.nio.ByteBuffer byteBuffer14 = java.nio.ByteBuffer.allocate(100);
        boolean boolean15 = strSet10.equals((java.lang.Object) byteBuffer14);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        boolean boolean22 = strSet20.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream23 = strSet20.stream();
        boolean boolean24 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet20);
        boolean boolean25 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat29 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions26.errorFormat = errorFormat29;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy31 = null;
        compilerOptions26.variableRenaming = variableRenamingPolicy31;
        compilerOptions26.setSummaryDetailLevel(999);
        boolean boolean35 = compilerOptions26.getInferTypes();
        boolean boolean36 = compilerOptions26.ideMode;
        compilerOptions26.setGroupVariableDeclarations(true);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap39 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet40 = strMap39.keySet();
        compilerOptions26.stripNameSuffixes = strSet40;
        boolean boolean42 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet40);
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(errorFormat29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.of((int) (short) 1, 31, (int) '4', (int) ':', (int) (short) 100, 4095);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 31");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        int int2 = com.google.protobuf.CodedOutputStream.computeSInt64Size((int) '\000', (long) 12);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder11 = builder7.setRepeatedField(fieldDescriptor8, 43, (java.lang.Object) "google.protobuf.FileOptions.OptimizeMode");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        compiler14.reportCodeChange();
        com.google.javascript.jscomp.CompilerOptions compilerOptions23 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions23.optimizeCalls = false;
        compilerOptions23.preferLineBreakAtEndOfFile = false;
        boolean boolean28 = compilerOptions23.markNoSideEffectCalls;
        boolean boolean29 = compilerOptions23.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions30 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        boolean boolean37 = strSet35.isEmpty();
        java.nio.ByteBuffer byteBuffer39 = java.nio.ByteBuffer.allocate(100);
        boolean boolean40 = strSet35.equals((java.lang.Object) byteBuffer39);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        boolean boolean47 = strSet45.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream48 = strSet45.stream();
        boolean boolean49 = strSet35.retainAll((java.util.Collection<java.lang.String>) strSet45);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions50 = dependencyOptions30.setEntryPoints((java.util.Collection<java.lang.String>) strSet35);
        compilerOptions23.setDependencyOptions(dependencyOptions30);
        com.google.javascript.jscomp.CheckLevel checkLevel52 = compilerOptions23.checkGlobalThisLevel;
        com.google.javascript.jscomp.DiagnosticType diagnosticType53 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray54 = null;
        com.google.javascript.jscomp.JSError jSError55 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", 37, (int) (byte) -1, checkLevel52, diagnosticType53, strArray54);
        int int56 = jSError55.getNodeLength();
        java.lang.String str57 = jSError55.description;
        int int58 = jSError55.lineNumber;
        com.google.javascript.jscomp.CheckLevel checkLevel59 = jSError55.getDefaultLevel();
        int int60 = jSError55.getNodeLength();
        compiler14.report(jSError55);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dependencyOptions50);
        org.junit.Assert.assertTrue("'" + checkLevel52 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel52.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType53);
        org.junit.Assert.assertNotNull(jSError55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Exceeded max number of code motion iterations: {0}" + "'", str57, "Exceeded max number of code motion iterations: {0}");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 37 + "'", int58 == 37);
        org.junit.Assert.assertTrue("'" + checkLevel59 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel59.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str1, "\ub3c5\uc77c\uc5b4");
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile8 = com.google.javascript.jscomp.JSSourceFile.fromFile(file3);
        com.google.javascript.jscomp.Region region10 = jSSourceFile8.getRegion(4095);
        java.lang.String str12 = jSSourceFile8.getLine(4095);
        int int14 = jSSourceFile8.getLineOfOffset((int) 'a');
        com.google.javascript.jscomp.Region region16 = jSSourceFile8.getRegion(16);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!6007708876878113079ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(jSSourceFile8);
        org.junit.Assert.assertNull(region10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(region16);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.JSSourceFile jSSourceFile2 = com.google.javascript.jscomp.JSSourceFile.fromInputStream("Big5", inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        java.lang.String str3 = sourceFile1.getLine((int) 'a');
        int int5 = sourceFile1.getLineOfOffset(43);
        com.google.javascript.jscomp.CompilerInput compilerInput6 = new com.google.javascript.jscomp.CompilerInput(sourceFile1);
        com.google.javascript.jscomp.SourceAst sourceAst7 = null;
        com.google.javascript.rhino.InputId inputId8 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput10 = new com.google.javascript.jscomp.CompilerInput(sourceAst7, inputId8, true);
        java.io.PrintStream printStream11 = null;
        com.google.javascript.jscomp.Compiler compiler12 = new com.google.javascript.jscomp.Compiler(printStream11);
        com.google.javascript.jscomp.ErrorManager errorManager13 = compiler12.getErrorManager();
        compilerInput10.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler12);
        com.google.javascript.jscomp.Scope scope15 = compiler12.getTopScope();
        java.lang.String str18 = compiler12.getSourceLine("US-ASCII", 0);
        com.google.javascript.jscomp.CodingConvention codingConvention19 = compiler12.getCodingConvention();
        int int20 = compiler12.getWarningCount();
        java.lang.String str21 = compiler12.toSource();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter22 = compiler12.getReverseAbstractInterpreter();
        com.google.javascript.rhino.Node node23 = compilerInput6.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler12);
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(errorManager13);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(codingConvention19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter22);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.checkSuspiciousCode = true;
        byte[] byteArray11 = compilerOptions0.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.optimizeCalls = false;
        compilerOptions12.preferLineBreakAtEndOfFile = false;
        boolean boolean17 = compilerOptions12.markNoSideEffectCalls;
        boolean boolean18 = compilerOptions12.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions19 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        boolean boolean26 = strSet24.isEmpty();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate(100);
        boolean boolean29 = strSet24.equals((java.lang.Object) byteBuffer28);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean36 = strSet34.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet34.stream();
        boolean boolean38 = strSet24.retainAll((java.util.Collection<java.lang.String>) strSet34);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions39 = dependencyOptions19.setEntryPoints((java.util.Collection<java.lang.String>) strSet24);
        compilerOptions12.setDependencyOptions(dependencyOptions19);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions12.checkGlobalThisLevel;
        compilerOptions0.checkMissingReturn = checkLevel41;
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat46 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions43.errorFormat = errorFormat46;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy48 = null;
        compilerOptions43.variableRenaming = variableRenamingPolicy48;
        compilerOptions43.setSummaryDetailLevel(999);
        boolean boolean52 = compilerOptions43.getInferTypes();
        boolean boolean53 = compilerOptions43.ideMode;
        compilerOptions43.setGroupVariableDeclarations(true);
        boolean boolean56 = compilerOptions43.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions57 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions57.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat60 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions57.errorFormat = errorFormat60;
        java.lang.String[] strArray68 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        compilerOptions57.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList69);
        compilerOptions57.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions74 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions74.setRecordFunctionInformation(true);
        compilerOptions74.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel79 = compilerOptions74.checkMissingGetCssNameLevel;
        compilerOptions57.setCheckProvides(checkLevel79);
        compilerOptions43.aggressiveVarCheck = checkLevel79;
        compilerOptions0.checkProvides = checkLevel79;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dependencyOptions39);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(errorFormat60);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + checkLevel79 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel79.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        java.io.InputStream inputStream6 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo8 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream6, extensionRegistryLite7);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder9 = sourceCodeInfo8.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet10 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder11 = builder9.setUnknownFields(unknownFieldSet10);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder13 = builder9.addLocationBuilder(0);
        java.io.File file16 = null;
        java.io.File file17 = java.io.File.createTempFile("hi!", "ISO", file16);
        boolean boolean20 = file17.setWritable(false, false);
        java.net.URI uRI21 = file17.toURI();
        java.io.PrintStream printStream22 = new java.io.PrintStream(file17);
        printStream22.print((int) (byte) 0);
        printStream22.print(10.0d);
        printStream22.close();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        boolean boolean34 = strSet32.isEmpty();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocate(100);
        boolean boolean37 = strSet32.equals((java.lang.Object) byteBuffer36);
        java.nio.IntBuffer intBuffer38 = byteBuffer36.asIntBuffer();
        double double39 = byteBuffer36.getDouble();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer36.put((int) (short) 1, (byte) 1);
        byte[] byteArray43 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions45 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray43, extensionRegistryLite44);
        com.google.protobuf.CodedOutputStream codedOutputStream48 = com.google.protobuf.CodedOutputStream.newInstance(byteArray43, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite49 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto50 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray43, extensionRegistryLite49);
        com.google.protobuf.CodedOutputStream codedOutputStream51 = com.google.protobuf.CodedOutputStream.newInstance(byteArray43);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer36.get(byteArray43);
        printStream22.write(byteArray43, (int) '/', (int) (byte) 1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder56 = builder13.mergeFrom(byteArray43);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder57 = builder4.setLocation(102, builder56);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 102, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file17.toString(), "/tmp/hi!3640720584411135774ISO");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intBuffer38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(methodOptions45);
        org.junit.Assert.assertNotNull(codedOutputStream48);
        org.junit.Assert.assertNotNull(fileDescriptorProto50);
        org.junit.Assert.assertNotNull(codedOutputStream51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor6 = builder5.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.EnumOptionsOrBuilder enumOptionsOrBuilder7 = builder5.getOptionsOrBuilder();
        boolean boolean8 = builder5.hasOptions();
        java.io.InputStream inputStream9 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        com.google.protobuf.UnknownFieldSet unknownFieldSet22 = builder17.getUnknownFields();
        byte[] byteArray23 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions25 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray23, extensionRegistryLite24);
        com.google.protobuf.CodedOutputStream codedOutputStream28 = com.google.protobuf.CodedOutputStream.newInstance(byteArray23, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto30 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray23, extensionRegistryLite29);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto32 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray23, extensionRegistryLite31);
        com.google.protobuf.UnknownFieldSet unknownFieldSet33 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray23);
        com.google.protobuf.ByteString byteString34 = unknownFieldSet33.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder36 = builder17.mergeFrom(byteString34, extensionRegistryLite35);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions37 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString34);
        com.google.protobuf.ByteString byteString38 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite39 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions40 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString38, extensionRegistryLite39);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label42 = builder41.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto43 = builder41.buildPartial();
        int int44 = fieldDescriptorProto43.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder45 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto43);
        java.io.InputStream inputStream46 = null;
        java.io.InputStream inputStream47 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location49 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream47, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder50 = builder45.mergeFrom(inputStream46, extensionRegistryLite48);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap51 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString38, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions52 = com.google.protobuf.DescriptorProtos.FileOptions.parseFrom(byteString34, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder53 = builder5.mergeFrom(inputStream9, extensionRegistryLite48);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(descriptor6);
        org.junit.Assert.assertNotNull(enumOptionsOrBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(unknownFieldSet22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(methodOptions25);
        org.junit.Assert.assertNotNull(codedOutputStream28);
        org.junit.Assert.assertNotNull(fileDescriptorProto30);
        org.junit.Assert.assertNotNull(serviceDescriptorProto32);
        org.junit.Assert.assertNotNull(unknownFieldSet33);
        org.junit.Assert.assertNotNull(byteString34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(fieldOptions37);
        org.junit.Assert.assertNotNull(byteString38);
        org.junit.Assert.assertNotNull(enumOptions40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + label42 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label42.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(extensionRegistryLite48);
        org.junit.Assert.assertNotNull(location49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(functionInformationMap51);
        org.junit.Assert.assertNotNull(fileOptions52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location> locationList5 = builder4.getLocationList();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locationList5);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray5 = new char[] { '/', '+', '/' };
        printWriter1.println(charArray5);
        printWriter1.flush();
        printWriter1.write((int) '4');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray15 = new char[] { '/', '+', '/' };
        printWriter11.println(charArray15);
        printWriter1.print(charArray15);
        printWriter1.println(12);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "/+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "/+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[/, +, /]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "/+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "/+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[/, +, /]");
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.Period period2 = period0.plusMonths(0L);
        boolean boolean3 = period2.isNegative();
        java.time.Period period5 = java.time.Period.ofWeeks((int) (byte) 10);
        java.time.Period period6 = period2.minus((java.time.temporal.TemporalAmount) period5);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.ByteString byteString4 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto5 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString4);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto7 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString4, extensionRegistryLite6);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString4, extensionRegistryLite8);
        java.io.InputStream inputStream10 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location12 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream10, extensionRegistryLite11);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder13 = builder3.mergeFrom(byteString4, extensionRegistryLite11);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder14 = builder3.clearUninterpretedOption();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(byteString4);
        org.junit.Assert.assertNotNull(methodDescriptorProto5);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto7);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(extensionRegistryLite11);
        org.junit.Assert.assertNotNull(location12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isThrow();
        boolean boolean6 = node3.isVarArgs();
        boolean boolean7 = node3.isStringKey();
        node3.setOptionalArg(true);
        int int10 = node3.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        java.util.List<java.lang.String> strList9 = fileDescriptorProto7.getDependencyList();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.optimizeCalls = false;
        compilerOptions3.preferLineBreakAtEndOfFile = false;
        boolean boolean8 = compilerOptions3.markNoSideEffectCalls;
        boolean boolean9 = compilerOptions3.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions10 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate(100);
        boolean boolean20 = strSet15.equals((java.lang.Object) byteBuffer19);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        boolean boolean27 = strSet25.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream28 = strSet25.stream();
        boolean boolean29 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet25);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions30 = dependencyOptions10.setEntryPoints((java.util.Collection<java.lang.String>) strSet15);
        compilerOptions3.setDependencyOptions(dependencyOptions10);
        com.google.javascript.jscomp.CheckLevel checkLevel32 = compilerOptions3.checkGlobalThisLevel;
        com.google.javascript.jscomp.DiagnosticType diagnosticType33 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray34 = null;
        com.google.javascript.jscomp.JSError jSError35 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", 37, (int) (byte) -1, checkLevel32, diagnosticType33, strArray34);
        java.lang.String str36 = diagnosticType33.toString();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup37 = com.google.javascript.jscomp.DiagnosticGroup.forType(diagnosticType33);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dependencyOptions30);
        org.junit.Assert.assertTrue("'" + checkLevel32 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel32.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType33);
        org.junit.Assert.assertNotNull(jSError35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of code motion iterations: {0}" + "'", str36, "JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of code motion iterations: {0}");
        org.junit.Assert.assertNotNull(diagnosticGroup37);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = strMap5.containsValue((java.lang.Object) '4');
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException14 = new java.net.URISyntaxException("hi!", "");
        boolean boolean15 = strMap11.containsKey((java.lang.Object) "");
        int int16 = strMap11.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap17 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet18 = strMap17.keySet();
        java.util.Set<java.lang.String> strSet19 = strMap17.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap20 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException23 = new java.net.URISyntaxException("hi!", "");
        boolean boolean24 = strMap20.containsKey((java.lang.Object) "");
        int int25 = strMap20.size();
        com.google.common.collect.ImmutableList<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapList26 = com.google.common.collect.ImmutableList.of(strMap0, strMap5, strMap11, strMap17, strMap20);
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap29 = strMap0.subMap("1970-01-01T00:00:00.000000032Z", "ClockHourOfAmPm");
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 171 + "'", int16 == 171);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 171 + "'", int25 == 171);
        org.junit.Assert.assertNotNull(strMapList26);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions12 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString7, extensionRegistryLite11);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions14 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString7, extensionRegistryLite13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions16 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString7, extensionRegistryLite15);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap17 = methodOptions16.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = methodOptions16.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumValueOptions12);
        org.junit.Assert.assertNotNull(messageOptions14);
        org.junit.Assert.assertNotNull(methodOptions16);
        org.junit.Assert.assertNotNull(fieldDescriptorMap17);
        org.junit.Assert.assertNotNull(methodOptions18);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.asReadOnlyBuffer();
        java.lang.String str3 = floatBuffer1.toString();
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer6 = floatBuffer5.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer5.duplicate();
        java.nio.FloatBuffer floatBuffer9 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer10 = floatBuffer9.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer11 = floatBuffer9.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder12 = floatBuffer11.order();
        boolean boolean13 = floatBuffer11.hasArray();
        java.nio.FloatBuffer floatBuffer14 = floatBuffer7.put(floatBuffer11);
        java.nio.FloatBuffer floatBuffer15 = floatBuffer1.put(floatBuffer7);
        java.nio.FloatBuffer floatBuffer17 = java.nio.FloatBuffer.allocate(6);
        float[] floatArray18 = floatBuffer17.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer21 = floatBuffer15.get(floatArray18, 365, 16384);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]" + "'", str3, "java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(floatBuffer6);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(floatBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertNotNull(byteOrder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(floatBuffer15);
        org.junit.Assert.assertNotNull(floatBuffer17);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        com.google.protobuf.Descriptors.FieldDescriptor.Type type0 = com.google.protobuf.Descriptors.FieldDescriptor.Type.DOUBLE;
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.Descriptors.FieldDescriptor.Type.DOUBLE + "'", type0.equals(com.google.protobuf.Descriptors.FieldDescriptor.Type.DOUBLE));
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        java.util.Date date3 = new java.util.Date((int) (short) 100, (int) (short) 0, (int) (byte) 0);
        java.util.Date date7 = new java.util.Date((int) (short) 100, (int) (short) 0, (int) (byte) 0);
        int int8 = date7.getHours();
        long long9 = date7.getTime();
        int int10 = date3.compareTo(date7);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Dec 31 00:00:00 UTC 1999");
        org.junit.Assert.assertEquals(date7.toString(), "Fri Dec 31 00:00:00 UTC 1999");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 946598400000L + "'", long9 == 946598400000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        boolean boolean3 = builder0.getJavaGenericServices();
        int int4 = builder0.getUninterpretedOptionCount();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder0.setJavaOuterClassname("// Input %num%");
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode7 = builder6.getOptimizeFor();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder9 = builder6.newBuilderForField(fieldDescriptor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + optimizeMode7 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode7.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        java.util.stream.LongStream longStream8 = longStream4.skip(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble9 = longStream4.average();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(longStream8);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        java.util.function.IntPredicate intPredicate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = intStream6.allMatch(intPredicate8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.CodedOutputStream codedOutputStream6 = com.google.protobuf.CodedOutputStream.newInstance(byteArray1, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto8 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray1, extensionRegistryLite7);
        com.google.protobuf.CodedOutputStream codedOutputStream9 = com.google.protobuf.CodedOutputStream.newInstance(byteArray1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto12 = builder10.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = fieldDescriptorProto12.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto12);
        java.io.File file17 = null;
        java.io.File file18 = java.io.File.createTempFile("hi!", "ISO", file17);
        boolean boolean21 = file18.setWritable(false, false);
        java.net.URI uRI22 = file18.toURI();
        java.io.PrintStream printStream23 = new java.io.PrintStream(file18);
        printStream23.print((int) (byte) 0);
        printStream23.print(10.0d);
        printStream23.close();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean35 = strSet33.isEmpty();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocate(100);
        boolean boolean38 = strSet33.equals((java.lang.Object) byteBuffer37);
        java.nio.IntBuffer intBuffer39 = byteBuffer37.asIntBuffer();
        double double40 = byteBuffer37.getDouble();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer37.put((int) (short) 1, (byte) 1);
        byte[] byteArray44 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite45 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions46 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray44, extensionRegistryLite45);
        com.google.protobuf.CodedOutputStream codedOutputStream49 = com.google.protobuf.CodedOutputStream.newInstance(byteArray44, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite50 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto51 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray44, extensionRegistryLite50);
        com.google.protobuf.CodedOutputStream codedOutputStream52 = com.google.protobuf.CodedOutputStream.newInstance(byteArray44);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer37.get(byteArray44);
        printStream23.write(byteArray44, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream57 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite58 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location59 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream57, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder60 = builder14.mergeFrom(byteArray44, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto61 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray1, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption62 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(inputStream0, extensionRegistryLite58);
        double double63 = uninterpretedOption62.getDoubleValue();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart> namePartList64 = uninterpretedOption62.getNameList();
        com.google.protobuf.ByteString byteString65 = uninterpretedOption62.getStringValue();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(codedOutputStream6);
        org.junit.Assert.assertNotNull(fileDescriptorProto8);
        org.junit.Assert.assertNotNull(codedOutputStream9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file18.toString(), "/tmp/hi!9071513328401793717ISO");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intBuffer39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(methodOptions46);
        org.junit.Assert.assertNotNull(codedOutputStream49);
        org.junit.Assert.assertNotNull(fileDescriptorProto51);
        org.junit.Assert.assertNotNull(codedOutputStream52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(extensionRegistryLite58);
        org.junit.Assert.assertNotNull(location59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(fileDescriptorProto61);
        org.junit.Assert.assertNotNull(uninterpretedOption62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(namePartList64);
        org.junit.Assert.assertNotNull(byteString65);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasIdentifierValue();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode3 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry12.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = objectType9.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType14);
        java.lang.String str16 = objectType14.getDisplayName();
        objectType14.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType14);
        boolean boolean19 = jSType18.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry25.createObjectType(objectType26);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry30.createObjectType(objectType31);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair33 = objectType27.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType32);
        java.lang.String str34 = objectType32.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection35 = jSTypeRegistry22.getDirectImplementors(objectType32);
        java.lang.String str36 = objectType32.toDebugHashCodeString();
        com.google.javascript.rhino.jstype.JSType jSType37 = jSType18.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType32);
        boolean boolean38 = jSType18.isFunctionType();
        org.junit.Assert.assertTrue("'" + resolveMode3 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode3.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(typePair15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(typePair33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(functionTypeCollection35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{1102485382}" + "'", str36, "{1102485382}");
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getBaseUnit();
        java.time.LocalDateTime localDateTime21 = localDateTime11.plus((long) 1970, temporalUnit20);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.of(localDate6, localTime22, zoneOffset26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean33 = node32.isFromExterns();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean38 = node37.isFromExterns();
        java.lang.String str39 = node37.toString();
        com.google.javascript.rhino.Node node40 = node32.copyInformationFrom(node37);
        boolean boolean41 = zoneOffset26.equals((java.lang.Object) node37);
        boolean boolean42 = node37.isVar();
        com.google.javascript.rhino.Node node43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node44 = node37.srcrefTree(node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField19.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 52.0 0" + "'", str39, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        com.google.protobuf.Descriptors.FieldDescriptor.JavaType javaType0 = com.google.protobuf.Descriptors.FieldDescriptor.JavaType.INT;
        org.junit.Assert.assertTrue("'" + javaType0 + "' != '" + com.google.protobuf.Descriptors.FieldDescriptor.JavaType.INT + "'", javaType0.equals(com.google.protobuf.Descriptors.FieldDescriptor.JavaType.INT));
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap2 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap3 = functionInformationMap2.getDefaultInstanceForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module module5 = functionInformationMap2.getModule(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(functionInformationMap2);
        org.junit.Assert.assertNotNull(functionInformationMap3);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        int int12 = codedInputStream10.setSizeLimit((int) '/');
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder13 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output15 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream17 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output15, (int) 'a');
        byte[] byteArray18 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions20 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray18, extensionRegistryLite19);
        output15.write(byteArray18);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder22 = builder13.mergeFrom(byteArray18);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList23 = builder22.getUninterpretedOptionBuilderList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList24 = builder22.getUninterpretedOptionList();
        java.io.InputStream inputStream25 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions26 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder27 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions26);
        java.io.InputStream inputStream28 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder29 = builder27.mergeFrom(inputStream28);
        com.google.protobuf.ByteString byteString30 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto31 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString30);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto33 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString30, extensionRegistryLite32);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions35 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString30, extensionRegistryLite34);
        java.io.InputStream inputStream36 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location38 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream36, extensionRegistryLite37);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder39 = builder29.mergeFrom(byteString30, extensionRegistryLite37);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder40 = builder22.mergeFrom(inputStream25, extensionRegistryLite37);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumOptions enumOptions41 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(codedInputStream10, extensionRegistryLite37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 67108864 + "'", int12 == 67108864);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(output15);
        org.junit.Assert.assertNotNull(codedOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(methodOptions20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builderList23);
        org.junit.Assert.assertNotNull(uninterpretedOptionList24);
        org.junit.Assert.assertNotNull(enumValueOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(byteString30);
        org.junit.Assert.assertNotNull(methodDescriptorProto31);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto33);
        org.junit.Assert.assertNotNull(methodOptions35);
        org.junit.Assert.assertNotNull(extensionRegistryLite37);
        org.junit.Assert.assertNotNull(location38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.lang.String str1 = isoChronology0.getId();
        java.time.Month month2 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology3 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month2);
        java.lang.String str4 = chronology3.toString();
        java.time.Instant instant5 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.OffsetDateTime offsetDateTime11 = java.time.OffsetDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.Clock clock23 = java.time.Clock.fixed(instant5, (java.time.ZoneId) zoneOffset20);
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = chronology3.dateNow(clock23);
        long long25 = clock23.millis();
        java.time.LocalDate localDate26 = isoChronology0.dateNow(clock23);
        java.time.OffsetDateTime offsetDateTime27 = java.time.OffsetDateTime.now(clock23);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISO" + "'", str1, "ISO");
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.APRIL + "'", month2.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISO" + "'", str4, "ISO");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder3.clearLocation();
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean11 = objectType9.isTemplateType();
        com.google.javascript.rhino.jstype.EnumType enumType12 = objectType9.toMaybeEnumType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = enumType12.getRootNode();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(enumType12);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        boolean boolean3 = builder0.getJavaGenericServices();
        boolean boolean4 = builder0.getJavaMultipleFiles();
        boolean boolean5 = builder0.getCcGenericServices();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean8 = strSet6.isEmpty();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocate(100);
        boolean boolean11 = strSet6.equals((java.lang.Object) byteBuffer10);
        java.nio.IntBuffer intBuffer12 = byteBuffer10.asIntBuffer();
        java.nio.CharBuffer charBuffer14 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer16 = charBuffer14.put('a');
        char[] charArray18 = new char[] { '4' };
        java.nio.CharBuffer charBuffer19 = charBuffer16.get(charArray18);
        java.nio.charset.CoderResult coderResult21 = charsetDecoder1.decode(byteBuffer10, charBuffer16, true);
        java.lang.String str22 = coderResult21.toString();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(coderResult21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "OVERFLOW" + "'", str22, "OVERFLOW");
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.identifyNonNullableName("/");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.jstype.ObjectType objectType16 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType17 = jSTypeRegistry15.createObjectType(objectType16);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair18 = objectType12.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType17);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry22.createObjectType(objectType23);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry27.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = objectType24.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.Node node31 = objectType24.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType32 = objectType24.toMaybeEnumType();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean37 = node36.isStringKey();
        boolean boolean38 = node36.isThrow();
        boolean boolean39 = node36.isVarArgs();
        boolean boolean40 = node36.isStringKey();
        boolean boolean41 = objectType17.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType24, node36);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry44.createObjectType(objectType45);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry49.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair52 = objectType46.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType51);
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry56.createObjectType(objectType57);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry61.createObjectType(objectType62);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair64 = objectType58.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType63);
        com.google.javascript.rhino.Node node65 = objectType58.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType66 = objectType58.toMaybeEnumType();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean71 = node70.isStringKey();
        boolean boolean72 = node70.isThrow();
        boolean boolean73 = node70.isVarArgs();
        boolean boolean74 = node70.isStringKey();
        boolean boolean75 = objectType51.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType58, node70);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair76 = objectType24.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType51);
        objectType51.clearResolved();
        jSTypeRegistry2.registerPropertyOnType("NUMBER 52.0", (com.google.javascript.rhino.jstype.JSType) objectType51);
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(objectType17);
        org.junit.Assert.assertNotNull(typePair18);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(typePair30);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(enumType32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(typePair52);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(typePair64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNull(enumType66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(typePair76);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder37 = builder35.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label39 = builder38.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder40 = builder35.addExtension(builder38);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder41 = builder35.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder42 = builder41.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions43 = builder42.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor44 = builder42.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder45 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output47 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream49 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output47, (int) 'a');
        byte[] byteArray50 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite51 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions52 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray50, extensionRegistryLite51);
        output47.write(byteArray50);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder54 = builder45.mergeFrom(byteArray50);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions55 = builder45.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder56 = builder45.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption57 = builder56.buildPartial();
        java.lang.String str58 = uninterpretedOption57.getIdentifierValue();
        int int59 = uninterpretedOption57.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder60 = builder42.addUninterpretedOption(uninterpretedOption57);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder61 = builder30.setOptions(builder42);
        com.google.protobuf.ByteString byteString62 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite63 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions64 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString62, extensionRegistryLite63);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder65 = builder30.setOptions(enumOptions64);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + label39 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label39.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(enumOptions43);
        org.junit.Assert.assertNotNull(descriptor44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(output47);
        org.junit.Assert.assertNotNull(codedOutputStream49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(methodOptions52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(methodOptions55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(uninterpretedOption57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(byteString62);
        org.junit.Assert.assertNotNull(enumOptions64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        byte[] byteArray5 = compilerOptions0.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode6 = compilerOptions0.getTracerMode();
        compilerOptions0.collapseProperties = false;
        boolean boolean9 = compilerOptions0.removeTryCatchFinally;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertTrue("'" + tracerMode6 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode6.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        compilerOptions0.setTightenTypes(true);
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray5, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap11 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray5);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto13 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray5, extensionRegistryLite12);
        compilerOptions0.setInputPropertyMapSerialized(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(codedInputStream10);
        org.junit.Assert.assertNotNull(variableMap11);
        org.junit.Assert.assertNotNull(enumDescriptorProto13);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException1 = new java.security.NoSuchAlgorithmException("1970-01-01");
        java.security.InvalidKeyException invalidKeyException3 = new java.security.InvalidKeyException();
        java.security.KeyException keyException4 = new java.security.KeyException("goog.abstractMethod", (java.lang.Throwable) invalidKeyException3);
        noSuchAlgorithmException1.addSuppressed((java.lang.Throwable) keyException4);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        long[] longArray5 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray5);
        java.nio.LongBuffer longBuffer7 = longBuffer6.asReadOnlyBuffer();
        int int8 = longBuffer6.arrayOffset();
        long[] longArray14 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer15 = java.nio.LongBuffer.wrap(longArray14);
        int int16 = longBuffer15.arrayOffset();
        int int17 = longBuffer6.compareTo(longBuffer15);
        boolean boolean18 = longBuffer6.isDirect();
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OffsetSeconds");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder7 = builder6.clone();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption9 = builder6.getUninterpretedOption(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        boolean boolean45 = strSet43.isEmpty();
        java.nio.ByteBuffer byteBuffer47 = java.nio.ByteBuffer.allocate(100);
        boolean boolean48 = strSet43.equals((java.lang.Object) byteBuffer47);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        boolean boolean55 = strSet53.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream56 = strSet53.stream();
        boolean boolean57 = strSet43.retainAll((java.util.Collection<java.lang.String>) strSet53);
        boolean boolean58 = appendableSet23.containsAll((java.util.Collection<java.lang.String>) strSet43);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) -1, (byte) 10 };
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray5, 39, (int) '+');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteArray5);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Protocol message contained an invalid tag (zero).");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(codedInputStream8);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto7 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(codedInputStream5, extensionRegistryLite6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertNotNull(extensionRegistryLite6);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setInlineVariables(true);
        compilerOptions0.removeUnusedVars = true;
        boolean boolean13 = compilerOptions0.removeUnusedLocalVars;
        compilerOptions0.inlineVariables = true;
        com.google.javascript.jscomp.CssRenamingMap cssRenamingMap16 = null;
        compilerOptions0.cssRenamingMap = cssRenamingMap16;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer3 = floatBuffer1.duplicate();
        float float4 = floatBuffer3.get();
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        byte[] byteArray7 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption10 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray7);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label12 = builder11.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto13 = builder11.buildPartial();
        int int14 = fieldDescriptorProto13.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto13);
        java.io.InputStream inputStream16 = null;
        java.io.InputStream inputStream17 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location19 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream17, extensionRegistryLite18);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder20 = builder15.mergeFrom(inputStream16, extensionRegistryLite18);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap21 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray7, extensionRegistryLite18);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder22 = builder4.mergeFrom(byteArray7);
        byte[] byteArray23 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions25 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray23, extensionRegistryLite24);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite26 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto27 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray23, extensionRegistryLite26);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto28 = enumDescriptorProto27.getDefaultInstanceForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder29 = builder22.mergeFrom((com.google.protobuf.Message) enumDescriptorProto28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mergeFrom(Message) can only merge messages of the same type.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(uninterpretedOption10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + label12 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label12.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(extensionRegistryLite18);
        org.junit.Assert.assertNotNull(location19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(functionInformationMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(methodOptions25);
        org.junit.Assert.assertNotNull(enumDescriptorProto27);
        org.junit.Assert.assertNotNull(enumDescriptorProto28);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder7 = builder6.clone();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder9 = builder7.getUninterpretedOptionBuilder(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = fieldDescriptorProto2.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        java.io.File file7 = null;
        java.io.File file8 = java.io.File.createTempFile("hi!", "ISO", file7);
        boolean boolean11 = file8.setWritable(false, false);
        java.net.URI uRI12 = file8.toURI();
        java.io.PrintStream printStream13 = new java.io.PrintStream(file8);
        printStream13.print((int) (byte) 0);
        printStream13.print(10.0d);
        printStream13.close();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean25 = strSet23.isEmpty();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocate(100);
        boolean boolean28 = strSet23.equals((java.lang.Object) byteBuffer27);
        java.nio.IntBuffer intBuffer29 = byteBuffer27.asIntBuffer();
        double double30 = byteBuffer27.getDouble();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer27.put((int) (short) 1, (byte) 1);
        byte[] byteArray34 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions36 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray34, extensionRegistryLite35);
        com.google.protobuf.CodedOutputStream codedOutputStream39 = com.google.protobuf.CodedOutputStream.newInstance(byteArray34, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto41 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray34, extensionRegistryLite40);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray34);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer27.get(byteArray34);
        printStream13.write(byteArray34, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream47 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location49 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream47, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder50 = builder4.mergeFrom(byteArray34, extensionRegistryLite48);
        java.lang.String str51 = builder50.getName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/tmp/hi!8368090351678300167ISO");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intBuffer29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(methodOptions36);
        org.junit.Assert.assertNotNull(codedOutputStream39);
        org.junit.Assert.assertNotNull(fileDescriptorProto41);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(extensionRegistryLite48);
        org.junit.Assert.assertNotNull(location49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream8 = intStream6.unordered();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        boolean boolean10 = builder2.hasOptions();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        java.time.temporal.ValueRange valueRange28 = localDate20.range((java.time.temporal.TemporalField) chronoField27);
        java.time.LocalDate localDate29 = java.time.LocalDate.now();
        java.lang.String str30 = localDate29.toString();
        java.time.LocalDate localDate31 = java.time.LocalDate.now();
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        int int37 = localDateTime36.getYear();
        java.time.LocalDate localDate38 = localDateTime36.toLocalDate();
        java.time.LocalDate localDate40 = localDate38.plusDays((long) '#');
        java.time.LocalDate localDate41 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod42 = localDate38.until((java.time.chrono.ChronoLocalDate) localDate41);
        java.time.Period period43 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod44 = period43.normalized();
        int int45 = period43.getYears();
        java.time.Period period46 = period43.negated();
        boolean boolean47 = period46.isNegative();
        java.time.LocalDate localDate48 = localDate38.minus((java.time.temporal.TemporalAmount) period46);
        com.google.common.collect.ImmutableSet<java.time.chrono.ChronoLocalDate> chronoLocalDateSet49 = com.google.common.collect.ImmutableSet.of((java.time.chrono.ChronoLocalDate) localDate20, (java.time.chrono.ChronoLocalDate) localDate29, (java.time.chrono.ChronoLocalDate) localDate31, (java.time.chrono.ChronoLocalDate) localDate48);
        int int50 = localDate29.lengthOfYear();
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset54);
        int int56 = localDateTime55.getYear();
        java.time.LocalDate localDate57 = localDateTime55.toLocalDate();
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        long long59 = localDateTime55.getLong((java.time.temporal.TemporalField) chronoField58);
        boolean boolean60 = chronoField58.isTimeBased();
        java.time.temporal.TemporalUnit temporalUnit61 = chronoField58.getBaseUnit();
        boolean boolean62 = localDate29.isSupported(temporalUnit61);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField27.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21" + "'", str30, "2022-02-21");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronoPeriod42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronoPeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronoLocalDateSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 365 + "'", int50 == 365);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField58.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit61 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit61.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        java.lang.String str0 = com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Not declared as a constructor" + "'", str0, "Not declared as a constructor");
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getId();
        java.time.Month month4 = java.time.Month.AUGUST;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.ZonedDateTime zonedDateTime15 = java.time.ZonedDateTime.of(localDateTime9, (java.time.ZoneId) zoneOffset13);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusSeconds((long) '#');
        java.time.OffsetDateTime offsetDateTime18 = zonedDateTime15.toOffsetDateTime();
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.plusNanos(3600000L);
        java.time.Instant instant21 = java.time.Instant.from((java.time.temporal.TemporalAccessor) offsetDateTime18);
        java.time.temporal.Temporal temporal22 = month4.adjustInto((java.time.temporal.Temporal) offsetDateTime18);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime23 = isoChronology2.zonedDateTime((java.time.temporal.TemporalAccessor) month4);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: AUGUST of type java.time.Month");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISO" + "'", str3, "ISO");
        org.junit.Assert.assertTrue("'" + month4 + "' != '" + java.time.Month.AUGUST + "'", month4.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(temporal22);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_MESSAGE;
        int int1 = type0.getNumber();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_MESSAGE + "'", type0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_MESSAGE));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        long long9 = file3.getUsableSpace();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!2250337241911296151ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 280501567488L + "'", long9 == 280501567488L);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate6 = isoChronology2.date(407, 35, 10);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 35");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        com.google.protobuf.UnknownFieldSet.Builder builder0 = com.google.protobuf.UnknownFieldSet.newBuilder();
        boolean boolean2 = builder0.hasField(100);
        com.google.protobuf.UnknownFieldSet.Builder builder3 = builder0.clone();
        java.io.InputStream inputStream4 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo6 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream4, extensionRegistryLite5);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder7 = sourceCodeInfo6.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet8 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder9 = builder7.setUnknownFields(unknownFieldSet8);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder11 = builder7.addLocationBuilder(0);
        java.io.File file14 = null;
        java.io.File file15 = java.io.File.createTempFile("hi!", "ISO", file14);
        boolean boolean18 = file15.setWritable(false, false);
        java.net.URI uRI19 = file15.toURI();
        java.io.PrintStream printStream20 = new java.io.PrintStream(file15);
        printStream20.print((int) (byte) 0);
        printStream20.print(10.0d);
        printStream20.close();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean32 = strSet30.isEmpty();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocate(100);
        boolean boolean35 = strSet30.equals((java.lang.Object) byteBuffer34);
        java.nio.IntBuffer intBuffer36 = byteBuffer34.asIntBuffer();
        double double37 = byteBuffer34.getDouble();
        java.nio.ByteBuffer byteBuffer40 = byteBuffer34.put((int) (short) 1, (byte) 1);
        byte[] byteArray41 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite42 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions43 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray41, extensionRegistryLite42);
        com.google.protobuf.CodedOutputStream codedOutputStream46 = com.google.protobuf.CodedOutputStream.newInstance(byteArray41, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite47 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto48 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray41, extensionRegistryLite47);
        com.google.protobuf.CodedOutputStream codedOutputStream49 = com.google.protobuf.CodedOutputStream.newInstance(byteArray41);
        java.nio.ByteBuffer byteBuffer50 = byteBuffer34.get(byteArray41);
        printStream20.write(byteArray41, (int) '/', (int) (byte) 1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder54 = builder11.mergeFrom(byteArray41);
        int int55 = builder54.getPathCount();
        java.time.Instant instant56 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset60);
        java.time.OffsetDateTime offsetDateTime62 = java.time.OffsetDateTime.ofInstant(instant56, (java.time.ZoneId) zoneOffset60);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset66);
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset71);
        java.time.ZonedDateTime zonedDateTime73 = java.time.ZonedDateTime.of(localDateTime67, (java.time.ZoneId) zoneOffset71);
        java.time.Clock clock74 = java.time.Clock.fixed(instant56, (java.time.ZoneId) zoneOffset71);
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.now(clock74);
        java.time.LocalDate localDate76 = java.time.LocalDate.now(clock74);
        com.google.protobuf.Descriptors.Descriptor descriptor77 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto78 = descriptor77.toProto();
        boolean boolean79 = descriptorProto78.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList80 = descriptorProto78.getNestedTypeList();
        int int81 = descriptorProto78.getExtensionRangeCount();
        boolean boolean82 = localDate76.equals((java.lang.Object) descriptorProto78);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder83 = descriptorProto78.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList84 = builder83.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet85 = builder83.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder86 = builder83.addEnumTypeBuilder();
        byte[] byteArray87 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite88 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions89 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray87, extensionRegistryLite88);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite90 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto91 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray87, extensionRegistryLite90);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto92 = enumDescriptorProto91.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder93 = builder83.addEnumType(enumDescriptorProto92);
        com.google.protobuf.ByteString byteString94 = enumDescriptorProto92.toByteString();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder95 = builder54.mergeFrom(byteString94);
        com.google.protobuf.UnknownFieldSet.Builder builder96 = builder0.mergeFrom(byteString94);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(sourceCodeInfo6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(file15);
        org.junit.Assert.assertEquals(file15.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file15.toString(), "/tmp/hi!4624205008690038809ISO");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(uRI19);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intBuffer36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(methodOptions43);
        org.junit.Assert.assertNotNull(codedOutputStream46);
        org.junit.Assert.assertNotNull(fileDescriptorProto48);
        org.junit.Assert.assertNotNull(codedOutputStream49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertNotNull(clock74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(descriptor77);
        org.junit.Assert.assertNotNull(descriptorProto78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(descriptorProtoList84);
        org.junit.Assert.assertNotNull(unknownFieldSet85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(methodOptions89);
        org.junit.Assert.assertNotNull(enumDescriptorProto91);
        org.junit.Assert.assertNotNull(enumDescriptorProto92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(byteString94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = builder4.clearCcGenericServices();
        boolean boolean6 = builder4.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder8 = builder4.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label10 = builder9.getLabel();
        com.google.protobuf.ByteString byteString11 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = builder9.mergeFrom(byteString11);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder14 = builder8.mergeFrom(byteString11, extensionRegistryLite13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions16 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString11, extensionRegistryLite15);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder17 = builder3.mergeFrom(enumValueOptions16);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList18 = builder17.getUninterpretedOptionList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder20 = builder17.removeUninterpretedOption(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + label10 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label10.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(enumValueOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(uninterpretedOptionList18);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder14 = builder11.setNegativeIntValue((long) 55);
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = builder14.mergeDelimitedFrom(inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasLineNumber();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.ObjectType> objectTypeList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(objectTypeList0);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        boolean boolean3 = compilerOptions0.checkControlStructures;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setAssumeStrictThis(true);
        compilerOptions0.checkSymbols = false;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setType(type4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label7 = builder6.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto8 = builder6.buildPartial();
        int int9 = fieldDescriptorProto8.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto10 = fieldDescriptorProto8.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = builder5.mergeFrom(fieldDescriptorProto10);
        boolean boolean12 = builder11.hasExtendee();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto13 = builder11.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES + "'", type4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + label7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label7.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(fieldDescriptorProto10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fieldDescriptorProto13);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        boolean boolean24 = charBuffer22.isDirect();
        java.nio.CharBuffer charBuffer25 = charBuffer22.compact();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charBuffer25);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer15 = charBuffer3.slice();
        char[] charArray20 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer15.get(charArray20);
        java.nio.CharBuffer charBuffer24 = charBuffer22.append((java.lang.CharSequence) "+00:00:52");
        java.nio.CharBuffer charBuffer26 = charBuffer24.append('/');
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charBuffer26);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder1 = builder0.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.clearService();
        java.lang.String str3 = builder2.getPackage();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setType(type4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label7 = builder6.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto8 = builder6.buildPartial();
        int int9 = fieldDescriptorProto8.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto10 = fieldDescriptorProto8.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = builder5.mergeFrom(fieldDescriptorProto10);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor12 = null;
        java.time.Instant instant14 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime15 = java.nio.file.attribute.FileTime.from(instant14);
        java.util.concurrent.TimeUnit timeUnit16 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long17 = fileTime15.to(timeUnit16);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = builder5.setRepeatedField(fieldDescriptor12, 16384, (java.lang.Object) fileTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES + "'", type4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + label7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label7.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(fieldDescriptorProto10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(fileTime15);
        org.junit.Assert.assertNotNull(timeUnit16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = objectType4.getJSDocInfo();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean16 = node15.isFromExterns();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean21 = node20.isFromExterns();
        java.lang.String str22 = node20.toString();
        com.google.javascript.rhino.Node node23 = node15.copyInformationFrom(node20);
        int int24 = node15.getLineno();
        boolean boolean25 = objectType4.equals((java.lang.Object) node15);
        boolean boolean26 = node15.isSyntheticBlock();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(jSDocInfo11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER 52.0 0" + "'", str22, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: ");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.EnumValueOptionsOrBuilder enumValueOptionsOrBuilder4 = builder0.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder0.clear();
        java.lang.String str6 = builder0.getName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(enumValueOptionsOrBuilder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setInlineVariables(true);
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        com.google.protobuf.CodedOutputStream codedOutputStream16 = com.google.protobuf.CodedOutputStream.newInstance(byteArray11, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream19 = com.google.protobuf.CodedOutputStream.newInstance(byteArray11, (int) ' ', 0);
        compilerOptions0.inputVariableMapSerialized = byteArray11;
        compilerOptions0.setTightenTypes(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(codedOutputStream16);
        org.junit.Assert.assertNotNull(codedOutputStream19);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering0 = com.google.common.collect.Ordering.natural();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering1 = optimizeModeOrdering0.reverse();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering2 = com.google.common.collect.Ordering.natural();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering3 = optimizeModeOrdering2.reverse();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering4 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode5 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode6 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode7 = optimizeModeOrdering4.min(optimizeMode5, optimizeMode6);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode8 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode9 = optimizeModeOrdering3.max(optimizeMode5, optimizeMode8);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder11 = builder10.clearCcGenericServices();
        boolean boolean12 = builder10.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder14 = builder10.setJavaOuterClassname("hi!");
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode15 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder16 = builder14.setOptimizeFor(optimizeMode15);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode17 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor18 = optimizeMode17.getDescriptorForType();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering19 = com.google.common.collect.Ordering.natural();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering20 = optimizeModeOrdering19.reverse();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering21 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode22 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode23 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode24 = optimizeModeOrdering21.min(optimizeMode22, optimizeMode23);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode25 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode26 = optimizeModeOrdering20.max(optimizeMode22, optimizeMode25);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder27 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions28 = builder27.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder30 = builder27.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder31 = builder30.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode32 = builder31.getOptimizeFor();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering33 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode34 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode35 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode36 = optimizeModeOrdering33.min(optimizeMode34, optimizeMode35);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode[] optimizeModeArray37 = new com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode[] { optimizeMode26, optimizeMode32, optimizeMode36 };
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode38 = optimizeModeOrdering1.min(optimizeMode9, optimizeMode15, optimizeMode17, optimizeModeArray37);
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering39 = optimizeModeOrdering1.nullsFirst();
        org.junit.Assert.assertNotNull(optimizeModeOrdering0);
        org.junit.Assert.assertNotNull(optimizeModeOrdering1);
        org.junit.Assert.assertNotNull(optimizeModeOrdering2);
        org.junit.Assert.assertNotNull(optimizeModeOrdering3);
        org.junit.Assert.assertNotNull(optimizeModeOrdering4);
        org.junit.Assert.assertTrue("'" + optimizeMode5 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode5.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode6 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode6.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode7 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode7.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode8 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode8.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertTrue("'" + optimizeMode9 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode9.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + optimizeMode15 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode15.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + optimizeMode17 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode17.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(enumDescriptor18);
        org.junit.Assert.assertNotNull(optimizeModeOrdering19);
        org.junit.Assert.assertNotNull(optimizeModeOrdering20);
        org.junit.Assert.assertNotNull(optimizeModeOrdering21);
        org.junit.Assert.assertTrue("'" + optimizeMode22 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode22.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode23 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode23.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode24 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode24.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode25 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode25.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertTrue("'" + optimizeMode26 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode26.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fileOptions28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + optimizeMode32 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode32.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(optimizeModeOrdering33);
        org.junit.Assert.assertTrue("'" + optimizeMode34 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode34.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode35 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode35.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode36 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode36.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(optimizeModeArray37);
        org.junit.Assert.assertTrue("'" + optimizeMode38 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode38.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(optimizeModeOrdering39);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer15 = charBuffer3.slice();
        char[] charArray20 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer15.get(charArray20);
        boolean boolean23 = charBuffer22.isDirect();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasIsExtension();
        boolean boolean2 = namePart0.getIsExtension();
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.LocalTime localTime10 = offsetDateTime6.toLocalTime();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        int int16 = localDateTime15.getYear();
        java.time.Instant instant17 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant17, (java.time.ZoneId) zoneOffset21);
        java.time.Instant instant24 = localDateTime15.toInstant(zoneOffset21);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.of(localDateTime30, (java.time.ZoneId) zoneOffset34);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        java.time.LocalDateTime localDateTime40 = localDateTime30.plus((long) 1970, temporalUnit39);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset50);
        java.time.ZonedDateTime zonedDateTime52 = java.time.ZonedDateTime.of(localDateTime46, (java.time.ZoneId) zoneOffset50);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField54.getBaseUnit();
        java.time.LocalDateTime localDateTime56 = localDateTime46.plus((long) 1970, temporalUnit55);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime57 = localDateTime40.minus((long) 43, temporalUnit55);
        java.time.Instant instant58 = instant24.plus((long) 16384, temporalUnit55);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset62);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset67);
        java.time.ZonedDateTime zonedDateTime69 = java.time.ZonedDateTime.of(localDateTime63, (java.time.ZoneId) zoneOffset67);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime69.withHour(16);
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset75);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset80);
        java.time.ZonedDateTime zonedDateTime82 = java.time.ZonedDateTime.of(localDateTime76, (java.time.ZoneId) zoneOffset80);
        java.time.ZonedDateTime zonedDateTime84 = zonedDateTime82.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField85 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit86 = chronoField85.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime87 = zonedDateTime82.truncatedTo(temporalUnit86);
        long long88 = instant24.until((java.time.temporal.Temporal) zonedDateTime71, temporalUnit86);
        int int89 = zonedDateTime71.getSecond();
        java.time.ZoneOffset zoneOffset90 = zonedDateTime71.getOffset();
        java.time.OffsetTime offsetTime91 = java.time.OffsetTime.of(localTime10, zoneOffset90);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField38.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField54.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zonedDateTime82);
        org.junit.Assert.assertNotNull(zonedDateTime84);
        org.junit.Assert.assertTrue("'" + chronoField85 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField85.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit86 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit86.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 16L + "'", long88 == 16L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 32 + "'", int89 == 32);
        org.junit.Assert.assertNotNull(zoneOffset90);
        org.junit.Assert.assertNotNull(offsetTime91);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        boolean boolean37 = builder30.hasName();
        int int38 = builder30.getExtensionRangeCount();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder40 = builder30.getEnumTypeBuilder(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        boolean boolean4 = builder2.hasOptions();
        int int5 = builder2.getMessageTypeCount();
        com.google.protobuf.UnknownFieldSet unknownFieldSet6 = builder2.getUnknownFields();
        boolean boolean7 = builder2.hasOptions();
        java.util.List<java.lang.String> strList8 = builder2.getDependencyList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto10 = builder2.getService(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 16");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(unknownFieldSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        java.util.Date date3 = new java.util.Date((int) (byte) -1, 43, 16384);
        date3.setMonth(0);
        date3.setDate(42);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 11 00:00:00 UTC 1947");
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions0 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList1 = fileOptions0.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions2 = fileOptions0.getDefaultInstanceForType();
        com.google.protobuf.ByteString byteString3 = fileOptions2.toByteString();
        boolean boolean4 = fileOptions2.hasJavaPackage();
        org.junit.Assert.assertNotNull(fileOptions0);
        org.junit.Assert.assertNotNull(uninterpretedOptionList1);
        org.junit.Assert.assertNotNull(fileOptions2);
        org.junit.Assert.assertNotNull(byteString3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.lang.String str8 = uRI7.getRawSchemeSpecificPart();
        java.io.File file11 = null;
        java.io.File file12 = java.io.File.createTempFile("hi!", "ISO", file11);
        boolean boolean15 = file12.setWritable(false, false);
        java.net.URI uRI16 = file12.toURI();
        java.lang.String str17 = uRI16.getSchemeSpecificPart();
        java.lang.String str18 = uRI16.getScheme();
        java.lang.String str19 = uRI16.getScheme();
        java.lang.String str20 = uRI16.getRawPath();
        java.net.URI uRI21 = uRI16.parseServerAuthority();
        java.io.File file24 = null;
        java.io.File file25 = java.io.File.createTempFile("hi!", "ISO", file24);
        boolean boolean28 = file25.setWritable(false, false);
        java.net.URI uRI29 = file25.toURI();
        java.lang.String str30 = uRI29.getSchemeSpecificPart();
        java.lang.String str31 = uRI29.getScheme();
        java.lang.String str32 = uRI29.getScheme();
        java.lang.String str33 = uRI29.getRawPath();
        java.net.URI uRI34 = uRI29.parseServerAuthority();
        java.net.URI uRI35 = uRI16.resolve(uRI29);
        java.net.URI uRI36 = uRI7.relativize(uRI16);
        java.lang.String str37 = uRI16.getRawFragment();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!721123691356967708ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/tmp/hi!721123691356967708ISO" + "'", str8, "/tmp/hi!721123691356967708ISO");
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/tmp/hi!1355050172163310053ISO");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(uRI16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/tmp/hi!1355050172163310053ISO" + "'", str17, "/tmp/hi!1355050172163310053ISO");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "file" + "'", str18, "file");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "file" + "'", str19, "file");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/tmp/hi!1355050172163310053ISO" + "'", str20, "/tmp/hi!1355050172163310053ISO");
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/tmp/hi!3663730012178194221ISO");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(uRI29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/tmp/hi!3663730012178194221ISO" + "'", str30, "/tmp/hi!3663730012178194221ISO");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "file" + "'", str31, "file");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "file" + "'", str32, "file");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "/tmp/hi!3663730012178194221ISO" + "'", str33, "/tmp/hi!3663730012178194221ISO");
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertNotNull(uRI35);
        org.junit.Assert.assertNotNull(uRI36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream.Builder builder1 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream.Builder builder3 = builder1.add((double) 15);
        java.util.function.DoubleConsumer doubleConsumer4 = builder0.andThen((java.util.function.DoubleConsumer) builder1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(doubleConsumer4);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        boolean boolean7 = builder6.getPyGenericServices();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = builder8.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder19 = builder8.addUninterpretedOptionBuilder();
        boolean boolean20 = builder19.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder21 = builder6.addUninterpretedOption(builder19);
        long long22 = builder19.getPositiveIntValue();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto37 = builder30.buildPartial();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(descriptorProto37);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset6);
        int int8 = localDateTime7.getYear();
        boolean boolean9 = chronoField2.isSupportedBy((java.time.temporal.TemporalAccessor) localDateTime7);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate10 = localDate0.with((java.time.temporal.TemporalAdjuster) localDateTime7);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField2.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder2 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean3 = builder2.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry4 = builder2.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.mergeFrom(entry4);
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder7 = builder5.setCompiledSource("{634185401}");
        java.lang.String str8 = builder7.getSourceName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entry4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = compilerOptions0.getTracerMode();
        compilerOptions0.setRuntimeTypeCheckLogFunction("hi!");
        com.google.javascript.jscomp.ErrorFormat errorFormat10 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat10;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(errorFormat10);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ByteString byteString1 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions3 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label5 = builder4.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto6 = builder4.buildPartial();
        int int7 = fieldDescriptorProto6.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto6);
        java.io.InputStream inputStream9 = null;
        java.io.InputStream inputStream10 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location12 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream10, extensionRegistryLite11);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder8.mergeFrom(inputStream9, extensionRegistryLite11);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap14 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString1, extensionRegistryLite11);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions15 = com.google.protobuf.DescriptorProtos.FieldOptions.parseDelimitedFrom(inputStream0, extensionRegistryLite11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteString1);
        org.junit.Assert.assertNotNull(enumOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + label5 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label5.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(extensionRegistryLite11);
        org.junit.Assert.assertNotNull(location12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(functionInformationMap14);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry20.createObjectType(objectType21);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry25.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair28 = objectType22.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType27);
        com.google.javascript.rhino.Node node29 = objectType22.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry32.createObjectType(objectType33);
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35, false);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry37.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair40 = objectType34.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = objectType22.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType34);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry2.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType34, "1970-01-01T00:00:52+00:00:52", "goog.abstractMethod", (int) ':', (int) (byte) -1);
        com.google.javascript.rhino.jstype.FunctionType functionType47 = objectType34.getConstructor();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(typePair28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(typePair40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNull(functionType47);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption3 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray0);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label5 = builder4.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto6 = builder4.buildPartial();
        int int7 = fieldDescriptorProto6.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto6);
        java.io.InputStream inputStream9 = null;
        java.io.InputStream inputStream10 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location12 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream10, extensionRegistryLite11);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder8.mergeFrom(inputStream9, extensionRegistryLite11);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap14 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray0, extensionRegistryLite11);
        int int15 = functionInformationMap14.getSerializedSize();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(uninterpretedOption3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + label5 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label5.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(extensionRegistryLite11);
        org.junit.Assert.assertNotNull(location12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(functionInformationMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        compilerOptions0.setCheckCaja(false);
        compilerOptions0.setDefineToBooleanLiteral("/tmp/hi!4516073975838273390ISO", false);
        compilerOptions0.setRecordFunctionInformation(false);
        compilerOptions0.extractPrototypeMemberDeclarations = true;
        boolean boolean22 = compilerOptions0.flowSensitiveInlineVariables;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo0.getDescriptionForParameter("iso8601");
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy0 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED;
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy0 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED + "'", anonymousFunctionNamingPolicy0.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.MAPPED));
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange> extensionRangeList30 = builder29.getExtensionRangeList();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(extensionRangeList30);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto6 = builder5.build();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions7 = enumDescriptorProto6.getOptions();
        java.io.PrintStream printStream9 = new java.io.PrintStream("/tmp/hi!8124327631164534562ISO");
        enumDescriptorProto6.writeTo((java.io.OutputStream) printStream9);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream9, true);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumDescriptorProto6);
        org.junit.Assert.assertNotNull(enumOptions7);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder10 = builder6.mergeOptions(methodOptions9);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap11 = builder10.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions12 = builder10.getOptions();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder13.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label17 = builder16.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = builder13.addExtension(builder16);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder19 = builder13.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder19.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder23 = builder21.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder24 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label25 = builder24.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder26 = builder21.addExtension(builder24);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder27 = builder21.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder27.getOptionsBuilder();
        java.io.InputStream inputStream29 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions30 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream29);
        boolean boolean31 = enumOptions30.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder32 = builder28.mergeFrom(enumOptions30);
        com.google.protobuf.UnknownFieldSet unknownFieldSet33 = builder28.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream34 = null;
        unknownFieldSet33.writeTo(codedOutputStream34);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder36 = builder20.setUnknownFields(unknownFieldSet33);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto37 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean38 = methodDescriptorProto37.hasOutputType();
        byte[] byteArray39 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions41 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray39, extensionRegistryLite40);
        com.google.protobuf.CodedOutputStream codedOutputStream44 = com.google.protobuf.CodedOutputStream.newInstance(byteArray39, (int) (short) 0, 1);
        methodDescriptorProto37.writeTo(codedOutputStream44);
        unknownFieldSet33.writeTo(codedOutputStream44);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder47 = builder10.mergeUnknownFields(unknownFieldSet33);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto48 = builder10.buildPartial();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fieldDescriptorMap11);
        org.junit.Assert.assertNotNull(methodOptions12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + label17 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label17.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + label25 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label25.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(enumOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(unknownFieldSet33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(methodDescriptorProto37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(methodOptions41);
        org.junit.Assert.assertNotNull(codedOutputStream44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(methodDescriptorProto48);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        java.util.Date date3 = new java.util.Date((int) (short) 100, (int) (short) 0, (int) (byte) 0);
        int int4 = date3.getHours();
        long long5 = date3.getTime();
        int int6 = date3.getDate();
        org.junit.Assert.assertEquals(date3.toString(), "Fri Dec 31 00:00:00 UTC 1999");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 946598400000L + "'", long5 == 946598400000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        int int7 = codedInputStream5.pushLimit((int) 'a');
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = builder11.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label15 = builder14.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder16 = builder11.addExtension(builder14);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder17 = builder11.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions18 = builder17.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder19 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output21 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output21, (int) 'a');
        byte[] byteArray24 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions26 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray24, extensionRegistryLite25);
        output21.write(byteArray24);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder28 = builder19.mergeFrom(byteArray24);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder29 = builder17.mergeFrom(byteArray24);
        compilerOptions8.setInputVariableMapSerialized(byteArray24);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto32 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray24, extensionRegistryLite31);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = builder33.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder36 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label37 = builder36.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder38 = builder33.addExtension(builder36);
        boolean boolean39 = builder36.hasDefaultValue();
        java.io.InputStream inputStream40 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder42 = builder36.mergeFrom(inputStream40, extensionRegistryLite41);
        java.io.InputStream inputStream43 = null;
        java.io.InputStream inputStream44 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite45 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location46 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream44, extensionRegistryLite45);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder47 = builder42.mergeFrom(inputStream43, extensionRegistryLite45);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location48 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray24, extensionRegistryLite45);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodOptions methodOptions49 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(codedInputStream5, extensionRegistryLite45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + label15 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label15.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(output21);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(methodOptions26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(enumDescriptorProto32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + label37 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label37.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(extensionRegistryLite45);
        org.junit.Assert.assertNotNull(location46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(location48);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions30 = builder27.getOptions();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder34 = builder32.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = builder34.addEnumTypeBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder27.setEnumType(4096, builder35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4096, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(messageOptions30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.unordered();
        java.util.OptionalDouble optionalDouble8 = doubleStream7.min();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble8);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        int int2 = com.google.protobuf.CodedOutputStream.computeDoubleSize((int) (byte) -1, 100.0d);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 13 + "'", int2 == 13);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location1 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream0);
        java.util.List<java.lang.Integer> intList2 = location1.getSpanList();
        org.junit.Assert.assertNotNull(location1);
        org.junit.Assert.assertNotNull(intList2);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder29 = builder28.clone();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder31 = builder29.removeUninterpretedOption(4096);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4096, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.putInt((int) ':');
        java.nio.ByteBuffer byteBuffer13 = byteBuffer11.put((byte) -1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(byteBuffer13);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder5 = builder2.getMethodBuilder(64);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 64, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.rhino.InputId inputId4 = compilerInput3.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst5 = null;
        com.google.javascript.rhino.InputId inputId6 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput8 = new com.google.javascript.jscomp.CompilerInput(sourceAst5, inputId6, true);
        java.io.PrintStream printStream9 = null;
        com.google.javascript.jscomp.Compiler compiler10 = new com.google.javascript.jscomp.Compiler(printStream9);
        com.google.javascript.jscomp.ErrorManager errorManager11 = compiler10.getErrorManager();
        compilerInput8.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        com.google.javascript.jscomp.Scope scope13 = compiler10.getTopScope();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CompilerInput compilerInput17 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3, "WARNING", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId4);
        org.junit.Assert.assertNotNull(errorManager11);
        org.junit.Assert.assertNull(scope13);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = compilerOptions0.getTracerMode();
        compilerOptions0.setCrossModuleMethodMotion(false);
        boolean boolean10 = compilerOptions0.disambiguateProperties;
        compilerOptions0.generateExports = true;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        boolean boolean1 = localDate0.isLeapYear();
        java.time.chrono.Era era2 = localDate0.getEra();
        java.time.LocalDate localDate4 = localDate0.withDayOfYear(5);
        java.time.LocalDate localDate5 = java.time.LocalDate.now();
        java.lang.String str6 = localDate5.toString();
        java.time.chrono.IsoChronology isoChronology7 = localDate5.getChronology();
        java.lang.String str8 = isoChronology7.getId();
        java.time.chrono.ChronoPeriod chronoPeriod12 = isoChronology7.period(1970, (int) (short) 10, (int) (short) 0);
        java.time.LocalDate localDate13 = localDate0.minus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.LocalDate localDate15 = localDate0.minusYears((long) '4');
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + era2 + "' != '" + java.time.chrono.IsoEra.CE + "'", era2.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21" + "'", str6, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        long[] longArray5 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray5);
        java.nio.LongBuffer longBuffer7 = longBuffer6.asReadOnlyBuffer();
        java.lang.String str8 = longBuffer7.toString();
        long[] longArray14 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer15 = java.nio.LongBuffer.wrap(longArray14);
        long[] longArray16 = longBuffer15.array();
        java.nio.LongBuffer longBuffer17 = longBuffer7.get(longArray16);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.nio.HeapLongBufferR[pos=0 lim=5 cap=5]" + "'", str8, "java.nio.HeapLongBufferR[pos=0 lim=5 cap=5]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer17);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        boolean boolean7 = builder6.getPyGenericServices();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = builder8.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder19 = builder8.addUninterpretedOptionBuilder();
        boolean boolean20 = builder19.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder21 = builder6.addUninterpretedOption(builder19);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = builder6.hasField(fieldDescriptor22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry9.createObjectType(objectType10);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType16);
        com.google.javascript.rhino.Node node18 = objectType11.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry21.createObjectType(objectType22);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair29 = objectType23.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = objectType11.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType11);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot33 = objectType11.getOwnSlot("goog.exportProperty");
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(typePair29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNull(jSTypeStaticSlot33);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        boolean boolean6 = builder3.hasDefaultValue();
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = builder3.mergeFrom(inputStream7, extensionRegistryLite8);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location13 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream11, extensionRegistryLite12);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = builder9.mergeFrom(inputStream10, extensionRegistryLite12);
        boolean boolean15 = builder9.hasTypeName();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = builder9.getRepeatedFieldCount(fieldDescriptor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(extensionRegistryLite12);
        org.junit.Assert.assertNotNull(location13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray7 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter1.println(charArray7);
        java.security.SignatureException signatureException10 = new java.security.SignatureException();
        java.security.SignatureException signatureException11 = new java.security.SignatureException();
        java.security.SignatureException signatureException12 = new java.security.SignatureException();
        java.security.SignatureException signatureException13 = new java.security.SignatureException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray15 = new java.security.SignatureException[] { signatureException10, signatureException11, signatureException12, signatureException13, signatureException14 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet16 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray15);
        java.io.PrintWriter printWriter17 = printWriter1.format("ISO", (java.lang.Object[]) signatureExceptionArray15);
        char[] charArray22 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.wrap(charArray22);
        printWriter1.println(charArray22);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean32 = strSet30.isEmpty();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocate(100);
        boolean boolean35 = strSet30.equals((java.lang.Object) byteBuffer34);
        java.nio.IntBuffer intBuffer36 = byteBuffer34.asIntBuffer();
        java.nio.IntBuffer intBuffer37 = intBuffer36.duplicate();
        java.nio.IntBuffer intBuffer38 = intBuffer37.duplicate();
        int[] intArray43 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream44 = java.util.stream.IntStream.of(intArray43);
        int[] intArray45 = intStream44.toArray();
        java.nio.IntBuffer intBuffer46 = java.nio.IntBuffer.wrap(intArray45);
        java.nio.IntBuffer intBuffer48 = java.nio.IntBuffer.allocate(256);
        java.nio.IntBuffer intBuffer50 = intBuffer48.put(55);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        boolean boolean57 = strSet55.isEmpty();
        java.nio.ByteBuffer byteBuffer59 = java.nio.ByteBuffer.allocate(100);
        boolean boolean60 = strSet55.equals((java.lang.Object) byteBuffer59);
        java.nio.IntBuffer intBuffer61 = byteBuffer59.asIntBuffer();
        java.nio.IntBuffer intBuffer62 = intBuffer61.duplicate();
        java.nio.IntBuffer intBuffer63 = intBuffer62.duplicate();
        java.nio.IntBuffer intBuffer65 = java.nio.IntBuffer.allocate(256);
        int[] intArray70 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream71 = java.util.stream.IntStream.of(intArray70);
        int[] intArray72 = intStream71.toArray();
        java.nio.IntBuffer intBuffer73 = intBuffer65.put(intArray72);
        java.nio.IntBuffer[] intBufferArray74 = new java.nio.IntBuffer[] { intBuffer38, intBuffer46, intBuffer50, intBuffer63, intBuffer73 };
        com.google.common.collect.ImmutableSet<java.nio.IntBuffer> intBufferSet75 = com.google.common.collect.ImmutableSet.copyOf(intBufferArray74);
        java.io.PrintWriter printWriter76 = printWriter1.printf("java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]", (java.lang.Object[]) intBufferArray74);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray15);
        org.junit.Assert.assertNotNull(signatureExceptionSet16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#,  , :,  ]");
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intBuffer36);
        org.junit.Assert.assertNotNull(intBuffer37);
        org.junit.Assert.assertNotNull(intBuffer38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intBuffer46);
        org.junit.Assert.assertNotNull(intBuffer48);
        org.junit.Assert.assertNotNull(intBuffer50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intBuffer61);
        org.junit.Assert.assertNotNull(intBuffer62);
        org.junit.Assert.assertNotNull(intBuffer63);
        org.junit.Assert.assertNotNull(intBuffer65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intBuffer73);
        org.junit.Assert.assertNotNull(intBufferArray74);
        org.junit.Assert.assertNotNull(intBufferSet75);
        org.junit.Assert.assertNotNull(printWriter76);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile2 = builder0.buildFromFile("ClockHourOfAmPm");
        com.google.javascript.jscomp.SourceFile.Builder builder4 = builder0.withOriginalPath("");
        com.google.javascript.jscomp.SourceFile sourceFile7 = builder0.buildFromCode("1970-01-01T00:01:40Z", "ClockHourOfAmPm");
        com.google.javascript.jscomp.SourceFile sourceFile9 = builder0.buildFromFile("JSC_OPTIMIZE_LOOP_ERROR");
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertNotNull(sourceFile9);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        java.util.function.DoubleUnaryOperator doubleUnaryOperator1 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator2 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator3 = doubleUnaryOperator1.andThen(doubleUnaryOperator2);
        java.util.function.DoubleUnaryOperator doubleUnaryOperator4 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator5 = doubleUnaryOperator3.andThen(doubleUnaryOperator4);
        java.util.stream.DoubleStream doubleStream6 = java.util.stream.DoubleStream.iterate((double) 4095, doubleUnaryOperator5);
        double double8 = doubleUnaryOperator5.applyAsDouble((double) 21);
        org.junit.Assert.assertNotNull(doubleUnaryOperator1);
        org.junit.Assert.assertNotNull(doubleUnaryOperator2);
        org.junit.Assert.assertNotNull(doubleUnaryOperator3);
        org.junit.Assert.assertNotNull(doubleUnaryOperator4);
        org.junit.Assert.assertNotNull(doubleUnaryOperator5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 21.0d + "'", double8 == 21.0d);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getId();
        java.time.LocalDate localDate4 = isoChronology2.dateNow();
        java.time.chrono.IsoChronology isoChronology5 = localDate4.getChronology();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        int int11 = localDateTime10.getYear();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        boolean boolean23 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.LocalDate localDate30 = localDateTime28.toLocalDate();
        int int31 = localDateTime10.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        long long34 = localDateTime10.getLong((java.time.temporal.TemporalField) chronoField32);
        java.time.LocalTime localTime35 = localDateTime10.toLocalTime();
        java.time.LocalTime localTime37 = localTime35.withMinute(50);
        java.time.ZoneId zoneId38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime39 = java.time.ZonedDateTime.of(localDate4, localTime37, zoneId38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: zone");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISO" + "'", str3, "ISO");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(isoChronology5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 12L + "'", long34 == 12L);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        int int0 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.OPTIONS_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3 + "'", int0 == 3);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.String str16 = objectType12.toDebugHashCodeString();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType26 = jSTypeRegistry24.createObjectType(objectType25);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair27 = objectType21.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType26);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry31.createObjectType(objectType32);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry36.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair39 = objectType33.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType38);
        com.google.javascript.rhino.Node node40 = objectType33.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType41 = objectType33.toMaybeEnumType();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean46 = node45.isStringKey();
        boolean boolean47 = node45.isThrow();
        boolean boolean48 = node45.isVarArgs();
        boolean boolean49 = node45.isStringKey();
        boolean boolean50 = objectType26.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType33, node45);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry53.createObjectType(objectType54);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry58.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair61 = objectType55.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType60);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry65.createObjectType(objectType66);
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry70.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair73 = objectType67.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType72);
        com.google.javascript.rhino.Node node74 = objectType67.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType75 = objectType67.toMaybeEnumType();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean80 = node79.isStringKey();
        boolean boolean81 = node79.isThrow();
        boolean boolean82 = node79.isVarArgs();
        boolean boolean83 = node79.isStringKey();
        boolean boolean84 = objectType60.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType67, node79);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair85 = objectType33.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType60);
        com.google.javascript.rhino.jstype.JSType jSType86 = objectType12.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType60);
        boolean boolean87 = objectType60.matchesInt32Context();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{1713661408}" + "'", str16, "{1713661408}");
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertNotNull(typePair27);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(typePair39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(enumType41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(typePair61);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(typePair73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(enumType75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(typePair85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = builder34.clearValue();
        java.io.InputStream inputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = builder34.mergeDelimitedFrom(inputStream36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder37 = builder35.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label39 = builder38.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder40 = builder35.addExtension(builder38);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder41 = builder35.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder42 = builder41.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions43 = builder42.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor44 = builder42.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder45 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output47 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream49 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output47, (int) 'a');
        byte[] byteArray50 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite51 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions52 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray50, extensionRegistryLite51);
        output47.write(byteArray50);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder54 = builder45.mergeFrom(byteArray50);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions55 = builder45.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder56 = builder45.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption57 = builder56.buildPartial();
        java.lang.String str58 = uninterpretedOption57.getIdentifierValue();
        int int59 = uninterpretedOption57.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder60 = builder42.addUninterpretedOption(uninterpretedOption57);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder61 = builder30.setOptions(builder42);
        java.io.InputStream inputStream62 = null;
        com.google.protobuf.ByteString byteString63 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite64 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions65 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString63, extensionRegistryLite64);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder66 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label67 = builder66.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto68 = builder66.buildPartial();
        int int69 = fieldDescriptorProto68.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder70 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto68);
        java.io.InputStream inputStream71 = null;
        java.io.InputStream inputStream72 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite73 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location74 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream72, extensionRegistryLite73);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder75 = builder70.mergeFrom(inputStream71, extensionRegistryLite73);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap76 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString63, extensionRegistryLite73);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder77 = builder42.mergeFrom(inputStream62, extensionRegistryLite73);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = builder77.hasField(fieldDescriptor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + label39 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label39.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(enumOptions43);
        org.junit.Assert.assertNotNull(descriptor44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(output47);
        org.junit.Assert.assertNotNull(codedOutputStream49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(methodOptions52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(methodOptions55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(uninterpretedOption57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(byteString63);
        org.junit.Assert.assertNotNull(enumOptions65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + label67 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label67.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(extensionRegistryLite73);
        org.junit.Assert.assertNotNull(location74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(functionInformationMap76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        java.io.IOException iOException0 = new java.io.IOException();
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        java.time.chrono.IsoChronology isoChronology12 = period0.getChronology();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertNotNull(isoChronology12);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("/tmp/hi!117357409022682367ISO");
        sourceFile1.setOriginalPath("\uc218\uc694\uc77c");
        org.junit.Assert.assertNotNull(sourceFile1);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition1.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean11 = node10.isFromExterns();
        java.lang.String str12 = node10.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node10.siblings();
        typePosition1.setItem(node10);
        com.google.javascript.rhino.Node node15 = node10.cloneNode();
        com.google.javascript.jscomp.SourceAst sourceAst16 = null;
        com.google.javascript.rhino.InputId inputId17 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput19 = new com.google.javascript.jscomp.CompilerInput(sourceAst16, inputId17, true);
        java.io.PrintStream printStream20 = null;
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler(printStream20);
        com.google.javascript.jscomp.ErrorManager errorManager22 = compiler21.getErrorManager();
        compilerInput19.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler21);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = compiler21.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection25 = codingConvention24.getAssertionFunctions();
        java.lang.String str26 = codingConvention24.getAbstractMethodName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(1);
        com.google.javascript.rhino.Node node29 = node28.cloneNode();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean34 = node33.isStringKey();
        boolean boolean35 = node33.isTrue();
        boolean boolean36 = node33.isNot();
        java.lang.String str37 = codingConvention24.extractClassNameIfProvide(node29, node33);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry40.createObjectType(objectType41);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry45.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair48 = objectType42.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = objectType42.getJSDocInfo();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean54 = node53.isFromExterns();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean59 = node58.isFromExterns();
        java.lang.String str60 = node58.toString();
        com.google.javascript.rhino.Node node61 = node53.copyInformationFrom(node58);
        int int62 = node53.getLineno();
        boolean boolean63 = objectType42.equals((java.lang.Object) node53);
        boolean boolean64 = node53.isThis();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(15, node10, node33, node53, node66);
        node33.setType((int) (byte) -1);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 52.0 0" + "'", str12, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(errorManager22);
        org.junit.Assert.assertNotNull(codingConvention24);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(typePair48);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER 52.0 0" + "'", str60, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        boolean boolean6 = node4.isThrow();
        boolean boolean7 = node4.isVarArgs();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean12 = node11.isFromExterns();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean17 = node16.isFromExterns();
        java.lang.String str18 = node16.toString();
        com.google.javascript.rhino.Node node19 = node11.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean30 = node29.isStringKey();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((-1), node4, node16, node23, node29, 16384, 16);
        int int34 = node33.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 52.0 0" + "'", str18, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = methodDescriptorProto12.getOptions();
        com.google.protobuf.UnknownFieldSet unknownFieldSet14 = methodDescriptorProto12.getUnknownFields();
        com.google.protobuf.ByteString byteString15 = unknownFieldSet14.toByteString();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder7.mergeFrom(byteString15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto18 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString15, extensionRegistryLite17);
        boolean boolean19 = fileDescriptorProto18.hasPackage();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(unknownFieldSet14);
        org.junit.Assert.assertNotNull(byteString15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(fileDescriptorProto18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        boolean boolean1 = localDate0.isLeapYear();
        java.time.chrono.Era era2 = localDate0.getEra();
        java.time.LocalDate localDate4 = localDate0.withDayOfYear(5);
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        int int11 = localDateTime10.getYear();
        boolean boolean12 = chronoField5.isSupportedBy((java.time.temporal.TemporalAccessor) localDateTime10);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate14 = localDate4.with((java.time.temporal.TemporalField) chronoField5, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for ClockHourOfAmPm (valid values 1 - 12): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + era2 + "' != '" + java.time.chrono.IsoEra.CE + "'", era2.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField5.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setRemoveClosureAsserts(false);
        boolean boolean11 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.setPropertyAffinity(true);
        compilerOptions0.setOutputJsStringUsage(true);
        boolean boolean16 = compilerOptions0.shouldColorizeErrorOutput();
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder10 = builder6.mergeOptions(methodOptions9);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap11 = builder10.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions12 = builder10.getOptions();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder13.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label17 = builder16.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = builder13.addExtension(builder16);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder19 = builder13.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder19.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder23 = builder21.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder24 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label25 = builder24.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder26 = builder21.addExtension(builder24);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder27 = builder21.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder27.getOptionsBuilder();
        java.io.InputStream inputStream29 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions30 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream29);
        boolean boolean31 = enumOptions30.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder32 = builder28.mergeFrom(enumOptions30);
        com.google.protobuf.UnknownFieldSet unknownFieldSet33 = builder28.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream34 = null;
        unknownFieldSet33.writeTo(codedOutputStream34);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder36 = builder20.setUnknownFields(unknownFieldSet33);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto37 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean38 = methodDescriptorProto37.hasOutputType();
        byte[] byteArray39 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions41 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray39, extensionRegistryLite40);
        com.google.protobuf.CodedOutputStream codedOutputStream44 = com.google.protobuf.CodedOutputStream.newInstance(byteArray39, (int) (short) 0, 1);
        methodDescriptorProto37.writeTo(codedOutputStream44);
        unknownFieldSet33.writeTo(codedOutputStream44);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder47 = builder10.mergeUnknownFields(unknownFieldSet33);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder48 = builder10.clear();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fieldDescriptorMap11);
        org.junit.Assert.assertNotNull(methodOptions12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + label17 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label17.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + label25 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label25.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(enumOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(unknownFieldSet33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(methodDescriptorProto37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(methodOptions41);
        org.junit.Assert.assertNotNull(codedOutputStream44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("1947-06-09T18:00+18:00", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1947-06-09t18:00+18:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto5 = enumDescriptorProto4.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto6 = enumDescriptorProto4.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(enumDescriptorProto5);
        org.junit.Assert.assertNotNull(enumDescriptorProto6);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setJavaOuterClassname("hi!");
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode5 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setOptimizeFor(optimizeMode5);
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor7 = optimizeMode5.getValueDescriptor();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + optimizeMode5 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode5.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(enumValueDescriptor7);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getCalendarType();
        java.util.List<java.time.chrono.Era> eraList4 = isoChronology2.eras();
        java.util.List<java.time.chrono.Era> eraList5 = isoChronology2.eras();
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate10 = isoChronology2.date((java.time.chrono.Era) isoEra6, 1024, 2, 5);
        java.lang.String str11 = isoChronology2.toString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "iso8601" + "'", str3, "iso8601");
        org.junit.Assert.assertNotNull(eraList4);
        org.junit.Assert.assertNotNull(eraList5);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra6.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISO" + "'", str11, "ISO");
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        java.security.CodeSource codeSource0 = null;
        java.security.PermissionCollection permissionCollection1 = null;
        java.security.ProtectionDomain protectionDomain2 = new java.security.ProtectionDomain(codeSource0, permissionCollection1);
        java.lang.ClassLoader classLoader3 = protectionDomain2.getClassLoader();
        org.junit.Assert.assertEquals(protectionDomain2.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader3);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        java.time.Duration duration1 = java.time.Duration.ofDays(52L);
        java.time.Duration duration3 = duration1.plusHours(0L);
        java.time.Duration duration5 = duration1.minusDays(0L);
        long long6 = duration1.toMinutes();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 74880L + "'", long6 == 74880L);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions0 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList1 = fileOptions0.getUninterpretedOptionList();
        boolean boolean2 = fileOptions0.getPyGenericServices();
        boolean boolean3 = fileOptions0.hasJavaGenericServices();
        java.lang.String str4 = fileOptions0.getJavaPackage();
        org.junit.Assert.assertNotNull(fileOptions0);
        org.junit.Assert.assertNotNull(uninterpretedOptionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        java.util.Set<java.lang.String> strSet4 = node3.getDirectives();
        boolean boolean5 = node3.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = codingConvention8.getAssertionFunctions();
        java.lang.String str10 = codingConvention8.getAbstractMethodName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection11 = codingConvention8.getAssertionFunctions();
        boolean boolean14 = codingConvention8.isExported("1970-01-01T00:00:00Z", false);
        java.lang.String str15 = codingConvention8.getExportPropertyFunction();
        java.util.Collection<java.lang.String> strCollection16 = codingConvention8.getIndirectlyDeclaredProperties();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.abstractMethod" + "'", str10, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "goog.exportProperty" + "'", str15, "goog.exportProperty");
        org.junit.Assert.assertNotNull(strCollection16);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        compilerOptions0.setTightenTypes(true);
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy5 = compilerOptions0.anonymousFunctionNaming;
        char[] charArray6 = anonymousFunctionNamingPolicy5.getReservedCharacters();
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy5 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy5.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
        org.junit.Assert.assertNull(charArray6);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        com.google.javascript.jscomp.SourceFile.Generator generator1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", generator1);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = sourceFile2.getLineOfOffset(15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        int int1 = priorityMap0.size();
        int int2 = priorityMap0.size();
        boolean boolean3 = priorityMap0.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder> builderList3 = builder0.getServiceBuilderList();
        com.google.protobuf.DescriptorProtos.SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder4 = builder0.getSourceCodeInfoOrBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.clearDependency();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder6 = builder5.getOptionsOrBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builderList3);
        org.junit.Assert.assertNotNull(sourceCodeInfoOrBuilder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder6);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        int int3 = fieldDescriptorProto2.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        java.io.InputStream inputStream5 = null;
        java.io.InputStream inputStream6 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location8 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream6, extensionRegistryLite7);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = builder4.mergeFrom(inputStream5, extensionRegistryLite7);
        boolean boolean10 = builder4.hasTypeName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(extensionRegistryLite7);
        org.junit.Assert.assertNotNull(location8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime10.withMinute((int) '#');
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str16 = zonedDateTime10.format(dateTimeFormatter15);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime10.withLaterOffsetAtOverlap();
        int int18 = zonedDateTime17.getDayOfMonth();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19700101+000052" + "'", str16, "19700101+000052");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime12.minusSeconds(0L);
        java.time.chrono.IsoChronology isoChronology15 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime26.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime29 = zonedDateTime28.toLocalDateTime();
        java.time.chrono.Chronology chronology30 = localDateChronoLocalDateTime29.getChronology();
        int int31 = isoChronology15.compareTo(chronology30);
        java.lang.String str32 = isoChronology15.getCalendarType();
        java.time.LocalDate localDate33 = java.time.LocalDate.now();
        boolean boolean34 = localDate33.isLeapYear();
        java.time.chrono.Era era35 = localDate33.getEra();
        int int37 = isoChronology15.prolepticYear(era35, 9);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        boolean boolean39 = era35.isSupported((java.time.temporal.TemporalField) chronoField38);
        long long41 = chronoField38.checkValidValue(57700L);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = zonedDateTime14.get((java.time.temporal.TemporalField) chronoField38);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Invalid field 'MicroOfDay' for get() method, use getLong() instead");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(isoChronology15);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "iso8601" + "'", str32, "iso8601");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + era35 + "' != '" + java.time.chrono.IsoEra.CE + "'", era35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField38.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 57700L + "'", long41 == 57700L);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        int int11 = localDate9.getYear();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        java.util.function.LongUnaryOperator longUnaryOperator0 = java.util.function.LongUnaryOperator.identity();
        java.io.FileNotFoundException fileNotFoundException2 = new java.io.FileNotFoundException("");
        com.google.common.collect.ImmutableMap<java.util.function.LongUnaryOperator, java.io.FileNotFoundException> longUnaryOperatorMap3 = com.google.common.collect.ImmutableMap.of(longUnaryOperator0, fileNotFoundException2);
        org.junit.Assert.assertNotNull(longUnaryOperator0);
        org.junit.Assert.assertNotNull(longUnaryOperatorMap3);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder2 = enumOptions1.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output6 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output6, (int) 'a');
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        output6.write(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder13 = builder4.mergeFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder4.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption16 = builder15.buildPartial();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder2.addUninterpretedOption(13, uninterpretedOption16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 13, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(output6);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(uninterpretedOption16);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap6 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray0);
        java.lang.String str8 = variableMap6.lookupSourceName("ClockHourOfAmPm");
        byte[] byteArray9 = variableMap6.toBytes();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertNotNull(variableMap6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder7 = builder2.setRepeatedField(fieldDescriptor4, 152, (java.lang.Object) 364740218880L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.newBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder> builderList1 = builder0.getValueBuilderList();
        java.io.InputStream inputStream2 = null;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset6);
        int int8 = localDateTime7.getYear();
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.of(localDateTime13, (java.time.ZoneId) zoneOffset17);
        boolean boolean20 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder23 = builder21.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder23.clearSourceCodeInfo();
        boolean boolean25 = builder23.hasOptions();
        boolean boolean26 = localDateTime7.equals((java.lang.Object) builder23);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder27 = builder23.addEnumTypeBuilder();
        java.io.InputStream inputStream28 = null;
        byte[] byteArray29 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions31 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray29, extensionRegistryLite30);
        com.google.protobuf.CodedOutputStream codedOutputStream34 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto36 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray29, extensionRegistryLite35);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label39 = builder38.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto40 = builder38.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = fieldDescriptorProto40.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder42 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto40);
        java.io.File file45 = null;
        java.io.File file46 = java.io.File.createTempFile("hi!", "ISO", file45);
        boolean boolean49 = file46.setWritable(false, false);
        java.net.URI uRI50 = file46.toURI();
        java.io.PrintStream printStream51 = new java.io.PrintStream(file46);
        printStream51.print((int) (byte) 0);
        printStream51.print(10.0d);
        printStream51.close();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        boolean boolean63 = strSet61.isEmpty();
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocate(100);
        boolean boolean66 = strSet61.equals((java.lang.Object) byteBuffer65);
        java.nio.IntBuffer intBuffer67 = byteBuffer65.asIntBuffer();
        double double68 = byteBuffer65.getDouble();
        java.nio.ByteBuffer byteBuffer71 = byteBuffer65.put((int) (short) 1, (byte) 1);
        byte[] byteArray72 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite73 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions74 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray72, extensionRegistryLite73);
        com.google.protobuf.CodedOutputStream codedOutputStream77 = com.google.protobuf.CodedOutputStream.newInstance(byteArray72, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite78 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto79 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray72, extensionRegistryLite78);
        com.google.protobuf.CodedOutputStream codedOutputStream80 = com.google.protobuf.CodedOutputStream.newInstance(byteArray72);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer65.get(byteArray72);
        printStream51.write(byteArray72, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream85 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite86 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location87 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream85, extensionRegistryLite86);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder88 = builder42.mergeFrom(byteArray72, extensionRegistryLite86);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto89 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray29, extensionRegistryLite86);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder90 = builder27.mergeFrom(inputStream28, extensionRegistryLite86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = builder0.mergeDelimitedFrom(inputStream2, extensionRegistryLite86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builderList1);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(methodOptions31);
        org.junit.Assert.assertNotNull(codedOutputStream34);
        org.junit.Assert.assertNotNull(fileDescriptorProto36);
        org.junit.Assert.assertNotNull(codedOutputStream37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + label39 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label39.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file46.toString(), "/tmp/hi!2561956917571489987ISO");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(uRI50);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intBuffer67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(methodOptions74);
        org.junit.Assert.assertNotNull(codedOutputStream77);
        org.junit.Assert.assertNotNull(fileDescriptorProto79);
        org.junit.Assert.assertNotNull(codedOutputStream80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(extensionRegistryLite86);
        org.junit.Assert.assertNotNull(location87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(fileDescriptorProto89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_ENUM;
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_ENUM + "'", type0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_ENUM));
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder4 = builder3.clear();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        int int15 = charBuffer14.length();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 29 + "'", int15 == 29);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        int int0 = com.google.javascript.rhino.Node.DIRECTIVES;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 48 + "'", int0 == 48);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = builder26.getRepeatedFieldCount(fieldDescriptor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        compilerOptions0.setDefineToStringLiteral("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]", "1970-01-01");
        java.lang.String str13 = compilerOptions0.renamePrefixNamespace;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setRecordFunctionInformation(true);
        boolean boolean17 = compilerOptions14.checkControlStructures;
        compilerOptions14.setCollapseProperties(false);
        compilerOptions14.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions22 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions22.optimizeCalls = false;
        compilerOptions22.preferLineBreakAtEndOfFile = false;
        boolean boolean27 = compilerOptions22.markNoSideEffectCalls;
        boolean boolean28 = compilerOptions22.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions29 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean36 = strSet34.isEmpty();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocate(100);
        boolean boolean39 = strSet34.equals((java.lang.Object) byteBuffer38);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        boolean boolean46 = strSet44.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream47 = strSet44.stream();
        boolean boolean48 = strSet34.retainAll((java.util.Collection<java.lang.String>) strSet44);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions49 = dependencyOptions29.setEntryPoints((java.util.Collection<java.lang.String>) strSet34);
        compilerOptions22.setDependencyOptions(dependencyOptions29);
        com.google.javascript.jscomp.CheckLevel checkLevel51 = compilerOptions22.checkGlobalThisLevel;
        compilerOptions14.reportMissingOverride = checkLevel51;
        compilerOptions0.setCheckUnreachableCode(checkLevel51);
        compilerOptions0.enableRuntimeTypeCheck("{}");
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dependencyOptions49);
        org.junit.Assert.assertTrue("'" + checkLevel51 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel51.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        java.nio.charset.CodingErrorAction codingErrorAction0 = java.nio.charset.CodingErrorAction.IGNORE;
        org.junit.Assert.assertNotNull(codingErrorAction0);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField14.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime11.truncatedTo(temporalUnit15);
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime11.plusHours((long) 37);
        boolean boolean19 = chronoField0.isSupportedBy((java.time.temporal.TemporalAccessor) zonedDateTime18);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.chrono.Chronology chronology7 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate6);
        boolean boolean8 = localDate6.isLeapYear();
        java.time.Month month9 = localDate6.getMonth();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + month9 + "' != '" + java.time.Month.JANUARY + "'", month9.equals(java.time.Month.JANUARY));
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isFromExterns();
        java.lang.String str10 = node8.toString();
        com.google.javascript.rhino.Node node11 = node3.copyInformationFrom(node8);
        int int12 = node3.getLineno();
        int int13 = node3.getType();
        boolean boolean14 = node3.isBreak();
        boolean boolean15 = node3.isComma();
        boolean boolean16 = node3.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 52.0 0" + "'", str10, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 39 + "'", int13 == 39);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions1 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(inputStream0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder3 = fieldOptions1.getUninterpretedOptionOrBuilder(2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2022");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldOptions1);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder18 = builder7.mergeFrom(byteArray13);
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.wrap(byteArray13);
        com.google.javascript.jscomp.VariableMap variableMap20 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray13);
        java.lang.String str22 = variableMap20.lookupNewName("(1970-01-01+00:00:52)");
        variableMap20.save("DiagnosticGroup<undefinedNames>");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(variableMap20);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        int int0 = com.google.protobuf.DescriptorProtos.MessageOptions.MESSAGE_SET_WIRE_FORMAT_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        byte[] byteArray27 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite28 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions29 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray27, extensionRegistryLite28);
        com.google.protobuf.CodedInputStream codedInputStream32 = com.google.protobuf.CodedInputStream.newInstance(byteArray27, 16, (int) 'a');
        int int34 = codedInputStream32.pushLimit((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Builder builder35 = builder26.mergeFrom(codedInputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(methodOptions29);
        org.junit.Assert.assertNotNull(codedInputStream32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNot();
        boolean boolean7 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = node3.getLastSibling();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean13 = node12.isFromExterns();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean18 = node17.isFromExterns();
        java.lang.String str19 = node17.toString();
        com.google.javascript.rhino.Node node20 = node12.copyInformationFrom(node17);
        int int21 = node12.getLineno();
        int int22 = node12.getType();
        boolean boolean23 = node12.isBreak();
        boolean boolean24 = node12.isComma();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(8, "16:00:52+00:00:52");
        // The following exception was thrown during execution in test generation
        try {
            node8.replaceChildAfter(node12, node27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 52.0 0" + "'", str19, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 39 + "'", int22 == 39);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet1 = strMap0.keySet();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit4 = chronoField3.getRangeUnit();
        long long6 = chronoField3.checkValidValue((long) 2);
        java.util.Locale locale10 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str11 = chronoField3.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.util.Locale.setDefault(locale12);
        java.lang.String str15 = locale12.getDisplayScript();
        java.lang.String str16 = locale2.getDisplayCountry(locale12);
        boolean boolean17 = strMap0.containsValue((java.lang.Object) locale12);
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField3.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit4 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit4.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale10.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "OffsetSeconds" + "'", str11, "OffsetSeconds");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str16, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        int int8 = builder7.getPathCount();
        boolean boolean9 = builder7.isInitialized();
        com.google.protobuf.Descriptors.Descriptor descriptor10 = builder7.getDescriptorForType();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = builder7.getPath((int) '0');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 48");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(descriptor10);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.allocate(16384);
        org.junit.Assert.assertNotNull(shortBuffer1);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray3 = compiler1.getErrors();
        com.google.javascript.jscomp.ErrorManager errorManager4 = compiler1.getErrorManager();
        com.google.javascript.jscomp.SourceMap sourceMap5 = compiler1.getSourceMap();
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(jSErrorArray3);
        org.junit.Assert.assertNotNull(errorManager4);
        org.junit.Assert.assertNull(sourceMap5);
    }
}

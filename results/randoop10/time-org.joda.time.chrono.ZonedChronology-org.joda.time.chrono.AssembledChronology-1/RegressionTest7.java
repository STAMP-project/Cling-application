import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.equals((java.lang.Object) 0);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 0, locale8);
        java.lang.String str11 = dateTimeZone0.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) 10);
        java.lang.String str16 = dateTimeZone12.getName((long) (short) 1);
        long long18 = dateTimeZone12.convertUTCToLocal((long) ' ');
        long long20 = dateTimeZone12.convertUTCToLocal((long) (short) 100);
        int int22 = dateTimeZone12.getOffset((long) (short) 10);
        boolean boolean23 = dateTimeZone0.equals((java.lang.Object) dateTimeZone12);
        java.lang.String str25 = dateTimeZone0.getNameKey(233520024L);
        int int27 = dateTimeZone0.getOffset(3120001L);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone0.getName(360600032L, locale29);
        java.lang.String str32 = dateTimeZone0.getName((-3600011L));
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = dateTimeZone0.getOffset(readableInstant33);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        boolean boolean6 = dateTimeZone0.isFixed();
        int int8 = dateTimeZone0.getOffsetFromLocal((long) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        int int12 = dateTimeZone9.getStandardOffset((-1L));
        int int14 = dateTimeZone9.getOffset((long) (short) 1);
        java.util.TimeZone timeZone15 = dateTimeZone9.toTimeZone();
        java.util.TimeZone timeZone16 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean19 = dateTimeZone0.equals((java.lang.Object) timeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.String str22 = dateTimeZone20.getNameKey((-111599990L));
        long long26 = dateTimeZone20.convertLocalToUTC((-25199885L), false, 324600000L);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone20.getShortName((-360000000L), locale28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-25199885L) + "'", long26 == (-25199885L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 1, locale3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 10);
        java.lang.String str9 = dateTimeZone5.getName((long) 'a');
        long long11 = dateTimeZone5.nextTransition((long) '4');
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone5.getShortName(100L, locale13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone5.getOffset(readableInstant15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone5.getOffset(readableInstant17);
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) readableInstant17);
        java.lang.String str21 = dateTimeZone1.getShortName(0L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone1.getName(45L, locale23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone1.getOffset(readableInstant25);
        java.lang.String str27 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', (int) (short) 0);
        java.lang.String str5 = dateTimeZone3.getName(132L);
        java.lang.String str7 = dateTimeZone3.getShortName(360060000L);
        long long10 = dateTimeZone3.convertLocalToUTC(90000025L, true);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj12 = null;
        boolean boolean13 = dateTimeZone11.equals(obj12);
        java.lang.String str15 = dateTimeZone11.getName(100L);
        long long17 = dateTimeZone11.convertUTCToLocal((long) (short) -1);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone11.getName(52L, locale19);
        boolean boolean21 = dateTimeZone3.equals((java.lang.Object) dateTimeZone11);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone11.getShortName(3600032L, locale23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) 10);
        int int29 = dateTimeZone25.getOffset((long) (short) 10);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone25.getName((long) 0, locale31);
        java.lang.String str33 = dateTimeZone25.toString();
        java.lang.String str34 = dateTimeZone25.getID();
        long long38 = dateTimeZone25.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long41 = dateTimeZone25.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone42 = dateTimeZone25.toTimeZone();
        long long45 = dateTimeZone25.adjustOffset(360000052L, true);
        java.util.TimeZone timeZone46 = dateTimeZone25.toTimeZone();
        boolean boolean47 = dateTimeZone11.equals((java.lang.Object) dateTimeZone25);
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone25.getShortName((long) 52, locale49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology51 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+32:00" + "'", str5, "+32:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-25199975L) + "'", long10 == (-25199975L));
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 360000052L + "'", long45 == 360000052L);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        long long4 = dateTimeZone0.previousTransition(0L);
        long long7 = dateTimeZone0.convertLocalToUTC(52L, true);
        int int9 = dateTimeZone0.getOffset((-3600000L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(349200000, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 3600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        long long12 = dateTimeZone0.nextTransition(100L);
        java.lang.String str14 = dateTimeZone0.getShortName((-349200001L));
        java.util.TimeZone timeZone15 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(360000000);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(42L, locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName(90000025L, locale6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((-395999975L), locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean15 = dateTimeZone14.isFixed();
        java.lang.String str17 = dateTimeZone14.getShortName((long) '4');
        long long19 = dateTimeZone14.convertUTCToLocal((long) (short) 10);
        long long21 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) '4');
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone12.isLocalDateTimeGap(localDateTime22);
        long long25 = dateTimeZone12.convertUTCToLocal((long) (short) -1);
        java.lang.String str26 = dateTimeZone12.toString();
        int int28 = dateTimeZone12.getStandardOffset(35999999L);
        java.lang.String str30 = dateTimeZone12.getShortName(0L);
        long long32 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, (-349200000L));
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone1.getShortName((long) 126060000, locale34);
        long long37 = dateTimeZone1.convertUTCToLocal(30L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:00" + "'", str10, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 36000052L + "'", long21 == 36000052L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35999999L + "'", long25 == 35999999L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-25200000L) + "'", long32 == (-25200000L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+100:00" + "'", str35, "+100:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 360000030L + "'", long37 == 360000030L);
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 1, locale3);
        long long8 = dateTimeZone1.convertLocalToUTC(1L, false, (long) (-3600000));
        java.lang.String str9 = dateTimeZone1.getID();
        java.lang.String str11 = dateTimeZone1.getName((-35999965L));
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone1.getShortName((-39599878L), locale13);
        long long16 = dateTimeZone1.convertUTCToLocal(132L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 132L + "'", long16 == 132L);
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        int int12 = dateTimeZone9.getStandardOffset((-1L));
        int int14 = dateTimeZone9.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone15.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean20 = dateTimeZone9.equals((java.lang.Object) (byte) 0);
        long long23 = dateTimeZone9.convertLocalToUTC((long) (byte) 0, true);
        boolean boolean24 = dateTimeZone0.equals((java.lang.Object) dateTimeZone9);
        java.lang.Object obj25 = null;
        boolean boolean26 = dateTimeZone9.equals(obj25);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey(10L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) 100, locale12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        int int18 = dateTimeZone14.getOffset((long) (short) 10);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone14.getName((long) 0, locale20);
        java.lang.String str22 = dateTimeZone14.getID();
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone14.getOffset(readableInstant23);
        int int26 = dateTimeZone14.getOffset(0L);
        boolean boolean27 = dateTimeZone0.equals((java.lang.Object) dateTimeZone14);
        boolean boolean29 = dateTimeZone0.isStandardOffset((-32400055L));
        int int31 = dateTimeZone0.getStandardOffset(126059990L);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone0.isLocalDateTimeGap(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 10);
        java.lang.String str6 = dateTimeZone2.getName((long) 'a');
        long long8 = dateTimeZone2.nextTransition((long) '4');
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone2.getShortName(100L, locale10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        long long14 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, 3600010L);
        java.lang.String str15 = dateTimeZone1.getID();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone1.getShortName(107L, locale17);
        boolean boolean19 = dateTimeZone1.isFixed();
        long long21 = dateTimeZone1.convertUTCToLocal((long) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3600010L + "'", long14 == 3600010L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        java.lang.String str9 = dateTimeZone0.getNameKey(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long13 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (-35999965L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        long long16 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) ' ');
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone18.getName(0L, locale20);
        java.lang.String str23 = dateTimeZone18.getShortName((long) (-1));
        boolean boolean25 = dateTimeZone18.isStandardOffset(0L);
        long long27 = dateTimeZone18.convertUTCToLocal(10L);
        int int29 = dateTimeZone18.getOffset(35L);
        long long31 = dateTimeZone11.getMillisKeepLocal(dateTimeZone18, 97L);
        java.lang.String str32 = dateTimeZone11.getID();
        long long34 = dateTimeZone11.convertUTCToLocal((-3600001L));
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone11.getShortName((-39599878L), locale36);
        long long39 = dateTimeZone11.nextTransition(31L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-35999975L) + "'", long13 == (-35999975L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 42L + "'", long16 == 42L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 20L + "'", long27 == 20L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 97L + "'", long31 == 97L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3599991L) + "'", long34 == (-3599991L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 31L + "'", long39 == 31L);
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        long long13 = dateTimeZone0.convertLocalToUTC(10L, false, (long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) 10);
        java.lang.String str20 = dateTimeZone16.getName((long) 'a');
        long long22 = dateTimeZone16.nextTransition((long) '4');
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone16.getShortName(100L, locale24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long28 = dateTimeZone15.getMillisKeepLocal(dateTimeZone16, 3600010L);
        long long30 = dateTimeZone15.previousTransition((long) '4');
        boolean boolean31 = dateTimeZone0.equals((java.lang.Object) dateTimeZone15);
        int int33 = dateTimeZone15.getOffset(1L);
        long long35 = dateTimeZone15.previousTransition((-349200000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3600010L + "'", long28 == 3600010L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-349200000L) + "'", long35 == (-349200000L));
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.getID();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        long long12 = dateTimeZone0.nextTransition(0L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getShortName((long) 360060000, locale14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone0.getOffset(readableInstant16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal(0L);
        long long13 = dateTimeZone0.adjustOffset(0L, true);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone15.getName(10L, locale17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone15.getOffset(readableInstant19);
        long long22 = dateTimeZone15.nextTransition(360000000L);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, (long) (byte) 0);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone15.getShortName(0L, locale26);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 360000000L + "'", long22 == 360000000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-10L) + "'", long24 == (-10L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long7 = dateTimeZone0.convertLocalToUTC((long) (short) 100, false);
        boolean boolean9 = dateTimeZone0.equals((java.lang.Object) 100);
        java.lang.String str10 = dateTimeZone0.getID();
        java.lang.String str11 = dateTimeZone0.getID();
        long long13 = dateTimeZone0.previousTransition((long) 1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        int int18 = dateTimeZone14.getOffset((long) (short) 10);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone14.getName((long) 0, locale20);
        java.lang.String str22 = dateTimeZone14.toString();
        java.lang.String str23 = dateTimeZone14.getID();
        long long27 = dateTimeZone14.convertLocalToUTC((long) (byte) -1, false, 97L);
        java.util.TimeZone timeZone28 = dateTimeZone14.toTimeZone();
        long long32 = dateTimeZone14.convertLocalToUTC((long) 100, true, 107L);
        long long35 = dateTimeZone14.adjustOffset(32L, true);
        boolean boolean36 = dateTimeZone0.equals((java.lang.Object) 32L);
        boolean boolean37 = dateTimeZone0.isFixed();
        java.lang.String str38 = dateTimeZone0.toString();
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone0.getShortName((-360000001L), locale40);
        java.lang.String str43 = dateTimeZone0.getShortName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 32L + "'", long35 == 32L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        long long7 = dateTimeZone1.nextTransition((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str10 = dateTimeZone1.getShortName((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 10);
        java.lang.String str15 = dateTimeZone11.getName((long) (short) 1);
        long long18 = dateTimeZone11.convertLocalToUTC((long) '#', true);
        long long21 = dateTimeZone11.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone22 = dateTimeZone11.toTimeZone();
        java.lang.String str24 = dateTimeZone11.getNameKey((long) (short) 100);
        java.lang.String str26 = dateTimeZone11.getShortName((long) (byte) 1);
        java.util.TimeZone timeZone27 = dateTimeZone11.toTimeZone();
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) dateTimeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean30 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone31 = dateTimeZone1.toTimeZone();
        boolean boolean33 = dateTimeZone1.isStandardOffset(36000000L);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone1.isLocalDateTimeGap(localDateTime34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(126000000, 3660000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 3660000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(3660000, 115200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 115200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj16 = null;
        boolean boolean17 = dateTimeZone15.equals(obj16);
        java.lang.String str19 = dateTimeZone15.getName(100L);
        java.lang.String str20 = dateTimeZone15.getID();
        java.util.TimeZone timeZone21 = dateTimeZone15.toTimeZone();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone15.getName(100L, locale23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forID("+00:00");
        long long28 = dateTimeZone15.getMillisKeepLocal(dateTimeZone26, (long) (byte) 1);
        int int30 = dateTimeZone15.getOffset((long) (-1));
        java.lang.String str31 = dateTimeZone15.getID();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        int int35 = dateTimeZone32.getStandardOffset((-1L));
        int int37 = dateTimeZone32.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone38.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean43 = dateTimeZone32.equals((java.lang.Object) (byte) 0);
        long long45 = dateTimeZone15.getMillisKeepLocal(dateTimeZone32, (long) (short) 10);
        long long47 = dateTimeZone32.previousTransition((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) 10);
        java.lang.String str52 = dateTimeZone48.getName((long) (short) 1);
        java.lang.String str53 = dateTimeZone48.toString();
        int int55 = dateTimeZone48.getOffset(0L);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone48.getName((long) (byte) 10, locale57);
        long long60 = dateTimeZone32.getMillisKeepLocal(dateTimeZone48, (-35999999L));
        long long62 = dateTimeZone0.getMillisKeepLocal(dateTimeZone32, (-10L));
        long long65 = dateTimeZone32.convertLocalToUTC(3599990L, false);
        long long68 = dateTimeZone32.convertLocalToUTC(123000000L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeZone32.getShortName((-32880000L), locale71);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-35999999L) + "'", long60 == (-35999999L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-10L) + "'", long62 == (-10L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3599990L + "'", long65 == 3599990L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 123000000L + "'", long68 == 123000000L);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone1.isLocalDateTimeGap(localDateTime3);
        long long7 = dateTimeZone1.convertLocalToUTC((-475199990L), true);
        long long9 = dateTimeZone1.previousTransition(324060010L);
        long long11 = dateTimeZone1.convertUTCToLocal(10L);
        long long15 = dateTimeZone1.convertLocalToUTC(324600000L, true, (-35999991L));
        java.lang.String str16 = dateTimeZone1.getID();
        long long20 = dateTimeZone1.convertLocalToUTC((-32400055L), true, 324599999L);
        long long24 = dateTimeZone1.convertLocalToUTC(324059990L, false, 543660122L);
        java.lang.Class<?> wildcardClass25 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.001" + "'", str2, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-475199991L) + "'", long7 == (-475199991L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 324060010L + "'", long9 == 324060010L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 11L + "'", long11 == 11L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 324599999L + "'", long15 == 324599999L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.001" + "'", str16, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-32400056L) + "'", long20 == (-32400056L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 324059989L + "'", long24 == 324059989L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((-75539968L), locale9);
        java.lang.String str12 = dateTimeZone0.getNameKey(234600000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str4 = dateTimeZone0.getID();
        int int6 = dateTimeZone0.getStandardOffset(10L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone7.adjustOffset(0L, true);
        int int12 = dateTimeZone7.getOffset((-363600001L));
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (-3599878L));
        long long16 = dateTimeZone0.previousTransition(39600032L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3599878L) + "'", long14 == (-3599878L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 39600032L + "'", long16 == 39600032L);
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        int int5 = dateTimeZone1.getOffset((long) (short) 10);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) 0);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName((long) (short) 0, locale9);
        java.lang.String str12 = dateTimeZone1.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) 10);
        java.lang.String str17 = dateTimeZone13.getName((long) (short) 1);
        long long19 = dateTimeZone13.convertUTCToLocal((long) ' ');
        long long21 = dateTimeZone13.convertUTCToLocal((long) (short) 100);
        int int23 = dateTimeZone13.getOffset((long) (short) 10);
        boolean boolean24 = dateTimeZone1.equals((java.lang.Object) dateTimeZone13);
        boolean boolean25 = dateTimeZone13.isFixed();
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone13.getOffset(readableInstant26);
        long long29 = dateTimeZone13.nextTransition((-118799991L));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 10);
        int int34 = dateTimeZone30.getOffset((long) (short) 10);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone30.getName((long) 0, locale36);
        java.lang.String str38 = dateTimeZone30.toString();
        java.lang.String str39 = dateTimeZone30.getID();
        long long43 = dateTimeZone30.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long46 = dateTimeZone30.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str48 = dateTimeZone30.getShortName((long) ' ');
        long long50 = dateTimeZone13.getMillisKeepLocal(dateTimeZone30, (-475199981L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology51 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-118799991L) + "'", long29 == (-118799991L));
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-475199981L) + "'", long50 == (-475199981L));
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        long long9 = dateTimeZone0.convertLocalToUTC(32L, true);
        boolean boolean11 = dateTimeZone0.isStandardOffset(0L);
        long long14 = dateTimeZone0.adjustOffset(360000000L, false);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getShortName(120720010L, locale16);
        java.lang.Class<?> wildcardClass18 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 360000000L + "'", long14 == 360000000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        java.lang.String str5 = dateTimeZone1.getName(118320024L);
        java.lang.String str6 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.010" + "'", str5, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.lang.String str2 = dateTimeZone1.toString();
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone1.previousTransition(35999999L);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.001' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.001" + "'", str2, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35999999L + "'", long7 == 35999999L);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        long long5 = dateTimeZone2.convertUTCToLocal((long) (byte) -1);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getName(1L, locale7);
        long long10 = dateTimeZone2.nextTransition((-10859976L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+:0:01");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 360059999L + "'", long5 == 360059999L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+100:01" + "'", str8, "+100:01");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-10859976L) + "'", long10 == (-10859976L));
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, (int) (byte) 0);
        boolean boolean3 = dateTimeZone2.isFixed();
        java.lang.String str5 = dateTimeZone2.getName(3660032L);
        long long9 = dateTimeZone2.convertLocalToUTC(398520000L, false, (-363600001L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 398520000L + "'", long9 == 398520000L);
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        java.lang.String str4 = dateTimeZone1.toString();
        java.lang.String str5 = dateTimeZone1.toString();
        int int7 = dateTimeZone1.getStandardOffset((long) 187200000);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime8);
        java.lang.String str10 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.100" + "'", str4, "+00:00:00.100");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.100" + "'", str5, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.100" + "'", str10, "+00:00:00.100");
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        boolean boolean7 = dateTimeZone0.isFixed();
        long long10 = dateTimeZone0.adjustOffset(52L, false);
        boolean boolean11 = dateTimeZone0.isFixed();
        java.lang.String str12 = dateTimeZone0.toString();
        int int14 = dateTimeZone0.getStandardOffset((-39120000L));
        long long17 = dateTimeZone0.adjustOffset((-115200090L), false);
        java.util.TimeZone timeZone18 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-115200090L) + "'", long17 == (-115200090L));
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, 36600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 36600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        long long12 = dateTimeZone0.convertUTCToLocal((-266400190L));
        long long15 = dateTimeZone0.convertLocalToUTC((-35999979L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-266400190L) + "'", long12 == (-266400190L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-35999979L) + "'", long15 == (-35999979L));
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(3660000, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        long long7 = dateTimeZone0.adjustOffset((long) 'a', true);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean10 = dateTimeZone9.isFixed();
        long long14 = dateTimeZone9.convertLocalToUTC(10L, false, (long) 0);
        long long16 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, (long) 'a');
        java.lang.String str18 = dateTimeZone0.getNameKey(97L);
        long long20 = dateTimeZone0.previousTransition((long) '4');
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone0.isLocalDateTimeGap(localDateTime21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        int int24 = dateTimeZone0.getOffset(readableInstant23);
        long long26 = dateTimeZone0.convertUTCToLocal(115200000L);
        long long29 = dateTimeZone0.adjustOffset(126060000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 97L + "'", long16 == 97L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 115200000L + "'", long26 == 115200000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 126060000L + "'", long29 == 126060000L);
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        long long7 = dateTimeZone1.nextTransition((long) '4');
        long long10 = dateTimeZone1.adjustOffset((long) (short) -1, false);
        int int12 = dateTimeZone1.getOffsetFromLocal((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        long long18 = dateTimeZone1.convertLocalToUTC((-115199900L), true, (-43259976L));
        java.util.TimeZone timeZone19 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-115199900L) + "'", long18 == (-115199900L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(52);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 1);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        java.lang.Class<?> wildcardClass6 = dateTimeZone4.getClass();
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) wildcardClass6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+:0:01");
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        java.lang.String str6 = dateTimeZone0.getShortName((long) 1);
        boolean boolean8 = dateTimeZone0.isStandardOffset((long) (byte) 100);
        long long12 = dateTimeZone0.convertLocalToUTC((-35999975L), false, (-349200001L));
        long long16 = dateTimeZone0.convertLocalToUTC(52L, true, 36000000L);
        java.lang.String str17 = dateTimeZone0.getID();
        int int19 = dateTimeZone0.getStandardOffset((long) 100);
        java.lang.Class<?> wildcardClass20 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-35999975L) + "'", long12 == (-35999975L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone4.isStandardOffset((long) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) 'a');
        long long11 = dateTimeZone4.convertLocalToUTC((long) (short) 100, false);
        long long13 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, 10L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone4.getShortName(97L, locale15);
        int int18 = dateTimeZone4.getOffsetFromLocal((long) 360060000);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone4.getShortName(45L, locale20);
        java.util.TimeZone timeZone22 = dateTimeZone4.toTimeZone();
        boolean boolean23 = dateTimeZone4.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str5 = dateTimeZone0.getNameKey((long) 3600000);
        boolean boolean6 = dateTimeZone0.isFixed();
        int int8 = dateTimeZone0.getStandardOffset((-111599989L));
        long long10 = dateTimeZone0.nextTransition((-115199958L));
        boolean boolean12 = dateTimeZone0.isStandardOffset((-30479975L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-115199958L) + "'", long10 == (-115199958L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone10.getName((long) (short) 10, locale12);
        int int15 = dateTimeZone10.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone10.isLocalDateTimeGap(localDateTime16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone10.getName(360000132L, locale19);
        boolean boolean22 = dateTimeZone10.isStandardOffset(3599990L);
        java.lang.String str24 = dateTimeZone10.getShortName((-111599999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.lang.String str6 = dateTimeZone0.getID();
        int int8 = dateTimeZone0.getOffset((long) (-1));
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long14 = dateTimeZone10.convertLocalToUTC((-60000L), false, 0L);
        java.lang.Class<?> wildcardClass15 = dateTimeZone10.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-60000L) + "'", long14 == (-60000L));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        long long12 = dateTimeZone0.convertLocalToUTC(100L, true, (long) ' ');
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone0.getOffset(readableInstant13);
        java.lang.String str16 = dateTimeZone0.getShortName((-3600001L));
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName((-2100000L), locale18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str21 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        long long7 = dateTimeZone1.nextTransition((long) '4');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(100L, locale9);
        long long14 = dateTimeZone1.convertLocalToUTC(10L, false, (long) (short) 10);
        long long17 = dateTimeZone1.convertLocalToUTC((long) (short) 10, false);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone1.getName((-35999958L), locale19);
        java.lang.String str21 = dateTimeZone1.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getName(360600001L, locale10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        long long13 = dateTimeZone0.convertLocalToUTC((long) (byte) -1, false, 97L);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', (int) (short) 0);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, (long) 10);
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean25 = dateTimeZone24.isFixed();
        java.lang.String str27 = dateTimeZone24.getShortName((long) '4');
        long long29 = dateTimeZone24.convertUTCToLocal((long) (short) 10);
        long long31 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) '4');
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone22.isLocalDateTimeGap(localDateTime32);
        long long35 = dateTimeZone22.convertUTCToLocal((long) (short) -1);
        java.lang.String str36 = dateTimeZone22.toString();
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = dateTimeZone22.getOffset(readableInstant37);
        long long40 = dateTimeZone20.getMillisKeepLocal(dateTimeZone22, (-3599991L));
        java.lang.String str42 = dateTimeZone20.getShortName((-3599964L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-115199990L) + "'", long18 == (-115199990L));
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 36000052L + "'", long31 == 36000052L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35999999L + "'", long35 == 35999999L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-39599991L) + "'", long40 == (-39599991L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(52, 32);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        boolean boolean4 = dateTimeZone2.isFixed();
        java.lang.String str5 = dateTimeZone2.toString();
        int int7 = dateTimeZone2.getOffset(41L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+52:32" + "'", str5, "+52:32");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 189120000 + "'", int7 == 189120000);
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        boolean boolean13 = dateTimeZone0.isStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName(100L, locale15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getShortName(324600000L, locale19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long23 = dateTimeZone0.convertUTCToLocal(246720031L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 246720031L + "'", long23 == 246720031L);
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), 360600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 360600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) 10);
        int int7 = dateTimeZone3.getOffset((long) (short) 10);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getName((long) 0, locale9);
        java.lang.String str11 = dateTimeZone3.toString();
        java.lang.String str12 = dateTimeZone3.getID();
        long long16 = dateTimeZone3.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long19 = dateTimeZone3.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str21 = dateTimeZone3.getShortName((long) ' ');
        long long23 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-35999975L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long26 = dateTimeZone1.previousTransition(79200124L);
        long long29 = dateTimeZone1.convertLocalToUTC((-25L), true);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone1.getShortName((long) 360000000, locale31);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+35:00" + "'", str2, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 90000025L + "'", long23 == 90000025L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 79200124L + "'", long26 == 79200124L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-126000025L) + "'", long29 == (-126000025L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+35:00" + "'", str32, "+35:00");
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.nextTransition((long) (byte) -1);
        long long4 = dateTimeZone0.previousTransition((-36000068L));
        java.lang.Class<?> wildcardClass5 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-36000068L) + "'", long4 == (-36000068L));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 'a');
        long long12 = dateTimeZone6.nextTransition((long) '4');
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone6.getShortName(100L, locale14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone6.getOffset(readableInstant16);
        boolean boolean19 = dateTimeZone6.isStandardOffset(10L);
        boolean boolean20 = dateTimeZone3.equals((java.lang.Object) dateTimeZone6);
        boolean boolean21 = dateTimeZone1.equals((java.lang.Object) dateTimeZone3);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone1.getShortName(1L, locale23);
        int int26 = dateTimeZone1.getOffset((-36000001L));
        java.lang.String str28 = dateTimeZone1.getNameKey((-39120000L));
        java.lang.String str30 = dateTimeZone1.getNameKey(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.001" + "'", str2, "+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.001" + "'", str24, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        long long12 = dateTimeZone0.convertLocalToUTC(100L, true, (long) ' ');
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone0.getOffset(readableInstant13);
        java.lang.String str16 = dateTimeZone0.getShortName(79200025L);
        long long19 = dateTimeZone0.convertLocalToUTC(36000030L, true);
        long long21 = dateTimeZone0.convertUTCToLocal(3600110L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 36000030L + "'", long19 == 36000030L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3600110L + "'", long21 == 3600110L);
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone1.adjustOffset((long) 0, false);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone1.getOffset(readableInstant6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(42L, locale9);
        long long12 = dateTimeZone1.nextTransition(183599988L);
        java.lang.String str13 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3600000) + "'", int7 == (-3600000));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 183599988L + "'", long12 == 183599988L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        boolean boolean13 = dateTimeZone0.isStandardOffset(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        java.lang.String str18 = dateTimeZone14.getName((long) 'a');
        long long21 = dateTimeZone14.convertLocalToUTC((long) (short) 100, false);
        boolean boolean23 = dateTimeZone14.equals((java.lang.Object) 100);
        java.lang.String str24 = dateTimeZone14.getID();
        java.lang.String str25 = dateTimeZone14.getID();
        int int27 = dateTimeZone14.getOffset((long) 100);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone14.getShortName(35999999L, locale29);
        long long33 = dateTimeZone14.convertLocalToUTC(71999989L, false);
        long long35 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 111L);
        long long37 = dateTimeZone0.previousTransition((-35999965L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 71999989L + "'", long33 == 71999989L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 111L + "'", long35 == 111L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-35999965L) + "'", long37 == (-35999965L));
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getName((-35999968L), locale11);
        long long14 = dateTimeZone0.nextTransition(52680000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52680000L + "'", long14 == 52680000L);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getStandardOffset(0L);
        java.lang.String str16 = dateTimeZone12.getShortName((-35999991L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int20 = dateTimeZone17.getStandardOffset((-1L));
        int int22 = dateTimeZone17.getOffset((long) (short) 1);
        java.util.TimeZone timeZone23 = dateTimeZone17.toTimeZone();
        java.util.TimeZone timeZone24 = dateTimeZone17.toTimeZone();
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone17.getName(32L, locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        long long30 = dateTimeZone17.getMillisKeepLocal(dateTimeZone28, (-1L));
        long long33 = dateTimeZone17.convertLocalToUTC(52L, true);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj35 = null;
        boolean boolean36 = dateTimeZone34.equals(obj35);
        java.lang.String str38 = dateTimeZone34.getName(100L);
        java.lang.String str39 = dateTimeZone34.getID();
        java.util.TimeZone timeZone40 = dateTimeZone34.toTimeZone();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone34.getName(100L, locale42);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone34.getName((long) '#', locale45);
        java.lang.String str47 = dateTimeZone34.getID();
        boolean boolean48 = dateTimeZone17.equals((java.lang.Object) dateTimeZone34);
        long long50 = dateTimeZone12.getMillisKeepLocal(dateTimeZone34, 360060010L);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj52 = null;
        boolean boolean53 = dateTimeZone51.equals(obj52);
        java.lang.String str55 = dateTimeZone51.getName(100L);
        java.lang.String str56 = dateTimeZone51.getID();
        java.util.TimeZone timeZone57 = dateTimeZone51.toTimeZone();
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone51.getName(100L, locale59);
        org.joda.time.LocalDateTime localDateTime61 = null;
        boolean boolean62 = dateTimeZone51.isLocalDateTimeGap(localDateTime61);
        java.lang.String str64 = dateTimeZone51.getNameKey(3600010L);
        boolean boolean65 = dateTimeZone12.equals((java.lang.Object) str64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        java.lang.String str68 = dateTimeZone67.getID();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        boolean boolean71 = dateTimeZone69.isStandardOffset((long) 10);
        int int73 = dateTimeZone69.getOffset((long) (short) 10);
        java.util.Locale locale75 = null;
        java.lang.String str76 = dateTimeZone69.getName((long) 0, locale75);
        java.lang.String str77 = dateTimeZone69.toString();
        java.lang.String str78 = dateTimeZone69.getID();
        long long82 = dateTimeZone69.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long85 = dateTimeZone69.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str87 = dateTimeZone69.getShortName((long) ' ');
        long long89 = dateTimeZone67.getMillisKeepLocal(dateTimeZone69, (-35999975L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        long long92 = dateTimeZone12.getMillisKeepLocal(dateTimeZone67, 6719989L);
        long long96 = dateTimeZone67.convertLocalToUTC(36000132L, true, (long) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 360060010L + "'", long50 == 360060010L);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+35:00" + "'", str68, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "UTC" + "'", str77, "UTC");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "UTC" + "'", str78, "UTC");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 10L + "'", long85 == 10L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00" + "'", str87, "+00:00");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 90000025L + "'", long89 == 90000025L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-119280011L) + "'", long92 == (-119280011L));
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-89999868L) + "'", long96 == (-89999868L));
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        long long13 = dateTimeZone0.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        long long19 = dateTimeZone0.nextTransition((long) (short) 100);
        boolean boolean21 = dateTimeZone0.isStandardOffset(3600010L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        long long25 = dateTimeZone23.convertUTCToLocal((long) 360060000);
        java.lang.String str27 = dateTimeZone23.getName(0L);
        long long29 = dateTimeZone0.getMillisKeepLocal(dateTimeZone23, (-359999967L));
        int int31 = dateTimeZone0.getStandardOffset((long) ' ');
        long long33 = dateTimeZone0.nextTransition((long) (short) -1);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 360060000L + "'", long25 == 360060000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-359999967L) + "'", long29 == (-359999967L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, (int) ' ');
        boolean boolean4 = dateTimeZone2.isStandardOffset(396600000L);
        long long7 = dateTimeZone2.convertLocalToUTC((-111600025L), true);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 10);
        long long12 = dateTimeZone8.previousTransition(0L);
        java.util.TimeZone timeZone13 = dateTimeZone8.toTimeZone();
        java.lang.String str14 = dateTimeZone8.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) 10);
        java.lang.String str19 = dateTimeZone15.getName((long) 'a');
        long long21 = dateTimeZone15.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone15.getOffset(readableInstant22);
        long long25 = dateTimeZone15.nextTransition((long) (byte) 0);
        long long27 = dateTimeZone8.getMillisKeepLocal(dateTimeZone15, 360600107L);
        long long29 = dateTimeZone2.getMillisKeepLocal(dateTimeZone15, (long) 361920000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-117120025L) + "'", long7 == (-117120025L));
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 360600107L + "'", long27 == 360600107L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 367440000L + "'", long29 == 367440000L);
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, (int) (short) 0);
        long long4 = dateTimeZone2.previousTransition((long) (-3600000));
        java.lang.String str5 = dateTimeZone2.toString();
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((-21599975L), locale7);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3600000L) + "'", long4 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+01:00" + "'", str5, "+01:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+01:00" + "'", str8, "+01:00");
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone6.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean11 = dateTimeZone0.equals((java.lang.Object) (byte) 0);
        long long13 = dateTimeZone0.convertUTCToLocal(0L);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        long long16 = dateTimeZone0.nextTransition(0L);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone0.isLocalDateTimeGap(localDateTime17);
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int23 = dateTimeZone21.getOffsetFromLocal(71999989L);
        java.lang.String str25 = dateTimeZone21.getName(3600032L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 36000000 + "'", int3 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 36000000L + "'", long13 == 36000000L);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36000000 + "'", int23 == 36000000);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        long long7 = dateTimeZone0.adjustOffset((long) 'a', true);
        boolean boolean8 = dateTimeZone0.isFixed();
        long long10 = dateTimeZone0.convertUTCToLocal((long) '4');
        boolean boolean12 = dateTimeZone0.isStandardOffset((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getShortName((-3600000L), locale15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) 10);
        int int21 = dateTimeZone17.getOffset((long) (short) 10);
        boolean boolean23 = dateTimeZone17.equals((java.lang.Object) 0);
        boolean boolean25 = dateTimeZone17.equals((java.lang.Object) (byte) 0);
        long long28 = dateTimeZone17.adjustOffset((long) 0, true);
        boolean boolean29 = dateTimeZone0.equals((java.lang.Object) dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone17.isLocalDateTimeGap(localDateTime30);
        boolean boolean33 = dateTimeZone17.isStandardOffset(324000000L);
        int int35 = dateTimeZone17.getStandardOffset((-30479999L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) (short) 1);
        long long8 = dateTimeZone1.convertLocalToUTC((long) '#', true);
        long long11 = dateTimeZone1.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone12 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        int int18 = dateTimeZone14.getOffset((long) (short) 10);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone14.getName((long) 0, locale20);
        java.lang.String str23 = dateTimeZone14.getNameKey((long) (byte) 1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone14.getOffset(readableInstant24);
        long long27 = dateTimeZone1.getMillisKeepLocal(dateTimeZone14, 360000142L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 360000142L + "'", long27 == 360000142L);
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.getID();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        int int12 = dateTimeZone0.getOffset(0L);
        long long15 = dateTimeZone0.adjustOffset(52L, false);
        java.lang.String str16 = dateTimeZone0.toString();
        boolean boolean17 = dateTimeZone0.isFixed();
        boolean boolean19 = dateTimeZone0.isStandardOffset((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone0.isLocalDateTimeGap(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, 6720000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 6720000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 0, true);
        int int14 = dateTimeZone0.getOffset((long) (byte) 100);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone0.isLocalDateTimeGap(localDateTime15);
        java.lang.String str17 = dateTimeZone0.getID();
        long long19 = dateTimeZone0.convertUTCToLocal(97L);
        long long22 = dateTimeZone0.convertLocalToUTC(11L, true);
        long long24 = dateTimeZone0.previousTransition(126600000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 97L + "'", long19 == 97L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 11L + "'", long22 == 11L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 126600000L + "'", long24 == 126600000L);
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        boolean boolean4 = dateTimeZone2.isFixed();
        java.lang.String str6 = dateTimeZone2.getName(122L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology7 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) -1, 0);
        java.lang.String str5 = dateTimeZone3.getShortName((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-01:00" + "'", str5, "-01:00");
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 10);
        int int11 = dateTimeZone7.getOffset((long) (short) 10);
        long long14 = dateTimeZone7.adjustOffset((long) 'a', true);
        boolean boolean15 = dateTimeZone7.isFixed();
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj19 = null;
        boolean boolean20 = dateTimeZone18.equals(obj19);
        java.lang.String str22 = dateTimeZone18.getName(100L);
        long long24 = dateTimeZone18.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj26 = null;
        boolean boolean27 = dateTimeZone25.equals(obj26);
        long long29 = dateTimeZone18.getMillisKeepLocal(dateTimeZone25, (long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        boolean boolean31 = dateTimeZone0.equals((java.lang.Object) dateTimeZone25);
        long long33 = dateTimeZone25.convertUTCToLocal((long) (short) 1);
        java.lang.String str35 = dateTimeZone25.getName(126600000L);
        long long38 = dateTimeZone25.adjustOffset((-3599878L), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        boolean boolean41 = dateTimeZone25.isStandardOffset(118800010L);
        boolean boolean43 = dateTimeZone25.isStandardOffset((-709800002L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 97L + "'", long14 == 97L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-3599878L) + "'", long38 == (-3599878L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long4 = dateTimeZone2.convertUTCToLocal(32L);
        java.lang.String str5 = dateTimeZone2.getID();
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((long) 3600000, locale7);
        java.lang.String str9 = dateTimeZone2.toString();
        java.lang.Class<?> wildcardClass10 = dateTimeZone2.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 187200032L + "'", long4 == 187200032L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+52:00" + "'", str5, "+52:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+52:00" + "'", str8, "+52:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+52:00" + "'", str9, "+52:00");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj2 = null;
        boolean boolean3 = dateTimeZone1.equals(obj2);
        java.lang.String str5 = dateTimeZone1.getName(100L);
        java.lang.String str6 = dateTimeZone1.getID();
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime8);
        java.util.TimeZone timeZone10 = dateTimeZone1.toTimeZone();
        java.lang.String str11 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) 10);
        java.lang.String str16 = dateTimeZone12.getName((long) 'a');
        long long18 = dateTimeZone12.nextTransition((long) '4');
        long long21 = dateTimeZone12.adjustOffset((long) (short) -1, false);
        int int23 = dateTimeZone12.getOffsetFromLocal((long) (short) 1);
        long long25 = dateTimeZone12.nextTransition((long) 100);
        boolean boolean26 = dateTimeZone1.equals((java.lang.Object) 100);
        int int28 = dateTimeZone1.getOffset(115200022L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, (int) (byte) 0);
        int int4 = dateTimeZone2.getOffset((long) 1);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
        long long10 = dateTimeZone2.convertLocalToUTC((-35999975L), false, 101L);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone2.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone2.nextTransition((long) 189120000);
        int int16 = dateTimeZone2.getStandardOffset((-36000068L));
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone2.getOffset(readableInstant17);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 360000000 + "'", int4 == 360000000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-395999975L) + "'", long10 == (-395999975L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 189120000L + "'", long14 == 189120000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 360000000 + "'", int16 == 360000000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 360000000 + "'", int18 == 360000000);
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long9 = dateTimeZone0.adjustOffset((long) (short) 0, true);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone0.equals(obj10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        java.lang.String str14 = dateTimeZone0.toString();
        long long16 = dateTimeZone0.previousTransition((-169319964L));
        boolean boolean18 = dateTimeZone0.isStandardOffset((long) 189120000);
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone0.getOffset(readableInstant19);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-169319964L) + "'", long16 == (-169319964L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        java.lang.String str2 = dateTimeZone1.getID();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getShortName((long) 126600000, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone6.isStandardOffset((long) 10);
        java.lang.String str10 = dateTimeZone6.getName((long) 'a');
        long long13 = dateTimeZone6.convertLocalToUTC((long) (short) 100, false);
        boolean boolean15 = dateTimeZone6.equals((java.lang.Object) 100);
        int int17 = dateTimeZone6.getOffset((long) 0);
        long long19 = dateTimeZone6.previousTransition((long) (-3600000));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 10);
        java.lang.String str24 = dateTimeZone20.getName((long) (short) 1);
        long long26 = dateTimeZone20.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone27.isStandardOffset((long) 10);
        int int31 = dateTimeZone27.getOffset((long) (short) 10);
        long long34 = dateTimeZone27.adjustOffset((long) 'a', true);
        boolean boolean35 = dateTimeZone27.isFixed();
        long long37 = dateTimeZone20.getMillisKeepLocal(dateTimeZone27, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj39 = null;
        boolean boolean40 = dateTimeZone38.equals(obj39);
        java.lang.String str42 = dateTimeZone38.getName(100L);
        long long44 = dateTimeZone38.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj46 = null;
        boolean boolean47 = dateTimeZone45.equals(obj46);
        long long49 = dateTimeZone38.getMillisKeepLocal(dateTimeZone45, (long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        boolean boolean51 = dateTimeZone20.equals((java.lang.Object) dateTimeZone45);
        boolean boolean52 = dateTimeZone6.equals((java.lang.Object) dateTimeZone45);
        java.lang.String str53 = dateTimeZone6.toString();
        boolean boolean54 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        java.lang.String str55 = dateTimeZone1.getID();
        long long58 = dateTimeZone1.convertLocalToUTC((-187199965L), false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+35:00" + "'", str2, "+35:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+35:00" + "'", str5, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3600000L) + "'", long19 == (-3600000L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 97L + "'", long34 == 97L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+35:00" + "'", str55, "+35:00");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-313199965L) + "'", long58 == (-313199965L));
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        java.lang.String str4 = dateTimeZone0.getNameKey((long) 'a');
        int int6 = dateTimeZone0.getOffset(0L);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (byte) -1, locale8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getShortName(3600099L, locale11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getShortName(99L, locale14);
        java.lang.String str17 = dateTimeZone0.getShortName((-395999975L));
        boolean boolean18 = dateTimeZone0.isFixed();
        java.lang.String str20 = dateTimeZone0.getShortName((-5519948L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        long long4 = dateTimeZone0.previousTransition(0L);
        java.util.TimeZone timeZone5 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long8 = dateTimeZone6.previousTransition(324600000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 324600000L + "'", long8 == 324600000L);
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        int int3 = dateTimeZone1.getStandardOffset(3600132L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 126000000 + "'", int3 == 126000000);
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        boolean boolean6 = dateTimeZone0.isFixed();
        int int8 = dateTimeZone0.getOffsetFromLocal((long) 0);
        java.lang.String str10 = dateTimeZone0.getShortName(360000142L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getShortName(3600110L, locale12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getShortName((-3599900L), locale15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        java.lang.String str6 = dateTimeZone0.getShortName((long) 1);
        boolean boolean8 = dateTimeZone0.isStandardOffset((long) (byte) 100);
        long long12 = dateTimeZone0.convertLocalToUTC((-35999975L), false, (-349200001L));
        long long16 = dateTimeZone0.convertLocalToUTC(52L, true, 36000000L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) 10);
        int int21 = dateTimeZone17.getOffset((long) (short) 10);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone17.getName((long) 0, locale23);
        java.lang.String str25 = dateTimeZone17.toString();
        java.lang.String str26 = dateTimeZone17.getID();
        long long30 = dateTimeZone17.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long33 = dateTimeZone17.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone34 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        long long39 = dateTimeZone36.adjustOffset((long) (byte) 10, false);
        java.lang.String str41 = dateTimeZone36.getNameKey((long) 360060000);
        long long43 = dateTimeZone0.getMillisKeepLocal(dateTimeZone36, 360000032L);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone36.getShortName(36000035L, locale45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = dateTimeZone36.getOffset(readableInstant47);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-35999975L) + "'", long12 == (-35999975L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 360000032L + "'", long43 == 360000032L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        long long9 = dateTimeZone0.convertLocalToUTC(32L, true);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getShortName((-25199975L), locale13);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getName((-25199875L), locale16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        long long10 = dateTimeZone0.nextTransition((long) (byte) 0);
        long long12 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) (byte) 10, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj18 = null;
        boolean boolean19 = dateTimeZone17.equals(obj18);
        java.lang.String str21 = dateTimeZone17.getName(100L);
        java.lang.String str22 = dateTimeZone17.getID();
        boolean boolean23 = dateTimeZone17.isFixed();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone24.isStandardOffset((long) 10);
        java.lang.String str28 = dateTimeZone24.getName((long) (short) 1);
        long long30 = dateTimeZone24.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone31.isStandardOffset((long) 10);
        int int35 = dateTimeZone31.getOffset((long) (short) 10);
        long long38 = dateTimeZone31.adjustOffset((long) 'a', true);
        boolean boolean39 = dateTimeZone31.isFixed();
        long long41 = dateTimeZone24.getMillisKeepLocal(dateTimeZone31, (long) (-1));
        long long43 = dateTimeZone17.getMillisKeepLocal(dateTimeZone31, 32L);
        org.joda.time.ReadableInstant readableInstant44 = null;
        int int45 = dateTimeZone17.getOffset(readableInstant44);
        long long47 = dateTimeZone17.nextTransition(107L);
        java.lang.String str49 = dateTimeZone17.getNameKey(10L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        int int51 = dateTimeZone17.getOffset(readableInstant50);
        long long53 = dateTimeZone0.getMillisKeepLocal(dateTimeZone17, 0L);
        long long55 = dateTimeZone0.nextTransition((-262799910L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 97L + "'", long38 == 97L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 107L + "'", long47 == 107L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-262799910L) + "'", long55 == (-262799910L));
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        boolean boolean7 = dateTimeZone0.isFixed();
        long long9 = dateTimeZone0.nextTransition((long) '#');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long12 = dateTimeZone0.convertUTCToLocal((-32L));
        long long14 = dateTimeZone0.convertUTCToLocal((-3599991L));
        boolean boolean15 = dateTimeZone0.isFixed();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getName((-58L), locale17);
        java.lang.String str20 = dateTimeZone0.getShortName((-36000055L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-32L) + "'", long12 == (-32L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3599991L) + "'", long14 == (-3599991L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(60000, 36600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 36600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.lang.String str6 = dateTimeZone0.getID();
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 0, locale8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj11 = null;
        boolean boolean12 = dateTimeZone10.equals(obj11);
        java.lang.String str14 = dateTimeZone10.getName(100L);
        boolean boolean15 = dateTimeZone10.isFixed();
        long long17 = dateTimeZone10.nextTransition((long) (-1));
        boolean boolean18 = dateTimeZone10.isFixed();
        int int20 = dateTimeZone10.getStandardOffset(32L);
        long long22 = dateTimeZone10.previousTransition((long) (short) -1);
        boolean boolean23 = dateTimeZone0.equals((java.lang.Object) long22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj25 = null;
        boolean boolean26 = dateTimeZone24.equals(obj25);
        java.lang.String str28 = dateTimeZone24.getName(100L);
        java.lang.String str29 = dateTimeZone24.getID();
        boolean boolean30 = dateTimeZone24.isFixed();
        int int32 = dateTimeZone24.getOffsetFromLocal((long) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        int int36 = dateTimeZone33.getStandardOffset((-1L));
        int int38 = dateTimeZone33.getOffset((long) (short) 1);
        java.util.TimeZone timeZone39 = dateTimeZone33.toTimeZone();
        java.util.TimeZone timeZone40 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        boolean boolean43 = dateTimeZone24.equals((java.lang.Object) timeZone40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) 10);
        int int48 = dateTimeZone44.getOffset((long) (short) 10);
        boolean boolean50 = dateTimeZone44.isStandardOffset((long) (short) 1);
        long long54 = dateTimeZone44.convertLocalToUTC(97L, false, 10L);
        boolean boolean55 = dateTimeZone24.equals((java.lang.Object) 97L);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dateTimeZone24.getName((long) 0, locale57);
        long long60 = dateTimeZone24.convertUTCToLocal((-32L));
        long long62 = dateTimeZone24.previousTransition(11L);
        int int64 = dateTimeZone24.getOffset((-126599964L));
        boolean boolean65 = dateTimeZone0.equals((java.lang.Object) dateTimeZone24);
        int int67 = dateTimeZone24.getOffsetFromLocal(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 97L + "'", long54 == 97L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-32L) + "'", long60 == (-32L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 11L + "'", long62 == 11L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (short) 0);
        java.lang.String str3 = dateTimeZone2.getID();
        java.lang.Class<?> wildcardClass4 = dateTimeZone2.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffset((long) 1);
        int int13 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        java.lang.String str14 = dateTimeZone0.getID();
        java.lang.String str16 = dateTimeZone0.getName(360060052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-3600000), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        int int14 = dateTimeZone0.getStandardOffset(10L);
        java.lang.String str16 = dateTimeZone0.getShortName((long) 100);
        long long18 = dateTimeZone0.nextTransition((-39120000L));
        boolean boolean19 = dateTimeZone0.isFixed();
        boolean boolean20 = dateTimeZone0.isFixed();
        java.lang.Class<?> wildcardClass21 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-39120000L) + "'", long18 == (-39120000L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj2 = null;
        boolean boolean3 = dateTimeZone1.equals(obj2);
        java.lang.String str5 = dateTimeZone1.getName(100L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj7 = null;
        boolean boolean8 = dateTimeZone6.equals(obj7);
        java.lang.String str10 = dateTimeZone6.getName(100L);
        java.lang.String str11 = dateTimeZone6.getID();
        java.util.TimeZone timeZone12 = dateTimeZone6.toTimeZone();
        boolean boolean13 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        int int15 = dateTimeZone1.getOffsetFromLocal((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean5 = dateTimeZone4.isFixed();
        java.lang.String str7 = dateTimeZone4.getShortName((long) '4');
        long long9 = dateTimeZone4.convertUTCToLocal((long) (short) 10);
        long long11 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, (long) '4');
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone2.isLocalDateTimeGap(localDateTime12);
        long long15 = dateTimeZone2.convertUTCToLocal((long) (short) -1);
        java.lang.String str16 = dateTimeZone2.toString();
        int int18 = dateTimeZone2.getStandardOffset(35999999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone2.getOffset(readableInstant20);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone2.isLocalDateTimeGap(localDateTime22);
        java.lang.String str25 = dateTimeZone2.getShortName((-35999974L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 36000052L + "'", long11 == 36000052L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 35999999L + "'", long15 == 35999999L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+10:00" + "'", str16, "+10:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Etc/UTC");
        int int3 = dateTimeZone1.getOffsetFromLocal(1L);
        int int5 = dateTimeZone1.getOffsetFromLocal(3600010L);
        long long7 = dateTimeZone1.previousTransition(100L);
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        boolean boolean4 = dateTimeZone2.isStandardOffset(36000000L);
        long long7 = dateTimeZone2.adjustOffset(35999999L, false);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean10 = dateTimeZone9.isFixed();
        java.lang.String str12 = dateTimeZone9.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        long long15 = dateTimeZone9.nextTransition((long) 100);
        java.lang.String str16 = dateTimeZone9.getID();
        long long18 = dateTimeZone9.nextTransition((long) 0);
        long long20 = dateTimeZone2.getMillisKeepLocal(dateTimeZone9, 36000035L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35999999L + "'", long7 == 35999999L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 39600035L + "'", long20 == 39600035L);
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean4 = dateTimeZone3.isFixed();
        java.lang.String str6 = dateTimeZone3.getShortName((long) '4');
        long long8 = dateTimeZone3.convertUTCToLocal((long) (short) 10);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) '4');
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone1.convertUTCToLocal((long) (short) -1);
        java.lang.String str15 = dateTimeZone1.toString();
        int int17 = dateTimeZone1.getStandardOffset(35999999L);
        boolean boolean18 = dateTimeZone1.isFixed();
        java.lang.String str19 = dateTimeZone1.getID();
        int int21 = dateTimeZone1.getOffset(5519990L);
        java.lang.String str23 = dateTimeZone1.getNameKey((-3599900L));
        long long25 = dateTimeZone1.previousTransition(126059990L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000052L + "'", long10 == 36000052L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35999999L + "'", long14 == 35999999L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:00" + "'", str19, "+10:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36000000 + "'", int21 == 36000000);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 126059990L + "'", long25 == 126059990L);
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str12 = dateTimeZone0.getNameKey((long) (short) 100);
        boolean boolean13 = dateTimeZone0.isFixed();
        java.lang.String str15 = dateTimeZone0.getShortName(132L);
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        boolean boolean18 = dateTimeZone0.isStandardOffset((-3599878L));
        java.lang.String str20 = dateTimeZone0.getShortName((-5519916L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean4 = dateTimeZone3.isFixed();
        java.lang.String str6 = dateTimeZone3.getShortName((long) '4');
        long long8 = dateTimeZone3.convertUTCToLocal((long) (short) 10);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) '4');
        int int12 = dateTimeZone3.getOffset(45L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone3.getName(45L, locale14);
        boolean boolean16 = dateTimeZone3.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000052L + "'", long10 == 36000052L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        long long13 = dateTimeZone0.nextTransition(45L);
        long long15 = dateTimeZone0.nextTransition(97L);
        int int17 = dateTimeZone0.getOffset((-360000001L));
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone0.getOffset(readableInstant18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 45L + "'", long13 == 45L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 10);
        int int11 = dateTimeZone7.getOffset((long) (short) 10);
        long long14 = dateTimeZone7.adjustOffset((long) 'a', true);
        boolean boolean15 = dateTimeZone7.isFixed();
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj19 = null;
        boolean boolean20 = dateTimeZone18.equals(obj19);
        java.lang.String str22 = dateTimeZone18.getName(100L);
        long long24 = dateTimeZone18.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj26 = null;
        boolean boolean27 = dateTimeZone25.equals(obj26);
        long long29 = dateTimeZone18.getMillisKeepLocal(dateTimeZone25, (long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        boolean boolean31 = dateTimeZone0.equals((java.lang.Object) dateTimeZone25);
        long long33 = dateTimeZone0.nextTransition(115200122L);
        int int35 = dateTimeZone0.getOffset((-115199990L));
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        int int39 = dateTimeZone36.getStandardOffset((-1L));
        int int41 = dateTimeZone36.getOffset((long) (short) 1);
        java.util.TimeZone timeZone42 = dateTimeZone36.toTimeZone();
        java.util.TimeZone timeZone43 = dateTimeZone36.toTimeZone();
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone36.getName(32L, locale45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        long long49 = dateTimeZone36.getMillisKeepLocal(dateTimeZone47, (-1L));
        long long52 = dateTimeZone36.convertLocalToUTC(52L, true);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj54 = null;
        boolean boolean55 = dateTimeZone53.equals(obj54);
        java.lang.String str57 = dateTimeZone53.getName(100L);
        java.lang.String str58 = dateTimeZone53.getID();
        java.util.TimeZone timeZone59 = dateTimeZone53.toTimeZone();
        java.util.Locale locale61 = null;
        java.lang.String str62 = dateTimeZone53.getName(100L, locale61);
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeZone53.getName((long) '#', locale64);
        java.lang.String str66 = dateTimeZone53.getID();
        boolean boolean67 = dateTimeZone36.equals((java.lang.Object) dateTimeZone53);
        long long69 = dateTimeZone0.getMillisKeepLocal(dateTimeZone36, 363600010L);
        int int71 = dateTimeZone0.getOffset((-5519958L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 97L + "'", long14 == 97L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 115200122L + "'", long33 == 115200122L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 363600010L + "'", long69 == 363600010L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        boolean boolean13 = dateTimeZone0.isStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName(100L, locale15);
        java.lang.String str18 = dateTimeZone0.getName(360000142L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj20 = null;
        boolean boolean21 = dateTimeZone19.equals(obj20);
        java.lang.String str23 = dateTimeZone19.getName(100L);
        boolean boolean24 = dateTimeZone19.isFixed();
        long long26 = dateTimeZone19.nextTransition((long) (-1));
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone19.getName((long) ' ', locale28);
        long long31 = dateTimeZone19.previousTransition((long) 0);
        java.lang.String str33 = dateTimeZone19.getShortName(107L);
        int int35 = dateTimeZone19.getOffset((-25199975L));
        boolean boolean36 = dateTimeZone0.equals((java.lang.Object) int35);
        java.lang.String str38 = dateTimeZone0.getShortName((-172920016L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        java.lang.String str13 = dateTimeZone0.getShortName(32L);
        long long16 = dateTimeZone0.adjustOffset((long) (short) 100, true);
        long long18 = dateTimeZone0.nextTransition(90000025L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj20 = null;
        boolean boolean21 = dateTimeZone19.equals(obj20);
        java.lang.String str23 = dateTimeZone19.getName(100L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj25 = null;
        boolean boolean26 = dateTimeZone24.equals(obj25);
        java.lang.String str28 = dateTimeZone24.getName(100L);
        java.lang.String str29 = dateTimeZone24.getID();
        java.util.TimeZone timeZone30 = dateTimeZone24.toTimeZone();
        boolean boolean31 = dateTimeZone19.equals((java.lang.Object) dateTimeZone24);
        int int33 = dateTimeZone19.getOffsetFromLocal((long) (short) 0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone19.getOffset(readableInstant34);
        long long37 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, (-187199965L));
        java.lang.String str39 = dateTimeZone19.getNameKey(123000000L);
        java.lang.Class<?> wildcardClass40 = dateTimeZone19.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 90000025L + "'", long18 == 90000025L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-187199965L) + "'", long37 == (-187199965L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey(10L);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone0.getShortName((long) (byte) 100, locale12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int16 = dateTimeZone0.getOffsetFromLocal((-3600000L));
        java.lang.String str17 = dateTimeZone0.getID();
        long long19 = dateTimeZone0.previousTransition((-36000068L));
        long long22 = dateTimeZone0.adjustOffset(0L, true);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone23.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        int int29 = dateTimeZone23.getOffsetFromLocal(100L);
        java.lang.String str31 = dateTimeZone23.getName((long) 10);
        long long33 = dateTimeZone23.convertUTCToLocal(97L);
        long long37 = dateTimeZone23.convertLocalToUTC(42L, true, (long) (short) 0);
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = dateTimeZone23.getOffset(readableInstant38);
        long long43 = dateTimeZone23.convertLocalToUTC((long) (byte) 10, false, 324060010L);
        int int45 = dateTimeZone23.getOffset(126600001L);
        boolean boolean46 = dateTimeZone0.equals((java.lang.Object) int45);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-36000068L) + "'", long19 == (-36000068L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 97L + "'", long33 == 97L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 42L + "'", long37 == 42L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) 0);
        long long4 = dateTimeZone0.previousTransition((long) (short) 100);
        int int6 = dateTimeZone0.getOffsetFromLocal((long) '4');
        int int8 = dateTimeZone0.getOffset(398520000L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        int int12 = dateTimeZone0.getStandardOffset(36000001L);
        boolean boolean14 = dateTimeZone0.isStandardOffset((long) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(5520000, 360000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 360000000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long8 = dateTimeZone0.convertLocalToUTC((-35999965L), false, 52L);
        long long11 = dateTimeZone0.adjustOffset(0L, false);
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        long long16 = dateTimeZone14.nextTransition((-145679975L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-35999965L) + "'", long8 == (-35999965L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-145679975L) + "'", long16 == (-145679975L));
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        int int13 = dateTimeZone0.getOffset((long) (byte) 0);
        long long16 = dateTimeZone0.convertLocalToUTC((-1L), false);
        java.lang.String str18 = dateTimeZone0.getShortName(0L);
        java.lang.String str20 = dateTimeZone0.getNameKey(52L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean25 = dateTimeZone24.isFixed();
        java.lang.String str27 = dateTimeZone24.getShortName((long) '4');
        long long29 = dateTimeZone24.convertUTCToLocal((long) (short) 10);
        long long31 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) '4');
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone22.isLocalDateTimeGap(localDateTime32);
        long long35 = dateTimeZone22.convertUTCToLocal((long) (short) -1);
        java.lang.String str36 = dateTimeZone22.toString();
        int int38 = dateTimeZone22.getStandardOffset(0L);
        long long40 = dateTimeZone0.getMillisKeepLocal(dateTimeZone22, 42L);
        int int42 = dateTimeZone22.getOffsetFromLocal(132L);
        long long44 = dateTimeZone22.nextTransition(360600001L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 36000052L + "'", long31 == 36000052L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35999999L + "'", long35 == 35999999L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36000000 + "'", int38 == 36000000);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-35999958L) + "'", long40 == (-35999958L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36000000 + "'", int42 == 36000000);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 360600001L + "'", long44 == 360600001L);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.lang.String str2 = dateTimeZone1.toString();
        boolean boolean3 = dateTimeZone1.isFixed();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getName((long) (byte) 0, locale5);
        java.lang.String str7 = dateTimeZone1.getID();
        java.lang.String str8 = dateTimeZone1.getID();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone1.getOffset(readableInstant9);
        long long12 = dateTimeZone1.previousTransition(101L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.001" + "'", str2, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.001" + "'", str6, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.001" + "'", str7, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.001" + "'", str8, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 101L + "'", long12 == 101L);
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        boolean boolean7 = dateTimeZone1.isStandardOffset(35L);
        int int9 = dateTimeZone1.getStandardOffset((-349200001L));
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime10);
        long long15 = dateTimeZone1.convertLocalToUTC((-115199968L), false, (-280799975L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean18 = dateTimeZone17.isFixed();
        java.lang.String str20 = dateTimeZone17.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        long long23 = dateTimeZone17.nextTransition((long) 100);
        long long26 = dateTimeZone17.adjustOffset(1L, true);
        java.lang.String str28 = dateTimeZone17.getNameKey((long) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 10);
        int int33 = dateTimeZone29.getOffset((long) (short) 10);
        boolean boolean35 = dateTimeZone29.equals((java.lang.Object) 0);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone29.getShortName((long) (short) 0, locale37);
        java.lang.String str40 = dateTimeZone29.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        boolean boolean43 = dateTimeZone41.isStandardOffset((long) 10);
        java.lang.String str45 = dateTimeZone41.getName((long) (short) 1);
        long long47 = dateTimeZone41.convertUTCToLocal((long) ' ');
        long long49 = dateTimeZone41.convertUTCToLocal((long) (short) 100);
        int int51 = dateTimeZone41.getOffset((long) (short) 10);
        boolean boolean52 = dateTimeZone29.equals((java.lang.Object) dateTimeZone41);
        boolean boolean53 = dateTimeZone41.isFixed();
        org.joda.time.ReadableInstant readableInstant54 = null;
        int int55 = dateTimeZone41.getOffset(readableInstant54);
        boolean boolean56 = dateTimeZone17.equals((java.lang.Object) readableInstant54);
        long long59 = dateTimeZone17.adjustOffset((long) (byte) 1, true);
        int int61 = dateTimeZone17.getStandardOffset((long) 126000000);
        long long63 = dateTimeZone1.getMillisKeepLocal(dateTimeZone17, 0L);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 0, (int) (byte) 10);
        long long68 = dateTimeZone1.getMillisKeepLocal(dateTimeZone66, (-32880000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology69 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-115199968L) + "'", long15 == (-115199968L));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-33480000L) + "'", long68 == (-33480000L));
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getName((-1L), locale13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone16.getOffset(readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 10);
        long long23 = dateTimeZone19.previousTransition(0L);
        boolean boolean24 = dateTimeZone16.equals((java.lang.Object) long23);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone16.getName((long) (-1), locale26);
        boolean boolean28 = dateTimeZone0.equals((java.lang.Object) locale26);
        boolean boolean29 = dateTimeZone0.isFixed();
        int int31 = dateTimeZone0.getStandardOffset((-475199990L));
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone0.getName(0L, locale33);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone0.isLocalDateTimeGap(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.lang.Class<?> wildcardClass8 = timeZone7.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1920000, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName(100L, locale8);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        java.lang.String str13 = dateTimeZone0.getNameKey(3600010L);
        long long15 = dateTimeZone0.convertUTCToLocal(115200000L);
        java.lang.String str17 = dateTimeZone0.getName(36000020L);
        java.lang.String str19 = dateTimeZone0.getNameKey(3599990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (byte) 10);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getName(107L, locale11);
        boolean boolean14 = dateTimeZone0.isStandardOffset((-35999975L));
        long long16 = dateTimeZone0.previousTransition((long) 115200000);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 115200000L + "'", long16 == 115200000L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone0.getOffset(readableInstant11);
        int int14 = dateTimeZone0.getOffset(36000052L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getShortName((-32400000L), locale16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) 0);
        java.lang.String str13 = dateTimeZone7.getNameKey((long) 10);
        java.lang.String str15 = dateTimeZone7.getShortName((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone7.isLocalDateTimeGap(localDateTime16);
        java.lang.String str18 = dateTimeZone7.getID();
        boolean boolean20 = dateTimeZone7.isStandardOffset(10L);
        java.lang.String str21 = dateTimeZone7.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        boolean boolean10 = dateTimeZone0.isStandardOffset((-35999975L));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 10);
        java.lang.String str15 = dateTimeZone11.getName((long) (short) 1);
        long long17 = dateTimeZone11.convertUTCToLocal((long) ' ');
        long long19 = dateTimeZone11.nextTransition(1L);
        long long23 = dateTimeZone11.convertLocalToUTC((long) ' ', true, (long) (byte) -1);
        boolean boolean25 = dateTimeZone11.isStandardOffset((long) ' ');
        java.util.TimeZone timeZone26 = dateTimeZone11.toTimeZone();
        boolean boolean27 = dateTimeZone0.equals((java.lang.Object) dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) 10);
        int int32 = dateTimeZone28.getOffset((long) (short) 10);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone28.getName((long) 0, locale34);
        java.lang.String str36 = dateTimeZone28.toString();
        java.lang.String str37 = dateTimeZone28.getID();
        long long41 = dateTimeZone28.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long44 = dateTimeZone28.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone45 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        java.lang.String str49 = dateTimeZone46.getName((-126599964L));
        java.lang.String str51 = dateTimeZone46.getShortName(118320024L);
        boolean boolean52 = dateTimeZone0.equals((java.lang.Object) str51);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        java.lang.String str5 = dateTimeZone0.getID();
        java.lang.String str6 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.isFixed();
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) 10);
        int int7 = dateTimeZone3.getOffset((long) (short) 10);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getName((long) 0, locale9);
        java.lang.String str11 = dateTimeZone3.toString();
        java.lang.String str12 = dateTimeZone3.getID();
        long long16 = dateTimeZone3.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long19 = dateTimeZone3.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str21 = dateTimeZone3.getShortName((long) ' ');
        long long23 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-35999975L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean25 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant28 = null;
        int int29 = dateTimeZone27.getOffset(readableInstant28);
        java.lang.String str31 = dateTimeZone27.getShortName((-1L));
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone27.getShortName((long) '4', locale33);
        boolean boolean36 = dateTimeZone27.isStandardOffset((long) 10);
        int int38 = dateTimeZone27.getOffset((-35999965L));
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone27.getName(396600110L, locale40);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone27.getName(79200124L, locale43);
        long long46 = dateTimeZone1.getMillisKeepLocal(dateTimeZone27, 126599990L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj48 = null;
        boolean boolean49 = dateTimeZone47.equals(obj48);
        java.lang.String str51 = dateTimeZone47.getName(100L);
        java.lang.String str52 = dateTimeZone47.getID();
        boolean boolean53 = dateTimeZone47.isFixed();
        int int55 = dateTimeZone47.getOffsetFromLocal((long) 0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        int int59 = dateTimeZone56.getStandardOffset((-1L));
        int int61 = dateTimeZone56.getOffset((long) (short) 1);
        java.util.TimeZone timeZone62 = dateTimeZone56.toTimeZone();
        java.util.TimeZone timeZone63 = dateTimeZone56.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        boolean boolean66 = dateTimeZone47.equals((java.lang.Object) timeZone63);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        boolean boolean69 = dateTimeZone67.isStandardOffset((long) 10);
        int int71 = dateTimeZone67.getOffset((long) (short) 10);
        boolean boolean73 = dateTimeZone67.isStandardOffset((long) (short) 1);
        long long77 = dateTimeZone67.convertLocalToUTC(97L, false, 10L);
        boolean boolean78 = dateTimeZone47.equals((java.lang.Object) 97L);
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeZone47.getName((long) 0, locale80);
        java.util.Locale locale83 = null;
        java.lang.String str84 = dateTimeZone47.getName((long) (short) 100, locale83);
        long long87 = dateTimeZone47.convertLocalToUTC((-349200001L), false);
        long long89 = dateTimeZone1.getMillisKeepLocal(dateTimeZone47, 305520024L);
        java.lang.String str91 = dateTimeZone1.getShortName(39600032L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+35:00" + "'", str2, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 90000025L + "'", long23 == 90000025L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 252599990L + "'", long46 == 252599990L);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 126000000 + "'", int59 == 126000000);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 126000000 + "'", int61 == 126000000);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 97L + "'", long77 == 97L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00" + "'", str84, "+00:00");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-349200001L) + "'", long87 == (-349200001L));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 431520024L + "'", long89 == 431520024L);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+35:00" + "'", str91, "+35:00");
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        int int6 = dateTimeZone0.getOffsetFromLocal(1L);
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getShortName((long) 0);
        boolean boolean14 = dateTimeZone10.isStandardOffset(10L);
        long long16 = dateTimeZone10.nextTransition(3600010L);
        long long18 = dateTimeZone10.nextTransition(3600010L);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone10.getName(324060010L, locale20);
        java.lang.String str23 = dateTimeZone10.getName(90000035L);
        long long25 = dateTimeZone8.getMillisKeepLocal(dateTimeZone10, (-349200000L));
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone10.getName((-388800001L), locale27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3600010L + "'", long16 == 3600010L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3600010L + "'", long18 == 3600010L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-349200000L) + "'", long25 == (-349200000L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (byte) 10);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getName(107L, locale11);
        boolean boolean14 = dateTimeZone0.isStandardOffset((-35999975L));
        boolean boolean15 = dateTimeZone0.isFixed();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getName((-111599990L), locale17);
        boolean boolean20 = dateTimeZone0.isStandardOffset((-3179911L));
        long long22 = dateTimeZone0.nextTransition((-11L));
        long long26 = dateTimeZone0.convertLocalToUTC(0L, true, (-151199991L));
        long long28 = dateTimeZone0.previousTransition((-46859976L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-11L) + "'", long22 == (-11L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-46859976L) + "'", long28 == (-46859976L));
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        boolean boolean14 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) 10);
        int int19 = dateTimeZone15.getOffset((long) (short) 10);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone15.getName((long) 0, locale21);
        java.lang.String str23 = dateTimeZone15.toString();
        java.lang.String str24 = dateTimeZone15.getID();
        int int26 = dateTimeZone15.getOffsetFromLocal((long) (byte) 10);
        int int28 = dateTimeZone15.getOffset((long) (byte) 0);
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, 132L);
        int int32 = dateTimeZone0.getStandardOffset((long) 361920000);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone0.getShortName((-5519900L), locale34);
        int int37 = dateTimeZone0.getOffset((-35999998L));
        boolean boolean38 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 132L + "'", long30 == 132L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 'a');
        long long15 = dateTimeZone8.convertLocalToUTC((long) (short) 100, false);
        boolean boolean17 = dateTimeZone8.equals((java.lang.Object) 100);
        int int19 = dateTimeZone8.getOffset((long) 0);
        boolean boolean20 = dateTimeZone7.equals((java.lang.Object) dateTimeZone8);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone8.getName((long) 1, locale22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone25.getOffset(readableInstant26);
        java.lang.String str29 = dateTimeZone25.getShortName((-1L));
        boolean boolean30 = dateTimeZone8.equals((java.lang.Object) str29);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone8.isLocalDateTimeGap(localDateTime31);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone8.getName(172800122L, locale34);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        int int13 = dateTimeZone0.getOffset((long) (byte) 0);
        long long16 = dateTimeZone0.convertLocalToUTC((-1L), false);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) 10);
        java.lang.String str21 = dateTimeZone17.getName((long) 'a');
        java.lang.String str22 = dateTimeZone17.getID();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone17.getShortName((long) '4', locale24);
        boolean boolean26 = dateTimeZone0.equals((java.lang.Object) dateTimeZone17);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone17.getName(118320024L, locale28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (byte) 1);
        boolean boolean10 = dateTimeZone0.isFixed();
        long long12 = dateTimeZone0.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        java.lang.String str15 = dateTimeZone0.getID();
        java.lang.Class<?> wildcardClass16 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) 10);
        int int7 = dateTimeZone3.getOffset((long) (short) 10);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getName((long) 0, locale9);
        java.lang.String str11 = dateTimeZone3.toString();
        java.lang.String str12 = dateTimeZone3.getID();
        long long16 = dateTimeZone3.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long19 = dateTimeZone3.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str21 = dateTimeZone3.getShortName((long) ' ');
        long long23 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-35999975L));
        long long25 = dateTimeZone3.nextTransition(100L);
        long long27 = dateTimeZone3.convertUTCToLocal((-30479975L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+35:00" + "'", str2, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 90000025L + "'", long23 == 90000025L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-30479975L) + "'", long27 == (-30479975L));
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(360000000, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.nextTransition((long) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int10 = dateTimeZone1.getStandardOffset((long) (-1));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean13 = dateTimeZone1.isStandardOffset(71999999L);
        long long17 = dateTimeZone1.convertLocalToUTC((-313200000L), false, (long) (short) 10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-313200000L) + "'", long17 == (-313200000L));
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone2.getOffset(readableInstant3);
        long long7 = dateTimeZone2.convertLocalToUTC((long) (-1), false);
        java.lang.String str9 = dateTimeZone2.getNameKey(0L);
        int int11 = dateTimeZone2.getOffsetFromLocal((-475199990L));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 0);
        int int16 = dateTimeZone14.getOffsetFromLocal((long) 126600000);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone14.getName(42L, locale18);
        long long21 = dateTimeZone2.getMillisKeepLocal(dateTimeZone14, (-151200190L));
        long long23 = dateTimeZone14.previousTransition((-25199985L));
        long long25 = dateTimeZone14.previousTransition(3600100L);
        long long27 = dateTimeZone14.nextTransition((-3120010L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 115200000 + "'", int16 == 115200000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+32:00" + "'", str19, "+32:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-266400190L) + "'", long21 == (-266400190L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-25199985L) + "'", long23 == (-25199985L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3600100L + "'", long25 == 3600100L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-3120010L) + "'", long27 == (-3120010L));
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone9.isStandardOffset((long) 10);
        java.lang.String str13 = dateTimeZone9.getName((long) 'a');
        java.lang.String str15 = dateTimeZone9.getShortName((long) 1);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) (byte) 100);
        long long19 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, 35L);
        long long21 = dateTimeZone0.nextTransition((long) 1);
        java.lang.String str23 = dateTimeZone0.getNameKey((-32399965L));
        java.lang.String str24 = dateTimeZone0.toString();
        long long26 = dateTimeZone0.previousTransition((-68399965L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-68399965L) + "'", long26 == (-68399965L));
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.isStandardOffset(187200042L);
        long long10 = dateTimeZone0.convertLocalToUTC((-266399800L), true, (-43259976L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-266399800L) + "'", long10 == (-266399800L));
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        int int18 = dateTimeZone15.getStandardOffset((-1L));
        int int20 = dateTimeZone15.getOffset((long) (short) 1);
        java.util.TimeZone timeZone21 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 10);
        java.lang.String str27 = dateTimeZone23.getName((long) 'a');
        long long30 = dateTimeZone23.convertLocalToUTC((long) (short) 100, false);
        boolean boolean32 = dateTimeZone23.equals((java.lang.Object) 100);
        int int34 = dateTimeZone23.getOffset((long) 0);
        boolean boolean35 = dateTimeZone22.equals((java.lang.Object) dateTimeZone23);
        long long37 = dateTimeZone0.getMillisKeepLocal(dateTimeZone22, (long) '#');
        long long39 = dateTimeZone22.convertUTCToLocal((long) (short) 10);
        long long41 = dateTimeZone22.nextTransition(79200025L);
        java.lang.Class<?> wildcardClass42 = dateTimeZone22.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 36000000 + "'", int20 == 36000000);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-35999965L) + "'", long37 == (-35999965L));
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 36000010L + "'", long39 == 36000010L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 79200025L + "'", long41 == 79200025L);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        long long10 = dateTimeZone0.adjustOffset((long) (byte) 1, false);
        java.lang.String str12 = dateTimeZone0.getNameKey((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj14 = null;
        boolean boolean15 = dateTimeZone13.equals(obj14);
        java.lang.String str17 = dateTimeZone13.getName(100L);
        java.lang.String str18 = dateTimeZone13.getID();
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone13.getName(100L, locale21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forID("+00:00");
        long long26 = dateTimeZone13.getMillisKeepLocal(dateTimeZone24, (long) (byte) 1);
        int int28 = dateTimeZone13.getOffset((-35999975L));
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone13, (long) (short) 0);
        long long32 = dateTimeZone13.nextTransition((long) (byte) 100);
        long long35 = dateTimeZone13.convertLocalToUTC((-3600011L), false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3600011L) + "'", long35 == (-3600011L));
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        long long4 = dateTimeZone0.previousTransition(0L);
        long long7 = dateTimeZone0.convertLocalToUTC(52L, true);
        java.lang.String str9 = dateTimeZone0.getName((long) (-1));
        java.lang.String str10 = dateTimeZone0.toString();
        boolean boolean11 = dateTimeZone0.isFixed();
        java.lang.String str13 = dateTimeZone0.getNameKey((-264899900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 'a');
        long long15 = dateTimeZone8.convertLocalToUTC((long) (short) 100, false);
        boolean boolean17 = dateTimeZone8.equals((java.lang.Object) 100);
        int int19 = dateTimeZone8.getOffset((long) 0);
        boolean boolean20 = dateTimeZone7.equals((java.lang.Object) dateTimeZone8);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone8.getName((long) 1, locale22);
        java.lang.String str25 = dateTimeZone8.getName((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant26 = null;
        int int27 = dateTimeZone8.getOffset(readableInstant26);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone8.getShortName((-115199990L), locale29);
        int int32 = dateTimeZone8.getOffset((-3599991L));
        long long34 = dateTimeZone8.previousTransition((long) 115200000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 115200000L + "'", long34 == 115200000L);
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        boolean boolean13 = dateTimeZone0.isStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName(100L, locale15);
        java.lang.String str18 = dateTimeZone0.getName(360000142L);
        long long20 = dateTimeZone0.nextTransition(10L);
        int int22 = dateTimeZone0.getOffsetFromLocal(36600000L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 10);
        int int27 = dateTimeZone23.getOffset((long) (short) 10);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone23.getName((long) 0, locale29);
        java.lang.String str31 = dateTimeZone23.toString();
        java.lang.String str32 = dateTimeZone23.getID();
        int int34 = dateTimeZone23.getOffsetFromLocal((long) (byte) 10);
        int int36 = dateTimeZone23.getOffset((long) (byte) 0);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone23.getShortName((-32L), locale38);
        boolean boolean40 = dateTimeZone0.equals((java.lang.Object) str39);
        java.lang.String str41 = dateTimeZone0.getID();
        java.lang.String str42 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        boolean boolean14 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) 10);
        int int19 = dateTimeZone15.getOffset((long) (short) 10);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone15.getName((long) 0, locale21);
        java.lang.String str23 = dateTimeZone15.toString();
        java.lang.String str24 = dateTimeZone15.getID();
        int int26 = dateTimeZone15.getOffsetFromLocal((long) (byte) 10);
        int int28 = dateTimeZone15.getOffset((long) (byte) 0);
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, 132L);
        long long34 = dateTimeZone15.convertLocalToUTC((long) 0, true, 107L);
        java.lang.String str35 = dateTimeZone15.toString();
        int int37 = dateTimeZone15.getStandardOffset((long) (-3600000));
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone38.isStandardOffset((long) 10);
        java.lang.String str42 = dateTimeZone38.getName((long) (short) 1);
        long long44 = dateTimeZone38.convertUTCToLocal((long) ' ');
        long long46 = dateTimeZone38.nextTransition(1L);
        int int48 = dateTimeZone38.getOffsetFromLocal(0L);
        int int50 = dateTimeZone38.getOffsetFromLocal(132L);
        long long53 = dateTimeZone38.adjustOffset((long) '4', true);
        java.util.TimeZone timeZone54 = dateTimeZone38.toTimeZone();
        boolean boolean55 = dateTimeZone15.equals((java.lang.Object) timeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        boolean boolean58 = dateTimeZone56.isStandardOffset(3600009L);
        long long61 = dateTimeZone56.adjustOffset(36599900L, false);
        boolean boolean62 = dateTimeZone56.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 132L + "'", long30 == 132L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 36599900L + "'", long61 == 36599900L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long9 = dateTimeZone0.adjustOffset((long) (short) 0, true);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone0.equals(obj10);
        java.lang.String str12 = dateTimeZone0.getID();
        long long14 = dateTimeZone0.convertUTCToLocal((long) (-3600000));
        long long16 = dateTimeZone0.previousTransition(360600032L);
        long long19 = dateTimeZone0.convertLocalToUTC(126599991L, true);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getName((-11L), locale21);
        java.lang.String str24 = dateTimeZone0.getNameKey(0L);
        long long27 = dateTimeZone0.adjustOffset(126000035L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3600000L) + "'", long14 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 360600032L + "'", long16 == 360600032L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 126599991L + "'", long19 == 126599991L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 126000035L + "'", long27 == 126000035L);
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        boolean boolean13 = dateTimeZone0.isStandardOffset(10L);
        long long15 = dateTimeZone0.convertUTCToLocal(1L);
        int int17 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone0.getID();
        java.lang.String str19 = dateTimeZone0.toString();
        java.lang.String str20 = dateTimeZone0.getID();
        boolean boolean22 = dateTimeZone0.isStandardOffset((-25199975L));
        long long24 = dateTimeZone0.convertUTCToLocal((-360059948L));
        long long26 = dateTimeZone0.convertUTCToLocal(35L);
        long long29 = dateTimeZone0.convertLocalToUTC(361919999L, false);
        java.lang.Class<?> wildcardClass30 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-360059948L) + "'", long24 == (-360059948L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 35L + "'", long26 == 35L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 361919999L + "'", long29 == 361919999L);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        java.lang.String str4 = dateTimeZone0.getNameKey((long) 'a');
        int int6 = dateTimeZone0.getOffset(0L);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (byte) -1, locale8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getShortName(3600099L, locale11);
        long long14 = dateTimeZone0.nextTransition(90000025L);
        long long16 = dateTimeZone0.convertUTCToLocal(132L);
        boolean boolean17 = dateTimeZone0.isFixed();
        long long21 = dateTimeZone0.convertLocalToUTC((-262799910L), false, 363660010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 90000025L + "'", long14 == 90000025L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 132L + "'", long16 == 132L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-262799910L) + "'", long21 == (-262799910L));
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100);
        boolean boolean10 = dateTimeZone0.isFixed();
        long long13 = dateTimeZone0.convertLocalToUTC((long) (-1), true);
        long long15 = dateTimeZone0.nextTransition(0L);
        long long17 = dateTimeZone0.convertUTCToLocal(36000052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 36000052L + "'", long17 == 36000052L);
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        boolean boolean13 = dateTimeZone0.isStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName(100L, locale15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long21 = dateTimeZone0.convertLocalToUTC((-11L), true, (long) 3600000);
        java.lang.String str23 = dateTimeZone0.getNameKey(0L);
        int int25 = dateTimeZone0.getOffset(3600009L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        int int29 = dateTimeZone26.getStandardOffset((-1L));
        int int31 = dateTimeZone26.getOffset((long) (short) 1);
        java.util.TimeZone timeZone32 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 10);
        java.lang.String str38 = dateTimeZone34.getName((long) 'a');
        long long41 = dateTimeZone34.convertLocalToUTC((long) (short) 100, false);
        boolean boolean43 = dateTimeZone34.equals((java.lang.Object) 100);
        int int45 = dateTimeZone34.getOffset((long) 0);
        boolean boolean46 = dateTimeZone33.equals((java.lang.Object) dateTimeZone34);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeZone34.getName((long) 1, locale48);
        java.util.TimeZone timeZone50 = dateTimeZone34.toTimeZone();
        int int52 = dateTimeZone34.getOffset((long) 360600000);
        java.util.TimeZone timeZone53 = dateTimeZone34.toTimeZone();
        boolean boolean54 = dateTimeZone0.equals((java.lang.Object) dateTimeZone34);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone34.getName((-226800000L), locale56);
        long long60 = dateTimeZone34.convertLocalToUTC((long) 1920000, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-11L) + "'", long21 == (-11L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1920000L + "'", long60 == 1920000L);
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 2100000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 2100000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        int int7 = dateTimeZone0.getStandardOffset((long) (byte) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (byte) 10, locale9);
        long long13 = dateTimeZone0.convertLocalToUTC((-475199990L), true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str16 = dateTimeZone0.getName((long) 117120000);
        long long20 = dateTimeZone0.convertLocalToUTC((-90L), false, 0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-475199990L) + "'", long13 == (-475199990L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-90L) + "'", long20 == (-90L));
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.convertUTCToLocal((long) (short) 100);
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.convertLocalToUTC(32L, false);
        java.lang.String str14 = dateTimeZone0.getName(79200025L);
        boolean boolean15 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        boolean boolean7 = dateTimeZone0.isFixed();
        long long10 = dateTimeZone0.adjustOffset(52L, false);
        java.lang.String str12 = dateTimeZone0.getNameKey((long) (byte) 100);
        boolean boolean13 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        int int18 = dateTimeZone14.getOffset((long) (short) 10);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone14.getName((long) 0, locale20);
        long long24 = dateTimeZone14.adjustOffset((long) (byte) 1, false);
        int int26 = dateTimeZone14.getOffsetFromLocal(79200025L);
        long long28 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 3600099L);
        long long31 = dateTimeZone0.adjustOffset(320400000L, true);
        java.lang.String str32 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3600099L + "'", long28 == 3600099L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 320400000L + "'", long31 == 320400000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        java.lang.String str12 = dateTimeZone0.getNameKey(97L);
        java.lang.String str14 = dateTimeZone0.getName(396600100L);
        int int16 = dateTimeZone0.getOffset((-25200000L));
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        java.lang.Class<?> wildcardClass18 = timeZone17.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        int int13 = dateTimeZone0.getOffset(684060010L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        java.lang.String str18 = dateTimeZone14.getName((long) (short) 1);
        long long20 = dateTimeZone14.convertUTCToLocal((long) ' ');
        long long22 = dateTimeZone14.nextTransition(1L);
        long long26 = dateTimeZone14.convertLocalToUTC((long) ' ', true, (long) (byte) -1);
        java.lang.String str28 = dateTimeZone14.getName((long) 10);
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone14.isLocalDateTimeGap(localDateTime29);
        long long32 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 0L);
        boolean boolean34 = dateTimeZone14.isStandardOffset((-323999965L));
        java.lang.String str35 = dateTimeZone14.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone13 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.Class<?> wildcardClass15 = timeZone13.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:00");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        long long4 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (-35999965L));
        int int6 = dateTimeZone1.getOffset((long) '#');
        java.lang.String str7 = dateTimeZone1.toString();
        long long9 = dateTimeZone1.convertUTCToLocal(101L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-32399965L) + "'", long4 == (-32399965L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3600000 + "'", int6 == 3600000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+01:00" + "'", str7, "+01:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600101L + "'", long9 == 3600101L);
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) (short) -1);
        java.lang.String str11 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, (-32L));
        java.lang.String str16 = dateTimeZone0.getNameKey(3599990L);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName(420089L, locale18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-32L) + "'", long14 == (-32L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 'a');
        long long15 = dateTimeZone8.convertLocalToUTC((long) (short) 100, false);
        boolean boolean17 = dateTimeZone8.equals((java.lang.Object) 100);
        int int19 = dateTimeZone8.getOffset((long) 0);
        boolean boolean20 = dateTimeZone7.equals((java.lang.Object) dateTimeZone8);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone8.getName((long) 1, locale22);
        java.lang.String str25 = dateTimeZone8.getName((long) (byte) 0);
        long long27 = dateTimeZone8.nextTransition(107L);
        boolean boolean29 = dateTimeZone8.isStandardOffset((-35999903L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, (int) (byte) 0);
        int int35 = dateTimeZone33.getStandardOffset(10L);
        long long37 = dateTimeZone8.getMillisKeepLocal(dateTimeZone33, (long) (short) -1);
        java.util.TimeZone timeZone38 = dateTimeZone8.toTimeZone();
        java.lang.String str40 = dateTimeZone8.getNameKey((-151199991L));
        long long43 = dateTimeZone8.adjustOffset(75L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 107L + "'", long27 == 107L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 360000000 + "'", int35 == 360000000);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-360000001L) + "'", long37 == (-360000001L));
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 75L + "'", long43 == 75L);
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.isStandardOffset((long) 10);
        java.lang.String str14 = dateTimeZone10.getName((long) (short) 1);
        long long17 = dateTimeZone10.convertLocalToUTC((long) '#', true);
        long long20 = dateTimeZone10.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone21 = dateTimeZone10.toTimeZone();
        java.lang.String str23 = dateTimeZone10.getNameKey((long) (short) 100);
        java.lang.String str25 = dateTimeZone10.getShortName((long) (byte) 1);
        java.util.TimeZone timeZone26 = dateTimeZone10.toTimeZone();
        boolean boolean27 = dateTimeZone0.equals((java.lang.Object) dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int30 = dateTimeZone0.getOffset((-313200000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long7 = dateTimeZone0.convertLocalToUTC((long) (short) 100, false);
        boolean boolean9 = dateTimeZone0.equals((java.lang.Object) 100);
        int int11 = dateTimeZone0.getOffset((long) 0);
        long long13 = dateTimeZone0.previousTransition((long) (-3600000));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        java.lang.String str18 = dateTimeZone14.getName((long) (short) 1);
        long long20 = dateTimeZone14.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) 10);
        int int25 = dateTimeZone21.getOffset((long) (short) 10);
        long long28 = dateTimeZone21.adjustOffset((long) 'a', true);
        boolean boolean29 = dateTimeZone21.isFixed();
        long long31 = dateTimeZone14.getMillisKeepLocal(dateTimeZone21, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj33 = null;
        boolean boolean34 = dateTimeZone32.equals(obj33);
        java.lang.String str36 = dateTimeZone32.getName(100L);
        long long38 = dateTimeZone32.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj40 = null;
        boolean boolean41 = dateTimeZone39.equals(obj40);
        long long43 = dateTimeZone32.getMillisKeepLocal(dateTimeZone39, (long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        boolean boolean45 = dateTimeZone14.equals((java.lang.Object) dateTimeZone39);
        boolean boolean46 = dateTimeZone0.equals((java.lang.Object) dateTimeZone39);
        java.lang.String str47 = dateTimeZone39.toString();
        boolean boolean48 = dateTimeZone39.isFixed();
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone39.isLocalDateTimeGap(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3600000L) + "'", long13 == (-3600000L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 97L + "'", long28 == 97L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName(52L, locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        long long14 = dateTimeZone0.convertLocalToUTC(187200025L, false);
        int int16 = dateTimeZone0.getStandardOffset(480100L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 187200025L + "'", long14 == 187200025L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone10.getName((long) (short) 10, locale12);
        int int15 = dateTimeZone10.getOffsetFromLocal((long) (byte) 1);
        long long17 = dateTimeZone10.nextTransition((long) '#');
        long long20 = dateTimeZone10.adjustOffset(360060000L, false);
        java.lang.String str22 = dateTimeZone10.getNameKey((-3600010L));
        java.util.TimeZone timeZone23 = dateTimeZone10.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 360060000L + "'", long20 == 360060000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.convertUTCToLocal((long) (short) 100);
        java.lang.String str9 = dateTimeZone0.toString();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getName(360060010L, locale11);
        int int14 = dateTimeZone0.getStandardOffset(720600051L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00:00.032");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone3.isLocalDateTimeGap(localDateTime4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 360600000);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', 10);
        java.lang.String str12 = dateTimeZone10.getName((-36000001L));
        boolean boolean13 = dateTimeZone3.equals((java.lang.Object) (-36000001L));
        long long17 = dateTimeZone3.convertLocalToUTC((long) 100, false, (-3120010L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 360600032L + "'", long7 == 360600032L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:10" + "'", str12, "+35:10");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        long long13 = dateTimeZone0.convertUTCToLocal((long) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        java.lang.String str18 = dateTimeZone14.getName((long) (short) 1);
        long long20 = dateTimeZone14.convertUTCToLocal((long) ' ');
        long long22 = dateTimeZone14.nextTransition(1L);
        int int24 = dateTimeZone14.getOffsetFromLocal((long) 'a');
        java.util.TimeZone timeZone25 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        long long29 = dateTimeZone0.getMillisKeepLocal(dateTimeZone27, (-35999968L));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        int int33 = dateTimeZone30.getStandardOffset((-1L));
        int int35 = dateTimeZone30.getOffset((long) (short) 1);
        java.util.TimeZone timeZone36 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        boolean boolean39 = dateTimeZone27.equals((java.lang.Object) timeZone36);
        int int41 = dateTimeZone27.getStandardOffset(20L);
        long long45 = dateTimeZone27.convertLocalToUTC((-32L), true, 0L);
        java.lang.Class<?> wildcardClass46 = dateTimeZone27.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-35999968L) + "'", long29 == (-35999968L));
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 36000000 + "'", int33 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 36000000 + "'", int35 == 36000000);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-32L) + "'", long45 == (-32L));
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        boolean boolean5 = dateTimeZone0.isFixed();
        long long7 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean8 = dateTimeZone0.isFixed();
        int int10 = dateTimeZone0.getStandardOffset((-475199990L));
        long long12 = dateTimeZone0.previousTransition(36000020L);
        int int14 = dateTimeZone0.getOffset((-354299990L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 36000020L + "'", long12 == 36000020L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        long long13 = dateTimeZone0.previousTransition((long) 1);
        long long17 = dateTimeZone0.convertLocalToUTC(35999999L, false, (-35999965L));
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        java.lang.String str20 = dateTimeZone19.getID();
        boolean boolean21 = dateTimeZone19.isFixed();
        java.lang.String str23 = dateTimeZone19.getShortName(52L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = dateTimeZone19.getOffset(readableInstant24);
        long long27 = dateTimeZone19.convertUTCToLocal((long) (-1));
        boolean boolean28 = dateTimeZone19.isFixed();
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, (-142079975L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long34 = dateTimeZone0.adjustOffset((-233400010L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35999999L + "'", long17 == 35999999L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.001" + "'", str20, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.001" + "'", str23, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-142079976L) + "'", long30 == (-142079976L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-233400010L) + "'", long34 == (-233400010L));
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(0L, locale3);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (-1));
        boolean boolean7 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long12 = dateTimeZone1.convertLocalToUTC(36600000L, false, (long) 36000000);
        long long14 = dateTimeZone1.convertUTCToLocal((-396599958L));
        boolean boolean16 = dateTimeZone1.isStandardOffset(126060000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 36599990L + "'", long12 == 36599990L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-396599948L) + "'", long14 == (-396599948L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(0L, locale3);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (-1));
        boolean boolean7 = dateTimeZone1.isFixed();
        java.lang.String str8 = dateTimeZone1.getID();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone1.getName(305520024L, locale10);
        boolean boolean13 = dateTimeZone1.isStandardOffset(115200122L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 1, false);
        long long16 = dateTimeZone0.convertUTCToLocal((long) 3120000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3120000L + "'", long16 == 3120000L);
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.TimeZone timeZone5 = dateTimeZone0.toTimeZone();
        long long9 = dateTimeZone0.convertLocalToUTC((-111599980L), true, 39600035L);
        java.lang.String str10 = dateTimeZone0.getID();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone0.getOffset(readableInstant11);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-111599980L) + "'", long9 == (-111599980L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.equals((java.lang.Object) 0);
        boolean boolean8 = dateTimeZone0.equals((java.lang.Object) (byte) 0);
        long long11 = dateTimeZone0.adjustOffset((long) 0, true);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        java.lang.String str14 = dateTimeZone0.toString();
        long long16 = dateTimeZone0.nextTransition((-360059948L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-360059948L) + "'", long16 == (-360059948L));
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long7 = dateTimeZone1.adjustOffset(232320000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 232320000L + "'", long7 == 232320000L);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(600000, 5520000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 5520000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) 0);
        boolean boolean12 = dateTimeZone0.isFixed();
        boolean boolean14 = dateTimeZone0.isStandardOffset(36000000L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getName((long) ' ', locale16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        long long21 = dateTimeZone0.convertUTCToLocal(25L);
        long long24 = dateTimeZone0.convertLocalToUTC(126600001L, true);
        long long28 = dateTimeZone0.convertLocalToUTC((-363600011L), true, 187199989L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 25L + "'", long21 == 25L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 126600001L + "'", long24 == 126600001L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-363600011L) + "'", long28 == (-363600011L));
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long14 = dateTimeZone12.nextTransition((long) (byte) 100);
        long long17 = dateTimeZone12.adjustOffset(360600001L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 360600001L + "'", long17 == 360600001L);
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) 10);
        int int7 = dateTimeZone3.getOffset((long) (short) 10);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getName((long) 0, locale9);
        java.lang.String str12 = dateTimeZone3.getNameKey((long) (byte) 1);
        boolean boolean13 = dateTimeZone3.isFixed();
        long long15 = dateTimeZone3.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone3.isLocalDateTimeGap(localDateTime16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone3.getName((long) (short) 10, locale19);
        long long22 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) ' ');
        java.lang.String str24 = dateTimeZone1.getShortName((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime25 = null;
        boolean boolean26 = dateTimeZone1.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        long long7 = dateTimeZone0.adjustOffset((long) 'a', true);
        int int9 = dateTimeZone0.getOffsetFromLocal((long) '#');
        java.lang.String str10 = dateTimeZone0.toString();
        java.lang.String str12 = dateTimeZone0.getShortName((long) ' ');
        java.lang.String str13 = dateTimeZone0.getID();
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getName(356880132L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.nextTransition((long) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int10 = dateTimeZone1.getStandardOffset((long) (-1));
        long long13 = dateTimeZone1.convertLocalToUTC(118320024L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 118320024L + "'", long13 == 118320024L);
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        long long13 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (-1L));
        long long16 = dateTimeZone0.convertLocalToUTC(52L, true);
        long long19 = dateTimeZone0.adjustOffset((-359999967L), false);
        java.lang.Class<?> wildcardClass20 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-359999967L) + "'", long19 == (-359999967L));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(360600000, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        long long10 = dateTimeZone0.nextTransition((long) (byte) 0);
        long long12 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        long long15 = dateTimeZone0.convertLocalToUTC((long) (byte) 10, false);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone0.isLocalDateTimeGap(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        boolean boolean4 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 10);
        int int9 = dateTimeZone5.getOffset((long) (short) 10);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone5.getName((long) 0, locale11);
        java.lang.String str14 = dateTimeZone5.getNameKey((long) (byte) 1);
        boolean boolean15 = dateTimeZone5.isFixed();
        long long17 = dateTimeZone5.previousTransition((long) 0);
        boolean boolean18 = dateTimeZone2.equals((java.lang.Object) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 10);
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 1);
        long long25 = dateTimeZone19.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 10);
        int int30 = dateTimeZone26.getOffset((long) (short) 10);
        long long33 = dateTimeZone26.adjustOffset((long) 'a', true);
        boolean boolean34 = dateTimeZone26.isFixed();
        long long36 = dateTimeZone19.getMillisKeepLocal(dateTimeZone26, (long) (-1));
        java.lang.String str38 = dateTimeZone19.getName(81120025L);
        long long40 = dateTimeZone2.getMillisKeepLocal(dateTimeZone19, (long) 360000000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 97L + "'", long33 == 97L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 360000052L + "'", long40 == 360000052L);
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) 0);
        long long13 = dateTimeZone7.convertUTCToLocal(32L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        int int18 = dateTimeZone14.getOffset((long) (short) 10);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone14.getName((long) 0, locale20);
        java.lang.String str23 = dateTimeZone14.getNameKey((long) (byte) 1);
        boolean boolean24 = dateTimeZone14.isFixed();
        long long26 = dateTimeZone14.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone14.isLocalDateTimeGap(localDateTime27);
        long long30 = dateTimeZone7.getMillisKeepLocal(dateTimeZone14, 3600010L);
        java.lang.String str31 = dateTimeZone14.toString();
        int int33 = dateTimeZone14.getOffset(79200025L);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 10);
        int int38 = dateTimeZone34.getOffset((long) (short) 10);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone34.getName((long) 0, locale40);
        java.lang.String str42 = dateTimeZone34.getID();
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = dateTimeZone34.getOffset(readableInstant43);
        int int46 = dateTimeZone34.getOffset(0L);
        long long49 = dateTimeZone34.adjustOffset(52L, false);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        boolean boolean52 = dateTimeZone50.isStandardOffset((long) 10);
        java.lang.String str54 = dateTimeZone50.getName((long) 'a');
        long long57 = dateTimeZone50.convertLocalToUTC((long) (short) 100, false);
        java.util.TimeZone timeZone58 = dateTimeZone50.toTimeZone();
        long long60 = dateTimeZone34.getMillisKeepLocal(dateTimeZone50, 111L);
        long long63 = dateTimeZone50.adjustOffset((long) '#', true);
        long long65 = dateTimeZone14.getMillisKeepLocal(dateTimeZone50, (-360060000L));
        int int67 = dateTimeZone50.getOffset(233520014L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3600010L + "'", long30 == 3600010L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 52L + "'", long49 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L + "'", long57 == 100L);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 111L + "'", long60 == 111L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 35L + "'", long63 == 35L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-360060000L) + "'", long65 == (-360060000L));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) (short) 1);
        long long7 = dateTimeZone1.convertUTCToLocal((long) ' ');
        long long9 = dateTimeZone1.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone1.getOffset(readableInstant10);
        boolean boolean13 = dateTimeZone1.isStandardOffset((long) ' ');
        long long16 = dateTimeZone1.convertLocalToUTC((long) '4', true);
        boolean boolean18 = dateTimeZone1.isStandardOffset(360600000L);
        long long22 = dateTimeZone1.convertLocalToUTC((-475199990L), false, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        long long27 = dateTimeZone25.nextTransition(36000000L);
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) 36000000L);
        int int30 = dateTimeZone1.getStandardOffset((long) 117120000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 32L + "'", long7 == 32L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-475199990L) + "'", long22 == (-475199990L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 36000000L + "'", long27 == 36000000L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(187200000, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        boolean boolean5 = dateTimeZone0.isFixed();
        long long7 = dateTimeZone0.nextTransition((long) (-1));
        java.lang.String str9 = dateTimeZone0.getName((long) (byte) -1);
        long long11 = dateTimeZone0.convertUTCToLocal((-115200001L));
        long long13 = dateTimeZone0.nextTransition((-35999966L));
        java.lang.String str15 = dateTimeZone0.getName(356880000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-115200001L) + "'", long11 == (-115200001L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-35999966L) + "'", long13 == (-35999966L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        long long12 = dateTimeZone0.nextTransition((long) '#');
        long long16 = dateTimeZone0.convertLocalToUTC(0L, false, 32L);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getName((-39599878L), locale18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(3660000, 600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(351300000, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) 10);
        int int7 = dateTimeZone3.getOffset((long) (short) 10);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getName((long) 0, locale9);
        java.lang.String str11 = dateTimeZone3.toString();
        java.lang.String str12 = dateTimeZone3.getID();
        long long16 = dateTimeZone3.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long19 = dateTimeZone3.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str21 = dateTimeZone3.getShortName((long) ' ');
        long long23 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (-35999975L));
        long long25 = dateTimeZone3.nextTransition(100L);
        java.lang.Class<?> wildcardClass26 = dateTimeZone3.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+35:00" + "'", str2, "+35:00");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 90000025L + "'", long23 == 90000025L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        long long7 = dateTimeZone0.adjustOffset((long) 'a', true);
        boolean boolean8 = dateTimeZone0.isFixed();
        long long10 = dateTimeZone0.convertUTCToLocal((long) '4');
        long long12 = dateTimeZone0.nextTransition((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        java.lang.String str18 = dateTimeZone14.getName((long) (short) 1);
        long long20 = dateTimeZone14.convertUTCToLocal((long) ' ');
        long long22 = dateTimeZone14.nextTransition(1L);
        java.lang.String str24 = dateTimeZone14.getNameKey(10L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        int int28 = dateTimeZone25.getStandardOffset((-1L));
        int int30 = dateTimeZone25.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone31.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean36 = dateTimeZone25.equals((java.lang.Object) (byte) 0);
        long long38 = dateTimeZone14.getMillisKeepLocal(dateTimeZone25, (long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) 10);
        java.lang.String str43 = dateTimeZone39.getName((long) 'a');
        long long45 = dateTimeZone39.nextTransition((long) '4');
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone39.getShortName(100L, locale47);
        long long52 = dateTimeZone39.convertLocalToUTC(10L, false, (long) (short) 10);
        boolean boolean53 = dateTimeZone25.equals((java.lang.Object) 10L);
        org.joda.time.LocalDateTime localDateTime54 = null;
        boolean boolean55 = dateTimeZone25.isLocalDateTimeGap(localDateTime54);
        java.lang.String str57 = dateTimeZone25.getName(100L);
        long long59 = dateTimeZone0.getMillisKeepLocal(dateTimeZone25, 97L);
        java.lang.String str61 = dateTimeZone0.getName(0L);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        int int65 = dateTimeZone62.getStandardOffset((-1L));
        int int67 = dateTimeZone62.getOffset((long) (short) 1);
        java.util.TimeZone timeZone68 = dateTimeZone62.toTimeZone();
        java.util.TimeZone timeZone69 = dateTimeZone62.toTimeZone();
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeZone62.getName(32L, locale71);
        int int74 = dateTimeZone62.getOffset((long) (byte) 1);
        java.lang.String str75 = dateTimeZone62.toString();
        boolean boolean76 = dateTimeZone62.isFixed();
        long long78 = dateTimeZone62.convertUTCToLocal(71999999L);
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeZone62.getName(0L, locale80);
        boolean boolean82 = dateTimeZone0.equals((java.lang.Object) dateTimeZone62);
        boolean boolean84 = dateTimeZone0.isStandardOffset(180011L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 97L + "'", long12 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L + "'", long38 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 97L + "'", long59 == 97L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 71999999L + "'", long78 == 71999999L);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 0, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.lang.String str7 = dateTimeZone4.getShortName(79200025L);
        boolean boolean8 = dateTimeZone2.equals((java.lang.Object) str7);
        int int10 = dateTimeZone2.getStandardOffset((-108000015L));
        int int12 = dateTimeZone2.getStandardOffset(79200133L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+01:00" + "'", str7, "+01:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3120000 + "'", int10 == 3120000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3120000 + "'", int12 == 3120000);
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        long long3 = dateTimeZone1.nextTransition((long) (short) 10);
        long long5 = dateTimeZone1.convertUTCToLocal(101L);
        long long9 = dateTimeZone1.convertLocalToUTC(396600000L, true, (long) (byte) -1);
        java.lang.String str10 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 10);
        int int15 = dateTimeZone11.getOffset((long) (short) 10);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone11.getName((long) 0, locale17);
        java.lang.String str19 = dateTimeZone11.toString();
        java.lang.String str20 = dateTimeZone11.getID();
        long long24 = dateTimeZone11.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long27 = dateTimeZone11.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone28 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        long long33 = dateTimeZone30.adjustOffset((long) (byte) 10, false);
        java.util.TimeZone timeZone34 = dateTimeZone30.toTimeZone();
        long long36 = dateTimeZone30.nextTransition(1L);
        long long38 = dateTimeZone30.nextTransition((long) ' ');
        boolean boolean39 = dateTimeZone1.equals((java.lang.Object) ' ');
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        int int43 = dateTimeZone41.getStandardOffset(132L);
        boolean boolean44 = dateTimeZone1.equals((java.lang.Object) int43);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeZone1.getName(30L, locale46);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 101L + "'", long5 == 101L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 396600000L + "'", long9 == 396600000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 32L + "'", long38 == 32L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 187200000 + "'", int43 == 187200000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        long long13 = dateTimeZone0.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        long long20 = dateTimeZone0.adjustOffset(360000052L, true);
        long long22 = dateTimeZone0.convertUTCToLocal((-360059948L));
        java.lang.String str23 = dateTimeZone0.getID();
        java.lang.Class<?> wildcardClass24 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 360000052L + "'", long20 == 360000052L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-360059948L) + "'", long22 == (-360059948L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        boolean boolean14 = dateTimeZone0.isFixed();
        int int16 = dateTimeZone0.getOffset(100L);
        boolean boolean17 = dateTimeZone0.isFixed();
        int int19 = dateTimeZone0.getOffset(359939999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        java.lang.String str4 = dateTimeZone0.getNameKey((long) 'a');
        int int6 = dateTimeZone0.getOffset(0L);
        long long8 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean10 = dateTimeZone0.isFixed();
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(360000000);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(42L, locale3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getName(90000025L, locale6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getName((-395999975L), locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean15 = dateTimeZone14.isFixed();
        java.lang.String str17 = dateTimeZone14.getShortName((long) '4');
        long long19 = dateTimeZone14.convertUTCToLocal((long) (short) 10);
        long long21 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) '4');
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone12.isLocalDateTimeGap(localDateTime22);
        long long25 = dateTimeZone12.convertUTCToLocal((long) (short) -1);
        java.lang.String str26 = dateTimeZone12.toString();
        int int28 = dateTimeZone12.getStandardOffset(35999999L);
        java.lang.String str30 = dateTimeZone12.getShortName(0L);
        long long32 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, (-349200000L));
        boolean boolean33 = dateTimeZone12.isFixed();
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone12.getName((-118799991L), locale35);
        java.util.Locale locale38 = null;
        java.lang.String str39 = dateTimeZone12.getShortName((-130199964L), locale38);
        long long41 = dateTimeZone12.convertUTCToLocal(324060100L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:00" + "'", str4, "+100:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:00" + "'", str10, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 36000052L + "'", long21 == 36000052L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35999999L + "'", long25 == 35999999L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 36000000 + "'", int28 == 36000000);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-25200000L) + "'", long32 == (-25200000L));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+10:00" + "'", str36, "+10:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+10:00" + "'", str39, "+10:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 360060100L + "'", long41 == 360060100L);
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.equals((java.lang.Object) 0);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 0, locale8);
        java.lang.String str11 = dateTimeZone0.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) 10);
        java.lang.String str16 = dateTimeZone12.getName((long) (short) 1);
        long long18 = dateTimeZone12.convertUTCToLocal((long) ' ');
        long long20 = dateTimeZone12.convertUTCToLocal((long) (short) 100);
        int int22 = dateTimeZone12.getOffset((long) (short) 10);
        boolean boolean23 = dateTimeZone0.equals((java.lang.Object) dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone0.isLocalDateTimeGap(localDateTime24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone27.getName(0L, locale29);
        java.lang.String str32 = dateTimeZone27.getShortName((long) (-1));
        java.lang.String str34 = dateTimeZone27.getShortName((long) 'a');
        long long36 = dateTimeZone0.getMillisKeepLocal(dateTimeZone27, (long) 3600000);
        long long38 = dateTimeZone27.convertUTCToLocal((long) 0);
        java.lang.String str40 = dateTimeZone27.getShortName(363120034L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3599990L + "'", long36 == 3599990L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        boolean boolean5 = dateTimeZone0.isFixed();
        long long7 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean8 = dateTimeZone0.isFixed();
        int int10 = dateTimeZone0.getStandardOffset((-475199990L));
        java.lang.String str12 = dateTimeZone0.getName(3600099L);
        int int14 = dateTimeZone0.getOffsetFromLocal(123480100L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((-32399965L), locale3);
        java.lang.Class<?> wildcardClass5 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName(100L, locale8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getName((long) '#', locale11);
        java.lang.String str13 = dateTimeZone0.getID();
        long long16 = dateTimeZone0.adjustOffset(99L, false);
        java.lang.String str18 = dateTimeZone0.getNameKey((-39599878L));
        int int20 = dateTimeZone0.getOffsetFromLocal(151200001L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 99L + "'", long16 == 99L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset((-1L));
        int int16 = dateTimeZone11.getOffset((long) (short) 1);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, 0L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 10);
        int int23 = dateTimeZone19.getOffset((long) (short) 10);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone19.getName((long) 0, locale25);
        java.lang.String str27 = dateTimeZone19.toString();
        java.lang.String str28 = dateTimeZone19.getID();
        long long32 = dateTimeZone19.convertLocalToUTC((long) (byte) -1, false, 97L);
        java.util.TimeZone timeZone33 = dateTimeZone19.toTimeZone();
        boolean boolean34 = dateTimeZone11.equals((java.lang.Object) dateTimeZone19);
        boolean boolean35 = dateTimeZone19.isFixed();
        int int37 = dateTimeZone19.getOffset((-356400000L));
        org.joda.time.ReadableInstant readableInstant38 = null;
        int int39 = dateTimeZone19.getOffset(readableInstant38);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 'a');
        long long15 = dateTimeZone8.convertLocalToUTC((long) (short) 100, false);
        boolean boolean17 = dateTimeZone8.equals((java.lang.Object) 100);
        int int19 = dateTimeZone8.getOffset((long) 0);
        boolean boolean20 = dateTimeZone7.equals((java.lang.Object) dateTimeZone8);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone8.getName((long) 1, locale22);
        java.util.TimeZone timeZone24 = dateTimeZone8.toTimeZone();
        java.lang.String str26 = dateTimeZone8.getNameKey(71999979L);
        long long28 = dateTimeZone8.nextTransition((-100L));
        int int30 = dateTimeZone8.getStandardOffset((-36000055L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-100L) + "'", long28 == (-100L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        long long4 = dateTimeZone2.convertUTCToLocal(32L);
        java.lang.String str5 = dateTimeZone2.getID();
        boolean boolean6 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 10);
        int int11 = dateTimeZone7.getOffset((long) (short) 10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone7.getName((long) 0, locale13);
        java.lang.String str15 = dateTimeZone7.getID();
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone7.getOffset(readableInstant16);
        int int19 = dateTimeZone7.getOffset(0L);
        long long22 = dateTimeZone7.adjustOffset(52L, false);
        java.lang.String str24 = dateTimeZone7.getName(35999999L);
        java.lang.String str25 = dateTimeZone7.getID();
        long long27 = dateTimeZone2.getMillisKeepLocal(dateTimeZone7, 356400122L);
        long long31 = dateTimeZone2.convertLocalToUTC((-111600024L), true, (long) 126000000);
        org.joda.time.ReadableInstant readableInstant32 = null;
        int int33 = dateTimeZone2.getOffset(readableInstant32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 187200032L + "'", long4 == 187200032L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+52:00" + "'", str5, "+52:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 543600122L + "'", long27 == 543600122L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-298800024L) + "'", long31 == (-298800024L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 187200000 + "'", int33 == 187200000);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        java.lang.String str13 = dateTimeZone0.getNameKey((long) (short) 100);
        java.lang.String str15 = dateTimeZone0.getShortName((long) (byte) 1);
        long long17 = dateTimeZone0.convertUTCToLocal(0L);
        java.lang.String str19 = dateTimeZone0.getNameKey((-395999975L));
        java.lang.String str20 = dateTimeZone0.getID();
        java.lang.String str21 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        long long7 = dateTimeZone1.nextTransition((long) '4');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(100L, locale9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str13 = dateTimeZone1.getNameKey((long) (short) 100);
        boolean boolean14 = dateTimeZone1.isFixed();
        java.lang.String str16 = dateTimeZone1.getShortName(132L);
        java.util.TimeZone timeZone17 = dateTimeZone1.toTimeZone();
        long long20 = dateTimeZone1.convertLocalToUTC(36L, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 36L + "'", long20 == 36L);
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        long long13 = dateTimeZone0.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long16 = dateTimeZone0.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        long long20 = dateTimeZone0.adjustOffset(360000052L, true);
        long long22 = dateTimeZone0.convertUTCToLocal((-360059948L));
        int int24 = dateTimeZone0.getOffset((-111600024L));
        boolean boolean26 = dateTimeZone0.isStandardOffset(543660122L);
        int int28 = dateTimeZone0.getOffset(71999969L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 360000052L + "'", long20 == 360000052L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-360059948L) + "'", long22 == (-360059948L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone3.getOffset(readableInstant4);
        long long8 = dateTimeZone3.convertLocalToUTC((long) (-1), false);
        java.lang.String str10 = dateTimeZone3.getNameKey(0L);
        int int12 = dateTimeZone3.getOffsetFromLocal((-475199990L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 0);
        int int17 = dateTimeZone15.getOffsetFromLocal((long) 126600000);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone15.getName(42L, locale19);
        long long22 = dateTimeZone3.getMillisKeepLocal(dateTimeZone15, (-151200190L));
        int int24 = dateTimeZone15.getOffset((-25199953L));
        boolean boolean25 = dateTimeZone1.equals((java.lang.Object) (-25199953L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 115200000 + "'", int17 == 115200000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+32:00" + "'", str20, "+32:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-266400190L) + "'", long22 == (-266400190L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 115200000 + "'", int24 == 115200000);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        boolean boolean5 = dateTimeZone0.isFixed();
        long long7 = dateTimeZone0.nextTransition((long) (-1));
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) ' ', locale9);
        int int12 = dateTimeZone0.getStandardOffset((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int15 = dateTimeZone0.getOffsetFromLocal((-35999958L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) 10);
        java.lang.String str20 = dateTimeZone16.getName((long) (short) 1);
        long long22 = dateTimeZone16.convertUTCToLocal((long) ' ');
        long long24 = dateTimeZone16.nextTransition(1L);
        long long28 = dateTimeZone16.convertLocalToUTC((long) ' ', true, (long) (byte) -1);
        java.lang.String str30 = dateTimeZone16.getName((long) 10);
        long long32 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, 360059999L);
        java.util.TimeZone timeZone33 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        boolean boolean35 = dateTimeZone34.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 360059999L + "'", long32 == 360059999L);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1920000, (-3600000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -3600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone2.getOffset(readableInstant3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone2.getOffset(readableInstant5);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36600000 + "'", int4 == 36600000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36600000 + "'", int6 == 36600000);
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.lang.String str7 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getNameKey((-3599909L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 36000000 + "'", int2 == 36000000);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 36000000 + "'", int5 == 36000000);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
// flaky:         org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        long long10 = dateTimeZone0.nextTransition((long) (byte) 0);
        long long12 = dateTimeZone0.nextTransition((long) 360600000);
        java.lang.String str14 = dateTimeZone0.getShortName((long) 360060000);
        long long16 = dateTimeZone0.previousTransition((-9119900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 360600000L + "'", long12 == 360600000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-9119900L) + "'", long16 == (-9119900L));
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (byte) 10);
        java.lang.String str11 = dateTimeZone0.getName(36000052L);
        long long13 = dateTimeZone0.convertUTCToLocal((-114600011L));
        long long15 = dateTimeZone0.convertUTCToLocal(126600001L);
        int int17 = dateTimeZone0.getStandardOffset(36599999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-114600011L) + "'", long13 == (-114600011L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 126600001L + "'", long15 == 126600001L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        int int13 = dateTimeZone0.getOffset((long) (byte) 0);
        long long16 = dateTimeZone0.convertLocalToUTC((-1L), false);
        java.lang.String str18 = dateTimeZone0.getShortName(0L);
        long long20 = dateTimeZone0.convertUTCToLocal((-35999903L));
        long long22 = dateTimeZone0.previousTransition((-118799991L));
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone0.getName((-36000032L), locale24);
        java.lang.String str26 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-35999903L) + "'", long20 == (-35999903L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-118799991L) + "'", long22 == (-118799991L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long9 = dateTimeZone0.adjustOffset((long) (short) 0, true);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone0.equals(obj10);
        java.lang.String str12 = dateTimeZone0.getID();
        long long14 = dateTimeZone0.convertUTCToLocal((long) (-3600000));
        long long16 = dateTimeZone0.previousTransition(360600032L);
        long long19 = dateTimeZone0.convertLocalToUTC(3600099L, true);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) 10);
        java.lang.String str26 = dateTimeZone22.getName((long) 'a');
        long long28 = dateTimeZone22.nextTransition((long) '4');
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone22.getShortName(100L, locale30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        long long34 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, 3600010L);
        long long36 = dateTimeZone21.previousTransition(35L);
        long long38 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, 0L);
        java.lang.String str40 = dateTimeZone0.getShortName((-3599964L));
        java.lang.String str41 = dateTimeZone0.getID();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone0.getShortName(396600001L, locale43);
        java.lang.Class<?> wildcardClass45 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3600000L) + "'", long14 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 360600032L + "'", long16 == 360600032L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3600099L + "'", long19 == 3600099L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3600010L + "'", long34 == 3600010L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 35L + "'", long36 == 35L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        int int12 = dateTimeZone0.getOffset((long) (byte) 1);
        java.lang.String str13 = dateTimeZone0.toString();
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone16.nextTransition((long) '#');
        java.lang.String str19 = dateTimeZone16.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        long long26 = dateTimeZone21.convertLocalToUTC((long) (-1), false);
        java.lang.String str28 = dateTimeZone21.getNameKey(0L);
        long long30 = dateTimeZone16.getMillisKeepLocal(dateTimeZone21, 3600010L);
        int int32 = dateTimeZone21.getStandardOffset((long) 'a');
        int int34 = dateTimeZone21.getStandardOffset((long) (short) 0);
        boolean boolean35 = dateTimeZone0.equals((java.lang.Object) dateTimeZone21);
        long long37 = dateTimeZone21.previousTransition((-3600001L));
        long long39 = dateTimeZone21.convertUTCToLocal(31L);
        java.lang.String str40 = dateTimeZone21.toString();
        long long42 = dateTimeZone21.nextTransition((-100L));
        long long45 = dateTimeZone21.convertLocalToUTC((-36000008L), false);
        boolean boolean47 = dateTimeZone21.isStandardOffset(396600000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3600010L + "'", long30 == 3600010L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-3600001L) + "'", long37 == (-3600001L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 31L + "'", long39 == 31L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-100L) + "'", long42 == (-100L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-36000008L) + "'", long45 == (-36000008L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        long long7 = dateTimeZone0.adjustOffset((long) 'a', true);
        int int9 = dateTimeZone0.getOffsetFromLocal((long) '#');
        java.lang.String str10 = dateTimeZone0.toString();
        java.lang.String str12 = dateTimeZone0.getName((-5519948L));
        long long14 = dateTimeZone0.nextTransition((-313859964L));
        long long17 = dateTimeZone0.adjustOffset(353280000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-313859964L) + "'", long14 == (-313859964L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 353280000L + "'", long17 == 353280000L);
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        int int6 = dateTimeZone0.getOffsetFromLocal(1L);
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone11.getName((-359999956L), locale13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.lang.String str2 = dateTimeZone1.toString();
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        java.lang.String str7 = dateTimeZone1.getName((-10L));
        java.lang.Class<?> wildcardClass8 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.001" + "'", str2, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.001" + "'", str7, "+00:00:00.001");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        int int6 = dateTimeZone0.getStandardOffset((long) (short) 10);
        boolean boolean7 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getName(36000052L, locale10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("+00:00:00.001");
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj15 = null;
        boolean boolean16 = dateTimeZone14.equals(obj15);
        java.lang.String str18 = dateTimeZone14.getName(100L);
        java.lang.String str19 = dateTimeZone14.getID();
        boolean boolean20 = dateTimeZone14.isFixed();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) 10);
        java.lang.String str25 = dateTimeZone21.getName((long) (short) 1);
        long long27 = dateTimeZone21.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) 10);
        int int32 = dateTimeZone28.getOffset((long) (short) 10);
        long long35 = dateTimeZone28.adjustOffset((long) 'a', true);
        boolean boolean36 = dateTimeZone28.isFixed();
        long long38 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        long long40 = dateTimeZone14.getMillisKeepLocal(dateTimeZone28, 32L);
        boolean boolean41 = dateTimeZone13.equals((java.lang.Object) dateTimeZone14);
        boolean boolean43 = dateTimeZone14.isStandardOffset((long) 3600000);
        long long46 = dateTimeZone14.adjustOffset((-5519958L), true);
        long long48 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 352800032L);
        int int50 = dateTimeZone0.getStandardOffset(90599990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 97L + "'", long35 == 97L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-5519958L) + "'", long46 == (-5519958L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 352800032L + "'", long48 == 352800032L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.nextTransition(32L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getName((-1L), locale5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 10);
        java.lang.String str11 = dateTimeZone7.getName((long) (short) 1);
        long long13 = dateTimeZone7.convertUTCToLocal((long) ' ');
        long long15 = dateTimeZone7.nextTransition(1L);
        int int17 = dateTimeZone7.getOffsetFromLocal((long) 'a');
        java.util.TimeZone timeZone18 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone19.getOffset(readableInstant20);
        long long23 = dateTimeZone1.getMillisKeepLocal(dateTimeZone19, 126599991L);
        java.lang.String str24 = dateTimeZone1.toString();
        java.lang.String str26 = dateTimeZone1.getShortName(3660000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 126599991L + "'", long23 == 126599991L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.nextTransition((long) 100);
        java.lang.String str8 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(10L, false, (-1L));
        long long15 = dateTimeZone1.convertLocalToUTC(0L, true);
        java.lang.String str17 = dateTimeZone1.getShortName((-115199900L));
        java.lang.String str18 = dateTimeZone1.getID();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone1.getOffset(readableInstant19);
        long long23 = dateTimeZone1.adjustOffset(110L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 110L + "'", long23 == 110L);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone9.isStandardOffset((long) 10);
        java.lang.String str13 = dateTimeZone9.getName((long) 'a');
        java.lang.String str15 = dateTimeZone9.getShortName((long) 1);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) (byte) 100);
        long long19 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, 35L);
        long long21 = dateTimeZone0.nextTransition((long) 1);
        boolean boolean22 = dateTimeZone0.isFixed();
        long long25 = dateTimeZone0.adjustOffset((-39120000L), true);
        long long27 = dateTimeZone0.previousTransition((-3599989L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-39120000L) + "'", long25 == (-39120000L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-3599989L) + "'", long27 == (-3599989L));
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (byte) 1);
        boolean boolean10 = dateTimeZone0.isFixed();
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone0.getOffset(readableInstant11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getShortName(35L, locale14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getShortName(36000035L, locale17);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        int int5 = dateTimeZone1.getOffset((long) (short) 10);
        boolean boolean7 = dateTimeZone1.equals((java.lang.Object) 0);
        java.lang.String str8 = dateTimeZone1.getID();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone1.getName(124320010L, locale10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        int int4 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        int int8 = dateTimeZone5.getStandardOffset((-1L));
        int int10 = dateTimeZone5.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone5.getOffset(readableInstant11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone5.getName((long) (byte) 1, locale14);
        boolean boolean16 = dateTimeZone5.isFixed();
        boolean boolean17 = dateTimeZone1.equals((java.lang.Object) dateTimeZone5);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone5.getOffset(readableInstant18);
        java.lang.String str20 = dateTimeZone5.getID();
        java.lang.Class<?> wildcardClass21 = dateTimeZone5.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        java.lang.String str9 = dateTimeZone0.getName((long) 0);
        java.lang.String str11 = dateTimeZone0.getNameKey((long) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 1, (int) '#');
        boolean boolean15 = dateTimeZone0.equals((java.lang.Object) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) 10);
        int int20 = dateTimeZone16.getOffset((long) (short) 10);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone16.getName((long) 0, locale22);
        java.lang.String str24 = dateTimeZone16.toString();
        java.lang.String str25 = dateTimeZone16.getID();
        long long27 = dateTimeZone16.nextTransition((-5519900L));
        long long30 = dateTimeZone16.adjustOffset((-90L), true);
        boolean boolean31 = dateTimeZone0.equals((java.lang.Object) (-90L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-5519900L) + "'", long27 == (-5519900L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-90L) + "'", long30 == (-90L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.getID();
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        int int12 = dateTimeZone0.getOffset(0L);
        long long15 = dateTimeZone0.adjustOffset(52L, false);
        java.lang.String str16 = dateTimeZone0.toString();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone0.getShortName(122L, locale18);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getShortName(360060000L, locale21);
        long long25 = dateTimeZone0.convertLocalToUTC(197999957L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 197999957L + "'", long25 == 197999957L);
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (byte) 1);
        boolean boolean10 = dateTimeZone0.isFixed();
        long long12 = dateTimeZone0.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        java.lang.String str15 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long19 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, (long) (-1));
        boolean boolean21 = dateTimeZone16.isStandardOffset(20L);
        java.lang.String str22 = dateTimeZone16.getID();
        boolean boolean23 = dateTimeZone16.isFixed();
        java.lang.Class<?> wildcardClass24 = dateTimeZone16.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone4.isStandardOffset((long) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) 'a');
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone4.getOffset(readableInstant9);
        long long12 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, (long) (short) 100);
        boolean boolean14 = dateTimeZone4.isStandardOffset((-187199878L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        java.lang.String str5 = dateTimeZone0.toString();
        long long7 = dateTimeZone0.previousTransition((-111599999L));
        long long11 = dateTimeZone0.convertLocalToUTC(48L, false, (-3600000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-111599999L) + "'", long7 == (-111599999L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 48L + "'", long11 == 48L);
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 1920000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 1920000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone6.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean11 = dateTimeZone0.equals((java.lang.Object) (byte) 0);
        long long13 = dateTimeZone0.convertUTCToLocal(0L);
        boolean boolean15 = dateTimeZone0.isStandardOffset((long) '#');
        long long18 = dateTimeZone0.convertLocalToUTC(360000000L, true);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 10);
        int int23 = dateTimeZone19.getOffset((long) (short) 10);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone19.getName((long) 0, locale25);
        java.lang.String str27 = dateTimeZone19.toString();
        java.lang.String str28 = dateTimeZone19.getID();
        long long32 = dateTimeZone19.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long35 = dateTimeZone19.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone36 = dateTimeZone19.toTimeZone();
        long long39 = dateTimeZone19.adjustOffset(360000052L, true);
        long long41 = dateTimeZone19.convertUTCToLocal((-360059948L));
        int int43 = dateTimeZone19.getOffset((-111600024L));
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) 10);
        java.lang.String str48 = dateTimeZone44.getName((long) (short) 1);
        java.lang.String str49 = dateTimeZone44.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj51 = null;
        boolean boolean52 = dateTimeZone50.equals(obj51);
        java.lang.String str54 = dateTimeZone50.getName(100L);
        boolean boolean55 = dateTimeZone50.isFixed();
        long long57 = dateTimeZone50.nextTransition((long) (-1));
        boolean boolean58 = dateTimeZone50.isFixed();
        java.lang.String str60 = dateTimeZone50.getName((long) (short) 100);
        long long62 = dateTimeZone50.convertUTCToLocal(0L);
        long long64 = dateTimeZone44.getMillisKeepLocal(dateTimeZone50, (long) 187200000);
        long long66 = dateTimeZone19.getMillisKeepLocal(dateTimeZone50, (-3120010L));
        long long68 = dateTimeZone0.getMillisKeepLocal(dateTimeZone19, 126600031L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 360000000L + "'", long18 == 360000000L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 360000052L + "'", long39 == 360000052L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-360059948L) + "'", long41 == (-360059948L));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 187200000L + "'", long64 == 187200000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-3120010L) + "'", long66 == (-3120010L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 126600031L + "'", long68 == 126600031L);
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, (int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone2.getOffset(readableInstant3);
        int int6 = dateTimeZone2.getOffsetFromLocal(0L);
        long long8 = dateTimeZone2.nextTransition((long) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 36600000 + "'", int4 == 36600000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 36600000 + "'", int6 == 36600000);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        int int5 = dateTimeZone1.getOffset((long) (short) 10);
        long long8 = dateTimeZone1.adjustOffset((long) 'a', true);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean11 = dateTimeZone10.isFixed();
        long long15 = dateTimeZone10.convertLocalToUTC(10L, false, (long) 0);
        long long17 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, (long) 'a');
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone10.getShortName((long) 0, locale19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) 10);
        java.lang.String str25 = dateTimeZone21.getName((long) 'a');
        long long28 = dateTimeZone21.convertLocalToUTC((long) (short) 100, false);
        boolean boolean30 = dateTimeZone21.equals((java.lang.Object) 100);
        int int32 = dateTimeZone21.getOffset((long) 0);
        long long34 = dateTimeZone21.previousTransition((long) (-3600000));
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) 10);
        java.lang.String str39 = dateTimeZone35.getName((long) (short) 1);
        long long41 = dateTimeZone35.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) 10);
        int int46 = dateTimeZone42.getOffset((long) (short) 10);
        long long49 = dateTimeZone42.adjustOffset((long) 'a', true);
        boolean boolean50 = dateTimeZone42.isFixed();
        long long52 = dateTimeZone35.getMillisKeepLocal(dateTimeZone42, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj54 = null;
        boolean boolean55 = dateTimeZone53.equals(obj54);
        java.lang.String str57 = dateTimeZone53.getName(100L);
        long long59 = dateTimeZone53.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj61 = null;
        boolean boolean62 = dateTimeZone60.equals(obj61);
        long long64 = dateTimeZone53.getMillisKeepLocal(dateTimeZone60, (long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        boolean boolean66 = dateTimeZone35.equals((java.lang.Object) dateTimeZone60);
        boolean boolean67 = dateTimeZone21.equals((java.lang.Object) dateTimeZone60);
        java.lang.String str68 = dateTimeZone21.toString();
        long long70 = dateTimeZone10.getMillisKeepLocal(dateTimeZone21, (-35999903L));
        long long74 = dateTimeZone10.convertLocalToUTC((-3600011L), false, (-32399965L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology75 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 97L + "'", long8 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3600000L) + "'", long34 == (-3600000L));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 97L + "'", long49 == 97L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-35999903L) + "'", long70 == (-35999903L));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-3600011L) + "'", long74 == (-3600011L));
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) 0);
        boolean boolean13 = dateTimeZone7.equals((java.lang.Object) (byte) 100);
        int int15 = dateTimeZone7.getOffsetFromLocal(32L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone7.getOffset(readableInstant16);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone7.isLocalDateTimeGap(localDateTime18);
        java.lang.String str21 = dateTimeZone7.getNameKey(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean4 = dateTimeZone3.isFixed();
        java.lang.String str6 = dateTimeZone3.getShortName((long) '4');
        long long8 = dateTimeZone3.convertUTCToLocal((long) (short) 10);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) '4');
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone1.convertUTCToLocal((long) (short) -1);
        java.lang.String str15 = dateTimeZone1.toString();
        int int17 = dateTimeZone1.getStandardOffset(35999999L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone1.getShortName(0L, locale19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000052L + "'", long10 == 36000052L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35999999L + "'", long14 == 35999999L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        long long12 = dateTimeZone0.convertLocalToUTC(100L, true, (long) ' ');
        java.lang.String str14 = dateTimeZone0.getShortName(101L);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone0.getOffset(readableInstant15);
        long long18 = dateTimeZone0.previousTransition((-30479975L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-30479975L) + "'", long18 == (-30479975L));
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) 0);
        boolean boolean4 = dateTimeZone0.isStandardOffset(10L);
        long long6 = dateTimeZone0.nextTransition(3600010L);
        boolean boolean8 = dateTimeZone0.isStandardOffset(110L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3600010L + "'", long6 == 3600010L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        int int5 = dateTimeZone1.getOffset((long) (short) 10);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getName((long) 0, locale7);
        java.lang.String str9 = dateTimeZone1.toString();
        long long13 = dateTimeZone1.convertLocalToUTC(100L, true, (long) ' ');
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone1.getOffset(readableInstant14);
        long long18 = dateTimeZone1.adjustOffset((long) (short) 0, true);
        boolean boolean19 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 10);
        java.lang.String str24 = dateTimeZone20.getName((long) 'a');
        long long26 = dateTimeZone20.nextTransition((long) '4');
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone20.getShortName(100L, locale28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        int int31 = dateTimeZone20.getOffset(readableInstant30);
        boolean boolean33 = dateTimeZone20.isStandardOffset(10L);
        boolean boolean34 = dateTimeZone1.equals((java.lang.Object) boolean33);
        int int36 = dateTimeZone1.getOffsetFromLocal((-29280000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology37 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 52L + "'", long26 == 52L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        java.lang.String str14 = dateTimeZone0.getNameKey(49560000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        long long5 = dateTimeZone1.convertLocalToUTC((long) (byte) 1, false, (long) (short) 0);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        java.lang.String str11 = dateTimeZone7.getName(100L);
        boolean boolean12 = dateTimeZone7.isFixed();
        long long14 = dateTimeZone7.nextTransition((long) (-1));
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone7.getName((long) ' ', locale16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        int int19 = dateTimeZone7.getOffset(readableInstant18);
        java.lang.String str20 = dateTimeZone7.toString();
        int int22 = dateTimeZone7.getStandardOffset(0L);
        java.lang.String str23 = dateTimeZone7.toString();
        long long25 = dateTimeZone7.previousTransition((-25199974L));
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone7.isLocalDateTimeGap(localDateTime26);
        boolean boolean28 = dateTimeZone1.equals((java.lang.Object) dateTimeZone7);
        int int30 = dateTimeZone7.getOffsetFromLocal(431520024L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-25199974L) + "'", long25 == (-25199974L));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        java.lang.String str5 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj7 = null;
        boolean boolean8 = dateTimeZone6.equals(obj7);
        java.lang.String str10 = dateTimeZone6.getName(100L);
        boolean boolean11 = dateTimeZone6.isFixed();
        long long13 = dateTimeZone6.nextTransition((long) (-1));
        boolean boolean14 = dateTimeZone6.isFixed();
        java.lang.String str16 = dateTimeZone6.getName((long) (short) 100);
        long long18 = dateTimeZone6.convertUTCToLocal(0L);
        long long20 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, (long) 187200000);
        java.lang.String str22 = dateTimeZone0.getNameKey((-100L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 187200000L + "'", long20 == 187200000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        boolean boolean14 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) 10);
        int int19 = dateTimeZone15.getOffset((long) (short) 10);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone15.getName((long) 0, locale21);
        java.lang.String str23 = dateTimeZone15.toString();
        java.lang.String str24 = dateTimeZone15.getID();
        int int26 = dateTimeZone15.getOffsetFromLocal((long) (byte) 10);
        int int28 = dateTimeZone15.getOffset((long) (byte) 0);
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, 132L);
        int int32 = dateTimeZone15.getStandardOffset(1L);
        boolean boolean34 = dateTimeZone15.isStandardOffset(100L);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone15.getShortName(52L, locale36);
        long long41 = dateTimeZone15.convertLocalToUTC(0L, true, (-35999965L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 132L + "'", long30 == 132L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        boolean boolean5 = dateTimeZone0.isFixed();
        long long7 = dateTimeZone0.nextTransition((long) (-1));
        boolean boolean8 = dateTimeZone0.isFixed();
        int int10 = dateTimeZone0.getOffsetFromLocal((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        java.lang.String str13 = dateTimeZone12.getID();
        long long15 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, (long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj17 = null;
        boolean boolean18 = dateTimeZone16.equals(obj17);
        java.lang.String str20 = dateTimeZone16.getName(100L);
        boolean boolean21 = dateTimeZone16.isFixed();
        long long23 = dateTimeZone16.nextTransition((long) (-1));
        boolean boolean24 = dateTimeZone16.isFixed();
        int int26 = dateTimeZone16.getStandardOffset((-475199990L));
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone27.isStandardOffset((long) 10);
        int int31 = dateTimeZone27.getOffset((long) (short) 10);
        boolean boolean33 = dateTimeZone27.isStandardOffset((long) (short) 1);
        boolean boolean34 = dateTimeZone16.equals((java.lang.Object) dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) 10);
        int int39 = dateTimeZone35.getOffset((long) (short) 10);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone35.getName((long) 0, locale41);
        java.lang.String str43 = dateTimeZone35.toString();
        java.lang.String str44 = dateTimeZone35.getID();
        long long48 = dateTimeZone35.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long51 = dateTimeZone35.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone52 = dateTimeZone35.toTimeZone();
        long long54 = dateTimeZone35.nextTransition((long) (short) 100);
        boolean boolean56 = dateTimeZone35.isStandardOffset(3600010L);
        long long58 = dateTimeZone35.convertUTCToLocal(1L);
        long long60 = dateTimeZone35.nextTransition(97L);
        java.lang.Class<?> wildcardClass61 = dateTimeZone35.getClass();
        boolean boolean62 = dateTimeZone16.equals((java.lang.Object) wildcardClass61);
        boolean boolean63 = dateTimeZone12.equals((java.lang.Object) boolean62);
        java.lang.String str65 = dateTimeZone12.getName(3660032L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.032" + "'", str13, "+00:00:00.032");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-32L) + "'", long15 == (-32L));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 97L + "'", long60 == 97L);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.032" + "'", str65, "+00:00:00.032");
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        long long13 = dateTimeZone0.adjustOffset((-111599990L), false);
        java.lang.String str15 = dateTimeZone0.getShortName((-35999965L));
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forID("Etc/UTC");
        java.lang.String str21 = dateTimeZone20.toString();
        long long24 = dateTimeZone20.convertLocalToUTC((long) ' ', false);
        long long26 = dateTimeZone16.getMillisKeepLocal(dateTimeZone20, (long) 360000000);
        int int28 = dateTimeZone20.getStandardOffset((long) 'a');
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone20, 126060000L);
        long long32 = dateTimeZone0.convertUTCToLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-111599990L) + "'", long13 == (-111599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Etc/UTC" + "'", str21, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 360000000L + "'", long26 == 360000000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 126060000L + "'", long30 == 126060000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        long long8 = dateTimeZone0.nextTransition(107L);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        long long12 = dateTimeZone10.convertUTCToLocal(3600000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 107L + "'", long8 == 107L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3600000L + "'", long12 == 3600000L);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        long long7 = dateTimeZone1.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone1.getOffset(readableInstant8);
        long long11 = dateTimeZone1.nextTransition((long) (byte) 0);
        long long13 = dateTimeZone1.convertUTCToLocal((long) (short) -1);
        long long16 = dateTimeZone1.convertLocalToUTC((long) (byte) 10, false);
        java.lang.String str18 = dateTimeZone1.getName((long) 360000000);
        java.lang.String str20 = dateTimeZone1.getNameKey(52680000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        boolean boolean6 = dateTimeZone0.isFixed();
        int int8 = dateTimeZone0.getOffsetFromLocal((long) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        int int12 = dateTimeZone9.getStandardOffset((-1L));
        int int14 = dateTimeZone9.getOffset((long) (short) 1);
        java.util.TimeZone timeZone15 = dateTimeZone9.toTimeZone();
        java.util.TimeZone timeZone16 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        boolean boolean19 = dateTimeZone0.equals((java.lang.Object) timeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        long long24 = dateTimeZone21.convertLocalToUTC(11L, false);
        long long26 = dateTimeZone21.nextTransition(360060000L);
        java.util.Locale locale28 = null;
        java.lang.String str29 = dateTimeZone21.getShortName((-831599990L), locale28);
        java.lang.String str31 = dateTimeZone21.getNameKey(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 11L + "'", long24 == 11L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 360060000L + "'", long26 == 360060000L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("-01:00");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj3 = null;
        boolean boolean4 = dateTimeZone2.equals(obj3);
        java.lang.String str6 = dateTimeZone2.getName(100L);
        boolean boolean7 = dateTimeZone2.isFixed();
        long long9 = dateTimeZone2.nextTransition((long) (-1));
        boolean boolean10 = dateTimeZone2.isFixed();
        int int12 = dateTimeZone2.getStandardOffset(32L);
        long long14 = dateTimeZone2.previousTransition((long) (short) -1);
        boolean boolean15 = dateTimeZone1.equals((java.lang.Object) (short) -1);
        java.lang.String str17 = dateTimeZone1.getName(20L);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone1.getName((long) 361920000, locale19);
        boolean boolean21 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-01:00" + "'", str17, "-01:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(0L, locale3);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (-1));
        long long8 = dateTimeZone1.convertUTCToLocal((long) 'a');
        int int10 = dateTimeZone1.getStandardOffset(3600010L);
        int int12 = dateTimeZone1.getOffset((long) (byte) 100);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone1.getOffset(readableInstant13);
        long long16 = dateTimeZone1.nextTransition((long) 3120000);
        java.lang.Class<?> wildcardClass17 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 107L + "'", long8 == 107L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3120000L + "'", long16 == 3120000L);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1920000, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone6.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean11 = dateTimeZone0.equals((java.lang.Object) (byte) 0);
        long long13 = dateTimeZone0.convertUTCToLocal(0L);
        boolean boolean15 = dateTimeZone0.isStandardOffset((long) '#');
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getName(3600010L, locale17);
        long long21 = dateTimeZone0.adjustOffset((-3120000L), false);
        java.lang.String str23 = dateTimeZone0.getShortName((-3599999L));
        int int25 = dateTimeZone0.getStandardOffset((-39600098L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3120000L) + "'", long21 == (-3120000L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone3 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getShortName((-1L));
        long long10 = dateTimeZone5.adjustOffset((long) 187200000, false);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forID("Etc/UTC");
        int int14 = dateTimeZone12.getOffsetFromLocal(1L);
        int int16 = dateTimeZone12.getOffsetFromLocal(3600010L);
        long long18 = dateTimeZone12.previousTransition(100L);
        int int20 = dateTimeZone12.getOffsetFromLocal((long) '4');
        long long22 = dateTimeZone5.getMillisKeepLocal(dateTimeZone12, (-25199985L));
        long long24 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, (-5519948L));
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone1.getName((long) 'a', locale26);
        int int29 = dateTimeZone1.getOffset(0L);
        long long31 = dateTimeZone1.previousTransition((long) 360000000);
        int int33 = dateTimeZone1.getStandardOffset((-111599999L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 187200000L + "'", long10 == 187200000L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-25199985L) + "'", long22 == (-25199985L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-5519948L) + "'", long24 == (-5519948L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 360000000L + "'", long31 == 360000000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone0.isLocalDateTimeGap(localDateTime10);
        int int13 = dateTimeZone0.getOffset(398520000L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        long long5 = dateTimeZone1.previousTransition(0L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        long long8 = dateTimeZone1.previousTransition((-169319964L));
        long long11 = dateTimeZone1.adjustOffset(349199990L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-169319964L) + "'", long8 == (-169319964L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 349199990L + "'", long11 == 349199990L);
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone1.getOffset(readableInstant2);
        long long6 = dateTimeZone1.convertLocalToUTC((long) (-1), false);
        java.lang.String str8 = dateTimeZone1.getNameKey(0L);
        java.lang.String str10 = dateTimeZone1.getNameKey((-115199990L));
        long long13 = dateTimeZone1.adjustOffset(101L, true);
        long long16 = dateTimeZone1.adjustOffset((-3599991L), true);
        boolean boolean17 = dateTimeZone1.isFixed();
        long long21 = dateTimeZone1.convertLocalToUTC(0L, true, 180011L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 101L + "'", long13 == 101L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599991L) + "'", long16 == (-3599991L));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-3660000), 360600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 360600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        boolean boolean3 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.adjustOffset(36000052L, false);
        java.lang.String str7 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 36000052L + "'", long6 == 36000052L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:01");
        int int3 = dateTimeZone1.getStandardOffset((-3599899L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3660000 + "'", int3 == 3660000);
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        int int5 = dateTimeZone1.getOffset((long) (short) 10);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getName((long) 0, locale7);
        java.lang.String str10 = dateTimeZone1.getNameKey((long) (byte) 1);
        boolean boolean11 = dateTimeZone1.isFixed();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone1.getOffset(readableInstant12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone1.getShortName(35L, locale15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str19 = dateTimeZone1.getShortName((-71999991L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal(0L);
        int int12 = dateTimeZone0.getOffsetFromLocal(132L);
        boolean boolean13 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone6.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean11 = dateTimeZone0.equals((java.lang.Object) (byte) 0);
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        long long15 = dateTimeZone13.previousTransition((long) 'a');
        boolean boolean16 = dateTimeZone13.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        int int6 = dateTimeZone0.getOffset((long) 5520000);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getName((-35999966L), locale10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', (int) (short) 0);
        long long4 = dateTimeZone2.previousTransition(0L);
        long long6 = dateTimeZone2.convertUTCToLocal((-35999975L));
        java.lang.String str7 = dateTimeZone2.getID();
        long long9 = dateTimeZone2.nextTransition(3600032L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 79200025L + "'", long6 == 79200025L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600032L + "'", long9 == 3600032L);
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, (int) (byte) 0);
        int int4 = dateTimeZone2.getStandardOffset(10L);
        java.lang.Class<?> wildcardClass5 = dateTimeZone2.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 360000000 + "'", int4 == 360000000);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.lang.Class<?> wildcardClass5 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        int int12 = dateTimeZone0.getOffset((long) (byte) 1);
        java.lang.String str13 = dateTimeZone0.toString();
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        java.lang.String str16 = dateTimeZone0.getID();
        java.lang.Class<?> wildcardClass17 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.lang.String str3 = dateTimeZone2.toString();
        boolean boolean4 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
        long long8 = dateTimeZone2.nextTransition((long) 100);
        long long10 = dateTimeZone2.nextTransition((-1L));
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone2.isLocalDateTimeGap(localDateTime11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.001" + "'", str3, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(126600000, 126060000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 126060000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone9.isStandardOffset((long) 10);
        java.lang.String str13 = dateTimeZone9.getName((long) 'a');
        java.lang.String str15 = dateTimeZone9.getShortName((long) 1);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) (byte) 100);
        long long19 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, 35L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean21 = dateTimeZone0.isFixed();
        int int23 = dateTimeZone0.getOffset(187200000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 3120000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 3120000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey(10L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset((-1L));
        int int16 = dateTimeZone11.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone17.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean22 = dateTimeZone11.equals((java.lang.Object) (byte) 0);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) 10);
        java.lang.String str29 = dateTimeZone25.getName((long) 'a');
        long long31 = dateTimeZone25.nextTransition((long) '4');
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone25.getShortName(100L, locale33);
        long long38 = dateTimeZone25.convertLocalToUTC(10L, false, (long) (short) 10);
        boolean boolean39 = dateTimeZone11.equals((java.lang.Object) 10L);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone11.isLocalDateTimeGap(localDateTime40);
        java.lang.String str43 = dateTimeZone11.getName(100L);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone11.getName(360000052L, locale45);
        java.lang.String str48 = dateTimeZone11.getName(363600010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+10:00");
        long long4 = dateTimeZone1.adjustOffset(22L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 22L + "'", long4 == 22L);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        int int12 = dateTimeZone10.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj14 = null;
        boolean boolean15 = dateTimeZone13.equals(obj14);
        java.lang.String str17 = dateTimeZone13.getName(100L);
        java.lang.String str18 = dateTimeZone13.getID();
        boolean boolean19 = dateTimeZone13.isFixed();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 10);
        java.lang.String str24 = dateTimeZone20.getName((long) (short) 1);
        long long26 = dateTimeZone20.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        boolean boolean29 = dateTimeZone27.isStandardOffset((long) 10);
        int int31 = dateTimeZone27.getOffset((long) (short) 10);
        long long34 = dateTimeZone27.adjustOffset((long) 'a', true);
        boolean boolean35 = dateTimeZone27.isFixed();
        long long37 = dateTimeZone20.getMillisKeepLocal(dateTimeZone27, (long) (-1));
        long long39 = dateTimeZone13.getMillisKeepLocal(dateTimeZone27, 32L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = dateTimeZone13.getOffset(readableInstant40);
        java.lang.String str43 = dateTimeZone13.getName((long) (byte) 1);
        java.lang.String str45 = dateTimeZone13.getShortName(0L);
        boolean boolean46 = dateTimeZone10.equals((java.lang.Object) str45);
        long long48 = dateTimeZone10.nextTransition((-25199975L));
        long long51 = dateTimeZone10.adjustOffset(187200000L, false);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone10.isLocalDateTimeGap(localDateTime52);
        org.joda.time.LocalDateTime localDateTime54 = null;
        boolean boolean55 = dateTimeZone10.isLocalDateTimeGap(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 97L + "'", long34 == 97L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 32L + "'", long39 == 32L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-25199975L) + "'", long48 == (-25199975L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 187200000L + "'", long51 == 187200000L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.equals((java.lang.Object) 0);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 0, locale8);
        java.lang.String str11 = dateTimeZone0.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) 10);
        java.lang.String str16 = dateTimeZone12.getName((long) (short) 1);
        long long18 = dateTimeZone12.convertUTCToLocal((long) ' ');
        long long20 = dateTimeZone12.convertUTCToLocal((long) (short) 100);
        int int22 = dateTimeZone12.getOffset((long) (short) 10);
        boolean boolean23 = dateTimeZone0.equals((java.lang.Object) dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forID("UTC");
        long long27 = dateTimeZone12.getMillisKeepLocal(dateTimeZone25, 107L);
        long long29 = dateTimeZone25.previousTransition((long) (-1));
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone25.isLocalDateTimeGap(localDateTime30);
        long long34 = dateTimeZone25.adjustOffset((-32L), true);
        long long36 = dateTimeZone25.nextTransition(117120000L);
        java.lang.Class<?> wildcardClass37 = dateTimeZone25.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 107L + "'", long27 == 107L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-32L) + "'", long34 == (-32L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 117120000L + "'", long36 == 117120000L);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        long long9 = dateTimeZone0.previousTransition(97L);
        int int11 = dateTimeZone0.getStandardOffset(363120001L);
        java.lang.String str12 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 97L + "'", long9 == 97L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone3 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        boolean boolean6 = dateTimeZone1.equals((java.lang.Object) dateTimeZone5);
        java.lang.String str8 = dateTimeZone5.getName(35L);
        java.lang.String str10 = dateTimeZone5.getNameKey((-3600001L));
        long long12 = dateTimeZone5.nextTransition((-71999991L));
        int int14 = dateTimeZone5.getOffset((-99L));
        int int16 = dateTimeZone5.getOffset((-7199900L));
        long long18 = dateTimeZone5.nextTransition((-324599990L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-00:00:00.001" + "'", str8, "-00:00:00.001");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-71999991L) + "'", long12 == (-71999991L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-324599990L) + "'", long18 == (-324599990L));
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj2 = null;
        boolean boolean3 = dateTimeZone1.equals(obj2);
        java.lang.String str5 = dateTimeZone1.getName(100L);
        java.lang.String str6 = dateTimeZone1.getID();
        boolean boolean7 = dateTimeZone1.isFixed();
        boolean boolean9 = dateTimeZone1.isStandardOffset(35L);
        long long11 = dateTimeZone1.nextTransition((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(0L, locale3);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (-1));
        boolean boolean8 = dateTimeZone1.isStandardOffset(0L);
        long long10 = dateTimeZone1.convertUTCToLocal(10L);
        int int12 = dateTimeZone1.getOffset(35L);
        long long14 = dateTimeZone1.previousTransition(79200025L);
        java.lang.String str16 = dateTimeZone1.getNameKey(324000000L);
        boolean boolean17 = dateTimeZone1.isFixed();
        boolean boolean18 = dateTimeZone1.isFixed();
        java.lang.String str19 = dateTimeZone1.getID();
        long long21 = dateTimeZone1.previousTransition((-25200000L));
        java.lang.String str22 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 20L + "'", long10 == 20L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 79200025L + "'", long14 == 79200025L);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-25200000L) + "'", long21 == (-25200000L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset((-1L));
        int int16 = dateTimeZone11.getOffset((long) (short) 1);
        long long18 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, 0L);
        java.lang.String str20 = dateTimeZone0.getNameKey((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str23 = dateTimeZone0.getShortName(35L);
        java.util.TimeZone timeZone24 = dateTimeZone0.toTimeZone();
        int int26 = dateTimeZone0.getOffsetFromLocal(20L);
        java.lang.String str28 = dateTimeZone0.getNameKey(3600009L);
        java.lang.String str30 = dateTimeZone0.getShortName((long) 1920000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        java.lang.String str6 = dateTimeZone0.getShortName((long) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        int int10 = dateTimeZone7.getStandardOffset((-1L));
        int int12 = dateTimeZone7.getOffset((long) (short) 1);
        java.util.TimeZone timeZone13 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone15.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forID("+01:00");
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        long long22 = dateTimeZone19.getMillisKeepLocal(dateTimeZone20, (-35999965L));
        int int24 = dateTimeZone19.getOffset((long) '#');
        boolean boolean25 = dateTimeZone15.equals((java.lang.Object) dateTimeZone19);
        java.util.TimeZone timeZone26 = dateTimeZone19.toTimeZone();
        boolean boolean27 = dateTimeZone0.equals((java.lang.Object) dateTimeZone19);
        java.lang.String str29 = dateTimeZone19.getShortName((-115199959L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-32399965L) + "'", long22 == (-32399965L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3600000 + "'", int24 == 3600000);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+01:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+01:00" + "'", str29, "+01:00");
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        long long12 = dateTimeZone0.convertLocalToUTC(100L, true, (long) ' ');
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone0.getOffset(readableInstant13);
        java.lang.String str16 = dateTimeZone0.getShortName(79200025L);
        int int18 = dateTimeZone0.getOffsetFromLocal((-35999903L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str20 = dateTimeZone0.getID();
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = dateTimeZone0.getOffset(readableInstant21);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.Class<?> wildcardClass6 = dateTimeZone5.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        boolean boolean3 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getID();
        long long7 = dateTimeZone1.convertLocalToUTC(324060000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.010" + "'", str2, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 324059990L + "'", long7 == 324059990L);
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        long long7 = dateTimeZone0.adjustOffset((long) 'a', true);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long13 = dateTimeZone0.convertLocalToUTC((-1L), true, (long) (short) 10);
        java.lang.String str14 = dateTimeZone0.getID();
        int int16 = dateTimeZone0.getOffset((-25199975L));
        long long18 = dateTimeZone0.nextTransition(155400000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 155400000L + "'", long18 == 155400000L);
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(351300000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.getID();
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        long long14 = dateTimeZone0.convertLocalToUTC(35999999L, true, (long) '#');
        java.util.TimeZone timeZone15 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.Class<?> wildcardClass17 = timeZone15.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35999999L + "'", long14 == 35999999L);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 'a');
        long long15 = dateTimeZone8.convertLocalToUTC((long) (short) 100, false);
        boolean boolean17 = dateTimeZone8.equals((java.lang.Object) 100);
        int int19 = dateTimeZone8.getOffset((long) 0);
        boolean boolean20 = dateTimeZone7.equals((java.lang.Object) dateTimeZone8);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone8.getName((long) 1, locale22);
        java.lang.String str25 = dateTimeZone8.getName((long) (byte) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone8.isLocalDateTimeGap(localDateTime27);
        long long31 = dateTimeZone8.convertLocalToUTC((long) (short) 1, false);
        java.lang.Class<?> wildcardClass32 = dateTimeZone8.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'a', (int) (byte) 10);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((-5519900L), locale4);
        boolean boolean6 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+97:10" + "'", str5, "+97:10");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        java.lang.String str7 = dateTimeZone1.getShortName((long) 1);
        boolean boolean9 = dateTimeZone1.isStandardOffset((long) (byte) 100);
        long long13 = dateTimeZone1.convertLocalToUTC((-35999975L), false, (-349200001L));
        long long17 = dateTimeZone1.convertLocalToUTC(52L, true, 36000000L);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone18.isStandardOffset((long) 10);
        int int22 = dateTimeZone18.getOffset((long) (short) 10);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone18.getName((long) 0, locale24);
        java.lang.String str26 = dateTimeZone18.toString();
        java.lang.String str27 = dateTimeZone18.getID();
        long long31 = dateTimeZone18.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long34 = dateTimeZone18.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone35 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        long long40 = dateTimeZone37.adjustOffset((long) (byte) 10, false);
        java.lang.String str42 = dateTimeZone37.getNameKey((long) 360060000);
        long long44 = dateTimeZone1.getMillisKeepLocal(dateTimeZone37, 360000032L);
        int int46 = dateTimeZone1.getOffset((-43259976L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology47 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-35999975L) + "'", long13 == (-35999975L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 360000032L + "'", long44 == 360000032L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100);
        java.lang.String str11 = dateTimeZone0.getName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj13 = null;
        boolean boolean14 = dateTimeZone12.equals(obj13);
        java.lang.String str16 = dateTimeZone12.getName(100L);
        java.lang.String str17 = dateTimeZone12.getID();
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        long long21 = dateTimeZone12.adjustOffset((long) (short) 100, false);
        java.util.TimeZone timeZone22 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        boolean boolean25 = dateTimeZone23.isStandardOffset(132L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        boolean boolean27 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        java.lang.String str28 = dateTimeZone23.getID();
        java.lang.String str29 = dateTimeZone23.toString();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone23.getShortName((long) (-3600000), locale31);
        java.lang.String str34 = dateTimeZone23.getNameKey(360000132L);
        int int36 = dateTimeZone23.getOffsetFromLocal((-39120000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 126000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 126000000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        boolean boolean7 = dateTimeZone0.isFixed();
        long long10 = dateTimeZone0.adjustOffset(52L, false);
        long long13 = dateTimeZone0.adjustOffset((-36000001L), false);
        int int15 = dateTimeZone0.getOffset(360600032L);
        int int17 = dateTimeZone0.getOffset(3600009L);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        boolean boolean21 = dateTimeZone0.isStandardOffset((-121080000L));
        long long23 = dateTimeZone0.convertUTCToLocal(252599990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-36000001L) + "'", long13 == (-36000001L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 252599990L + "'", long23 == 252599990L);
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        long long12 = dateTimeZone0.nextTransition(100L);
        long long14 = dateTimeZone0.nextTransition((long) 0);
        java.lang.String str16 = dateTimeZone0.getName(361920000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean18 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        long long7 = dateTimeZone0.adjustOffset((long) 'a', true);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        java.lang.String str11 = dateTimeZone0.getName(0L);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getShortName((-36000008L), locale15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        int int4 = dateTimeZone2.getOffsetFromLocal(0L);
        boolean boolean5 = dateTimeZone2.isFixed();
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone2.getShortName((long) 360600000, locale7);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone2.getName((-395999948L), locale10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.001" + "'", str8, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.001" + "'", str11, "+00:00:00.001");
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        boolean boolean6 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 10);
        java.lang.String str11 = dateTimeZone7.getName((long) (short) 1);
        long long13 = dateTimeZone7.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        int int18 = dateTimeZone14.getOffset((long) (short) 10);
        long long21 = dateTimeZone14.adjustOffset((long) 'a', true);
        boolean boolean22 = dateTimeZone14.isFixed();
        long long24 = dateTimeZone7.getMillisKeepLocal(dateTimeZone14, (long) (-1));
        long long26 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 32L);
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone0.getOffset(readableInstant27);
        java.lang.String str30 = dateTimeZone0.getName((long) (byte) 1);
        java.lang.String str32 = dateTimeZone0.getShortName(0L);
        java.lang.String str34 = dateTimeZone0.getShortName((long) (-1));
        java.lang.String str36 = dateTimeZone0.getNameKey(195000000L);
        int int38 = dateTimeZone0.getStandardOffset((-511199991L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey(10L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset((-1L));
        int int16 = dateTimeZone11.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone17.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean22 = dateTimeZone11.equals((java.lang.Object) (byte) 0);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean27 = dateTimeZone25.isStandardOffset((long) 10);
        java.lang.String str29 = dateTimeZone25.getName((long) 'a');
        long long31 = dateTimeZone25.nextTransition((long) '4');
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone25.getShortName(100L, locale33);
        long long38 = dateTimeZone25.convertLocalToUTC(10L, false, (long) (short) 10);
        boolean boolean39 = dateTimeZone11.equals((java.lang.Object) 10L);
        java.lang.String str41 = dateTimeZone11.getName(10L);
        long long45 = dateTimeZone11.convertLocalToUTC((long) 126600000, false, (-32400055L));
        boolean boolean47 = dateTimeZone11.isStandardOffset(321000000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 126600000L + "'", long45 == 126600000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        long long4 = dateTimeZone0.previousTransition(0L);
        boolean boolean5 = dateTimeZone0.isFixed();
        int int7 = dateTimeZone0.getOffsetFromLocal((long) 360600000);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((-126599964L), locale9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone0.getOffset(readableInstant11);
        long long14 = dateTimeZone0.previousTransition(599989L);
        long long18 = dateTimeZone0.convertLocalToUTC(126000025L, false, (-32400056L));
        long long21 = dateTimeZone0.convertLocalToUTC(79200124L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 599989L + "'", long14 == 599989L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 126000025L + "'", long18 == 126000025L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 79200124L + "'", long21 == 79200124L);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        java.lang.String str2 = dateTimeZone1.getID();
        long long5 = dateTimeZone1.adjustOffset(3599990L, true);
        long long7 = dateTimeZone1.convertUTCToLocal((long) 126600000);
        boolean boolean9 = dateTimeZone1.isStandardOffset((-35999958L));
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone1.getShortName((-118799991L), locale11);
        java.lang.String str13 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.001" + "'", str2, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3599990L + "'", long5 == 3599990L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 126600001L + "'", long7 == 126600001L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.001" + "'", str12, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.001" + "'", str13, "+00:00:00.001");
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.nextTransition((long) 100);
        java.lang.String str8 = dateTimeZone1.getID();
        long long10 = dateTimeZone1.nextTransition((long) 0);
        boolean boolean11 = dateTimeZone1.isFixed();
        long long14 = dateTimeZone1.adjustOffset((long) (short) 10, false);
        boolean boolean15 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) 0);
        int int13 = dateTimeZone7.getStandardOffset((long) (short) 100);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone7.getShortName(35L, locale15);
        long long18 = dateTimeZone7.previousTransition((-115199916L));
        java.lang.String str20 = dateTimeZone7.getName(79200022L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-115199916L) + "'", long18 == (-115199916L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName(100L, locale8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getName((long) '#', locale11);
        long long16 = dateTimeZone0.convertLocalToUTC(0L, true, (long) ' ');
        long long19 = dateTimeZone0.adjustOffset((long) 100, true);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getShortName((long) 32, locale21);
        long long24 = dateTimeZone0.nextTransition((-280799976L));
        int int26 = dateTimeZone0.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-280799976L) + "'", long24 == (-280799976L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 10);
        java.lang.String str15 = dateTimeZone11.getName((long) (short) 1);
        long long17 = dateTimeZone11.convertUTCToLocal((long) ' ');
        long long19 = dateTimeZone11.nextTransition(1L);
        java.lang.String str21 = dateTimeZone11.getNameKey(10L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone11.getShortName((long) (byte) 100, locale23);
        long long26 = dateTimeZone11.previousTransition((long) 'a');
        long long28 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) (byte) 0);
        java.util.TimeZone timeZone29 = dateTimeZone11.toTimeZone();
        boolean boolean30 = dateTimeZone11.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 97L + "'", long26 == 97L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        boolean boolean3 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.010' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.010" + "'", str2, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(36060000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        int int6 = dateTimeZone0.getOffset((long) 5520000);
        int int8 = dateTimeZone0.getOffsetFromLocal(3599990L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 10);
        java.lang.String str15 = dateTimeZone11.getName((long) (short) 1);
        long long17 = dateTimeZone11.convertUTCToLocal((long) ' ');
        long long19 = dateTimeZone11.nextTransition(1L);
        java.lang.String str21 = dateTimeZone11.getNameKey(10L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone11.getShortName((long) (byte) 100, locale23);
        long long26 = dateTimeZone11.previousTransition((long) 'a');
        long long28 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) (byte) 0);
        long long30 = dateTimeZone0.convertUTCToLocal((-115199989L));
        java.lang.String str32 = dateTimeZone0.getNameKey((long) 2100000);
        java.lang.Class<?> wildcardClass33 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 97L + "'", long26 == 97L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-115199989L) + "'", long30 == (-115199989L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.isStandardOffset((long) (short) 1);
        long long9 = dateTimeZone0.adjustOffset((long) (short) 0, true);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTimeZone0.equals(obj10);
        java.lang.String str12 = dateTimeZone0.getID();
        long long14 = dateTimeZone0.convertUTCToLocal((long) (-3600000));
        long long16 = dateTimeZone0.previousTransition(360600032L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int20 = dateTimeZone17.getStandardOffset((-1L));
        int int22 = dateTimeZone17.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone23.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean28 = dateTimeZone17.equals((java.lang.Object) (byte) 0);
        long long30 = dateTimeZone17.convertUTCToLocal(0L);
        boolean boolean32 = dateTimeZone17.isStandardOffset((long) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) 10);
        java.lang.String str37 = dateTimeZone33.getName((long) 'a');
        long long39 = dateTimeZone33.nextTransition((long) '4');
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone33.getShortName(100L, locale41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = dateTimeZone33.getOffset(readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        int int48 = dateTimeZone45.getStandardOffset((-1L));
        int int50 = dateTimeZone45.getOffset((long) (short) 1);
        java.util.TimeZone timeZone51 = dateTimeZone45.toTimeZone();
        java.util.TimeZone timeZone52 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        boolean boolean54 = dateTimeZone33.equals((java.lang.Object) timeZone52);
        org.joda.time.ReadableInstant readableInstant55 = null;
        int int56 = dateTimeZone33.getOffset(readableInstant55);
        long long58 = dateTimeZone33.convertUTCToLocal((-115200090L));
        java.lang.String str59 = dateTimeZone33.getID();
        boolean boolean60 = dateTimeZone17.equals((java.lang.Object) str59);
        long long62 = dateTimeZone17.convertUTCToLocal(36000132L);
        long long64 = dateTimeZone0.getMillisKeepLocal(dateTimeZone17, 25L);
        org.joda.time.ReadableInstant readableInstant65 = null;
        int int66 = dateTimeZone0.getOffset(readableInstant65);
        long long68 = dateTimeZone0.previousTransition(205260025L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3600000L) + "'", long14 == (-3600000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 360600032L + "'", long16 == 360600032L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 52L + "'", long39 == 52L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-115200090L) + "'", long58 == (-115200090L));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 36000132L + "'", long62 == 36000132L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 25L + "'", long64 == 25L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 205260025L + "'", long68 == 205260025L);
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) 0);
        long long13 = dateTimeZone7.convertUTCToLocal(32L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        int int18 = dateTimeZone14.getOffset((long) (short) 10);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone14.getName((long) 0, locale20);
        java.lang.String str23 = dateTimeZone14.getNameKey((long) (byte) 1);
        boolean boolean24 = dateTimeZone14.isFixed();
        long long26 = dateTimeZone14.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone14.isLocalDateTimeGap(localDateTime27);
        long long30 = dateTimeZone7.getMillisKeepLocal(dateTimeZone14, 3600010L);
        java.lang.String str31 = dateTimeZone14.toString();
        long long33 = dateTimeZone14.nextTransition((-25199975L));
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone14.getOffset(readableInstant34);
        java.util.TimeZone timeZone36 = dateTimeZone14.toTimeZone();
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone14.isLocalDateTimeGap(localDateTime37);
        boolean boolean39 = dateTimeZone14.isFixed();
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone14.getShortName(115200041L, locale41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3600010L + "'", long30 == 3600010L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-25199975L) + "'", long33 == (-25199975L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName(0L, locale4);
        java.lang.String str7 = dateTimeZone2.getShortName((long) (-1));
        boolean boolean9 = dateTimeZone2.isStandardOffset(0L);
        long long11 = dateTimeZone2.convertUTCToLocal(10L);
        int int13 = dateTimeZone2.getOffset(35L);
        long long15 = dateTimeZone2.previousTransition(79200025L);
        java.lang.String str17 = dateTimeZone2.getNameKey(324000000L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean20 = dateTimeZone19.isFixed();
        long long24 = dateTimeZone19.convertLocalToUTC(10L, false, (long) 0);
        long long26 = dateTimeZone2.getMillisKeepLocal(dateTimeZone19, 396600100L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.010" + "'", str5, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 20L + "'", long11 == 20L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 79200025L + "'", long15 == 79200025L);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 396600110L + "'", long26 == 396600110L);
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00:00.001");
        java.lang.String str3 = dateTimeZone1.getName(396600000L);
        boolean boolean5 = dateTimeZone1.isStandardOffset(10L);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone1.getOffset(readableInstant6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.001" + "'", str3, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.nextTransition((long) 100);
        long long9 = dateTimeZone1.previousTransition(360600000L);
        boolean boolean11 = dateTimeZone1.isStandardOffset((-388800001L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 360600000L + "'", long9 == 360600000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', (int) (short) 0);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        long long6 = dateTimeZone2.previousTransition((-25199885L));
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone2.getName(71999989L, locale8);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-25199885L) + "'", long6 == (-25199885L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+32:00" + "'", str9, "+32:00");
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(361920000, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) 10);
        java.lang.String str16 = dateTimeZone12.getName((long) 'a');
        long long18 = dateTimeZone12.nextTransition((long) '4');
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone12.getShortName(100L, locale20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int26 = dateTimeZone23.getStandardOffset((-1L));
        int int28 = dateTimeZone23.getOffset((long) (short) 1);
        long long30 = dateTimeZone12.getMillisKeepLocal(dateTimeZone23, 0L);
        boolean boolean31 = dateTimeZone0.equals((java.lang.Object) dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone32.isStandardOffset((long) 10);
        java.lang.String str36 = dateTimeZone32.getName((long) 'a');
        long long38 = dateTimeZone32.nextTransition((long) '4');
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeZone32.getShortName(100L, locale40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        int int46 = dateTimeZone43.getStandardOffset((-1L));
        int int48 = dateTimeZone43.getOffset((long) (short) 1);
        long long50 = dateTimeZone32.getMillisKeepLocal(dateTimeZone43, 0L);
        java.lang.String str52 = dateTimeZone32.getNameKey((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.lang.String str55 = dateTimeZone32.getNameKey((long) (-1));
        long long57 = dateTimeZone0.getMillisKeepLocal(dateTimeZone32, 3600009L);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj59 = null;
        boolean boolean60 = dateTimeZone58.equals(obj59);
        java.lang.String str62 = dateTimeZone58.getName(100L);
        java.lang.String str63 = dateTimeZone58.getID();
        java.util.TimeZone timeZone64 = dateTimeZone58.toTimeZone();
        long long67 = dateTimeZone58.adjustOffset((long) (short) 100, false);
        java.util.TimeZone timeZone68 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone69);
        int int72 = dateTimeZone69.getStandardOffset((-1L));
        int int74 = dateTimeZone69.getOffset((long) (short) 1);
        java.util.TimeZone timeZone75 = dateTimeZone69.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.ReadableInstant readableInstant78 = null;
        int int79 = dateTimeZone77.getOffset(readableInstant78);
        long long81 = dateTimeZone58.getMillisKeepLocal(dateTimeZone77, 20L);
        boolean boolean82 = dateTimeZone0.equals((java.lang.Object) long81);
        long long85 = dateTimeZone0.adjustOffset((long) 60000, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 52L + "'", long38 == 52L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3600009L + "'", long57 == 3600009L);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 20L + "'", long81 == 20L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 60000L + "'", long85 == 60000L);
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(0L, locale3);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (-1));
        boolean boolean8 = dateTimeZone1.isStandardOffset(0L);
        boolean boolean10 = dateTimeZone1.isStandardOffset((long) (short) 0);
        long long12 = dateTimeZone1.convertUTCToLocal(35L);
        int int14 = dateTimeZone1.getStandardOffset(115200001L);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone1.getName((-471599990L), locale16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 45L + "'", long12 == 45L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.010" + "'", str17, "+00:00:00.010");
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, (int) (byte) 0);
        int int4 = dateTimeZone2.getOffset((long) 1);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
        long long10 = dateTimeZone2.convertLocalToUTC((-35999975L), false, 101L);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone2.isLocalDateTimeGap(localDateTime11);
        java.lang.String str14 = dateTimeZone2.getShortName(0L);
        boolean boolean16 = dateTimeZone2.isStandardOffset(0L);
        java.util.TimeZone timeZone17 = dateTimeZone2.toTimeZone();
        java.lang.Class<?> wildcardClass18 = dateTimeZone2.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 360000000 + "'", int4 == 360000000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-395999975L) + "'", long10 == (-395999975L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:00" + "'", str14, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+:0:00");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getShortName((long) '4');
        long long6 = dateTimeZone1.convertUTCToLocal((-35999965L));
        java.lang.String str8 = dateTimeZone1.getShortName((-60001L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-35999965L) + "'", long6 == (-35999965L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        int int3 = dateTimeZone1.getOffsetFromLocal(0L);
        java.lang.String str5 = dateTimeZone1.getNameKey((long) '4');
        java.lang.String str6 = dateTimeZone1.toString();
        java.lang.String str8 = dateTimeZone1.getName((-2099900L));
        java.lang.String str10 = dateTimeZone1.getShortName((-189119999L));
        java.lang.String str12 = dateTimeZone1.getShortName(321000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.001" + "'", str6, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.001" + "'", str8, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.001" + "'", str10, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.001" + "'", str12, "+00:00:00.001");
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        boolean boolean2 = dateTimeZone1.isFixed();
        long long4 = dateTimeZone1.convertUTCToLocal((-145679975L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-145679875L) + "'", long4 == (-145679875L));
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 1, locale3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 10);
        java.lang.String str9 = dateTimeZone5.getName((long) 'a');
        long long11 = dateTimeZone5.nextTransition((long) '4');
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone5.getShortName(100L, locale13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone5.getOffset(readableInstant15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone5.getOffset(readableInstant17);
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) readableInstant17);
        int int21 = dateTimeZone1.getOffsetFromLocal(126600001L);
        boolean boolean23 = dateTimeZone1.isStandardOffset((-32400056L));
        java.lang.String str24 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(3600000, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean4 = dateTimeZone3.isFixed();
        java.lang.String str6 = dateTimeZone3.getShortName((long) '4');
        long long8 = dateTimeZone3.convertUTCToLocal((long) (short) 10);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) '4');
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone1.isLocalDateTimeGap(localDateTime11);
        long long14 = dateTimeZone1.convertUTCToLocal((long) (short) -1);
        java.lang.String str15 = dateTimeZone1.toString();
        int int17 = dateTimeZone1.getStandardOffset(35999999L);
        long long19 = dateTimeZone1.previousTransition((-395999975L));
        java.lang.String str20 = dateTimeZone1.getID();
        long long24 = dateTimeZone1.convertLocalToUTC((-3599878L), false, (-32400000L));
        java.lang.String str26 = dateTimeZone1.getShortName((long) 36000000);
        java.lang.String str28 = dateTimeZone1.getName(396600100L);
        java.util.TimeZone timeZone29 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int32 = dateTimeZone1.getStandardOffset(360599990L);
        java.lang.String str34 = dateTimeZone1.getShortName((-111599980L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000052L + "'", long10 == 36000052L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35999999L + "'", long14 == 35999999L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-395999975L) + "'", long19 == (-395999975L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-39599878L) + "'", long24 == (-39599878L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+10:00" + "'", str26, "+10:00");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+10:00" + "'", str28, "+10:00");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 36000000 + "'", int32 == 36000000);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:00" + "'", str34, "+10:00");
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        long long7 = dateTimeZone1.nextTransition((long) '4');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(100L, locale9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        int int15 = dateTimeZone12.getStandardOffset((-1L));
        int int17 = dateTimeZone12.getOffset((long) (short) 1);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, 0L);
        java.lang.String str21 = dateTimeZone1.getNameKey((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str24 = dateTimeZone1.getShortName(35L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone1.getName((-35999975L), locale26);
        long long31 = dateTimeZone1.convertLocalToUTC((-151200190L), false, 36000001L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-151200190L) + "'", long31 == (-151200190L));
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 5520000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 5520000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        long long9 = dateTimeZone1.convertLocalToUTC((-3120000L), false, (-35999989L));
        java.lang.String str10 = dateTimeZone1.toString();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone1.getName((-151199991L), locale12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.010" + "'", str2, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3120010L) + "'", long9 == (-3120010L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj2 = null;
        boolean boolean3 = dateTimeZone1.equals(obj2);
        java.lang.String str5 = dateTimeZone1.getName(100L);
        boolean boolean6 = dateTimeZone1.isFixed();
        long long8 = dateTimeZone1.nextTransition((long) (-1));
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone1.getName((long) ' ', locale10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone1.getOffset(readableInstant12);
        java.lang.String str14 = dateTimeZone1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) 10);
        int int7 = dateTimeZone3.getOffset((long) (short) 10);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone3.getName((long) 0, locale9);
        java.lang.String str12 = dateTimeZone3.getNameKey((long) (byte) 1);
        boolean boolean13 = dateTimeZone3.isFixed();
        long long15 = dateTimeZone3.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone3.isLocalDateTimeGap(localDateTime16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone3.getName((long) (short) 10, locale19);
        long long22 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) ' ');
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj24 = null;
        boolean boolean25 = dateTimeZone23.equals(obj24);
        java.lang.String str27 = dateTimeZone23.getName(100L);
        long long29 = dateTimeZone23.convertUTCToLocal((long) (short) -1);
        int int31 = dateTimeZone23.getStandardOffset(360059999L);
        long long33 = dateTimeZone1.getMillisKeepLocal(dateTimeZone23, 115200022L);
        long long35 = dateTimeZone1.nextTransition(360600000L);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone1.getName((-115199969L), locale37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 115200022L + "'", long33 == 115200022L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 360600000L + "'", long35 == 360600000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', (int) (short) 0);
        long long4 = dateTimeZone2.previousTransition(0L);
        long long6 = dateTimeZone2.convertUTCToLocal((-35999975L));
        java.lang.String str7 = dateTimeZone2.getID();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone2.isLocalDateTimeGap(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 79200025L + "'", long6 == 79200025L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', (int) (short) 0);
        java.lang.String str4 = dateTimeZone2.getName((-35999903L));
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone2.getName((long) (byte) 1, locale6);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+32:00" + "'", str4, "+32:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+32:00" + "'", str7, "+32:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(349200000, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long7 = dateTimeZone0.convertLocalToUTC((long) (short) 100, false);
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        boolean boolean11 = dateTimeZone0.isStandardOffset((-169319964L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj6 = null;
        boolean boolean7 = dateTimeZone5.equals(obj6);
        java.lang.String str9 = dateTimeZone5.getName(100L);
        java.lang.String str10 = dateTimeZone5.getID();
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        boolean boolean12 = dateTimeZone0.equals((java.lang.Object) dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forID("+00:00:00.052");
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone14.getShortName((-111599990L), locale16);
        boolean boolean18 = dateTimeZone5.equals((java.lang.Object) locale16);
        long long20 = dateTimeZone5.previousTransition(1920122L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.052" + "'", str17, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1920122L + "'", long20 == 1920122L);
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) 0);
        java.lang.String str13 = dateTimeZone7.getNameKey((long) 10);
        java.lang.String str15 = dateTimeZone7.getShortName((long) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone7.isLocalDateTimeGap(localDateTime16);
        java.lang.String str18 = dateTimeZone7.getID();
        boolean boolean19 = dateTimeZone7.isFixed();
        long long23 = dateTimeZone7.convertLocalToUTC(32L, true, (long) (-3600000));
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone7.getName((long) 361920000, locale25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        boolean boolean29 = dateTimeZone7.isStandardOffset((-1198319990L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100);
        java.lang.String str11 = dateTimeZone0.getName((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj13 = null;
        boolean boolean14 = dateTimeZone12.equals(obj13);
        java.lang.String str16 = dateTimeZone12.getName(100L);
        java.lang.String str17 = dateTimeZone12.getID();
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        long long21 = dateTimeZone12.adjustOffset((long) (short) 100, false);
        java.util.TimeZone timeZone22 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        boolean boolean25 = dateTimeZone23.isStandardOffset(132L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        boolean boolean27 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        java.lang.String str28 = dateTimeZone23.getID();
        java.lang.String str29 = dateTimeZone23.toString();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone23.getShortName((long) (-3600000), locale31);
        java.lang.String str34 = dateTimeZone23.getNameKey(360000132L);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone23.getName((-111599980L), locale36);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getShortName((long) '#', locale9);
        java.lang.Class<?> wildcardClass11 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        java.lang.String str13 = dateTimeZone0.getShortName(32L);
        long long16 = dateTimeZone0.adjustOffset((long) (short) 100, true);
        int int18 = dateTimeZone0.getStandardOffset(360600000L);
        int int20 = dateTimeZone0.getOffset(34L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (byte) 1, locale9);
        java.lang.String str11 = dateTimeZone0.getID();
        int int13 = dateTimeZone0.getOffset((-3599991L));
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName(36000010L, locale15);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(97, 349200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 349200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        int int6 = dateTimeZone0.getStandardOffset((long) (short) 10);
        boolean boolean7 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getName(36000052L, locale10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forID("+00:00:00.001");
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj15 = null;
        boolean boolean16 = dateTimeZone14.equals(obj15);
        java.lang.String str18 = dateTimeZone14.getName(100L);
        java.lang.String str19 = dateTimeZone14.getID();
        boolean boolean20 = dateTimeZone14.isFixed();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) 10);
        java.lang.String str25 = dateTimeZone21.getName((long) (short) 1);
        long long27 = dateTimeZone21.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) 10);
        int int32 = dateTimeZone28.getOffset((long) (short) 10);
        long long35 = dateTimeZone28.adjustOffset((long) 'a', true);
        boolean boolean36 = dateTimeZone28.isFixed();
        long long38 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) (-1));
        long long40 = dateTimeZone14.getMillisKeepLocal(dateTimeZone28, 32L);
        boolean boolean41 = dateTimeZone13.equals((java.lang.Object) dateTimeZone14);
        boolean boolean43 = dateTimeZone14.isStandardOffset((long) 3600000);
        long long46 = dateTimeZone14.adjustOffset((-5519958L), true);
        long long48 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 352800032L);
        java.lang.String str50 = dateTimeZone0.getNameKey(361919999L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 97L + "'", long35 == 97L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-5519958L) + "'", long46 == (-5519958L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 352800032L + "'", long48 == 352800032L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-3660000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone1.getOffset(readableInstant6);
        boolean boolean8 = dateTimeZone1.isFixed();
        long long10 = dateTimeZone1.nextTransition((long) '#');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long13 = dateTimeZone1.convertUTCToLocal((-32L));
        int int15 = dateTimeZone1.getOffsetFromLocal(36000000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35L + "'", long10 == 35L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-32L) + "'", long13 == (-32L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(5520000, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        int int13 = dateTimeZone0.getOffset((long) (byte) 0);
        long long16 = dateTimeZone0.convertLocalToUTC((-1L), false);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName(1L, locale19);
        int int22 = dateTimeZone0.getOffset((-115200001L));
        long long25 = dateTimeZone0.convertLocalToUTC((-709800001L), true);
        java.lang.String str26 = dateTimeZone0.toString();
        long long28 = dateTimeZone0.convertUTCToLocal((-5519900L));
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone0.getName(324059990L, locale30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-709800001L) + "'", long25 == (-709800001L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-5519900L) + "'", long28 == (-5519900L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        int int8 = dateTimeZone0.getStandardOffset(360059999L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone0.getShortName(99L, locale10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = dateTimeZone0.getOffset(readableInstant12);
        java.util.TimeZone timeZone14 = dateTimeZone0.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(3660000, 3660000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 3660000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName(0L, locale4);
        java.lang.String str7 = dateTimeZone2.getShortName((long) (-1));
        boolean boolean9 = dateTimeZone2.isStandardOffset(0L);
        boolean boolean11 = dateTimeZone2.isStandardOffset((long) (short) 0);
        long long13 = dateTimeZone2.convertUTCToLocal(35L);
        long long17 = dateTimeZone2.convertLocalToUTC(0L, true, (-35999999L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        long long22 = dateTimeZone2.convertLocalToUTC((-363600001L), false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology23 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.010" + "'", str5, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 45L + "'", long13 == 45L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-10L) + "'", long17 == (-10L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-363600011L) + "'", long22 == (-363600011L));
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(0L, locale3);
        java.lang.String str6 = dateTimeZone1.getShortName((long) (-1));
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.lang.String str9 = dateTimeZone1.getShortName(36L);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone1.getOffset(readableInstant10);
        java.lang.Class<?> wildcardClass12 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        int int14 = dateTimeZone0.getStandardOffset(10L);
        java.lang.String str16 = dateTimeZone0.getShortName((long) 100);
        long long18 = dateTimeZone0.nextTransition((-39120000L));
        long long21 = dateTimeZone0.convertLocalToUTC((-230400000L), true);
        boolean boolean22 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-39120000L) + "'", long18 == (-39120000L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-230400000L) + "'", long21 == (-230400000L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long16 = dateTimeZone12.convertLocalToUTC((long) (short) 0, false, (long) (short) 10);
        int int18 = dateTimeZone12.getStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone12.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(126600000);
        boolean boolean23 = dateTimeZone12.equals((java.lang.Object) 126600000);
        boolean boolean25 = dateTimeZone12.isStandardOffset(324060010L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        boolean boolean28 = dateTimeZone26.isStandardOffset((long) 10);
        int int30 = dateTimeZone26.getOffset((long) (short) 10);
        boolean boolean32 = dateTimeZone26.equals((java.lang.Object) 0);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone26.getShortName((long) (short) 0, locale34);
        java.lang.String str37 = dateTimeZone26.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone38.isStandardOffset((long) 10);
        java.lang.String str42 = dateTimeZone38.getName((long) (short) 1);
        long long44 = dateTimeZone38.convertUTCToLocal((long) ' ');
        long long46 = dateTimeZone38.convertUTCToLocal((long) (short) 100);
        int int48 = dateTimeZone38.getOffset((long) (short) 10);
        boolean boolean49 = dateTimeZone26.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forID("UTC");
        long long53 = dateTimeZone38.getMillisKeepLocal(dateTimeZone51, 107L);
        long long55 = dateTimeZone51.previousTransition((long) (-1));
        boolean boolean56 = dateTimeZone12.equals((java.lang.Object) long55);
        int int58 = dateTimeZone12.getOffsetFromLocal((-25199985L));
        java.lang.String str60 = dateTimeZone12.getName(115200031L);
        long long64 = dateTimeZone12.convertLocalToUTC(360060000L, false, 72000009L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L + "'", long46 == 100L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 107L + "'", long53 == 107L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 360060000L + "'", long64 == 360060000L);
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(52, 32);
        java.lang.String str4 = dateTimeZone2.getName((-115199990L));
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+52:32" + "'", str4, "+52:32");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        long long12 = dateTimeZone0.convertLocalToUTC(100L, true, (long) ' ');
        java.lang.String str13 = dateTimeZone0.getID();
        java.lang.String str15 = dateTimeZone0.getName((long) (byte) -1);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone0.getShortName((long) 360000000, locale17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) ' ');
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, (long) 360600000);
        int int25 = dateTimeZone21.getStandardOffset(35999999L);
        java.lang.String str26 = dateTimeZone21.getID();
        java.lang.String str28 = dateTimeZone21.getName((-113280000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 171480000L + "'", long23 == 171480000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 189120000 + "'", int25 == 189120000);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+52:32" + "'", str26, "+52:32");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+52:32" + "'", str28, "+52:32");
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        int int5 = dateTimeZone1.getOffset((long) (short) 10);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getName((long) 0, locale7);
        java.lang.String str9 = dateTimeZone1.toString();
        java.lang.String str10 = dateTimeZone1.getID();
        long long14 = dateTimeZone1.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long17 = dateTimeZone1.convertLocalToUTC((long) (short) 10, false);
        java.util.TimeZone timeZone18 = dateTimeZone1.toTimeZone();
        long long20 = dateTimeZone1.nextTransition((long) (short) 100);
        boolean boolean22 = dateTimeZone1.isStandardOffset(3600010L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        long long26 = dateTimeZone24.convertUTCToLocal((long) 360060000);
        java.lang.String str28 = dateTimeZone24.getName(0L);
        long long30 = dateTimeZone1.getMillisKeepLocal(dateTimeZone24, (-359999967L));
        java.util.TimeZone timeZone31 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 360060000L + "'", long26 == 360060000L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-359999967L) + "'", long30 == (-359999967L));
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        java.lang.String str3 = dateTimeZone2.getID();
        long long6 = dateTimeZone2.adjustOffset(3599990L, true);
        long long8 = dateTimeZone2.convertUTCToLocal((long) 126600000);
        boolean boolean10 = dateTimeZone2.isStandardOffset((-35999958L));
        long long14 = dateTimeZone2.convertLocalToUTC((-10L), false, (-107999980L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.001" + "'", str3, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3599990L + "'", long6 == 3599990L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 126600001L + "'", long8 == 126600001L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-11L) + "'", long14 == (-11L));
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        long long4 = dateTimeZone0.previousTransition(0L);
        long long7 = dateTimeZone0.convertLocalToUTC(52L, true);
        java.lang.String str9 = dateTimeZone0.getName((long) (-1));
        java.lang.String str10 = dateTimeZone0.toString();
        long long12 = dateTimeZone0.previousTransition(118320014L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118320014L + "'", long12 == 118320014L);
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long7 = dateTimeZone0.convertLocalToUTC((long) (short) 100, false);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(0L, locale9);
        int int12 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        java.util.TimeZone timeZone13 = dateTimeZone0.toTimeZone();
        java.lang.String str15 = dateTimeZone0.getShortName(100L);
        java.lang.String str17 = dateTimeZone0.getNameKey(36000000L);
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        int int21 = dateTimeZone0.getOffset(180011L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone0.getOffset(readableInstant7);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        java.lang.String str12 = dateTimeZone0.getNameKey((-395999975L));
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getName(91L, locale14);
        long long19 = dateTimeZone0.convertLocalToUTC(195000000L, true, (-25199974L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 195000000L + "'", long19 == 195000000L);
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        long long9 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        java.util.TimeZone timeZone10 = dateTimeZone0.toTimeZone();
        java.lang.String str12 = dateTimeZone0.getName((long) 360000000);
        long long15 = dateTimeZone0.convertLocalToUTC((long) (byte) 100, false);
        int int17 = dateTimeZone0.getOffset(0L);
        long long19 = dateTimeZone0.nextTransition(360000052L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 360000052L + "'", long19 == 360000052L);
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long15 = dateTimeZone12.adjustOffset((long) 360600000, true);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) (short) 100);
        boolean boolean20 = dateTimeZone12.equals((java.lang.Object) (short) 100);
        long long23 = dateTimeZone12.convertLocalToUTC(324060100L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 360600000L + "'", long15 == 360600000L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 324060100L + "'", long23 == 324060100L);
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone0.getShortName((-126599964L));
        java.lang.String str3 = dateTimeZone0.toString();
        int int5 = dateTimeZone0.getStandardOffset(101L);
        int int7 = dateTimeZone0.getOffsetFromLocal((-21599975L));
        long long10 = dateTimeZone0.convertLocalToUTC((-5519999L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-5519999L) + "'", long10 == (-5519999L));
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.lang.String str6 = dateTimeZone0.getID();
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 0, locale8);
        int int11 = dateTimeZone0.getOffset(360600032L);
        boolean boolean13 = dateTimeZone0.isStandardOffset((-39120000L));
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.convertUTCToLocal((long) (short) 100);
        int int10 = dateTimeZone0.getOffset((long) (short) 10);
        java.lang.String str12 = dateTimeZone0.getShortName((-36000001L));
        long long15 = dateTimeZone0.adjustOffset(155400000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 155400000L + "'", long15 == 155400000L);
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        boolean boolean7 = dateTimeZone0.isFixed();
        long long9 = dateTimeZone0.nextTransition((long) '#');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long12 = dateTimeZone0.convertUTCToLocal((-32L));
        long long15 = dateTimeZone0.convertLocalToUTC(42L, true);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.ReadableInstant readableInstant19 = null;
        int int20 = dateTimeZone17.getOffset(readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        int int22 = dateTimeZone17.getOffset(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean25 = dateTimeZone23.isStandardOffset(107L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        boolean boolean28 = dateTimeZone27.isFixed();
        boolean boolean29 = dateTimeZone23.equals((java.lang.Object) dateTimeZone27);
        long long31 = dateTimeZone17.getMillisKeepLocal(dateTimeZone23, (-111599990L));
        long long34 = dateTimeZone17.adjustOffset(360600001L, false);
        long long36 = dateTimeZone0.getMillisKeepLocal(dateTimeZone17, (long) (short) 0);
        int int38 = dateTimeZone17.getOffset(36000032L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-32L) + "'", long12 == (-32L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 42L + "'", long15 == 42L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-111599989L) + "'", long31 == (-111599989L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 360600001L + "'", long34 == 360600001L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str11 = dateTimeZone9.getNameKey((long) 0);
        long long14 = dateTimeZone9.convertLocalToUTC(32L, true);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone9.isLocalDateTimeGap(localDateTime15);
        int int18 = dateTimeZone9.getOffsetFromLocal((-35999975L));
        java.lang.String str20 = dateTimeZone9.getName((-35999958L));
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj22 = null;
        boolean boolean23 = dateTimeZone21.equals(obj22);
        java.lang.String str25 = dateTimeZone21.getName(100L);
        long long27 = dateTimeZone21.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj29 = null;
        boolean boolean30 = dateTimeZone28.equals(obj29);
        long long32 = dateTimeZone21.getMillisKeepLocal(dateTimeZone28, (long) 0);
        boolean boolean34 = dateTimeZone28.equals((java.lang.Object) (byte) 100);
        int int36 = dateTimeZone28.getOffsetFromLocal(32L);
        java.util.TimeZone timeZone37 = dateTimeZone28.toTimeZone();
        boolean boolean38 = dateTimeZone9.equals((java.lang.Object) timeZone37);
        java.lang.Class<?> wildcardClass39 = timeZone37.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, (int) (byte) 0);
        int int4 = dateTimeZone2.getOffset((long) 1);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone2.isLocalDateTimeGap(localDateTime5);
        long long10 = dateTimeZone2.convertLocalToUTC((-35999975L), false, 101L);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone2.isLocalDateTimeGap(localDateTime11);
        java.lang.String str14 = dateTimeZone2.getShortName(0L);
        boolean boolean16 = dateTimeZone2.isStandardOffset(0L);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        long long20 = dateTimeZone18.nextTransition((long) (byte) 1);
        java.lang.String str22 = dateTimeZone18.getNameKey(172800122L);
        boolean boolean23 = dateTimeZone2.equals((java.lang.Object) dateTimeZone18);
        boolean boolean24 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 360000000 + "'", int4 == 360000000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-395999975L) + "'", long10 == (-395999975L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:00" + "'", str14, "+100:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        boolean boolean13 = dateTimeZone0.isStandardOffset(10L);
        long long15 = dateTimeZone0.convertUTCToLocal(1L);
        int int17 = dateTimeZone0.getOffsetFromLocal(0L);
        long long21 = dateTimeZone0.convertLocalToUTC((-3599899L), true, 79200024L);
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone0.isLocalDateTimeGap(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3599899L) + "'", long21 == (-3599899L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone1.getOffset(readableInstant2);
        long long5 = dateTimeZone1.convertUTCToLocal(0L);
        int int7 = dateTimeZone1.getOffsetFromLocal((long) 32);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 10);
        int int15 = dateTimeZone11.getOffset((long) (short) 10);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone11.getName((long) 0, locale17);
        java.lang.String str20 = dateTimeZone11.getNameKey((long) (byte) 1);
        boolean boolean21 = dateTimeZone11.isFixed();
        long long23 = dateTimeZone11.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone11.isLocalDateTimeGap(localDateTime24);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone11.getName((long) (short) 10, locale27);
        long long30 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) ' ');
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone31.isStandardOffset((long) 10);
        java.lang.String str35 = dateTimeZone31.getName((long) (short) 1);
        long long37 = dateTimeZone31.convertUTCToLocal((long) ' ');
        long long39 = dateTimeZone31.nextTransition(1L);
        int int41 = dateTimeZone31.getOffsetFromLocal((long) 'a');
        long long43 = dateTimeZone11.getMillisKeepLocal(dateTimeZone31, 0L);
        boolean boolean44 = dateTimeZone1.equals((java.lang.Object) long43);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 32L + "'", long5 == 32L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 32L + "'", long30 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 10);
        java.lang.String str15 = dateTimeZone11.getName((long) (short) 1);
        long long17 = dateTimeZone11.convertUTCToLocal((long) ' ');
        long long19 = dateTimeZone11.nextTransition(1L);
        java.lang.String str21 = dateTimeZone11.getNameKey(10L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone11.getShortName((long) (byte) 100, locale23);
        long long26 = dateTimeZone11.previousTransition((long) 'a');
        long long28 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone11.getOffset(readableInstant29);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 97L + "'", long26 == 97L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (byte) 1);
        boolean boolean10 = dateTimeZone0.isFixed();
        long long12 = dateTimeZone0.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        java.lang.String str15 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long19 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj21 = null;
        boolean boolean22 = dateTimeZone20.equals(obj21);
        java.lang.String str24 = dateTimeZone20.getName(100L);
        java.lang.String str25 = dateTimeZone20.getID();
        java.util.TimeZone timeZone26 = dateTimeZone20.toTimeZone();
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone20.isLocalDateTimeGap(localDateTime27);
        java.util.TimeZone timeZone29 = dateTimeZone20.toTimeZone();
        long long31 = dateTimeZone0.getMillisKeepLocal(dateTimeZone20, (long) 360000000);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone32.isStandardOffset((long) 10);
        java.lang.String str36 = dateTimeZone32.getName((long) (short) 1);
        long long38 = dateTimeZone32.convertUTCToLocal((long) ' ');
        long long40 = dateTimeZone32.nextTransition(1L);
        java.lang.String str42 = dateTimeZone32.getNameKey(10L);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        int int46 = dateTimeZone43.getStandardOffset((-1L));
        int int48 = dateTimeZone43.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long53 = dateTimeZone49.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean54 = dateTimeZone43.equals((java.lang.Object) (byte) 0);
        long long56 = dateTimeZone32.getMillisKeepLocal(dateTimeZone43, (long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        boolean boolean59 = dateTimeZone57.isStandardOffset((long) 10);
        java.lang.String str61 = dateTimeZone57.getName((long) 'a');
        long long63 = dateTimeZone57.nextTransition((long) '4');
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone57.getShortName(100L, locale65);
        long long70 = dateTimeZone57.convertLocalToUTC(10L, false, (long) (short) 10);
        boolean boolean71 = dateTimeZone43.equals((java.lang.Object) 10L);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone72);
        int int75 = dateTimeZone72.getStandardOffset((-1L));
        int int77 = dateTimeZone72.getOffset((long) (short) 1);
        java.util.TimeZone timeZone78 = dateTimeZone72.toTimeZone();
        java.util.TimeZone timeZone79 = dateTimeZone72.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        long long84 = dateTimeZone81.adjustOffset((long) (byte) 100, false);
        int int86 = dateTimeZone81.getOffset(3600010L);
        boolean boolean87 = dateTimeZone43.equals((java.lang.Object) 3600010L);
        int int89 = dateTimeZone43.getStandardOffset((long) (byte) 100);
        java.lang.String str90 = dateTimeZone43.getID();
        long long93 = dateTimeZone43.adjustOffset((-3600000L), true);
        java.lang.String str94 = dateTimeZone43.getID();
        long long96 = dateTimeZone20.getMillisKeepLocal(dateTimeZone43, 324060010L);
        java.lang.String str98 = dateTimeZone20.getNameKey(3120000L);
        java.util.TimeZone timeZone99 = dateTimeZone20.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 360000000L + "'", long31 == 360000000L);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 32L + "'", long38 == 32L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L + "'", long56 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 52L + "'", long63 == 52L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L + "'", long84 == 100L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "UTC" + "'", str90, "UTC");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-3600000L) + "'", long93 == (-3600000L));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "UTC" + "'", str94, "UTC");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 324060010L + "'", long96 == 324060010L);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "UTC" + "'", str98, "UTC");
        org.junit.Assert.assertNotNull(timeZone99);
        org.junit.Assert.assertEquals(timeZone99.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj2 = null;
        boolean boolean3 = dateTimeZone1.equals(obj2);
        java.lang.String str5 = dateTimeZone1.getName(100L);
        java.lang.String str6 = dateTimeZone1.getID();
        boolean boolean7 = dateTimeZone1.isFixed();
        int int9 = dateTimeZone1.getOffsetFromLocal((long) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        int int13 = dateTimeZone10.getStandardOffset((-1L));
        int int15 = dateTimeZone10.getOffset((long) (short) 1);
        java.util.TimeZone timeZone16 = dateTimeZone10.toTimeZone();
        java.util.TimeZone timeZone17 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        boolean boolean20 = dateTimeZone1.equals((java.lang.Object) timeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) 10);
        int int25 = dateTimeZone21.getOffset((long) (short) 10);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (short) 1);
        long long31 = dateTimeZone21.convertLocalToUTC(97L, false, 10L);
        boolean boolean32 = dateTimeZone1.equals((java.lang.Object) 97L);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone1.getName((long) 0, locale34);
        java.lang.String str37 = dateTimeZone1.getName((-3599991L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 97L + "'", long31 == 97L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 10);
        int int11 = dateTimeZone7.getOffset((long) (short) 10);
        long long14 = dateTimeZone7.adjustOffset((long) 'a', true);
        boolean boolean15 = dateTimeZone7.isFixed();
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj19 = null;
        boolean boolean20 = dateTimeZone18.equals(obj19);
        java.lang.String str22 = dateTimeZone18.getName(100L);
        long long24 = dateTimeZone18.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj26 = null;
        boolean boolean27 = dateTimeZone25.equals(obj26);
        long long29 = dateTimeZone18.getMillisKeepLocal(dateTimeZone25, (long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        boolean boolean31 = dateTimeZone0.equals((java.lang.Object) dateTimeZone25);
        boolean boolean32 = dateTimeZone25.isFixed();
        long long34 = dateTimeZone25.convertUTCToLocal((-349200000L));
        java.lang.String str36 = dateTimeZone25.getShortName((-25200000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 97L + "'", long14 == 97L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-349200000L) + "'", long34 == (-349200000L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone1.adjustOffset((long) 0, false);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj7 = null;
        boolean boolean8 = dateTimeZone6.equals(obj7);
        java.lang.String str10 = dateTimeZone6.getName(100L);
        java.lang.String str11 = dateTimeZone6.getID();
        java.util.TimeZone timeZone12 = dateTimeZone6.toTimeZone();
        long long15 = dateTimeZone6.adjustOffset((long) (short) 100, false);
        java.lang.String str17 = dateTimeZone6.getNameKey(10L);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, 101L);
        long long22 = dateTimeZone6.convertLocalToUTC((long) '4', false);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone6.getName(198600000L, locale24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599899L) + "'", long19 == (-3599899L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.nextTransition((long) 100);
        java.lang.String str8 = dateTimeZone1.getID();
        long long10 = dateTimeZone1.convertUTCToLocal((-35999975L));
        long long13 = dateTimeZone1.convertLocalToUTC(367440000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-35999975L) + "'", long10 == (-35999975L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 367440000L + "'", long13 == 367440000L);
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        boolean boolean3 = dateTimeZone1.isFixed();
        int int5 = dateTimeZone1.getOffsetFromLocal(97L);
        java.lang.String str7 = dateTimeZone1.getNameKey((-475199990L));
        long long11 = dateTimeZone1.convertLocalToUTC(71999989L, true, (long) '#');
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone1.isLocalDateTimeGap(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 71999979L + "'", long11 == 71999979L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.nextTransition(32L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getName((-1L), locale5);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone1.getShortName((long) (byte) 10, locale8);
        java.lang.String str11 = dateTimeZone1.getShortName(81120025L);
        int int13 = dateTimeZone1.getStandardOffset(324060010L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone1.getName((long) 115200000, locale15);
        long long18 = dateTimeZone1.nextTransition(33L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int21 = dateTimeZone1.getStandardOffset(97L);
        long long23 = dateTimeZone1.convertUTCToLocal((-111599968L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 33L + "'", long18 == 33L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-111599968L) + "'", long23 == (-111599968L));
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 1, locale3);
        long long8 = dateTimeZone1.convertLocalToUTC(1L, false, (long) (-3600000));
        java.lang.String str9 = dateTimeZone1.getID();
        java.lang.String str11 = dateTimeZone1.getName((-35999958L));
        boolean boolean12 = dateTimeZone1.isFixed();
        long long14 = dateTimeZone1.previousTransition(0L);
        java.lang.String str16 = dateTimeZone1.getNameKey((-25199885L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        boolean boolean19 = dateTimeZone17.isStandardOffset((long) 10);
        int int21 = dateTimeZone17.getOffset((long) (short) 10);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone17.getName((long) 0, locale23);
        java.lang.String str26 = dateTimeZone17.getNameKey((long) (byte) 1);
        boolean boolean27 = dateTimeZone17.isFixed();
        long long29 = dateTimeZone17.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone17.isLocalDateTimeGap(localDateTime30);
        java.lang.String str32 = dateTimeZone17.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        long long36 = dateTimeZone17.getMillisKeepLocal(dateTimeZone33, (long) (-1));
        boolean boolean38 = dateTimeZone33.isStandardOffset(20L);
        java.lang.String str39 = dateTimeZone33.getID();
        boolean boolean40 = dateTimeZone33.isFixed();
        long long42 = dateTimeZone1.getMillisKeepLocal(dateTimeZone33, 360060000L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        int int44 = dateTimeZone1.getOffset(readableInstant43);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 360060000L + "'", long42 == 360060000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey(10L);
        long long12 = dateTimeZone0.nextTransition((-46859976L));
        java.lang.String str14 = dateTimeZone0.getShortName((-475199991L));
        java.lang.String str15 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) 10);
        java.lang.String str20 = dateTimeZone16.getName((long) (short) 1);
        long long22 = dateTimeZone16.convertUTCToLocal((long) ' ');
        long long24 = dateTimeZone16.nextTransition(1L);
        long long28 = dateTimeZone16.convertLocalToUTC((long) ' ', true, (long) (byte) -1);
        boolean boolean30 = dateTimeZone16.isStandardOffset((long) ' ');
        java.util.TimeZone timeZone31 = dateTimeZone16.toTimeZone();
        boolean boolean32 = dateTimeZone0.equals((java.lang.Object) timeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-46859976L) + "'", long12 == (-46859976L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        java.lang.String str5 = dateTimeZone0.getID();
        java.lang.String str6 = dateTimeZone0.toString();
        boolean boolean7 = dateTimeZone0.isFixed();
        java.lang.String str8 = dateTimeZone0.getID();
        java.util.TimeZone timeZone9 = dateTimeZone0.toTimeZone();
        long long12 = dateTimeZone0.convertLocalToUTC(360000030L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 360000030L + "'", long12 == 360000030L);
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getStandardOffset((-1L));
        int int6 = dateTimeZone1.getOffset((long) (short) 1);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone9.getOffset(readableInstant10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone9.getShortName((long) 'a', locale13);
        long long18 = dateTimeZone9.convertLocalToUTC(100L, false, (long) (short) 100);
        boolean boolean20 = dateTimeZone9.isStandardOffset(1L);
        boolean boolean21 = dateTimeZone9.isFixed();
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone9.getName((long) 100, locale23);
        long long26 = dateTimeZone9.convertUTCToLocal((-363600011L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-363600011L) + "'", long26 == (-363600011L));
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) 0);
        java.lang.String str13 = dateTimeZone0.getName((long) (byte) 1);
        java.lang.String str15 = dateTimeZone0.getName(360060010L);
        java.lang.String str16 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.nextTransition((long) '#');
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone4.isStandardOffset((long) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) (short) 1);
        long long10 = dateTimeZone4.convertUTCToLocal((long) ' ');
        long long12 = dateTimeZone4.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone4.getOffset(readableInstant13);
        java.lang.String str15 = dateTimeZone4.toString();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone4.getName((-1L), locale17);
        java.lang.String str19 = dateTimeZone4.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.lang.String str21 = dateTimeZone4.getID();
        long long23 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, (long) ' ');
        long long27 = dateTimeZone4.convertLocalToUTC((-475199991L), true, 35999999L);
        java.lang.String str29 = dateTimeZone4.getShortName(174720000L);
        java.util.TimeZone timeZone30 = dateTimeZone4.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 32L + "'", long10 == 32L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-475199991L) + "'", long27 == (-475199991L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        int int13 = dateTimeZone0.getOffset((long) (byte) 0);
        long long16 = dateTimeZone0.convertLocalToUTC((-1L), false);
        java.lang.String str18 = dateTimeZone0.getShortName(0L);
        java.lang.String str20 = dateTimeZone0.getNameKey(52L);
        int int22 = dateTimeZone0.getOffsetFromLocal(35L);
        long long26 = dateTimeZone0.convertLocalToUTC((long) (byte) 10, false, (long) 'a');
        java.lang.String str28 = dateTimeZone0.getNameKey(360000000L);
        java.lang.String str30 = dateTimeZone0.getNameKey(74L);
        java.lang.String str31 = dateTimeZone0.toString();
        java.lang.String str33 = dateTimeZone0.getShortName(5700010L);
        java.lang.String str35 = dateTimeZone0.getName(246720000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        int int8 = dateTimeZone0.getStandardOffset((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        int int12 = dateTimeZone9.getStandardOffset((-1L));
        int int14 = dateTimeZone9.getOffset((long) (short) 1);
        java.util.TimeZone timeZone15 = dateTimeZone9.toTimeZone();
        java.util.TimeZone timeZone16 = dateTimeZone9.toTimeZone();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone9.getName(32L, locale18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        long long22 = dateTimeZone9.getMillisKeepLocal(dateTimeZone20, (-1L));
        long long25 = dateTimeZone9.convertLocalToUTC(52L, true);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj27 = null;
        boolean boolean28 = dateTimeZone26.equals(obj27);
        java.lang.String str30 = dateTimeZone26.getName(100L);
        java.lang.String str31 = dateTimeZone26.getID();
        java.util.TimeZone timeZone32 = dateTimeZone26.toTimeZone();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone26.getName(100L, locale34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone26.getName((long) '#', locale37);
        java.lang.String str39 = dateTimeZone26.getID();
        boolean boolean40 = dateTimeZone9.equals((java.lang.Object) dateTimeZone26);
        long long42 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, (-35999991L));
        java.lang.String str43 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-35999991L) + "'", long42 == (-35999991L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        boolean boolean13 = dateTimeZone0.isStandardOffset(10L);
        int int15 = dateTimeZone0.getStandardOffset((long) 0);
        org.joda.time.ReadableInstant readableInstant16 = null;
        int int17 = dateTimeZone0.getOffset(readableInstant16);
        java.lang.String str18 = dateTimeZone0.toString();
        java.lang.String str19 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName(100L, locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forID("+00:00");
        long long13 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) (byte) 1);
        int int15 = dateTimeZone0.getOffset((-35999975L));
        long long19 = dateTimeZone0.convertLocalToUTC((long) '4', true, (long) 360000000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long23 = dateTimeZone0.convertLocalToUTC((long) 360600000, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 360600000L + "'", long23 == 360600000L);
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(126060000, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:35");
        long long3 = dateTimeZone1.convertUTCToLocal(324600051L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 330300051L + "'", long3 == 330300051L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (byte) 10);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getName(107L, locale11);
        boolean boolean14 = dateTimeZone0.isStandardOffset((-35999975L));
        java.util.TimeZone timeZone15 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        long long18 = dateTimeZone16.nextTransition((-360000001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360000001L) + "'", long18 == (-360000001L));
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+01:00");
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName((-3600000L), locale3);
        java.lang.String str6 = dateTimeZone1.getShortName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+01:00" + "'", str4, "+01:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+01:00" + "'", str6, "+01:00");
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        int int13 = dateTimeZone0.getOffset((long) (byte) 0);
        long long16 = dateTimeZone0.convertLocalToUTC((-1L), false);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        long long20 = dateTimeZone18.nextTransition((-5519948L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-5519948L) + "'", long20 == (-5519948L));
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        java.lang.String str4 = dateTimeZone0.getNameKey((long) 'a');
        long long8 = dateTimeZone0.convertLocalToUTC((long) (-1), true, 107L);
        long long11 = dateTimeZone0.adjustOffset((long) 115200000, false);
        java.lang.String str12 = dateTimeZone0.getID();
        java.lang.String str14 = dateTimeZone0.getName((-35999968L));
        java.lang.Class<?> wildcardClass15 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 115200000L + "'", long11 == 115200000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone8.getOffset(readableInstant9);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone8.getShortName((long) 'a', locale12);
        long long16 = dateTimeZone8.adjustOffset((long) (byte) 1, false);
        java.lang.String str18 = dateTimeZone8.getShortName(36000052L);
        java.lang.String str19 = dateTimeZone8.getID();
        int int21 = dateTimeZone8.getStandardOffset((-3599878L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        long long12 = dateTimeZone0.convertLocalToUTC(100L, true, (long) ' ');
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone0.getOffset(readableInstant13);
        java.lang.String str16 = dateTimeZone0.getShortName((-3600001L));
        java.lang.String str17 = dateTimeZone0.toString();
        java.lang.String str19 = dateTimeZone0.getNameKey((-115199959L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 5520000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 5520000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        int int5 = dateTimeZone1.getOffset((long) (short) 10);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getName((long) 0, locale7);
        java.lang.String str9 = dateTimeZone1.toString();
        long long13 = dateTimeZone1.convertLocalToUTC(100L, true, (long) ' ');
        int int15 = dateTimeZone1.getOffset(0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone1.getName((long) 'a', locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj7 = null;
        boolean boolean8 = dateTimeZone6.equals(obj7);
        java.lang.String str10 = dateTimeZone6.getName(100L);
        java.lang.String str11 = dateTimeZone6.getID();
        boolean boolean12 = dateTimeZone6.isFixed();
        int int14 = dateTimeZone6.getOffsetFromLocal((long) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        int int18 = dateTimeZone15.getStandardOffset((-1L));
        int int20 = dateTimeZone15.getOffset((long) (short) 1);
        java.util.TimeZone timeZone21 = dateTimeZone15.toTimeZone();
        java.util.TimeZone timeZone22 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        boolean boolean25 = dateTimeZone6.equals((java.lang.Object) timeZone22);
        boolean boolean27 = dateTimeZone6.equals((java.lang.Object) false);
        long long29 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, 361920000L);
        java.lang.String str31 = dateTimeZone6.getShortName((-32399975L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.001" + "'", str5, "+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 361920001L + "'", long29 == 361920001L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.convertUTCToLocal((long) (short) 100);
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getStandardOffset(360600032L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean16 = dateTimeZone15.isFixed();
        java.lang.String str18 = dateTimeZone15.getShortName((long) '4');
        long long20 = dateTimeZone15.convertUTCToLocal((long) (short) 10);
        long long22 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) '4');
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone13.isLocalDateTimeGap(localDateTime23);
        long long26 = dateTimeZone13.convertUTCToLocal((long) (short) -1);
        java.lang.String str27 = dateTimeZone13.toString();
        int int29 = dateTimeZone13.getStandardOffset(35999999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        long long32 = dateTimeZone0.getMillisKeepLocal(dateTimeZone13, (long) 360060000);
        java.util.TimeZone timeZone33 = dateTimeZone0.toTimeZone();
        long long35 = dateTimeZone0.nextTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        int int39 = dateTimeZone36.getStandardOffset((-1L));
        int int41 = dateTimeZone36.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        int int43 = dateTimeZone36.getOffset(readableInstant42);
        java.lang.String str45 = dateTimeZone36.getNameKey(0L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long49 = dateTimeZone36.getMillisKeepLocal(dateTimeZone47, (-35999965L));
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        long long52 = dateTimeZone47.getMillisKeepLocal(dateTimeZone50, (long) ' ');
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone54.getName(0L, locale56);
        java.lang.String str59 = dateTimeZone54.getShortName((long) (-1));
        boolean boolean61 = dateTimeZone54.isStandardOffset(0L);
        long long63 = dateTimeZone54.convertUTCToLocal(10L);
        int int65 = dateTimeZone54.getOffset(35L);
        long long67 = dateTimeZone47.getMillisKeepLocal(dateTimeZone54, 97L);
        java.util.Locale locale69 = null;
        java.lang.String str70 = dateTimeZone47.getName(32L, locale69);
        long long72 = dateTimeZone0.getMillisKeepLocal(dateTimeZone47, 0L);
        java.lang.String str73 = dateTimeZone47.getID();
        long long75 = dateTimeZone47.previousTransition((long) (-3600000));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 36000052L + "'", long22 == 36000052L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 35999999L + "'", long26 == 35999999L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:00" + "'", str27, "+10:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 36000000 + "'", int29 == 36000000);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 324060000L + "'", long32 == 324060000L);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36000000 + "'", int39 == 36000000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000000 + "'", int41 == 36000000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 36000000 + "'", int43 == 36000000);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 25L + "'", long49 == 25L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-35999958L) + "'", long52 == (-35999958L));
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 20L + "'", long63 == 20L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 97L + "'", long67 == 97L);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-10L) + "'", long72 == (-10L));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.010" + "'", str73, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-3600000L) + "'", long75 == (-3600000L));
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', (int) (byte) 0);
        java.lang.String str5 = dateTimeZone3.getNameKey((-3599991L));
        long long8 = dateTimeZone3.adjustOffset((-36000068L), true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology9 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-36000068L) + "'", long8 == (-36000068L));
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.nextTransition((long) '#');
        java.lang.String str3 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone5.getOffset(readableInstant6);
        long long10 = dateTimeZone5.convertLocalToUTC((long) (-1), false);
        java.lang.String str12 = dateTimeZone5.getNameKey(0L);
        long long14 = dateTimeZone0.getMillisKeepLocal(dateTimeZone5, 3600010L);
        int int16 = dateTimeZone5.getStandardOffset((long) 'a');
        boolean boolean17 = dateTimeZone5.isFixed();
        long long19 = dateTimeZone5.nextTransition(118320014L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.001" + "'", str3, "+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3600011L + "'", long14 == 3600011L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 118320014L + "'", long19 == 118320014L);
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        java.util.TimeZone timeZone8 = dateTimeZone0.toTimeZone();
        long long10 = dateTimeZone0.nextTransition((long) 36000000);
        java.lang.String str12 = dateTimeZone0.getNameKey(117060031L);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone0.getShortName((long) '#', locale14);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 36000000L + "'", long10 == 36000000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        boolean boolean11 = dateTimeZone0.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        java.lang.String str18 = dateTimeZone14.getName((long) 'a');
        long long21 = dateTimeZone14.convertLocalToUTC((long) (short) 100, false);
        boolean boolean23 = dateTimeZone14.equals((java.lang.Object) 100);
        java.lang.String str24 = dateTimeZone14.getID();
        java.lang.String str25 = dateTimeZone14.getID();
        java.lang.String str27 = dateTimeZone14.getName((long) (short) 0);
        long long29 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 0L);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 10);
        int int34 = dateTimeZone30.getOffset((long) (short) 10);
        long long37 = dateTimeZone30.adjustOffset((long) 'a', true);
        boolean boolean38 = dateTimeZone30.isFixed();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj40 = null;
        boolean boolean41 = dateTimeZone39.equals(obj40);
        java.lang.String str43 = dateTimeZone39.getName(100L);
        java.lang.String str44 = dateTimeZone39.getID();
        java.util.TimeZone timeZone45 = dateTimeZone39.toTimeZone();
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone39.isLocalDateTimeGap(localDateTime46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) 10);
        java.lang.String str52 = dateTimeZone48.getName((long) 'a');
        java.lang.String str54 = dateTimeZone48.getShortName((long) 1);
        boolean boolean56 = dateTimeZone48.isStandardOffset((long) (byte) 100);
        long long58 = dateTimeZone39.getMillisKeepLocal(dateTimeZone48, 35L);
        boolean boolean59 = dateTimeZone30.equals((java.lang.Object) long58);
        boolean boolean60 = dateTimeZone0.equals((java.lang.Object) boolean59);
        int int62 = dateTimeZone0.getOffsetFromLocal((long) 126060000);
        long long64 = dateTimeZone0.nextTransition((long) 5520000);
        long long66 = dateTimeZone0.convertUTCToLocal(122L);
        boolean boolean67 = dateTimeZone0.isFixed();
        java.lang.String str68 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.001" + "'", str10, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L + "'", long21 == 100L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 97L + "'", long37 == 97L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 35L + "'", long58 == 35L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 5520000L + "'", long64 == 5520000L);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 123L + "'", long66 == 123L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.001" + "'", str68, "+00:00:00.001");
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (byte) 1, locale9);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone0.isLocalDateTimeGap(localDateTime11);
        java.lang.String str14 = dateTimeZone0.getShortName((long) (byte) 10);
        boolean boolean15 = dateTimeZone0.isFixed();
        int int17 = dateTimeZone0.getOffset(71999989L);
        long long21 = dateTimeZone0.convertLocalToUTC((-25199953L), false, (-35999968L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-25199953L) + "'", long21 == (-25199953L));
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        boolean boolean5 = dateTimeZone0.isFixed();
        long long7 = dateTimeZone0.nextTransition((long) (-1));
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) ' ', locale9);
        long long12 = dateTimeZone0.previousTransition((long) 0);
        java.lang.String str14 = dateTimeZone0.getShortName(107L);
        int int16 = dateTimeZone0.getOffset((-25199975L));
        long long18 = dateTimeZone0.nextTransition((long) 'a');
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.Class<?> wildcardClass22 = dateTimeZone21.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        int int7 = dateTimeZone0.getOffset((-395999975L));
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        java.lang.String str11 = dateTimeZone0.getName((long) 126600000);
        java.lang.String str12 = dateTimeZone0.getID();
        java.lang.String str14 = dateTimeZone0.getShortName(51L);
        boolean boolean16 = dateTimeZone0.isStandardOffset(35999999L);
        long long19 = dateTimeZone0.adjustOffset((-35999989L), false);
        int int21 = dateTimeZone0.getStandardOffset(171480000L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone0.getName(364740100L, locale23);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-35999989L) + "'", long19 == (-35999989L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        boolean boolean7 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj9 = null;
        boolean boolean10 = dateTimeZone8.equals(obj9);
        java.lang.String str12 = dateTimeZone8.getName(100L);
        java.lang.String str13 = dateTimeZone8.getID();
        boolean boolean14 = dateTimeZone8.isFixed();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) 10);
        java.lang.String str19 = dateTimeZone15.getName((long) (short) 1);
        long long21 = dateTimeZone15.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) 10);
        int int26 = dateTimeZone22.getOffset((long) (short) 10);
        long long29 = dateTimeZone22.adjustOffset((long) 'a', true);
        boolean boolean30 = dateTimeZone22.isFixed();
        long long32 = dateTimeZone15.getMillisKeepLocal(dateTimeZone22, (long) (-1));
        long long34 = dateTimeZone8.getMillisKeepLocal(dateTimeZone22, 32L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        int int36 = dateTimeZone8.getOffset(readableInstant35);
        java.lang.String str38 = dateTimeZone8.getName((long) (byte) 1);
        java.lang.String str40 = dateTimeZone8.getShortName((-35999903L));
        long long42 = dateTimeZone0.getMillisKeepLocal(dateTimeZone8, 3600008L);
        long long44 = dateTimeZone8.nextTransition(99L);
        boolean boolean45 = dateTimeZone8.isFixed();
        int int47 = dateTimeZone8.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32L + "'", long21 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 97L + "'", long29 == 97L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3600008L + "'", long42 == 3600008L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 99L + "'", long44 == 99L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone1.adjustOffset((long) 0, false);
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj7 = null;
        boolean boolean8 = dateTimeZone6.equals(obj7);
        java.lang.String str10 = dateTimeZone6.getName(100L);
        java.lang.String str11 = dateTimeZone6.getID();
        java.util.TimeZone timeZone12 = dateTimeZone6.toTimeZone();
        long long15 = dateTimeZone6.adjustOffset((long) (short) 100, false);
        java.lang.String str17 = dateTimeZone6.getNameKey(10L);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, 101L);
        boolean boolean21 = dateTimeZone1.isStandardOffset(3599990L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(100);
        int int25 = dateTimeZone23.getStandardOffset(71999979L);
        long long27 = dateTimeZone1.getMillisKeepLocal(dateTimeZone23, 51L);
        long long29 = dateTimeZone1.convertUTCToLocal(361919999L);
        long long32 = dateTimeZone1.adjustOffset((-10859976L), false);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone1.getName((-29280000L), locale34);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599899L) + "'", long19 == (-3599899L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 360000000 + "'", int25 == 360000000);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-363599949L) + "'", long27 == (-363599949L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 358319999L + "'", long29 == 358319999L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-10859976L) + "'", long32 == (-10859976L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-01:00" + "'", str35, "-01:00");
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        int int7 = dateTimeZone0.getStandardOffset((long) (byte) 1);
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName((long) (byte) 10, locale9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone0.getOffset(readableInstant11);
        long long14 = dateTimeZone0.convertUTCToLocal((long) (-1));
        java.lang.Class<?> wildcardClass15 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        int int6 = dateTimeZone0.getOffsetFromLocal(100L);
        java.lang.String str8 = dateTimeZone0.getName((long) 10);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        java.lang.String str11 = dateTimeZone0.getID();
        java.lang.String str13 = dateTimeZone0.getShortName((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj15 = null;
        boolean boolean16 = dateTimeZone14.equals(obj15);
        java.lang.String str18 = dateTimeZone14.getName(100L);
        java.lang.String str19 = dateTimeZone14.getID();
        int int21 = dateTimeZone14.getOffset((-395999975L));
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone14.getOffset(readableInstant22);
        java.lang.String str25 = dateTimeZone14.getName((long) 126600000);
        java.lang.String str26 = dateTimeZone14.getID();
        long long28 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, (-126599901L));
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone14.getShortName(126000025L, locale30);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-126599901L) + "'", long28 == (-126599901L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 0, true);
        int int14 = dateTimeZone0.getOffset((long) (byte) 100);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone0.isLocalDateTimeGap(localDateTime15);
        java.lang.String str17 = dateTimeZone0.getID();
        long long19 = dateTimeZone0.convertUTCToLocal(97L);
        long long22 = dateTimeZone0.convertLocalToUTC(11L, true);
        long long24 = dateTimeZone0.previousTransition(126600000L);
        java.lang.String str25 = dateTimeZone0.getID();
        java.lang.String str27 = dateTimeZone0.getShortName(79200024L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 97L + "'", long19 == 97L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 11L + "'", long22 == 11L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 126600000L + "'", long24 == 126600000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, (int) ' ');
        boolean boolean6 = dateTimeZone1.equals((java.lang.Object) dateTimeZone5);
        int int8 = dateTimeZone5.getStandardOffset((-115199948L));
        java.lang.Class<?> wildcardClass9 = dateTimeZone5.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.010" + "'", str2, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5520000 + "'", int8 == 5520000);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        long long6 = dateTimeZone0.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTimeZone7.equals(obj8);
        long long11 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) 0);
        long long13 = dateTimeZone7.convertUTCToLocal(32L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        int int18 = dateTimeZone14.getOffset((long) (short) 10);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone14.getName((long) 0, locale20);
        java.lang.String str23 = dateTimeZone14.getNameKey((long) (byte) 1);
        boolean boolean24 = dateTimeZone14.isFixed();
        long long26 = dateTimeZone14.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone14.isLocalDateTimeGap(localDateTime27);
        long long30 = dateTimeZone7.getMillisKeepLocal(dateTimeZone14, 3600010L);
        java.lang.String str31 = dateTimeZone14.toString();
        long long33 = dateTimeZone14.nextTransition((-25199975L));
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone14.getOffset(readableInstant34);
        java.util.TimeZone timeZone36 = dateTimeZone14.toTimeZone();
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone14.isLocalDateTimeGap(localDateTime37);
        boolean boolean39 = dateTimeZone14.isFixed();
        java.lang.Class<?> wildcardClass40 = dateTimeZone14.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3600010L + "'", long30 == 3600010L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-25199975L) + "'", long33 == (-25199975L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone12.getOffset(readableInstant13);
        long long17 = dateTimeZone12.convertLocalToUTC((-65280000L), true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-65280000L) + "'", long17 == (-65280000L));
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(5520000, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (byte) 1);
        boolean boolean10 = dateTimeZone0.isFixed();
        long long12 = dateTimeZone0.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        java.lang.String str15 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long19 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, (long) (-1));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone0.getName(0L, locale22);
        boolean boolean24 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        long long8 = dateTimeZone1.convertLocalToUTC((long) (short) 100, false);
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) 100);
        java.lang.String str11 = dateTimeZone1.getID();
        boolean boolean12 = dateTimeZone1.isFixed();
        java.lang.String str13 = dateTimeZone1.getID();
        boolean boolean15 = dateTimeZone1.isStandardOffset(126600000L);
        java.lang.String str17 = dateTimeZone1.getName((long) 97);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        long long4 = dateTimeZone0.previousTransition(0L);
        java.util.TimeZone timeZone5 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        int int11 = dateTimeZone8.getStandardOffset((-1L));
        int int13 = dateTimeZone8.getOffset((long) (short) 1);
        java.util.TimeZone timeZone14 = dateTimeZone8.toTimeZone();
        java.util.TimeZone timeZone15 = dateTimeZone8.toTimeZone();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone8.getName(32L, locale17);
        java.util.TimeZone timeZone19 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str22 = dateTimeZone20.getNameKey((-10L));
        java.lang.String str23 = dateTimeZone20.getID();
        long long25 = dateTimeZone7.getMillisKeepLocal(dateTimeZone20, (-349200001L));
        long long28 = dateTimeZone7.adjustOffset((-151200022L), false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-349200001L) + "'", long25 == (-349200001L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-151200022L) + "'", long28 == (-151200022L));
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        int int13 = dateTimeZone0.getOffsetFromLocal((long) 3600000);
        int int15 = dateTimeZone0.getOffsetFromLocal((long) (short) 100);
        java.util.TimeZone timeZone16 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        java.lang.Class<?> wildcardClass18 = dateTimeZone17.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long7 = dateTimeZone0.convertLocalToUTC((long) (short) 100, false);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 100, (int) (byte) 0);
        int int14 = dateTimeZone12.getOffset((long) 1);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone12.isLocalDateTimeGap(localDateTime15);
        long long20 = dateTimeZone12.convertLocalToUTC((-35999975L), false, 101L);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime21);
        java.lang.String str24 = dateTimeZone12.getShortName(101L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        java.lang.String str27 = dateTimeZone12.getName(324060010L);
        long long29 = dateTimeZone0.getMillisKeepLocal(dateTimeZone12, 126599991L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 360000000 + "'", int14 == 360000000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-395999975L) + "'", long20 == (-395999975L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+100:00" + "'", str24, "+100:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:00" + "'", str27, "+100:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-233400009L) + "'", long29 == (-233400009L));
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) (byte) 10);
        java.lang.String str5 = dateTimeZone1.getName(360600032L);
        long long7 = dateTimeZone1.previousTransition(118800000L);
        int int9 = dateTimeZone1.getOffset((-36000100L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.010" + "'", str5, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 118800000L + "'", long7 == 118800000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        java.lang.String str5 = dateTimeZone1.getName((long) 'a');
        long long7 = dateTimeZone1.nextTransition((long) '4');
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(100L, locale9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        int int15 = dateTimeZone12.getStandardOffset((-1L));
        int int17 = dateTimeZone12.getOffset((long) (short) 1);
        long long19 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, 0L);
        java.lang.String str21 = dateTimeZone1.getNameKey((long) (byte) -1);
        boolean boolean23 = dateTimeZone1.isStandardOffset((-35999965L));
        int int25 = dateTimeZone1.getOffsetFromLocal((-32L));
        java.lang.String str26 = dateTimeZone1.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        long long29 = dateTimeZone27.nextTransition((long) '#');
        java.lang.String str30 = dateTimeZone27.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone31.isStandardOffset((long) 10);
        java.lang.String str35 = dateTimeZone31.getName((long) (short) 1);
        long long37 = dateTimeZone31.convertUTCToLocal((long) ' ');
        long long39 = dateTimeZone31.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        int int41 = dateTimeZone31.getOffset(readableInstant40);
        java.lang.String str42 = dateTimeZone31.toString();
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeZone31.getName((-1L), locale44);
        java.lang.String str46 = dateTimeZone31.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        java.lang.String str48 = dateTimeZone31.getID();
        long long50 = dateTimeZone27.getMillisKeepLocal(dateTimeZone31, (long) ' ');
        org.joda.time.tz.NameProvider nameProvider51 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider51);
        boolean boolean59 = dateTimeZone27.equals((java.lang.Object) nameProvider51);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        boolean boolean61 = dateTimeZone1.equals((java.lang.Object) dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forID("+00:00:00.001");
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeZone63.getName(10L, locale65);
        long long68 = dateTimeZone63.convertUTCToLocal((long) 360600000);
        long long70 = dateTimeZone27.getMillisKeepLocal(dateTimeZone63, (-60000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology71 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 32L + "'", long50 == 32L);
        org.junit.Assert.assertNotNull(nameProvider51);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.001" + "'", str66, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 360600001L + "'", long68 == 360600001L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-60001L) + "'", long70 == (-60001L));
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getName(100L, locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forID("+00:00");
        long long13 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) (byte) 1);
        int int15 = dateTimeZone0.getOffset((long) (-1));
        java.lang.String str16 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int20 = dateTimeZone17.getStandardOffset((-1L));
        int int22 = dateTimeZone17.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long27 = dateTimeZone23.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean28 = dateTimeZone17.equals((java.lang.Object) (byte) 0);
        long long30 = dateTimeZone0.getMillisKeepLocal(dateTimeZone17, (long) (short) 10);
        java.lang.String str32 = dateTimeZone17.getShortName(35999999L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj34 = null;
        boolean boolean35 = dateTimeZone33.equals(obj34);
        java.lang.String str37 = dateTimeZone33.getName(100L);
        long long39 = dateTimeZone33.convertUTCToLocal((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj41 = null;
        boolean boolean42 = dateTimeZone40.equals(obj41);
        long long44 = dateTimeZone33.getMillisKeepLocal(dateTimeZone40, (long) 0);
        boolean boolean46 = dateTimeZone40.equals((java.lang.Object) (byte) 100);
        int int48 = dateTimeZone40.getOffsetFromLocal(32L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = dateTimeZone40.getOffset(readableInstant49);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone40.isLocalDateTimeGap(localDateTime51);
        int int54 = dateTimeZone40.getStandardOffset((-111599980L));
        java.lang.String str56 = dateTimeZone40.getShortName(107L);
        boolean boolean57 = dateTimeZone17.equals((java.lang.Object) dateTimeZone40);
        long long60 = dateTimeZone40.convertLocalToUTC((long) 187200000, true);
        long long62 = dateTimeZone40.previousTransition(234000010L);
        int int64 = dateTimeZone40.getOffsetFromLocal((-3600000L));
        boolean boolean65 = dateTimeZone40.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 187200000L + "'", long60 == 187200000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 234000010L + "'", long62 == 234000010L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 1, (int) (short) 0);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName(36000035L, locale4);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+01:00" + "'", str5, "+01:00");
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey(10L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset((-1L));
        int int16 = dateTimeZone11.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone17.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean22 = dateTimeZone11.equals((java.lang.Object) (byte) 0);
        long long24 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (long) (short) 100);
        long long26 = dateTimeZone0.previousTransition((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone0.isLocalDateTimeGap(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L + "'", long24 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        java.lang.String str2 = dateTimeZone1.toString();
        boolean boolean3 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getID();
        long long6 = dateTimeZone1.previousTransition((-32880000L));
        java.lang.String str7 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.001" + "'", str2, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.001" + "'", str4, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-32880000L) + "'", long6 == (-32880000L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.001" + "'", str7, "+00:00:00.001");
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        int int6 = dateTimeZone0.getOffset(readableInstant5);
        int int8 = dateTimeZone0.getStandardOffset((long) '4');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        int int12 = dateTimeZone9.getStandardOffset((-1L));
        int int14 = dateTimeZone9.getOffset((long) (short) 1);
        java.util.TimeZone timeZone15 = dateTimeZone9.toTimeZone();
        java.util.TimeZone timeZone16 = dateTimeZone9.toTimeZone();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone9.getName(32L, locale18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        long long22 = dateTimeZone9.getMillisKeepLocal(dateTimeZone20, (-1L));
        long long25 = dateTimeZone9.convertLocalToUTC(52L, true);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj27 = null;
        boolean boolean28 = dateTimeZone26.equals(obj27);
        java.lang.String str30 = dateTimeZone26.getName(100L);
        java.lang.String str31 = dateTimeZone26.getID();
        java.util.TimeZone timeZone32 = dateTimeZone26.toTimeZone();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone26.getName(100L, locale34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeZone26.getName((long) '#', locale37);
        java.lang.String str39 = dateTimeZone26.getID();
        boolean boolean40 = dateTimeZone9.equals((java.lang.Object) dateTimeZone26);
        long long42 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, (-35999991L));
        long long45 = dateTimeZone0.convertLocalToUTC(101L, false);
        long long49 = dateTimeZone0.convertLocalToUTC((-360060000L), true, (-5520011L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-35999991L) + "'", long42 == (-35999991L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 101L + "'", long45 == 101L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-360060000L) + "'", long49 == (-360060000L));
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        boolean boolean6 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 10);
        java.lang.String str11 = dateTimeZone7.getName((long) (short) 1);
        long long13 = dateTimeZone7.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 10);
        int int18 = dateTimeZone14.getOffset((long) (short) 10);
        long long21 = dateTimeZone14.adjustOffset((long) 'a', true);
        boolean boolean22 = dateTimeZone14.isFixed();
        long long24 = dateTimeZone7.getMillisKeepLocal(dateTimeZone14, (long) (-1));
        long long26 = dateTimeZone0.getMillisKeepLocal(dateTimeZone14, 32L);
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone0.getOffset(readableInstant27);
        java.lang.String str30 = dateTimeZone0.getName((long) (byte) 1);
        long long32 = dateTimeZone0.convertUTCToLocal((-118799991L));
        java.lang.String str33 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 32L + "'", long26 == 32L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-118799991L) + "'", long32 == (-118799991L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal(0L);
        long long13 = dateTimeZone0.adjustOffset(0L, true);
        long long15 = dateTimeZone0.previousTransition(187200032L);
        java.lang.String str16 = dateTimeZone0.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long19 = dateTimeZone0.previousTransition((-30479975L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 187200032L + "'", long15 == 187200032L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-30479975L) + "'", long19 == (-30479975L));
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 10);
        java.lang.String str12 = dateTimeZone8.getName((long) 'a');
        long long15 = dateTimeZone8.convertLocalToUTC((long) (short) 100, false);
        boolean boolean17 = dateTimeZone8.equals((java.lang.Object) 100);
        int int19 = dateTimeZone8.getOffset((long) 0);
        boolean boolean20 = dateTimeZone7.equals((java.lang.Object) dateTimeZone8);
        long long23 = dateTimeZone8.adjustOffset((long) (short) 0, false);
        int int25 = dateTimeZone8.getOffsetFromLocal((long) 360060000);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone8.isLocalDateTimeGap(localDateTime26);
        int int29 = dateTimeZone8.getOffsetFromLocal((long) (short) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant31 = null;
        int int32 = dateTimeZone8.getOffset(readableInstant31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        java.util.TimeZone timeZone12 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        long long16 = dateTimeZone14.nextTransition(45120025L);
        boolean boolean18 = dateTimeZone14.isStandardOffset(3120000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 45120025L + "'", long16 == 45120025L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long14 = dateTimeZone12.nextTransition((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        int int18 = dateTimeZone15.getStandardOffset((-1L));
        int int20 = dateTimeZone15.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone21.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean26 = dateTimeZone15.equals((java.lang.Object) (byte) 0);
        long long28 = dateTimeZone15.convertUTCToLocal(0L);
        java.lang.Class<?> wildcardClass29 = dateTimeZone15.getClass();
        boolean boolean30 = dateTimeZone12.equals((java.lang.Object) dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) '4');
        long long35 = dateTimeZone12.getMillisKeepLocal(dateTimeZone33, 0L);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        boolean boolean39 = dateTimeZone37.isFixed();
        java.lang.String str40 = dateTimeZone37.getID();
        long long42 = dateTimeZone33.getMillisKeepLocal(dateTimeZone37, 3600041L);
        java.lang.String str44 = dateTimeZone37.getName(60000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3120000L) + "'", long35 == (-3120000L));
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.052" + "'", str40, "+00:00:00.052");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6719989L + "'", long42 == 6719989L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.052" + "'", str44, "+00:00:00.052");
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        java.lang.String str4 = dateTimeZone0.getNameKey((long) 'a');
        int int6 = dateTimeZone0.getOffset(0L);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (byte) -1, locale8);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getShortName(3600099L, locale11);
        long long14 = dateTimeZone0.nextTransition(90000025L);
        long long16 = dateTimeZone0.convertUTCToLocal(132L);
        boolean boolean17 = dateTimeZone0.isFixed();
        long long19 = dateTimeZone0.convertUTCToLocal((long) '#');
        java.lang.String str20 = dateTimeZone0.toString();
        long long22 = dateTimeZone0.convertUTCToLocal(34L);
        int int24 = dateTimeZone0.getOffsetFromLocal(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 90000025L + "'", long14 == 90000025L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 132L + "'", long16 == 132L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 34L + "'", long22 == 34L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        long long12 = dateTimeZone0.nextTransition(100L);
        java.lang.String str14 = dateTimeZone0.getNameKey(324600000L);
        java.lang.String str16 = dateTimeZone0.getNameKey((-11L));
        java.lang.String str18 = dateTimeZone0.getShortName((-125999900L));
        java.lang.String str20 = dateTimeZone0.getNameKey(0L);
        java.lang.String str21 = dateTimeZone0.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        long long12 = dateTimeZone9.adjustOffset((long) (byte) 100, false);
        long long15 = dateTimeZone9.convertLocalToUTC(32L, false);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone9.getName(0L, locale17);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone9.getShortName(281399999L, locale20);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(39120000, 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 3600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 100);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone0.getShortName((-395999975L), locale11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 10);
        java.lang.String str17 = dateTimeZone15.getName(100L);
        java.lang.String str18 = dateTimeZone15.getID();
        long long20 = dateTimeZone0.getMillisKeepLocal(dateTimeZone15, 36L);
        long long23 = dateTimeZone0.convertLocalToUTC(187199989L, false);
        long long25 = dateTimeZone0.nextTransition((-3119900L));
        java.lang.Class<?> wildcardClass26 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+35:10" + "'", str17, "+35:10");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+35:10" + "'", str18, "+35:10");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-126599964L) + "'", long20 == (-126599964L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 187199989L + "'", long23 == 187199989L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-3119900L) + "'", long25 == (-3119900L));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long16 = dateTimeZone12.convertLocalToUTC((long) (short) 0, false, (long) (short) 10);
        int int18 = dateTimeZone12.getStandardOffset(0L);
        int int20 = dateTimeZone12.getOffsetFromLocal((long) 360600000);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 10);
        int int27 = dateTimeZone23.getOffset((long) (short) 10);
        boolean boolean29 = dateTimeZone23.equals((java.lang.Object) 0);
        boolean boolean31 = dateTimeZone23.equals((java.lang.Object) (byte) 0);
        long long34 = dateTimeZone23.adjustOffset((long) 0, true);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone23.isLocalDateTimeGap(localDateTime35);
        java.util.TimeZone timeZone37 = dateTimeZone23.toTimeZone();
        boolean boolean38 = dateTimeZone12.equals((java.lang.Object) dateTimeZone23);
        java.lang.String str40 = dateTimeZone23.getShortName((-125999900L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (byte) 1);
        boolean boolean10 = dateTimeZone0.isFixed();
        long long12 = dateTimeZone0.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone0.getName((long) (short) 10, locale16);
        long long19 = dateTimeZone0.convertUTCToLocal((long) 115200000);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getShortName(361920000L, locale21);
        int int24 = dateTimeZone0.getOffset((-29280000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 115200000L + "'", long19 == 115200000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long7 = dateTimeZone0.convertLocalToUTC(72000009L, false, (-3660001L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 72000009L + "'", long7 == 72000009L);
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.nextTransition((long) 100);
        java.lang.String str8 = dateTimeZone1.getID();
        long long12 = dateTimeZone1.convertLocalToUTC(10L, false, (-1L));
        long long15 = dateTimeZone1.convertLocalToUTC(35L, false);
        long long17 = dateTimeZone1.previousTransition(35999999L);
        long long19 = dateTimeZone1.convertUTCToLocal((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone1.getShortName((-835199990L), locale22);
        int int25 = dateTimeZone1.getStandardOffset(169200122L);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone1.getName(305520024L, locale27);
        java.lang.String str29 = dateTimeZone1.toString();
        java.util.TimeZone timeZone30 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 35L + "'", long15 == 35L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35999999L + "'", long17 == 35999999L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 97L + "'", long19 == 97L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.lang.String str5 = dateTimeZone1.getID();
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        java.lang.String str8 = dateTimeZone1.getNameKey((long) (byte) 0);
        int int10 = dateTimeZone1.getStandardOffset((-32L));
        long long13 = dateTimeZone1.adjustOffset((long) (short) 100, false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology14 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 1, false);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        int int18 = dateTimeZone15.getStandardOffset((-1L));
        int int20 = dateTimeZone15.getOffset((long) (short) 1);
        java.util.TimeZone timeZone21 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 10);
        java.lang.String str27 = dateTimeZone23.getName((long) 'a');
        long long30 = dateTimeZone23.convertLocalToUTC((long) (short) 100, false);
        boolean boolean32 = dateTimeZone23.equals((java.lang.Object) 100);
        int int34 = dateTimeZone23.getOffset((long) 0);
        boolean boolean35 = dateTimeZone22.equals((java.lang.Object) dateTimeZone23);
        long long37 = dateTimeZone0.getMillisKeepLocal(dateTimeZone22, (long) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone38.isStandardOffset((long) 10);
        java.lang.String str42 = dateTimeZone38.getName((long) 'a');
        long long44 = dateTimeZone38.nextTransition((long) '4');
        org.joda.time.ReadableInstant readableInstant45 = null;
        int int46 = dateTimeZone38.getOffset(readableInstant45);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone38.isLocalDateTimeGap(localDateTime47);
        long long50 = dateTimeZone0.getMillisKeepLocal(dateTimeZone38, (long) '#');
        java.lang.String str51 = dateTimeZone0.toString();
        long long54 = dateTimeZone0.adjustOffset((-3599899L), true);
        long long56 = dateTimeZone0.convertUTCToLocal((-3599899L));
        java.lang.String str58 = dateTimeZone0.getName(189120000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L + "'", long30 == 100L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 35L + "'", long37 == 35L);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 52L + "'", long44 == 52L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 35L + "'", long50 == 35L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-3599899L) + "'", long54 == (-3599899L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599899L) + "'", long56 == (-3599899L));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone9.isStandardOffset((long) 10);
        java.lang.String str13 = dateTimeZone9.getName((long) 'a');
        java.lang.String str15 = dateTimeZone9.getShortName((long) 1);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) (byte) 100);
        long long19 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, 35L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        boolean boolean21 = dateTimeZone0.isFixed();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        java.lang.String str25 = dateTimeZone23.getShortName(396600000L);
        long long27 = dateTimeZone23.nextTransition((-1L));
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone23.getShortName((-126599964L), locale29);
        boolean boolean32 = dateTimeZone23.isStandardOffset((-3599958L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        boolean boolean34 = dateTimeZone0.equals((java.lang.Object) dateTimeZone23);
        long long37 = dateTimeZone0.convertLocalToUTC((-114600011L), false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:00" + "'", str25, "+10:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:00" + "'", str30, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-114600011L) + "'", long37 == (-114600011L));
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        long long6 = dateTimeZone1.adjustOffset((long) 'a', true);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(39600035L, locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset((-1L));
        int int16 = dateTimeZone11.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone11.getOffset(readableInstant17);
        java.lang.String str20 = dateTimeZone11.getNameKey(0L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long24 = dateTimeZone11.getMillisKeepLocal(dateTimeZone22, (-35999965L));
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        long long27 = dateTimeZone22.getMillisKeepLocal(dateTimeZone25, (long) ' ');
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone29.getName(0L, locale31);
        java.lang.String str34 = dateTimeZone29.getShortName((long) (-1));
        boolean boolean36 = dateTimeZone29.isStandardOffset(0L);
        long long38 = dateTimeZone29.convertUTCToLocal(10L);
        int int40 = dateTimeZone29.getOffset(35L);
        long long42 = dateTimeZone22.getMillisKeepLocal(dateTimeZone29, 97L);
        java.lang.String str43 = dateTimeZone22.getID();
        long long45 = dateTimeZone22.convertUTCToLocal((-3600001L));
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeZone22.getShortName((-39599878L), locale47);
        boolean boolean49 = dateTimeZone1.equals((java.lang.Object) locale47);
        org.joda.time.ReadableInstant readableInstant50 = null;
        int int51 = dateTimeZone1.getOffset(readableInstant50);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 97L + "'", long6 == 97L);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.100" + "'", str10, "+00:00:00.100");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 36000000 + "'", int14 == 36000000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 36000000 + "'", int16 == 36000000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 36000000 + "'", int18 == 36000000);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 25L + "'", long24 == 25L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-35999958L) + "'", long27 == (-35999958L));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 20L + "'", long38 == 20L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 97L + "'", long42 == 97L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-3599991L) + "'", long45 == (-3599991L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 0, true);
        boolean boolean13 = dateTimeZone0.isFixed();
        long long15 = dateTimeZone0.previousTransition((long) (byte) 100);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        int int12 = dateTimeZone0.getOffset((long) (byte) 1);
        java.lang.String str13 = dateTimeZone0.toString();
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone0.getOffset(readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone16.nextTransition((long) '#');
        java.lang.String str19 = dateTimeZone16.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = dateTimeZone21.getOffset(readableInstant22);
        long long26 = dateTimeZone21.convertLocalToUTC((long) (-1), false);
        java.lang.String str28 = dateTimeZone21.getNameKey(0L);
        long long30 = dateTimeZone16.getMillisKeepLocal(dateTimeZone21, 3600010L);
        int int32 = dateTimeZone21.getStandardOffset((long) 'a');
        int int34 = dateTimeZone21.getStandardOffset((long) (short) 0);
        boolean boolean35 = dateTimeZone0.equals((java.lang.Object) dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) 10);
        int int40 = dateTimeZone36.getOffset((long) (short) 10);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone36.getName((long) 0, locale42);
        java.lang.String str44 = dateTimeZone36.toString();
        long long48 = dateTimeZone36.convertLocalToUTC(100L, true, (long) ' ');
        org.joda.time.ReadableInstant readableInstant49 = null;
        int int50 = dateTimeZone36.getOffset(readableInstant49);
        boolean boolean51 = dateTimeZone0.equals((java.lang.Object) int50);
        int int53 = dateTimeZone0.getOffsetFromLocal(79200025L);
        java.lang.Class<?> wildcardClass54 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3600010L + "'", long30 == 3600010L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str4 = dateTimeZone1.getShortName((long) '4');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long7 = dateTimeZone1.nextTransition((long) 100);
        java.lang.String str8 = dateTimeZone1.getID();
        long long10 = dateTimeZone1.nextTransition((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        boolean boolean11 = dateTimeZone9.isStandardOffset((long) 10);
        java.lang.String str13 = dateTimeZone9.getName((long) 'a');
        java.lang.String str15 = dateTimeZone9.getShortName((long) 1);
        boolean boolean17 = dateTimeZone9.isStandardOffset((long) (byte) 100);
        long long19 = dateTimeZone0.getMillisKeepLocal(dateTimeZone9, 35L);
        int int21 = dateTimeZone0.getOffset((long) (byte) 1);
        long long23 = dateTimeZone0.previousTransition(32L);
        long long25 = dateTimeZone0.previousTransition(360000000L);
        java.lang.String str26 = dateTimeZone0.toString();
        long long28 = dateTimeZone0.convertUTCToLocal(324060010L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 360000000L + "'", long25 == 360000000L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 324060010L + "'", long28 == 324060010L);
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getShortName((long) 0);
        long long4 = dateTimeZone0.previousTransition((long) (short) 100);
        int int6 = dateTimeZone0.getStandardOffset(35L);
        long long9 = dateTimeZone0.convertLocalToUTC(3600000L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L + "'", long4 == 100L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600000L + "'", long9 == 3600000L);
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        java.lang.String str5 = dateTimeZone0.getID();
        java.lang.String str6 = dateTimeZone0.toString();
        java.lang.String str7 = dateTimeZone0.getID();
        java.lang.String str9 = dateTimeZone0.getName(36000132L);
        java.util.TimeZone timeZone10 = dateTimeZone0.toTimeZone();
        long long12 = dateTimeZone0.nextTransition(122999900L);
        java.lang.Class<?> wildcardClass13 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 122999900L + "'", long12 == 122999900L);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        int int13 = dateTimeZone0.getStandardOffset((-35999975L));
        java.lang.Object obj14 = null;
        boolean boolean15 = dateTimeZone0.equals(obj14);
        long long17 = dateTimeZone0.nextTransition(324600000L);
        java.lang.String str19 = dateTimeZone0.getName((long) 1920000);
        long long22 = dateTimeZone0.adjustOffset(363120001L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 324600000L + "'", long17 == 324600000L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 363120001L + "'", long22 == 363120001L);
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        boolean boolean5 = dateTimeZone3.isStandardOffset((long) 10);
        java.lang.String str7 = dateTimeZone3.getName((long) (short) 1);
        long long10 = dateTimeZone3.convertLocalToUTC((long) '#', true);
        java.lang.String str12 = dateTimeZone3.getShortName((long) (byte) 10);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone3.getName(107L, locale14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone3.getShortName(3600010L, locale17);
        boolean boolean19 = dateTimeZone2.equals((java.lang.Object) dateTimeZone3);
        long long22 = dateTimeZone3.convertLocalToUTC(0L, false);
        int int24 = dateTimeZone3.getStandardOffset(467520024L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35L + "'", long10 == 35L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone3 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getShortName((-1L));
        long long10 = dateTimeZone5.adjustOffset((long) 187200000, false);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forID("Etc/UTC");
        int int14 = dateTimeZone12.getOffsetFromLocal(1L);
        int int16 = dateTimeZone12.getOffsetFromLocal(3600010L);
        long long18 = dateTimeZone12.previousTransition(100L);
        int int20 = dateTimeZone12.getOffsetFromLocal((long) '4');
        long long22 = dateTimeZone5.getMillisKeepLocal(dateTimeZone12, (-25199985L));
        long long24 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, (-5519948L));
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone1.getName((long) 'a', locale26);
        int int29 = dateTimeZone1.getOffset(0L);
        java.lang.String str31 = dateTimeZone1.getName((-111599980L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 187200000L + "'", long10 == 187200000L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-25199985L) + "'", long22 == (-25199985L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-5519948L) + "'", long24 == (-5519948L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        boolean boolean9 = dateTimeZone7.isStandardOffset((-360000001L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.isStandardOffset((long) 10);
        int int14 = dateTimeZone10.getOffset((long) (short) 10);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone10.getName((long) 0, locale16);
        java.lang.String str18 = dateTimeZone10.toString();
        java.lang.String str19 = dateTimeZone10.getID();
        long long22 = dateTimeZone10.adjustOffset((long) (byte) 0, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        int int27 = dateTimeZone24.getStandardOffset((-1L));
        int int29 = dateTimeZone24.getOffset((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone30.convertLocalToUTC((long) (byte) 0, true, (long) ' ');
        boolean boolean35 = dateTimeZone24.equals((java.lang.Object) (byte) 0);
        long long37 = dateTimeZone24.convertUTCToLocal(0L);
        boolean boolean39 = dateTimeZone24.isStandardOffset((long) '#');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        long long42 = dateTimeZone10.getMillisKeepLocal(dateTimeZone24, 31L);
        long long44 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, 39600010L);
        long long46 = dateTimeZone7.previousTransition(398520000L);
        int int48 = dateTimeZone7.getOffset(0L);
        java.lang.String str49 = dateTimeZone7.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 31L + "'", long42 == 31L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 39600010L + "'", long44 == 39600010L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 398520000L + "'", long46 == 398520000L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long5 = dateTimeZone1.convertLocalToUTC(360600032L, true, 324060000L);
        long long7 = dateTimeZone1.previousTransition(0L);
        java.lang.String str9 = dateTimeZone1.getNameKey(41L);
        int int11 = dateTimeZone1.getOffset((-354299990L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 360600032L + "'", long5 == 360600032L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone0.getOffset(readableInstant9);
        java.lang.String str11 = dateTimeZone0.toString();
        boolean boolean13 = dateTimeZone0.isStandardOffset(0L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone0.getName(100L, locale15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        boolean boolean20 = dateTimeZone18.isStandardOffset((long) 10);
        int int22 = dateTimeZone18.getOffset((long) (short) 10);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone18.getName((long) 0, locale24);
        java.lang.String str26 = dateTimeZone18.toString();
        java.lang.String str27 = dateTimeZone18.getID();
        long long31 = dateTimeZone18.convertLocalToUTC((long) (byte) -1, false, 97L);
        long long34 = dateTimeZone18.convertLocalToUTC((long) (short) 10, false);
        java.lang.String str36 = dateTimeZone18.getShortName((long) ' ');
        long long38 = dateTimeZone0.getMillisKeepLocal(dateTimeZone18, (-35999975L));
        java.lang.String str40 = dateTimeZone18.getName(3600099L);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        int int44 = dateTimeZone42.getOffsetFromLocal(0L);
        java.lang.String str46 = dateTimeZone42.getNameKey((long) '4');
        boolean boolean47 = dateTimeZone18.equals((java.lang.Object) '4');
        boolean boolean49 = dateTimeZone18.isStandardOffset(115199900L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-35999975L) + "'", long38 == (-35999975L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        long long12 = dateTimeZone9.adjustOffset((long) (byte) 100, false);
        long long15 = dateTimeZone9.adjustOffset((long) ' ', true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        long long18 = dateTimeZone9.convertUTCToLocal(91L);
        boolean boolean20 = dateTimeZone9.isStandardOffset((-39599967L));
        long long24 = dateTimeZone9.convertLocalToUTC(45L, false, (long) 361920000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 91L + "'", long18 == 91L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 45L + "'", long24 == 45L);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone8.isLocalDateTimeGap(localDateTime9);
        long long13 = dateTimeZone8.adjustOffset(52L, false);
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone8.getOffset(readableInstant14);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        java.lang.String str10 = dateTimeZone0.getNameKey(10L);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long14 = dateTimeZone12.nextTransition(480089L);
        boolean boolean16 = dateTimeZone12.isStandardOffset(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 480089L + "'", long14 == 480089L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 10);
        int int5 = dateTimeZone1.getOffset((long) (short) 10);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getName((long) 0, locale7);
        java.lang.String str9 = dateTimeZone1.toString();
        long long13 = dateTimeZone1.convertLocalToUTC(100L, true, (long) ' ');
        org.joda.time.ReadableInstant readableInstant14 = null;
        int int15 = dateTimeZone1.getOffset(readableInstant14);
        java.lang.String str17 = dateTimeZone1.getShortName(79200025L);
        int int19 = dateTimeZone1.getOffsetFromLocal((-35999903L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        boolean boolean6 = dateTimeZone4.isStandardOffset((long) 10);
        java.lang.String str8 = dateTimeZone4.getName((long) 'a');
        long long11 = dateTimeZone4.convertLocalToUTC((long) (short) 100, false);
        long long13 = dateTimeZone0.getMillisKeepLocal(dateTimeZone4, 10L);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone4.getShortName(97L, locale15);
        int int18 = dateTimeZone4.getOffsetFromLocal((long) 360060000);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone4.getShortName(45L, locale20);
        java.util.TimeZone timeZone22 = dateTimeZone4.toTimeZone();
        java.util.TimeZone timeZone23 = dateTimeZone4.toTimeZone();
        long long26 = dateTimeZone4.convertLocalToUTC(36000032L, false);
        boolean boolean27 = dateTimeZone4.isFixed();
        boolean boolean28 = dateTimeZone4.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 36000032L + "'", long26 == 36000032L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long7 = dateTimeZone0.convertLocalToUTC((long) '#', true);
        long long10 = dateTimeZone0.adjustOffset((long) (short) 10, true);
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        java.lang.String str13 = dateTimeZone0.getNameKey((long) (short) 100);
        java.lang.String str15 = dateTimeZone0.getNameKey((long) 0);
        int int17 = dateTimeZone0.getOffsetFromLocal((long) '#');
        long long20 = dateTimeZone0.convertLocalToUTC(3600000L, true);
        java.lang.String str22 = dateTimeZone0.getShortName(111L);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone0.getName(124320010L, locale24);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3600000L + "'", long20 == 3600000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj2 = null;
        boolean boolean3 = dateTimeZone1.equals(obj2);
        java.lang.String str5 = dateTimeZone1.getName(100L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj7 = null;
        boolean boolean8 = dateTimeZone6.equals(obj7);
        java.lang.String str10 = dateTimeZone6.getName(100L);
        java.lang.String str11 = dateTimeZone6.getID();
        java.util.TimeZone timeZone12 = dateTimeZone6.toTimeZone();
        boolean boolean13 = dateTimeZone1.equals((java.lang.Object) dateTimeZone6);
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone1.getName(115200031L, locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        long long12 = dateTimeZone0.convertLocalToUTC(100L, true, (long) ' ');
        org.joda.time.ReadableInstant readableInstant13 = null;
        int int14 = dateTimeZone0.getOffset(readableInstant13);
        java.lang.String str16 = dateTimeZone0.getShortName(79200025L);
        int int18 = dateTimeZone0.getOffsetFromLocal((-35999903L));
        long long20 = dateTimeZone0.nextTransition(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone21.getOffset(readableInstant25);
        java.util.TimeZone timeZone27 = dateTimeZone21.toTimeZone();
        long long29 = dateTimeZone21.nextTransition(107L);
        long long31 = dateTimeZone21.nextTransition(361920000L);
        long long33 = dateTimeZone0.getMillisKeepLocal(dateTimeZone21, (-709800001L));
        int int35 = dateTimeZone21.getStandardOffset((-30479999L));
        long long39 = dateTimeZone21.convertLocalToUTC((-77280011L), true, (-36000000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 107L + "'", long29 == 107L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 361920000L + "'", long31 == 361920000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-709800001L) + "'", long33 == (-709800001L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-77280011L) + "'", long39 == (-77280011L));
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        boolean boolean6 = dateTimeZone0.equals((java.lang.Object) 0);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName((long) (short) 0, locale8);
        java.lang.String str11 = dateTimeZone0.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone12.isStandardOffset((long) 10);
        java.lang.String str16 = dateTimeZone12.getName((long) (short) 1);
        long long18 = dateTimeZone12.convertUTCToLocal((long) ' ');
        long long20 = dateTimeZone12.convertUTCToLocal((long) (short) 100);
        int int22 = dateTimeZone12.getOffset((long) (short) 10);
        boolean boolean23 = dateTimeZone0.equals((java.lang.Object) dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone0.isLocalDateTimeGap(localDateTime24);
        java.util.TimeZone timeZone26 = dateTimeZone0.toTimeZone();
        long long28 = dateTimeZone0.nextTransition(360060000L);
        int int30 = dateTimeZone0.getOffsetFromLocal((-3599991L));
        int int32 = dateTimeZone0.getStandardOffset(3600010L);
        long long34 = dateTimeZone0.previousTransition(324059990L);
        long long38 = dateTimeZone0.convertLocalToUTC(75L, false, (-126060010L));
        org.joda.time.ReadableInstant readableInstant39 = null;
        int int40 = dateTimeZone0.getOffset(readableInstant39);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone0.getShortName((-36000000L), locale42);
        long long45 = dateTimeZone0.convertUTCToLocal(3120000L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32L + "'", long18 == 32L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 360060000L + "'", long28 == 360060000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 324059990L + "'", long34 == 324059990L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 75L + "'", long38 == 75L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3120000L + "'", long45 == 3120000L);
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        int int11 = dateTimeZone0.getOffsetFromLocal((long) (byte) 10);
        long long14 = dateTimeZone0.convertLocalToUTC((long) (byte) 1, false);
        long long17 = dateTimeZone0.convertLocalToUTC(52L, false);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeZone0.getName((-35999958L), locale19);
        java.lang.String str22 = dateTimeZone0.getShortName(0L);
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone0.getName((-35999903L), locale24);
        boolean boolean27 = dateTimeZone0.isStandardOffset(398520000L);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone0.getName(3600001L, locale29);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getStandardOffset((-1L));
        int int6 = dateTimeZone1.getOffset((long) (short) 1);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone1.getName(32L, locale10);
        long long14 = dateTimeZone1.adjustOffset((long) 10, false);
        java.util.TimeZone timeZone15 = dateTimeZone1.toTimeZone();
        boolean boolean16 = dateTimeZone1.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 1, locale3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 10);
        java.lang.String str9 = dateTimeZone5.getName((long) 'a');
        long long11 = dateTimeZone5.nextTransition((long) '4');
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone5.getShortName(100L, locale13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        int int16 = dateTimeZone5.getOffset(readableInstant15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        int int18 = dateTimeZone5.getOffset(readableInstant17);
        boolean boolean19 = dateTimeZone1.equals((java.lang.Object) readableInstant17);
        boolean boolean20 = dateTimeZone1.isFixed();
        int int22 = dateTimeZone1.getStandardOffset(122400000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (byte) 1);
        boolean boolean10 = dateTimeZone0.isFixed();
        long long12 = dateTimeZone0.previousTransition((long) 0);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone0.isLocalDateTimeGap(localDateTime13);
        java.lang.String str15 = dateTimeZone0.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long19 = dateTimeZone0.getMillisKeepLocal(dateTimeZone16, (long) (-1));
        long long23 = dateTimeZone16.convertLocalToUTC(396600000L, true, 25L);
        java.lang.String str24 = dateTimeZone16.toString();
        java.lang.String str26 = dateTimeZone16.getName(126120000L);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone16.isLocalDateTimeGap(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 396600000L + "'", long23 == 396600000L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        boolean boolean2 = dateTimeZone1.isFixed();
        long long4 = dateTimeZone1.nextTransition(52L);
        long long7 = dateTimeZone1.convertLocalToUTC((-115199990L), false);
        long long9 = dateTimeZone1.nextTransition((-90600000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 52L + "'", long4 == 52L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-115200090L) + "'", long7 == (-115200090L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-90600000L) + "'", long9 == (-90600000L));
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        java.lang.String str9 = dateTimeZone0.getNameKey(0L);
        int int11 = dateTimeZone0.getOffset(6719989L);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone0.getName(0L, locale13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long5 = dateTimeZone1.convertLocalToUTC(360600032L, true, 324060000L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj7 = null;
        boolean boolean8 = dateTimeZone6.equals(obj7);
        java.lang.String str10 = dateTimeZone6.getName(100L);
        java.lang.String str11 = dateTimeZone6.getID();
        boolean boolean12 = dateTimeZone6.isFixed();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) 10);
        java.lang.String str17 = dateTimeZone13.getName((long) (short) 1);
        long long19 = dateTimeZone13.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 10);
        int int24 = dateTimeZone20.getOffset((long) (short) 10);
        long long27 = dateTimeZone20.adjustOffset((long) 'a', true);
        boolean boolean28 = dateTimeZone20.isFixed();
        long long30 = dateTimeZone13.getMillisKeepLocal(dateTimeZone20, (long) (-1));
        long long32 = dateTimeZone6.getMillisKeepLocal(dateTimeZone20, 32L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        int int34 = dateTimeZone6.getOffset(readableInstant33);
        java.lang.String str36 = dateTimeZone6.getName((long) (byte) 1);
        java.lang.String str38 = dateTimeZone6.getShortName(0L);
        boolean boolean40 = dateTimeZone6.isStandardOffset(0L);
        boolean boolean41 = dateTimeZone1.equals((java.lang.Object) boolean40);
        long long44 = dateTimeZone1.convertLocalToUTC((-363600000L), true);
        java.lang.String str45 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 360600032L + "'", long5 == 360600032L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32L + "'", long19 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 97L + "'", long27 == 97L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32L + "'", long32 == 32L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-363600000L) + "'", long44 == (-363600000L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone0.getName(32L, locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        long long13 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (-1L));
        int int15 = dateTimeZone0.getStandardOffset(10L);
        long long17 = dateTimeZone0.nextTransition((long) 360060000);
        boolean boolean19 = dateTimeZone0.isStandardOffset(684060010L);
        java.lang.String str21 = dateTimeZone0.getNameKey((long) 10);
        int int23 = dateTimeZone0.getOffset(360060052L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 360060000L + "'", long17 == 360060000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeZone10.getName((long) (short) 10, locale12);
        int int15 = dateTimeZone10.getOffsetFromLocal((long) (byte) 1);
        java.lang.String str16 = dateTimeZone10.toString();
        long long18 = dateTimeZone10.nextTransition(3599990L);
        boolean boolean19 = dateTimeZone10.isFixed();
        int int21 = dateTimeZone10.getOffsetFromLocal((long) '4');
        java.lang.String str23 = dateTimeZone10.getShortName((-225119989L));
        long long27 = dateTimeZone10.convertLocalToUTC((-363600001L), false, (-115199958L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3599990L + "'", long18 == 3599990L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-363600001L) + "'", long27 == (-363600001L));
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(3120000, 36060000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 36060000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long3 = dateTimeZone1.nextTransition(32L);
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone1.getName((-1L), locale5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone8.isLocalDateTimeGap(localDateTime9);
        java.lang.String str12 = dateTimeZone8.getName((long) 0);
        long long14 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, (-115200090L));
        boolean boolean16 = dateTimeZone8.isStandardOffset((-3600010L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32L + "'", long3 == 32L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.100" + "'", str12, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-115200190L) + "'", long14 == (-115200190L));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getShortName((-1L));
        java.lang.String str4 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        int int3 = dateTimeZone1.getOffsetFromLocal(0L);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone1.getShortName((long) 360600000, locale6);
        long long9 = dateTimeZone1.previousTransition((-35999967L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.001" + "'", str7, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-35999967L) + "'", long9 == (-35999967L));
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        long long7 = dateTimeZone0.adjustOffset((long) 'a', true);
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone0.getOffset(readableInstant8);
        long long13 = dateTimeZone0.convertLocalToUTC((-1L), true, (long) (short) 10);
        java.lang.String str14 = dateTimeZone0.getID();
        int int16 = dateTimeZone0.getOffset((-25199975L));
        long long18 = dateTimeZone0.previousTransition(33L);
        java.lang.String str20 = dateTimeZone0.getShortName((long) 126060000);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 33L + "'", long18 == 33L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '#', (int) (short) 10);
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((-115200090L), locale4);
        boolean boolean6 = dateTimeZone2.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+35:10" + "'", str5, "+35:10");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 36600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 36600000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone1.getOffset(readableInstant2);
        java.lang.String str5 = dateTimeZone1.getShortName((-1L));
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getShortName((long) '4', locale7);
        int int10 = dateTimeZone1.getOffset((-36000032L));
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone1.getOffset(readableInstant11);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 0, true);
        boolean boolean13 = dateTimeZone0.isFixed();
        long long15 = dateTimeZone0.previousTransition((long) (byte) 100);
        long long19 = dateTimeZone0.convertLocalToUTC(132L, false, (-115199990L));
        java.lang.String str20 = dateTimeZone0.getID();
        int int22 = dateTimeZone0.getOffsetFromLocal((-39120000L));
        java.lang.String str24 = dateTimeZone0.getShortName((long) 1);
        long long26 = dateTimeZone0.previousTransition(360059999L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long29 = dateTimeZone0.nextTransition((long) 52);
        int int31 = dateTimeZone0.getOffsetFromLocal((-709800001L));
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone0.getName((-280799976L), locale33);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 132L + "'", long19 == 132L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 360059999L + "'", long26 == 360059999L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 52L + "'", long29 == 52L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.ReadableInstant readableInstant2 = null;
        int int3 = dateTimeZone1.getOffset(readableInstant2);
        java.lang.String str5 = dateTimeZone1.getNameKey(52L);
        int int7 = dateTimeZone1.getStandardOffset(1L);
        int int9 = dateTimeZone1.getOffsetFromLocal((long) (-1));
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone1.getShortName(3600099L, locale11);
        long long14 = dateTimeZone1.nextTransition(36000000L);
        int int16 = dateTimeZone1.getOffsetFromLocal(0L);
        java.lang.String str18 = dateTimeZone1.getNameKey(36000042L);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone1.isLocalDateTimeGap(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 36000000L + "'", long14 == 36000000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str9 = dateTimeZone0.getNameKey((long) (byte) 1);
        boolean boolean10 = dateTimeZone0.isFixed();
        long long12 = dateTimeZone0.previousTransition((long) 0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long15 = dateTimeZone0.previousTransition((-35999903L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forID("+00:00");
        java.lang.String str19 = dateTimeZone17.getName((long) (short) 0);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone17.getShortName(0L, locale21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 10);
        long long27 = dateTimeZone23.previousTransition(0L);
        java.util.TimeZone timeZone28 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 10);
        boolean boolean32 = dateTimeZone17.equals((java.lang.Object) dateTimeZone29);
        long long34 = dateTimeZone0.getMillisKeepLocal(dateTimeZone29, 1L);
        boolean boolean36 = dateTimeZone0.isStandardOffset((long) 3120000);
        long long40 = dateTimeZone0.convertLocalToUTC(60000L, false, (-111599989L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-35999903L) + "'", long15 == (-35999903L));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 60000L + "'", long40 == 60000L);
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        long long8 = dateTimeZone0.nextTransition(1L);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) 'a');
        java.util.TimeZone timeZone11 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        java.lang.String str17 = dateTimeZone13.getNameKey(100L);
        boolean boolean18 = dateTimeZone13.isFixed();
        int int20 = dateTimeZone13.getOffset((-25199975L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        boolean boolean8 = dateTimeZone0.isStandardOffset((-395999975L));
        java.lang.String str10 = dateTimeZone0.getName(20L);
        long long12 = dateTimeZone0.previousTransition(35999989L);
        java.lang.String str14 = dateTimeZone0.getNameKey((long) 1);
        long long18 = dateTimeZone0.convertLocalToUTC((-5520011L), true, 324059990L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35999989L + "'", long12 == 35999989L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-5520011L) + "'", long18 == (-5520011L));
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 1);
        java.lang.String str3 = dateTimeZone2.getID();
        boolean boolean4 = dateTimeZone2.isFixed();
        java.lang.String str6 = dateTimeZone2.getShortName(52L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology7 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.001" + "'", str3, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.001" + "'", str6, "+00:00:00.001");
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        boolean boolean6 = dateTimeZone0.isFixed();
        int int8 = dateTimeZone0.getOffsetFromLocal((long) 0);
        long long10 = dateTimeZone0.convertUTCToLocal((long) (byte) -1);
        long long14 = dateTimeZone0.convertLocalToUTC((long) 'a', true, 1L);
        java.lang.String str16 = dateTimeZone0.getName(122L);
        java.util.TimeZone timeZone17 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime18 = null;
        boolean boolean19 = dateTimeZone0.isLocalDateTimeGap(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 97L + "'", long14 == 97L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long6 = dateTimeZone0.nextTransition((long) '4');
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone0.getShortName(100L, locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone0.getOffset(readableInstant10);
        boolean boolean13 = dateTimeZone0.isStandardOffset(10L);
        long long15 = dateTimeZone0.convertUTCToLocal(1L);
        int int17 = dateTimeZone0.getOffsetFromLocal(0L);
        long long19 = dateTimeZone0.previousTransition(132L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        long long23 = dateTimeZone0.adjustOffset(723600000L, false);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone24.isStandardOffset((long) 10);
        int int28 = dateTimeZone24.getOffset((long) (short) 10);
        boolean boolean30 = dateTimeZone24.equals((java.lang.Object) 0);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone24.getShortName((long) (short) 0, locale32);
        java.lang.String str35 = dateTimeZone24.getName((long) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) 10);
        java.lang.String str40 = dateTimeZone36.getName((long) (short) 1);
        long long42 = dateTimeZone36.convertUTCToLocal((long) ' ');
        long long44 = dateTimeZone36.convertUTCToLocal((long) (short) 100);
        int int46 = dateTimeZone36.getOffset((long) (short) 10);
        boolean boolean47 = dateTimeZone24.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forID("UTC");
        long long51 = dateTimeZone36.getMillisKeepLocal(dateTimeZone49, 107L);
        long long55 = dateTimeZone49.convertLocalToUTC(107L, true, 360000000L);
        org.joda.time.ReadableInstant readableInstant56 = null;
        int int57 = dateTimeZone49.getOffset(readableInstant56);
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone49.getShortName(36599999L, locale59);
        int int62 = dateTimeZone49.getOffset((-32339975L));
        int int64 = dateTimeZone49.getOffsetFromLocal((-280799975L));
        boolean boolean65 = dateTimeZone0.equals((java.lang.Object) (-280799975L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 132L + "'", long19 == 132L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 723600000L + "'", long23 == 723600000L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 32L + "'", long42 == 32L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L + "'", long44 == 100L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 107L + "'", long51 == 107L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 107L + "'", long55 == 107L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj3 = null;
        boolean boolean4 = dateTimeZone2.equals(obj3);
        java.lang.String str6 = dateTimeZone2.getName(100L);
        java.lang.String str7 = dateTimeZone2.getID();
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.String str10 = dateTimeZone9.getID();
        boolean boolean11 = dateTimeZone1.equals((java.lang.Object) str10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone1.isLocalDateTimeGap(localDateTime12);
        boolean boolean15 = dateTimeZone1.isStandardOffset((-3599968L));
        java.util.TimeZone timeZone16 = dateTimeZone1.toTimeZone();
        java.lang.Class<?> wildcardClass17 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getStandardOffset((-1L));
        int int6 = dateTimeZone1.getOffset((long) (short) 1);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        int int3 = dateTimeZone0.getStandardOffset((-1L));
        int int5 = dateTimeZone0.getOffset((long) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        int int7 = dateTimeZone0.getOffset(readableInstant6);
        java.lang.String str9 = dateTimeZone0.getNameKey(0L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long13 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, (-35999965L));
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        long long16 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) ' ');
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone18.getName(0L, locale20);
        java.lang.String str23 = dateTimeZone18.getShortName((long) (-1));
        boolean boolean25 = dateTimeZone18.isStandardOffset(0L);
        long long27 = dateTimeZone18.convertUTCToLocal(10L);
        int int29 = dateTimeZone18.getOffset(35L);
        long long31 = dateTimeZone11.getMillisKeepLocal(dateTimeZone18, 97L);
        long long35 = dateTimeZone11.convertLocalToUTC(547799990L, false, (-226800000L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-35999975L) + "'", long13 == (-35999975L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 42L + "'", long16 == 42L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 20L + "'", long27 == 20L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 97L + "'", long31 == 97L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 547799980L + "'", long35 == 547799980L);
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int4 = dateTimeZone1.getStandardOffset((-1L));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        boolean boolean7 = dateTimeZone5.isStandardOffset((long) 10);
        java.lang.String str9 = dateTimeZone5.getName((long) 'a');
        long long12 = dateTimeZone5.convertLocalToUTC((long) (short) 100, false);
        long long14 = dateTimeZone1.getMillisKeepLocal(dateTimeZone5, 10L);
        int int16 = dateTimeZone5.getOffsetFromLocal(35999999L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance(chronology0, dateTimeZone5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must supply a chronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 45L + "'", long14 == 45L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        int int4 = dateTimeZone0.getOffset((long) (short) 10);
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone0.getName((long) 0, locale6);
        java.lang.String str8 = dateTimeZone0.toString();
        java.lang.String str9 = dateTimeZone0.getID();
        long long12 = dateTimeZone0.adjustOffset((long) (byte) 0, true);
        int int14 = dateTimeZone0.getOffset((long) (byte) 100);
        boolean boolean16 = dateTimeZone0.isStandardOffset((long) 36000000);
        java.lang.Class<?> wildcardClass17 = dateTimeZone0.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 1);
        long long6 = dateTimeZone0.convertUTCToLocal((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 10);
        int int11 = dateTimeZone7.getOffset((long) (short) 10);
        long long14 = dateTimeZone7.adjustOffset((long) 'a', true);
        boolean boolean15 = dateTimeZone7.isFixed();
        long long17 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, (long) (-1));
        java.lang.String str19 = dateTimeZone0.getName(81120025L);
        int int21 = dateTimeZone0.getOffsetFromLocal((long) (short) -1);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 97L + "'", long14 == 97L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 'a');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.ReadableInstant readableInstant4 = null;
        int int5 = dateTimeZone0.getOffset(readableInstant4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone0.isLocalDateTimeGap(localDateTime7);
        long long12 = dateTimeZone0.convertLocalToUTC((-36L), false, 126600001L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-36L) + "'", long12 == (-36L));
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 10);
        java.lang.String str4 = dateTimeZone0.getName((long) 'a');
        long long7 = dateTimeZone0.convertLocalToUTC((long) (short) 100, false);
        boolean boolean9 = dateTimeZone0.equals((java.lang.Object) 100);
        java.lang.String str10 = dateTimeZone0.getID();
        boolean boolean11 = dateTimeZone0.isFixed();
        java.lang.String str12 = dateTimeZone0.getID();
        long long15 = dateTimeZone0.adjustOffset(115200000L, false);
        long long19 = dateTimeZone0.convertLocalToUTC(79200025L, false, (-32399965L));
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone0.getShortName(324000000L, locale21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forID("Etc/UTC");
        long long26 = dateTimeZone24.previousTransition((long) '#');
        long long29 = dateTimeZone24.adjustOffset((long) 117120000, true);
        long long31 = dateTimeZone0.getMillisKeepLocal(dateTimeZone24, (-115200190L));
        java.lang.String str33 = dateTimeZone24.getName((-215999965L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 115200000L + "'", long15 == 115200000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 79200025L + "'", long19 == 79200025L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 35L + "'", long26 == 35L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 117120000L + "'", long29 == 117120000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-115200190L) + "'", long31 == (-115200190L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 10);
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName(10L, locale3);
        long long6 = dateTimeZone1.previousTransition((long) (byte) 0);
        java.lang.String str7 = dateTimeZone1.getID();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone1.getShortName(187200032L, locale9);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.Object obj1 = null;
        boolean boolean2 = dateTimeZone0.equals(obj1);
        java.lang.String str4 = dateTimeZone0.getName(100L);
        java.lang.String str5 = dateTimeZone0.getID();
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        long long9 = dateTimeZone0.adjustOffset((long) (short) 100, false);
        java.util.TimeZone timeZone10 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        boolean boolean13 = dateTimeZone11.isStandardOffset(132L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        int int16 = dateTimeZone11.getOffset((long) 0);
        int int18 = dateTimeZone11.getOffset(360060000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        java.lang.Object obj20 = null;
        boolean boolean21 = dateTimeZone11.equals(obj20);
        int int23 = dateTimeZone11.getOffset(360060100L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone1.adjustOffset((long) 0, false);
        int int6 = dateTimeZone1.getStandardOffset((long) (byte) 10);
        long long9 = dateTimeZone1.adjustOffset(360000000L, true);
        long long11 = dateTimeZone1.nextTransition((long) 36600000);
        long long13 = dateTimeZone1.previousTransition((-35999900L));
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone1.getName(22L, locale15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3600000) + "'", int6 == (-3600000));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 360000000L + "'", long9 == 360000000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 36600000L + "'", long11 == 36600000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-35999900L) + "'", long13 == (-35999900L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-01:00" + "'", str16, "-01:00");
    }
}

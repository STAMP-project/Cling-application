import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigInteger bigInteger23 = bigDecimal17.toBigInteger();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(bigInteger23);
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        float float28 = bigDecimal26.floatValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.multiply(bigDecimal26);
        java.math.BigDecimal bigDecimal30 = bigDecimal24.negate();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = bigDecimal32.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal38 = bigDecimal24.divide(bigDecimal35, (int) (short) 10, 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl14.scalarAdd(bigDecimal35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal38", (bigDecimal17.compareTo(bigDecimal38) == 0) == bigDecimal17.equals(bigDecimal38));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(0.0d);
        int int3 = bigDecimal2.intValue();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal2.min(bigDecimal5);
        java.math.BigDecimal[] bigDecimalArray8 = new java.math.BigDecimal[] { bigDecimal7 };
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal10.min(bigDecimal13);
        java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal15 };
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal[][] bigDecimalArray25 = new java.math.BigDecimal[][] { bigDecimalArray8, bigDecimalArray16, bigDecimalArray24 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray25);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigInteger bigInteger35 = bigDecimal29.toBigInteger();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        float float40 = bigDecimal38.floatValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.multiply(bigDecimal38);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrix27.scalarAdd(bigDecimal41);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrix27.transpose();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl0.solve(bigMatrix43);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        java.math.BigDecimal bigDecimal16 = bigDecimal13.setScale((int) (short) -1, 0);
        java.math.BigDecimal bigDecimal18 = bigDecimal13.setScale((int) (byte) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal16", (bigDecimal1.compareTo(bigDecimal16) == 0) == bigDecimal1.equals(bigDecimal16));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getData();
        boolean boolean39 = bigMatrixImpl37.isSquare();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int42 = bigDecimal41.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl37.scalarMultiply(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal1.divide(bigDecimal41, (int) (short) 100, 6);
        java.math.BigDecimal bigDecimal47 = bigDecimal1.plus();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal46", (bigDecimal4.compareTo(bigDecimal46) == 0) == bigDecimal4.equals(bigDecimal46));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal11.setScale((int) (byte) 10);
        java.math.BigDecimal bigDecimal14 = bigDecimal11.ulp();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal13", (bigDecimal1.compareTo(bigDecimal13) == 0) == bigDecimal1.equals(bigDecimal13));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrix31.copy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal4.setScale((int) (short) 100, (int) (byte) 1);
        boolean boolean8 = bigDecimal2.equals((java.lang.Object) (short) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal7", (bigDecimal4.compareTo(bigDecimal7) == 0) == bigDecimal4.equals(bigDecimal7));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.movePointRight((int) (short) -1);
        int int6 = bigDecimal5.intValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(0.0d);
        int int3 = bigDecimal2.intValue();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal2.min(bigDecimal5);
        java.math.BigDecimal[] bigDecimalArray8 = new java.math.BigDecimal[] { bigDecimal7 };
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal10.min(bigDecimal13);
        java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal15 };
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal[][] bigDecimalArray25 = new java.math.BigDecimal[][] { bigDecimalArray8, bigDecimalArray16, bigDecimalArray24 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray25);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigInteger bigInteger35 = bigDecimal29.toBigInteger();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        float float40 = bigDecimal38.floatValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.multiply(bigDecimal38);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrix27.scalarAdd(bigDecimal41);
        short short43 = bigDecimal41.shortValueExact();
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int46 = bigDecimal45.signum();
        java.math.BigDecimal[] bigDecimalArray47 = bigDecimal41.divideAndRemainder(bigDecimal45);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal[] bigDecimalArray48 = bigMatrixImpl0.preMultiply(bigDecimalArray47);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal3 = bigMatrixImpl0.getEntry((int) 'a', 0);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (byte) 1);
        java.math.BigDecimal bigDecimal34 = bigDecimal30.divideToIntegralValue(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = bigDecimal33.movePointLeft(6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        java.math.BigDecimal bigDecimal41 = bigDecimal35.negate();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = bigDecimal43.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal49 = bigDecimal35.divide(bigDecimal46, (int) (short) 10, 0);
        java.math.BigDecimal bigDecimal50 = bigDecimal25.min(bigDecimal35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal49", (bigDecimal18.compareTo(bigDecimal49) == 0) == bigDecimal18.equals(bigDecimal49));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal37 = bigDecimal23.divideToIntegralValue(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        java.lang.String str40 = bigDecimal39.toString();
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal43 = bigDecimal42.stripTrailingZeros();
        int int44 = bigDecimal42.signum();
        java.math.BigDecimal[] bigDecimalArray45 = bigDecimal39.divideAndRemainder(bigDecimal42);
        java.math.BigDecimal bigDecimal47 = bigDecimal39.pow((int) 'a');
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        float float51 = bigDecimal49.floatValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.divideToIntegralValue(bigDecimal49);
        java.math.BigDecimal bigDecimal54 = bigDecimal52.movePointRight((int) (byte) 10);
        java.math.BigDecimal bigDecimal56 = bigDecimal52.movePointLeft((int) '4');
        java.math.BigDecimal bigDecimal57 = bigDecimal37.add(bigDecimal52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal56", (bigDecimal1.compareTo(bigDecimal56) == 0) == bigDecimal1.equals(bigDecimal56));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = bigDecimal1.movePointRight((int) '#');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl37.scalarAdd(bigDecimal40);
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) (byte) 1);
        java.math.BigDecimal bigDecimal44 = bigDecimal40.divideToIntegralValue(bigDecimal43);
        java.math.BigDecimal bigDecimal45 = bigDecimal9.subtract(bigDecimal40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal44", (bigDecimal1.compareTo(bigDecimal44) == 0) == bigDecimal1.equals(bigDecimal44));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray5 = bigDecimal2.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray5);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray5);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray5);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal[] bigDecimalArray9 = bigMatrixImpl0.preMultiply(bigDecimalArray5);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        java.math.BigDecimal bigDecimal16 = bigDecimal13.setScale((int) (short) -1, 0);
        java.math.BigDecimal bigDecimal18 = bigDecimal16.scaleByPowerOfTen((int) (short) 97);
        byte byte19 = bigDecimal18.byteValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal16", (bigDecimal1.compareTo(bigDecimal16) == 0) == bigDecimal1.equals(bigDecimal16));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl27.getData();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        int int39 = bigMatrixImpl37.getColumnDimension();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal45 = bigDecimal44.stripTrailingZeros();
        int int46 = bigDecimal44.signum();
        java.math.BigDecimal[] bigDecimalArray47 = bigDecimal41.divideAndRemainder(bigDecimal44);
        java.math.BigDecimal bigDecimal49 = bigDecimal41.pow((int) 'a');
        java.lang.String str50 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal52 = bigDecimal41.scaleByPowerOfTen((int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl37.scalarAdd(bigDecimal41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal52", (bigDecimal1.compareTo(bigDecimal52) == 0) == bigDecimal1.equals(bigDecimal52));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(0.0d);
        java.lang.String str3 = bigDecimal2.toString();
        java.math.BigDecimal bigDecimal5 = bigDecimal2.setScale(0);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrix12.scalarAdd((double) 6);
        int int15 = realMatrix12.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix12.scalarAdd(10.0d);
        double[] doubleArray22 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        double double24 = realMatrix23.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix23.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix17.preMultiply(realMatrix26);
        boolean boolean28 = bigDecimal5.equals((java.lang.Object) realMatrix17);
        int int29 = bigDecimal5.signum();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl0.scalarAdd(bigDecimal5);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        bigMatrixImpl0.luDecompose();
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(bigInteger32, 3);
        java.lang.String[] strArray36 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray37 = new java.lang.String[][] { strArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(strArray37);
        int int39 = bigMatrixImpl38.getColumnDimension();
        boolean boolean40 = bigDecimal34.equals((java.lang.Object) int39);
        boolean boolean41 = bigMatrixImpl14.equals((java.lang.Object) int39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal34", (bigDecimal23.compareTo(bigDecimal34) == 0) == bigDecimal23.equals(bigDecimal34));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal8.negate();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal16.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal22 = bigDecimal8.divide(bigDecimal19, (int) (short) 10, 0);
        long long23 = bigDecimal8.longValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal22", (bigDecimal1.compareTo(bigDecimal22) == 0) == bigDecimal1.equals(bigDecimal22));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.copy();
        java.math.BigDecimal bigDecimal16 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal17 = bigDecimal16.abs();
        java.math.BigDecimal bigDecimal18 = bigDecimal16.stripTrailingZeros();
        int int19 = bigDecimal16.intValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal16 and bigDecimal18", (bigDecimal16.compareTo(bigDecimal18) == 0) == bigDecimal16.equals(bigDecimal18));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal27 = bigDecimal23.setScale(100);
        boolean boolean28 = bigMatrixImpl14.equals((java.lang.Object) bigDecimal23);
        java.lang.String str29 = bigMatrixImpl14.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal27", (bigDecimal23.compareTo(bigDecimal27) == 0) == bigDecimal23.equals(bigDecimal27));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getData();
        boolean boolean39 = bigMatrixImpl37.isSquare();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int42 = bigDecimal41.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl37.scalarMultiply(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal1.divide(bigDecimal41, (int) (short) 100, 6);
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger49 = bigDecimal48.unscaledValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal48.stripTrailingZeros();
        int int51 = bigDecimal48.precision();
        java.lang.String str52 = bigDecimal48.toString();
        int int53 = bigDecimal41.compareTo(bigDecimal48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal46", (bigDecimal1.compareTo(bigDecimal46) == 0) == bigDecimal1.equals(bigDecimal46));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = bigDecimal1.movePointRight((int) '#');
        java.math.BigDecimal bigDecimal11 = bigDecimal1.movePointLeft((int) (short) 97);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal((double) 5);
        java.math.BigDecimal bigDecimal14 = bigDecimal11.multiply(bigDecimal13);
        long long15 = bigDecimal14.longValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal11", (bigDecimal1.compareTo(bigDecimal11) == 0) == bigDecimal1.equals(bigDecimal11));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = bigDecimal1.movePointRight((int) '#');
        java.math.BigDecimal bigDecimal11 = bigDecimal1.movePointLeft((int) (short) 97);
        long long12 = bigDecimal1.longValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal11", (bigDecimal4.compareTo(bigDecimal11) == 0) == bigDecimal4.equals(bigDecimal11));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl31.scalarAdd(bigDecimal34);
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        long long39 = bigDecimal37.longValue();
        long long40 = bigDecimal37.longValueExact();
        int int41 = bigDecimal37.precision();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal37.add(bigDecimal43);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        java.lang.String str50 = bigDecimal49.toString();
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal53 = bigDecimal52.stripTrailingZeros();
        int int54 = bigDecimal52.signum();
        java.math.BigDecimal[] bigDecimalArray55 = bigDecimal49.divideAndRemainder(bigDecimal52);
        java.math.BigDecimal bigDecimal57 = bigDecimal49.pow((int) 'a');
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigInteger bigInteger68 = bigDecimal59.toBigIntegerExact();
        java.math.BigDecimal bigDecimal69 = bigDecimal57.add(bigDecimal59);
        java.math.BigDecimal bigDecimal70 = bigDecimal43.multiply(bigDecimal57);
        java.math.BigDecimal bigDecimal71 = bigDecimal43.ulp();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal((int) (byte) 10);
        java.math.BigDecimal bigDecimal74 = bigDecimal43.add(bigDecimal73);
        java.math.BigDecimal bigDecimal75 = bigDecimal34.add(bigDecimal73);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl3.scalarAdd(bigDecimal75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal5 and bigDecimal34", (bigDecimal5.compareTo(bigDecimal34) == 0) == bigDecimal5.equals(bigDecimal34));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.plus();
        java.math.BigDecimal bigDecimal29 = bigDecimal25.movePointLeft((int) 'a');
        int int30 = bigDecimal25.precision();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal29", (bigDecimal18.compareTo(bigDecimal29) == 0) == bigDecimal18.equals(bigDecimal29));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.copy();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal4 = bigMatrixImpl2.getNorm();
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.movePointRight((int) (short) -1);
        java.math.BigDecimal bigDecimal6 = bigDecimal5.negate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigInteger bigInteger22 = bigDecimal21.unscaledValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(bigInteger22, 100);
        java.math.BigInteger bigInteger25 = bigDecimal24.toBigInteger();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(bigInteger25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal24", (bigDecimal1.compareTo(bigDecimal24) == 0) == bigDecimal1.equals(bigDecimal24));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        int int4 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal8 = bigDecimal1.setScale(10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal6", (bigDecimal3.compareTo(bigDecimal6) == 0) == bigDecimal3.equals(bigDecimal6));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigInteger bigInteger10 = bigDecimal1.toBigIntegerExact();
        int int11 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal21 = bigMatrixImpl20.getNorm();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal34 = bigDecimal33.stripTrailingZeros();
        float float35 = bigDecimal33.floatValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.divideToIntegralValue(bigDecimal33);
        boolean boolean37 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray38 = bigDecimal1.divideAndRemainder(bigDecimal33);
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger41 = bigDecimal40.unscaledValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal65 = bigDecimal60.min(bigDecimal63);
        java.math.BigDecimal[] bigDecimalArray66 = new java.math.BigDecimal[] { bigDecimal65 };
        java.math.BigDecimal[][] bigDecimalArray67 = new java.math.BigDecimal[][] { bigDecimalArray50, bigDecimalArray58, bigDecimalArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray67);
        boolean boolean70 = bigDecimal42.equals((java.lang.Object) bigMatrixImpl69);
        boolean boolean71 = bigDecimal33.equals((java.lang.Object) boolean70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal40 and bigDecimal42", (bigDecimal40.compareTo(bigDecimal42) == 0) == bigDecimal40.equals(bigDecimal42));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(bigInteger62, (int) (byte) 110);
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(bigInteger62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal65", (bigDecimal1.compareTo(bigDecimal65) == 0) == bigDecimal1.equals(bigDecimal65));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigInteger bigInteger10 = bigDecimal1.toBigIntegerExact();
        int int11 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal21 = bigMatrixImpl20.getNorm();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal34 = bigDecimal33.stripTrailingZeros();
        float float35 = bigDecimal33.floatValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.divideToIntegralValue(bigDecimal33);
        boolean boolean37 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray38 = bigDecimal1.divideAndRemainder(bigDecimal33);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(bigInteger61, 100);
        java.math.BigDecimal bigDecimal64 = bigDecimal63.ulp();
        java.math.BigDecimal bigDecimal65 = bigDecimal1.subtract(bigDecimal64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal9 and bigDecimal63", (bigDecimal9.compareTo(bigDecimal63) == 0) == bigDecimal9.equals(bigDecimal63));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getRoundingMode();
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray34 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigInteger bigInteger46 = bigDecimal40.toBigInteger();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(bigInteger46);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrix38.scalarAdd(bigDecimal47);
        java.math.BigDecimal bigDecimal50 = bigDecimal47.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger51 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal54);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl14.scalarAdd(bigDecimal54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal40 and bigDecimal50", (bigDecimal40.compareTo(bigDecimal50) == 0) == bigDecimal40.equals(bigDecimal50));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.stripTrailingZeros();
        java.math.BigDecimal bigDecimal29 = bigDecimal27.movePointLeft(97);
        short short30 = bigDecimal27.shortValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal29", (bigDecimal18.compareTo(bigDecimal29) == 0) == bigDecimal18.equals(bigDecimal29));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        bigMatrixImpl2.setScale(10);
        java.math.BigDecimal[] bigDecimalArray6 = bigMatrixImpl2.getColumn(1);
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger9 = bigDecimal8.unscaledValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal8.stripTrailingZeros();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix11 = bigMatrixImpl2.scalarMultiply(bigDecimal10);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        boolean boolean37 = bigDecimal20.equals((java.lang.Object) doubleArray33);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigInteger bigInteger45 = bigDecimal39.toBigInteger();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(bigInteger45);
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        float float50 = bigDecimal48.floatValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.multiply(bigDecimal48);
        java.math.BigDecimal bigDecimal52 = bigDecimal46.negate();
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal57 = bigDecimal54.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal60 = bigDecimal46.divide(bigDecimal57, (int) (short) 10, 0);
        boolean boolean61 = bigDecimal20.equals((java.lang.Object) bigDecimal46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal39 and bigDecimal60", (bigDecimal39.compareTo(bigDecimal60) == 0) == bigDecimal39.equals(bigDecimal60));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.getRowMatrix(0);
        boolean boolean5 = bigMatrix4.isSquare();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal22 = bigDecimal9.abs();
        java.math.BigDecimal bigDecimal25 = bigDecimal9.setScale((int) (short) 1, 0);
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray38 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37 };
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl40.transpose();
        double[] doubleArray43 = bigMatrixImpl40.getRowAsDoubleArray((int) (short) 0);
        boolean boolean44 = bigMatrixImpl40.isSingular();
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl40.getData();
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl40.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl40.transpose();
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl40.getNorm();
        java.math.BigInteger bigInteger49 = bigDecimal48.unscaledValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal9.divideToIntegralValue(bigDecimal48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal25", (bigDecimal1.compareTo(bigDecimal25) == 0) == bigDecimal1.equals(bigDecimal25));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.transpose();
        int int36 = bigMatrixImpl27.getColumnDimension();
        boolean boolean37 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigInteger bigInteger45 = bigDecimal39.toBigInteger();
        java.math.BigDecimal bigDecimal47 = bigDecimal39.movePointRight((int) '#');
        java.math.BigDecimal bigDecimal49 = bigDecimal39.movePointLeft((int) (short) 97);
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal((double) 5);
        java.math.BigDecimal bigDecimal52 = bigDecimal49.multiply(bigDecimal51);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl27.scalarAdd(bigDecimal52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal49", (bigDecimal1.compareTo(bigDecimal49) == 0) == bigDecimal1.equals(bigDecimal49));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        java.math.BigDecimal bigDecimal16 = bigMatrixImpl14.getNorm();
        int int17 = bigDecimal16.signum();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 4);
        int int20 = bigDecimal19.signum();
        java.math.BigDecimal bigDecimal21 = bigDecimal16.subtract(bigDecimal19);
        java.math.BigDecimal bigDecimal22 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger26 = bigDecimal25.unscaledValue();
        java.math.BigDecimal bigDecimal27 = bigDecimal23.add(bigDecimal25);
        java.math.BigInteger bigInteger28 = bigDecimal25.toBigInteger();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(bigInteger28, 32);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger33 = bigDecimal32.unscaledValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal32.stripTrailingZeros();
        boolean boolean35 = bigDecimal30.equals((java.lang.Object) bigDecimal34);
        java.math.BigDecimal bigDecimal36 = bigDecimal22.min(bigDecimal30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal25 and bigDecimal34", (bigDecimal25.compareTo(bigDecimal34) == 0) == bigDecimal25.equals(bigDecimal34));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.getRowMatrix(0);
        boolean boolean5 = bigMatrixImpl2.isSquare();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrix4 and bigMatrix4", bigMatrix4.equals(bigMatrix4) ? bigMatrix4.hashCode() == bigMatrix4.hashCode() : true);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        short short14 = bigDecimal13.shortValueExact();
        int int15 = bigDecimal13.intValueExact();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf(100L);
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((double) 0L);
        java.math.BigDecimal bigDecimal20 = bigDecimal17.max(bigDecimal19);
        int int21 = bigDecimal13.compareTo(bigDecimal17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal19", (bigDecimal1.compareTo(bigDecimal19) == 0) == bigDecimal1.equals(bigDecimal19));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl8.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray11);
        int int13 = bigMatrixImpl12.getScale();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal21 = bigDecimal18.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal22 = bigDecimal15.divide(bigDecimal18);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl12.scalarAdd(bigDecimal18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal21", (bigDecimal4.compareTo(bigDecimal21) == 0) == bigDecimal4.equals(bigDecimal21));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.copy();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrix3 and bigMatrix3", bigMatrix3.equals(bigMatrix3) ? bigMatrix3.hashCode() == bigMatrix3.hashCode() : true);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigInteger bigInteger10 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(bigInteger10, 3);
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(bigInteger10, (int) (short) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal12", (bigDecimal1.compareTo(bigDecimal12) == 0) == bigDecimal1.equals(bigDecimal12));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal56 = bigDecimal17.stripTrailingZeros();
        java.math.BigDecimal bigDecimal57 = bigDecimal56.negate();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        java.lang.String str70 = bigDecimal69.toString();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        int int74 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal69.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal77 = bigDecimal69.pow((int) 'a');
        java.math.BigInteger bigInteger78 = bigDecimal69.toBigIntegerExact();
        java.math.BigDecimal bigDecimal79 = bigDecimal67.add(bigDecimal69);
        java.math.BigInteger bigInteger80 = bigDecimal79.unscaledValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(bigInteger80, 100);
        java.math.BigDecimal bigDecimal83 = bigDecimal82.ulp();
        java.math.BigDecimal bigDecimal84 = bigDecimal57.min(bigDecimal82);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal87 = bigMatrix86.getDeterminant();
        int int88 = bigDecimal87.precision();
        java.math.BigDecimal bigDecimal89 = bigDecimal57.subtract(bigDecimal87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal82", (bigDecimal17.compareTo(bigDecimal82) == 0) == bigDecimal17.equals(bigDecimal82));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        long long8 = bigDecimal6.longValue();
        long long9 = bigDecimal6.longValueExact();
        short short10 = bigDecimal6.shortValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal6);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        long long15 = bigDecimal13.longValue();
        long long16 = bigDecimal13.longValueExact();
        int int17 = bigDecimal13.precision();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        long long21 = bigDecimal19.longValue();
        long long22 = bigDecimal19.longValueExact();
        java.math.BigDecimal bigDecimal23 = bigDecimal13.add(bigDecimal19);
        java.math.BigDecimal bigDecimal25 = bigDecimal23.setScale((int) (byte) 10);
        boolean boolean26 = bigDecimal11.equals((java.lang.Object) bigDecimal23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal25", (bigDecimal1.compareTo(bigDecimal25) == 0) == bigDecimal1.equals(bigDecimal25));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        long long35 = bigDecimal33.longValue();
        long long36 = bigDecimal33.longValueExact();
        int int37 = bigDecimal33.precision();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal33.add(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal66 = bigDecimal39.multiply(bigDecimal53);
        java.math.BigDecimal bigDecimal67 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((int) (byte) 10);
        java.math.BigDecimal bigDecimal70 = bigDecimal39.add(bigDecimal69);
        java.math.BigDecimal bigDecimal71 = bigDecimal30.add(bigDecimal69);
        java.math.BigDecimal bigDecimal72 = bigDecimal30.abs();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal69 and bigDecimal71", (bigDecimal69.compareTo(bigDecimal71) == 0) == bigDecimal69.equals(bigDecimal71));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        short short42 = bigDecimal40.shortValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.abs();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.movePointLeft((int) '4');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.plus();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        java.lang.String str49 = bigDecimal48.toString();
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal52 = bigDecimal51.stripTrailingZeros();
        int int53 = bigDecimal51.signum();
        java.math.BigDecimal[] bigDecimalArray54 = bigDecimal48.divideAndRemainder(bigDecimal51);
        java.math.BigDecimal bigDecimal56 = bigDecimal48.pow((int) 'a');
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        java.lang.String str59 = bigDecimal58.toString();
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        int int63 = bigDecimal61.signum();
        java.math.BigDecimal[] bigDecimalArray64 = bigDecimal58.divideAndRemainder(bigDecimal61);
        java.math.BigDecimal bigDecimal66 = bigDecimal58.pow((int) 'a');
        java.math.BigInteger bigInteger67 = bigDecimal58.toBigIntegerExact();
        java.math.BigDecimal bigDecimal68 = bigDecimal56.add(bigDecimal58);
        java.math.BigDecimal bigDecimal70 = bigDecimal68.pow((int) (byte) 97);
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger73 = bigDecimal72.unscaledValue();
        short short74 = bigDecimal72.shortValueExact();
        java.math.BigDecimal bigDecimal75 = bigDecimal70.divide(bigDecimal72);
        byte byte76 = bigDecimal72.byteValueExact();
        java.math.BigDecimal bigDecimal77 = bigDecimal72.plus();
        int int78 = bigDecimal72.intValueExact();
        int int79 = bigDecimal46.compareTo(bigDecimal72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal46", (bigDecimal1.compareTo(bigDecimal46) == 0) == bigDecimal1.equals(bigDecimal46));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointRight((-32));
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal7.min(bigDecimal10);
        java.math.BigInteger bigInteger13 = bigDecimal7.toBigInteger();
        java.math.BigInteger bigInteger14 = bigDecimal7.unscaledValue();
        int int15 = bigDecimal7.signum();
        java.math.BigDecimal bigDecimal16 = bigDecimal3.add(bigDecimal7);
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf(1L, (int) (byte) 97);
        java.math.BigDecimal bigDecimal20 = bigDecimal3.divideToIntegralValue(bigDecimal19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal16", (bigDecimal1.compareTo(bigDecimal16) == 0) == bigDecimal1.equals(bigDecimal16));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        boolean boolean31 = bigDecimal3.equals((java.lang.Object) bigMatrixImpl30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl30.transpose();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        bigMatrixImpl2.setScale((int) 'a');
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl2.getEntry(0, (int) (byte) 6);
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal9.setScale((int) (short) 100, (int) (byte) 1);
        long long13 = bigDecimal9.longValueExact();
        java.math.BigDecimal bigDecimal16 = bigDecimal9.setScale((int) (short) 0, 0);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl2.scalarMultiply(bigDecimal9);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[] doubleArray2 = bigMatrixImpl0.getColumnAsDoubleArray(0);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl27.copy();
        java.math.MathContext mathContext31 = null;
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d, mathContext31);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.unscaledValue();
        java.lang.String str36 = bigDecimal34.toPlainString();
        java.math.BigDecimal bigDecimal38 = bigDecimal34.movePointRight(64);
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        java.math.BigDecimal bigDecimal40 = bigDecimal32.divide(bigDecimal38);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl27.scalarAdd(bigDecimal32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal38 and bigDecimal39", (bigDecimal38.compareTo(bigDecimal39) == 0) == bigDecimal38.equals(bigDecimal39));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal10 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal9);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal[][] bigDecimalArray36 = new java.math.BigDecimal[][] { bigDecimalArray19, bigDecimalArray27, bigDecimalArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl39.getDataRef();
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl39.getNorm();
        boolean boolean42 = bigMatrixImpl39.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl39.copy();
        double[] doubleArray45 = bigMatrixImpl39.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray47 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray48 = new java.lang.String[][] { strArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl39.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl39.getNorm();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal53.min(bigDecimal56);
        java.math.BigInteger bigInteger59 = bigDecimal53.toBigInteger();
        java.math.BigDecimal bigDecimal60 = bigDecimal51.max(bigDecimal53);
        java.math.BigDecimal bigDecimal61 = bigDecimal1.max(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((int) 'a');
        int int64 = bigDecimal63.intValueExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal1.divide(bigDecimal63);
        double[] doubleArray68 = new double[] { 1.0d, 100.0f };
        double[] doubleArray71 = new double[] { 1.0d, 100.0f };
        double[] doubleArray74 = new double[] { 1.0d, 100.0f };
        double[] doubleArray77 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray78 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77 };
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        java.lang.String str85 = bigDecimal84.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl81.scalarMultiply(bigDecimal84);
        java.math.BigDecimal bigDecimal87 = bigDecimal63.multiply(bigDecimal84);
        java.math.BigDecimal bigDecimal89 = bigDecimal84.movePointRight(2881);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal87", (bigDecimal1.compareTo(bigDecimal87) == 0) == bigDecimal1.equals(bigDecimal87));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        java.lang.String str9 = bigDecimal8.toString();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        int int13 = bigDecimal11.signum();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal8.divideAndRemainder(bigDecimal11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray14);
        int int16 = bigMatrixImpl15.getRoundingMode();
        boolean boolean17 = bigMatrixImpl15.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrix6.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl15);
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl15.getData();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray24 = bigDecimal21.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl15.preMultiply(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray25);
        java.math.MathContext mathContext28 = null;
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d, mathContext28);
        java.math.BigDecimal bigDecimal31 = bigDecimal29.movePointRight((int) (byte) -11);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrix26.scalarAdd(bigDecimal29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal8 and bigDecimal31", (bigDecimal8.compareTo(bigDecimal31) == 0) == bigDecimal8.equals(bigDecimal31));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        java.math.BigDecimal bigDecimal6 = bigDecimal3.movePointLeft((-1));
        long long7 = bigDecimal6.longValueExact();
        int int8 = bigDecimal6.scale();
        java.math.BigDecimal bigDecimal9 = bigDecimal6.stripTrailingZeros();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getDataRef();
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl37.getNorm();
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal39.ulp();
        int int42 = bigDecimal41.intValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal9.min(bigDecimal41);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = bigDecimal45.setScale(0);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        long long52 = bigDecimal50.longValue();
        long long53 = bigDecimal50.longValueExact();
        short short54 = bigDecimal50.shortValueExact();
        java.math.BigDecimal bigDecimal55 = bigDecimal45.add(bigDecimal50);
        double double56 = bigDecimal50.doubleValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal41.max(bigDecimal50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal9", (bigDecimal6.compareTo(bigDecimal9) == 0) == bigDecimal6.equals(bigDecimal9));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale((int) (short) 100, (int) (byte) 1);
        long long5 = bigDecimal1.longValueExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal1.setScale((int) (short) 0, 0);
        java.math.BigDecimal bigDecimal10 = bigDecimal8.movePointLeft(100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal8 and bigDecimal4", (bigDecimal8.compareTo(bigDecimal4) == 0) == bigDecimal8.equals(bigDecimal4));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        boolean boolean31 = bigDecimal3.equals((java.lang.Object) bigMatrixImpl30);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray36 = bigDecimal33.divideAndRemainder(bigDecimal35);
        java.math.BigDecimal bigDecimal38 = bigDecimal35.movePointLeft((-1));
        long long39 = bigDecimal38.longValueExact();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger42 = bigDecimal41.unscaledValue();
        java.lang.String str43 = bigDecimal41.toPlainString();
        java.math.BigDecimal bigDecimal45 = bigDecimal41.movePointRight(64);
        boolean boolean46 = bigDecimal38.equals((java.lang.Object) 64);
        java.math.BigDecimal bigDecimal48 = bigDecimal38.movePointRight(0);
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl30.scalarMultiply(bigDecimal48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, 10);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[] doubleArray4 = bigMatrixImpl2.getColumnAsDoubleArray(0);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal56 = bigDecimal17.stripTrailingZeros();
        java.math.BigDecimal bigDecimal57 = bigDecimal56.negate();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        java.lang.String str70 = bigDecimal69.toString();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        int int74 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal69.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal77 = bigDecimal69.pow((int) 'a');
        java.math.BigInteger bigInteger78 = bigDecimal69.toBigIntegerExact();
        java.math.BigDecimal bigDecimal79 = bigDecimal67.add(bigDecimal69);
        java.math.BigInteger bigInteger80 = bigDecimal79.unscaledValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(bigInteger80, 100);
        java.math.BigDecimal bigDecimal83 = bigDecimal82.ulp();
        java.math.BigDecimal bigDecimal84 = bigDecimal57.min(bigDecimal82);
        java.lang.String str85 = bigDecimal57.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal82", (bigDecimal17.compareTo(bigDecimal82) == 0) == bigDecimal17.equals(bigDecimal82));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.copy();
        int int4 = bigMatrixImpl2.getScale();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrix3 and bigMatrix3", bigMatrix3.equals(bigMatrix3) ? bigMatrix3.hashCode() == bigMatrix3.hashCode() : true);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("100");
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        int int4 = bigDecimal3.intValue();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal3.min(bigDecimal6);
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal[][] bigDecimalArray26 = new java.math.BigDecimal[][] { bigDecimalArray9, bigDecimalArray17, bigDecimalArray25 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray26);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigInteger bigInteger36 = bigDecimal30.toBigInteger();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(bigInteger36);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        float float41 = bigDecimal39.floatValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.multiply(bigDecimal39);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrix28.scalarAdd(bigDecimal42);
        short short44 = bigDecimal42.shortValueExact();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int47 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal42.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal49 = bigDecimal1.add(bigDecimal42);
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal((long) (short) -100);
        java.math.BigDecimal bigDecimal52 = bigDecimal49.min(bigDecimal51);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal55 = bigMatrix54.getDeterminant();
        int int56 = bigDecimal55.precision();
        java.math.BigDecimal bigDecimal57 = bigDecimal49.remainder(bigDecimal55);
        double double58 = bigDecimal55.doubleValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal57", (bigDecimal3.compareTo(bigDecimal57) == 0) == bigDecimal3.equals(bigDecimal57));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32);
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl33.getNorm();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        float float38 = bigDecimal36.floatValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.remainder(bigDecimal36);
        long long40 = bigDecimal34.longValueExact();
        java.math.BigDecimal bigDecimal42 = bigDecimal34.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal43 = bigDecimal3.add(bigDecimal34);
        java.math.BigDecimal bigDecimal44 = bigDecimal43.negate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.scalarMultiply(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        java.lang.String str34 = bigDecimal33.toString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        int int38 = bigDecimal36.signum();
        java.math.BigDecimal[] bigDecimalArray39 = bigDecimal33.divideAndRemainder(bigDecimal36);
        java.math.BigDecimal bigDecimal41 = bigDecimal33.pow((int) 'a');
        java.math.BigInteger bigInteger42 = bigDecimal33.toBigIntegerExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal31.add(bigDecimal33);
        java.math.BigInteger bigInteger44 = bigDecimal43.unscaledValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(bigInteger44, 100);
        java.math.BigDecimal bigDecimal47 = bigDecimal46.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrix21.scalarMultiply(bigDecimal47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal46", (bigDecimal23.compareTo(bigDecimal46) == 0) == bigDecimal23.equals(bigDecimal46));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        long long35 = bigDecimal33.longValue();
        long long36 = bigDecimal33.longValueExact();
        int int37 = bigDecimal33.precision();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal33.add(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal66 = bigDecimal39.multiply(bigDecimal53);
        java.math.BigDecimal bigDecimal67 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((int) (byte) 10);
        java.math.BigDecimal bigDecimal70 = bigDecimal39.add(bigDecimal69);
        java.math.BigDecimal bigDecimal71 = bigDecimal30.add(bigDecimal69);
        java.math.BigDecimal bigDecimal72 = bigDecimal30.plus();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal69 and bigDecimal71", (bigDecimal69.compareTo(bigDecimal71) == 0) == bigDecimal69.equals(bigDecimal71));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        float float3 = bigDecimal1.floatValue();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        int int20 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl18.scalarMultiply(bigDecimal22);
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl18.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal1.remainder(bigDecimal26);
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((double) (byte) 97);
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray42 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray42);
        boolean boolean44 = bigMatrix43.isSingular();
        int int45 = bigMatrix43.getColumnDimension();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        java.lang.String str48 = bigDecimal47.toString();
        java.math.BigDecimal bigDecimal49 = bigDecimal47.plus();
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal52 = bigDecimal51.stripTrailingZeros();
        float float53 = bigDecimal51.floatValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal51.ulp();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        java.lang.String str57 = bigDecimal56.toString();
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal60 = bigDecimal59.stripTrailingZeros();
        int int61 = bigDecimal59.signum();
        java.math.BigDecimal[] bigDecimalArray62 = bigDecimal56.divideAndRemainder(bigDecimal59);
        java.math.BigDecimal bigDecimal64 = bigDecimal56.pow((int) 'a');
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        java.lang.String str67 = bigDecimal66.toString();
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal70 = bigDecimal69.stripTrailingZeros();
        int int71 = bigDecimal69.signum();
        java.math.BigDecimal[] bigDecimalArray72 = bigDecimal66.divideAndRemainder(bigDecimal69);
        java.math.BigDecimal bigDecimal74 = bigDecimal66.pow((int) 'a');
        java.math.BigInteger bigInteger75 = bigDecimal66.toBigIntegerExact();
        java.math.BigDecimal bigDecimal76 = bigDecimal64.add(bigDecimal66);
        java.math.BigDecimal bigDecimal77 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal79 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger80 = bigDecimal79.unscaledValue();
        java.math.BigDecimal bigDecimal81 = bigDecimal77.add(bigDecimal79);
        java.math.BigDecimal bigDecimal82 = bigDecimal66.multiply(bigDecimal77);
        java.math.BigDecimal bigDecimal83 = bigDecimal54.divide(bigDecimal77);
        int int84 = bigDecimal47.compareTo(bigDecimal54);
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrix43.scalarMultiply(bigDecimal47);
        java.math.BigInteger bigInteger86 = bigDecimal47.toBigInteger();
        java.math.BigDecimal bigDecimal87 = bigDecimal29.subtract(bigDecimal47);
        java.math.BigDecimal bigDecimal88 = bigDecimal27.multiply(bigDecimal47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal29", (bigDecimal1.compareTo(bigDecimal29) == 0) == bigDecimal1.equals(bigDecimal29));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (byte) 97);
        double[] doubleArray4 = new double[] { 1.0d, 100.0f };
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray14 = new double[][] { doubleArray4, doubleArray7, doubleArray10, doubleArray13 };
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray14);
        boolean boolean16 = bigMatrix15.isSingular();
        int int17 = bigMatrix15.getColumnDimension();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        java.lang.String str20 = bigDecimal19.toString();
        java.math.BigDecimal bigDecimal21 = bigDecimal19.plus();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        float float25 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.ulp();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        java.lang.String str29 = bigDecimal28.toString();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal32 = bigDecimal31.stripTrailingZeros();
        int int33 = bigDecimal31.signum();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal31);
        java.math.BigDecimal bigDecimal36 = bigDecimal28.pow((int) 'a');
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        java.lang.String str39 = bigDecimal38.toString();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = bigDecimal41.stripTrailingZeros();
        int int43 = bigDecimal41.signum();
        java.math.BigDecimal[] bigDecimalArray44 = bigDecimal38.divideAndRemainder(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal38.pow((int) 'a');
        java.math.BigInteger bigInteger47 = bigDecimal38.toBigIntegerExact();
        java.math.BigDecimal bigDecimal48 = bigDecimal36.add(bigDecimal38);
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger52 = bigDecimal51.unscaledValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal49.add(bigDecimal51);
        java.math.BigDecimal bigDecimal54 = bigDecimal38.multiply(bigDecimal49);
        java.math.BigDecimal bigDecimal55 = bigDecimal26.divide(bigDecimal49);
        int int56 = bigDecimal19.compareTo(bigDecimal26);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrix15.scalarMultiply(bigDecimal19);
        java.math.BigInteger bigInteger58 = bigDecimal19.toBigInteger();
        java.math.BigDecimal bigDecimal59 = bigDecimal1.subtract(bigDecimal19);
        java.math.BigDecimal bigDecimal61 = bigDecimal1.movePointLeft((int) (short) 97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal59", (bigDecimal23.compareTo(bigDecimal59) == 0) == bigDecimal23.equals(bigDecimal59));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal10 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal9);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal[][] bigDecimalArray36 = new java.math.BigDecimal[][] { bigDecimalArray19, bigDecimalArray27, bigDecimalArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl39.getDataRef();
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl39.getNorm();
        boolean boolean42 = bigMatrixImpl39.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl39.copy();
        double[] doubleArray45 = bigMatrixImpl39.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray47 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray48 = new java.lang.String[][] { strArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl39.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl39.getNorm();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal53.min(bigDecimal56);
        java.math.BigInteger bigInteger59 = bigDecimal53.toBigInteger();
        java.math.BigDecimal bigDecimal60 = bigDecimal51.max(bigDecimal53);
        java.math.BigDecimal bigDecimal61 = bigDecimal1.max(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((int) 'a');
        int int64 = bigDecimal63.intValueExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal1.divide(bigDecimal63);
        double[] doubleArray68 = new double[] { 1.0d, 100.0f };
        double[] doubleArray71 = new double[] { 1.0d, 100.0f };
        double[] doubleArray74 = new double[] { 1.0d, 100.0f };
        double[] doubleArray77 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray78 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77 };
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        java.lang.String str85 = bigDecimal84.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl81.scalarMultiply(bigDecimal84);
        java.math.BigDecimal bigDecimal87 = bigDecimal63.multiply(bigDecimal84);
        java.math.BigDecimal bigDecimal88 = bigDecimal63.abs();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal84", (bigDecimal1.compareTo(bigDecimal84) == 0) == bigDecimal1.equals(bigDecimal84));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        java.math.BigInteger bigInteger51 = bigDecimal26.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(bigInteger51, 3);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(bigInteger51, (int) (byte) 6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal53", (bigDecimal23.compareTo(bigDecimal53) == 0) == bigDecimal23.equals(bigDecimal53));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal32);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.stripTrailingZeros();
        int int9 = bigDecimal8.signum();
        int int10 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal13 = bigDecimal12.negate();
        int int14 = bigDecimal13.scale();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal18 = bigDecimal16.setScale((int) '4');
        java.math.BigDecimal bigDecimal19 = bigDecimal13.multiply(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal8.divide(bigDecimal16);
        short short21 = bigDecimal8.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal16 and bigDecimal18", (bigDecimal16.compareTo(bigDecimal18) == 0) == bigDecimal16.equals(bigDecimal18));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        boolean boolean31 = bigDecimal3.equals((java.lang.Object) bigMatrixImpl30);
        java.lang.String str32 = bigMatrixImpl30.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        long long35 = bigDecimal33.longValue();
        long long36 = bigDecimal33.longValueExact();
        int int37 = bigDecimal33.precision();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal33.add(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal66 = bigDecimal39.multiply(bigDecimal53);
        java.math.BigDecimal bigDecimal67 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((int) (byte) 10);
        java.math.BigDecimal bigDecimal70 = bigDecimal39.add(bigDecimal69);
        java.math.BigDecimal bigDecimal71 = bigDecimal30.add(bigDecimal69);
        double[] doubleArray76 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix77 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray76);
        double[] doubleArray82 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix83 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray82);
        double[] doubleArray84 = realMatrix77.operate(doubleArray82);
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray82);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray82);
        org.apache.commons.math.linear.RealMatrix realMatrix87 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray82);
        boolean boolean88 = bigDecimal69.equals((java.lang.Object) realMatrix87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        java.lang.String str15 = bigMatrixImpl14.toString();
        int int16 = bigMatrixImpl14.getRowDimension();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        java.lang.String str19 = bigDecimal18.toString();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        int int23 = bigDecimal21.signum();
        java.math.BigDecimal[] bigDecimalArray24 = bigDecimal18.divideAndRemainder(bigDecimal21);
        java.math.BigDecimal bigDecimal26 = bigDecimal18.pow((int) 'a');
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        java.lang.String str29 = bigDecimal28.toString();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal32 = bigDecimal31.stripTrailingZeros();
        int int33 = bigDecimal31.signum();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal31);
        java.math.BigDecimal bigDecimal36 = bigDecimal28.pow((int) 'a');
        java.math.BigInteger bigInteger37 = bigDecimal28.toBigIntegerExact();
        java.math.BigDecimal bigDecimal38 = bigDecimal26.add(bigDecimal28);
        java.math.BigDecimal bigDecimal39 = bigDecimal26.abs();
        java.math.BigDecimal bigDecimal42 = bigDecimal26.setScale((int) (short) 1, 0);
        java.math.BigDecimal bigDecimal44 = bigDecimal42.movePointLeft(10);
        boolean boolean45 = bigMatrixImpl14.equals((java.lang.Object) bigDecimal44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal42", (bigDecimal18.compareTo(bigDecimal42) == 0) == bigDecimal18.equals(bigDecimal42));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigInteger bigInteger12 = bigDecimal3.toBigIntegerExact();
        int int13 = bigDecimal3.precision();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl22.getNorm();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = bigDecimal35.stripTrailingZeros();
        float float37 = bigDecimal35.floatValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.divideToIntegralValue(bigDecimal35);
        boolean boolean39 = bigMatrixImpl22.equals((java.lang.Object) bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal3.divideAndRemainder(bigDecimal35);
        java.math.BigDecimal bigDecimal41 = bigDecimal1.remainder(bigDecimal35);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        int int47 = bigDecimal43.precision();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        long long51 = bigDecimal49.longValue();
        long long52 = bigDecimal49.longValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal43.add(bigDecimal49);
        java.math.BigDecimal bigDecimal55 = bigDecimal53.setScale((int) (byte) 10);
        java.math.BigDecimal bigDecimal56 = bigDecimal41.min(bigDecimal55);
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.min(bigDecimal61);
        java.math.BigDecimal bigDecimal64 = bigDecimal58.plus();
        java.math.BigDecimal bigDecimal65 = bigDecimal56.min(bigDecimal58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal55", (bigDecimal3.compareTo(bigDecimal55) == 0) == bigDecimal3.equals(bigDecimal55));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.plus();
        java.math.BigDecimal bigDecimal29 = bigDecimal25.movePointLeft((int) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal25.movePointLeft((int) (short) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal29", (bigDecimal18.compareTo(bigDecimal29) == 0) == bigDecimal18.equals(bigDecimal29));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32);
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl33.getNorm();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        float float38 = bigDecimal36.floatValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.remainder(bigDecimal36);
        long long40 = bigDecimal34.longValueExact();
        java.math.BigDecimal bigDecimal42 = bigDecimal34.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal43 = bigDecimal3.add(bigDecimal34);
        short short44 = bigDecimal43.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarAdd(bigDecimal38);
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        java.math.BigDecimal bigDecimal43 = bigDecimal38.divideToIntegralValue(bigDecimal42);
        int int44 = bigDecimal42.intValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal43", (bigDecimal1.compareTo(bigDecimal43) == 0) == bigDecimal1.equals(bigDecimal43));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (byte) 97);
        double[] doubleArray4 = new double[] { 1.0d, 100.0f };
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray14 = new double[][] { doubleArray4, doubleArray7, doubleArray10, doubleArray13 };
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray14);
        boolean boolean16 = bigMatrix15.isSingular();
        int int17 = bigMatrix15.getColumnDimension();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        java.lang.String str20 = bigDecimal19.toString();
        java.math.BigDecimal bigDecimal21 = bigDecimal19.plus();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        float float25 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.ulp();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        java.lang.String str29 = bigDecimal28.toString();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal32 = bigDecimal31.stripTrailingZeros();
        int int33 = bigDecimal31.signum();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal31);
        java.math.BigDecimal bigDecimal36 = bigDecimal28.pow((int) 'a');
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        java.lang.String str39 = bigDecimal38.toString();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = bigDecimal41.stripTrailingZeros();
        int int43 = bigDecimal41.signum();
        java.math.BigDecimal[] bigDecimalArray44 = bigDecimal38.divideAndRemainder(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal38.pow((int) 'a');
        java.math.BigInteger bigInteger47 = bigDecimal38.toBigIntegerExact();
        java.math.BigDecimal bigDecimal48 = bigDecimal36.add(bigDecimal38);
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger52 = bigDecimal51.unscaledValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal49.add(bigDecimal51);
        java.math.BigDecimal bigDecimal54 = bigDecimal38.multiply(bigDecimal49);
        java.math.BigDecimal bigDecimal55 = bigDecimal26.divide(bigDecimal49);
        int int56 = bigDecimal19.compareTo(bigDecimal26);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrix15.scalarMultiply(bigDecimal19);
        java.math.BigInteger bigInteger58 = bigDecimal19.toBigInteger();
        java.math.BigDecimal bigDecimal59 = bigDecimal1.subtract(bigDecimal19);
        short short60 = bigDecimal59.shortValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal23", (bigDecimal1.compareTo(bigDecimal23) == 0) == bigDecimal1.equals(bigDecimal23));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        long long7 = bigDecimal5.longValue();
        long long8 = bigDecimal5.longValueExact();
        short short9 = bigDecimal5.shortValueExact();
        java.math.BigDecimal bigDecimal10 = bigDecimal1.min(bigDecimal5);
        java.math.BigDecimal bigDecimal12 = bigDecimal5.setScale((int) (byte) 110);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(2, (int) '4');
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[] doubleArray4 = bigMatrixImpl2.getColumnAsDoubleArray((int) (byte) 6);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = bigDecimal1.movePointRight((int) '#');
        java.math.BigDecimal bigDecimal11 = bigDecimal1.movePointLeft((int) (short) 97);
        byte byte12 = bigDecimal1.byteValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal11", (bigDecimal4.compareTo(bigDecimal11) == 0) == bigDecimal4.equals(bigDecimal11));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal14 = bigDecimal12.setScale(5);
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str17 = bigDecimal16.toEngineeringString();
        int int18 = bigDecimal14.compareTo(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal10.multiply(bigDecimal14);
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal((long) (byte) 0);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal25 = bigDecimal14.min(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl8.scalarMultiply(bigDecimal14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal21 and bigDecimal24", (bigDecimal21.compareTo(bigDecimal24) == 0) == bigDecimal21.equals(bigDecimal24));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger10 = bigDecimal9.unscaledValue();
        java.math.BigDecimal bigDecimal11 = bigDecimal9.stripTrailingZeros();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        long long15 = bigDecimal13.longValue();
        long long16 = bigDecimal13.longValueExact();
        short short17 = bigDecimal13.shortValueExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal9.min(bigDecimal13);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl5.scalarMultiply(bigDecimal9);
        int int20 = bigMatrix19.getColumnDimension();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal9 and bigDecimal11", (bigDecimal9.compareTo(bigDecimal11) == 0) == bigDecimal9.equals(bigDecimal11));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.copy();
        java.math.BigDecimal bigDecimal16 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal17 = bigDecimal16.abs();
        java.math.BigDecimal bigDecimal18 = bigDecimal16.stripTrailingZeros();
        java.lang.Class<?> wildcardClass19 = bigDecimal16.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal16 and bigDecimal18", (bigDecimal16.compareTo(bigDecimal18) == 0) == bigDecimal16.equals(bigDecimal18));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.setScale(5);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str8 = bigDecimal7.toEngineeringString();
        int int9 = bigDecimal5.compareTo(bigDecimal7);
        java.math.BigDecimal bigDecimal10 = bigDecimal1.multiply(bigDecimal5);
        double double11 = bigDecimal10.doubleValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal5", (bigDecimal3.compareTo(bigDecimal5) == 0) == bigDecimal3.equals(bigDecimal5));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl29.getNorm();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.remainder(bigDecimal32);
        java.lang.String str36 = bigDecimal30.toEngineeringString();
        java.math.BigDecimal bigDecimal38 = bigDecimal30.movePointRight((-32));
        java.math.BigDecimal bigDecimal40 = bigDecimal30.pow((int) '#');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal38", (bigDecimal1.compareTo(bigDecimal38) == 0) == bigDecimal1.equals(bigDecimal38));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) ' ', (int) (short) 400);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        java.lang.String str5 = bigDecimal4.toString();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal8 = bigDecimal7.stripTrailingZeros();
        int int9 = bigDecimal7.signum();
        java.math.BigDecimal[] bigDecimalArray10 = bigDecimal4.divideAndRemainder(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal4.pow((int) 'a');
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        java.lang.String str15 = bigDecimal14.toString();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = bigDecimal17.stripTrailingZeros();
        int int19 = bigDecimal17.signum();
        java.math.BigDecimal[] bigDecimalArray20 = bigDecimal14.divideAndRemainder(bigDecimal17);
        java.math.BigDecimal bigDecimal22 = bigDecimal14.pow((int) 'a');
        java.math.BigInteger bigInteger23 = bigDecimal14.toBigIntegerExact();
        java.math.BigDecimal bigDecimal24 = bigDecimal12.add(bigDecimal14);
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigInteger bigInteger35 = bigDecimal26.toBigIntegerExact();
        float float36 = bigDecimal26.floatValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal12.add(bigDecimal26);
        java.math.BigDecimal bigDecimal38 = bigDecimal12.ulp();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl2.scalarMultiply(bigDecimal38);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal57 = bigDecimal17.scaleByPowerOfTen((int) (byte) 0);
        java.lang.String str58 = bigDecimal17.toEngineeringString();
        int int59 = bigDecimal17.scale();
        java.math.BigDecimal bigDecimal61 = bigDecimal17.setScale((int) (byte) 110);
        byte byte62 = bigDecimal17.byteValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal61", (bigDecimal17.compareTo(bigDecimal61) == 0) == bigDecimal17.equals(bigDecimal61));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        float float15 = bigDecimal13.floatValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.divideToIntegralValue(bigDecimal13);
        java.math.BigDecimal bigDecimal17 = bigDecimal1.max(bigDecimal11);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.setScale((int) ' ');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal19", (bigDecimal3.compareTo(bigDecimal19) == 0) == bigDecimal3.equals(bigDecimal19));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigInteger bigInteger12 = bigDecimal3.toBigIntegerExact();
        int int13 = bigDecimal3.precision();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl22.getNorm();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = bigDecimal35.stripTrailingZeros();
        float float37 = bigDecimal35.floatValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.divideToIntegralValue(bigDecimal35);
        boolean boolean39 = bigMatrixImpl22.equals((java.lang.Object) bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal3.divideAndRemainder(bigDecimal35);
        java.math.BigDecimal bigDecimal41 = bigDecimal1.remainder(bigDecimal35);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        int int47 = bigDecimal43.precision();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        long long51 = bigDecimal49.longValue();
        long long52 = bigDecimal49.longValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal43.add(bigDecimal49);
        java.math.BigDecimal bigDecimal55 = bigDecimal53.setScale((int) (byte) 10);
        java.math.BigDecimal bigDecimal56 = bigDecimal41.min(bigDecimal55);
        java.lang.String str57 = bigDecimal56.toEngineeringString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal55", (bigDecimal3.compareTo(bigDecimal55) == 0) == bigDecimal3.equals(bigDecimal55));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        int int32 = bigMatrixImpl27.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (byte) 100);
        java.math.BigDecimal bigDecimal42 = bigMatrix41.getTrace();
        double[][] doubleArray43 = bigMatrix41.getDataAsDoubleArray();
        boolean boolean44 = bigMatrixImpl27.equals((java.lang.Object) bigMatrix41);
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal52 = bigDecimal49.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal53 = bigDecimal46.divide(bigDecimal49);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl27.scalarMultiply(bigDecimal49);
        double[][] doubleArray55 = bigMatrixImpl27.getDataAsDoubleArray();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal49 and bigDecimal52", (bigDecimal49.compareTo(bigDecimal52) == 0) == bigDecimal49.equals(bigDecimal52));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 0, (int) (short) -100);
        java.math.BigDecimal bigDecimal3 = bigDecimal2.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        java.lang.String str6 = bigDecimal5.toString();
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal9 = bigDecimal8.stripTrailingZeros();
        int int10 = bigDecimal8.signum();
        java.math.BigDecimal[] bigDecimalArray11 = bigDecimal5.divideAndRemainder(bigDecimal8);
        java.math.BigDecimal bigDecimal13 = bigDecimal5.pow((int) 'a');
        java.math.BigInteger bigInteger14 = bigDecimal5.toBigIntegerExact();
        float float15 = bigDecimal5.floatValue();
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray26);
        double[] doubleArray28 = realMatrix21.operate(doubleArray26);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrix29.getNorm();
        java.math.BigDecimal bigDecimal31 = bigDecimal5.subtract(bigDecimal30);
        int int32 = bigDecimal31.signum();
        java.math.BigInteger bigInteger33 = bigDecimal31.toBigInteger();
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray38 = bigDecimal35.divideAndRemainder(bigDecimal37);
        java.math.BigDecimal bigDecimal40 = bigDecimal37.movePointLeft((-1));
        java.math.BigDecimal bigDecimal41 = bigDecimal31.max(bigDecimal37);
        int int42 = bigDecimal37.precision();
        java.math.BigDecimal bigDecimal43 = bigDecimal2.divide(bigDecimal37);
        java.math.BigInteger bigInteger44 = bigDecimal37.toBigIntegerExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal3", (bigDecimal2.compareTo(bigDecimal3) == 0) == bigDecimal2.equals(bigDecimal3));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 6);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal("0.0");
        int int4 = bigDecimal1.compareTo(bigDecimal3);
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 6);
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger10 = bigDecimal9.unscaledValue();
        java.math.BigDecimal bigDecimal11 = bigDecimal7.add(bigDecimal9);
        java.math.BigInteger bigInteger12 = bigDecimal9.toBigInteger();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(bigInteger12, (int) (short) -1);
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str17 = bigDecimal16.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray18 = bigDecimal14.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal6.remainder(bigDecimal14);
        java.math.BigDecimal bigDecimal20 = bigDecimal3.subtract(bigDecimal6);
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = bigDecimal22.setScale(0);
        double[] doubleArray30 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 6);
        int int35 = realMatrix32.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix32.scalarAdd(10.0d);
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double double44 = realMatrix43.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix43.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix37.preMultiply(realMatrix46);
        boolean boolean48 = bigDecimal25.equals((java.lang.Object) realMatrix37);
        short short49 = bigDecimal25.shortValueExact();
        java.math.BigDecimal bigDecimal50 = bigDecimal20.max(bigDecimal25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal50", (bigDecimal3.compareTo(bigDecimal50) == 0) == bigDecimal3.equals(bigDecimal50));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.min(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal19.movePointRight((int) (short) 10);
        int int22 = bigDecimal21.intValueExact();
        java.math.BigDecimal bigDecimal23 = bigDecimal21.plus();
        byte byte24 = bigDecimal23.byteValueExact();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger27 = bigDecimal26.unscaledValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal26.stripTrailingZeros();
        java.math.BigDecimal bigDecimal29 = bigDecimal23.max(bigDecimal26);
        java.math.BigInteger bigInteger30 = bigDecimal29.unscaledValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal29 and bigDecimal28", (bigDecimal29.compareTo(bigDecimal28) == 0) == bigDecimal29.equals(bigDecimal28));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.stripTrailingZeros();
        int int9 = bigDecimal8.signum();
        int int10 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal13 = bigDecimal12.negate();
        int int14 = bigDecimal13.scale();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal18 = bigDecimal16.setScale((int) '4');
        java.math.BigDecimal bigDecimal19 = bigDecimal13.multiply(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal8.divide(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal8.negate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal16 and bigDecimal18", (bigDecimal16.compareTo(bigDecimal18) == 0) == bigDecimal16.equals(bigDecimal18));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal26 = bigDecimal25.stripTrailingZeros();
        int int27 = bigDecimal25.signum();
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal22.divideAndRemainder(bigDecimal25);
        java.math.BigDecimal bigDecimal30 = bigDecimal22.pow((int) 'a');
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.divideToIntegralValue(bigDecimal32);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl14.scalarMultiply(bigDecimal32);
        java.math.BigDecimal[][] bigDecimalArray37 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = bigDecimal39.setScale((int) (short) 100, (int) (byte) 1);
        long long43 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal39.setScale((int) (short) 0, 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl14.scalarMultiply(bigDecimal46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal25 and bigDecimal42", (bigDecimal25.compareTo(bigDecimal42) == 0) == bigDecimal25.equals(bigDecimal42));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        java.math.BigDecimal bigDecimal6 = bigDecimal3.movePointLeft((-1));
        long long7 = bigDecimal6.longValueExact();
        int int8 = bigDecimal6.scale();
        java.math.BigDecimal bigDecimal9 = bigDecimal6.stripTrailingZeros();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getDataRef();
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl37.getNorm();
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal39.ulp();
        int int42 = bigDecimal41.intValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal9.min(bigDecimal41);
        java.lang.Class<?> wildcardClass44 = bigDecimal41.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal9", (bigDecimal6.compareTo(bigDecimal9) == 0) == bigDecimal6.equals(bigDecimal9));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 400, 97);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.getRowMatrix((int) (byte) 110);
        java.math.BigDecimal[] bigDecimalArray6 = bigMatrix4.getColumn((int) (short) 0);
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        double[][] doubleArray11 = bigMatrix10.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal12 = bigMatrix10.getNorm();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal14.divideAndRemainder(bigDecimal16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.copy();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        java.lang.String str22 = bigDecimal21.toString();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal25 = bigDecimal24.stripTrailingZeros();
        int int26 = bigDecimal24.signum();
        java.math.BigDecimal[] bigDecimalArray27 = bigDecimal21.divideAndRemainder(bigDecimal24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl28.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl18.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl28);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray35 = bigDecimal32.divideAndRemainder(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray36 = bigMatrixImpl18.preMultiply(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray35);
        java.math.BigDecimal[] bigDecimalArray38 = bigMatrix10.operate(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray38);
        // Transitivity of equals
        org.junit.Assert.assertTrue("Contract failed: equals-transitive on bigMatrix39, bigMatrixImpl8, and bigDecimal1.", !(bigMatrix39.equals(bigMatrixImpl8) && bigMatrixImpl8.equals(bigDecimal1)) || bigMatrix39.equals(bigDecimal1));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal32 = bigDecimal30.setScale(5);
        java.math.BigDecimal bigDecimal34 = bigDecimal32.movePointRight(5);
        java.math.BigDecimal bigDecimal36 = bigDecimal32.movePointLeft((int) (short) 100);
        int int37 = bigDecimal25.compareTo(bigDecimal36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal57 = bigDecimal17.scaleByPowerOfTen((int) (byte) 0);
        java.lang.String str58 = bigDecimal17.toEngineeringString();
        int int59 = bigDecimal17.scale();
        java.math.BigDecimal bigDecimal61 = bigDecimal17.setScale((int) (byte) 110);
        byte byte62 = bigDecimal17.byteValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal61", (bigDecimal17.compareTo(bigDecimal61) == 0) == bigDecimal17.equals(bigDecimal61));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int4 = bigMatrixImpl3.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray5 = bigMatrixImpl3.getData();
        int int6 = bigMatrixImpl3.getRoundingMode();
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl3.getTrace();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        java.lang.String str10 = bigDecimal9.toString();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal13 = bigDecimal12.stripTrailingZeros();
        int int14 = bigDecimal12.signum();
        java.math.BigDecimal[] bigDecimalArray15 = bigDecimal9.divideAndRemainder(bigDecimal12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray15);
        int int17 = bigMatrixImpl16.getRoundingMode();
        boolean boolean18 = bigMatrixImpl16.isSingular();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        java.lang.String str21 = bigDecimal20.toString();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        int int25 = bigDecimal23.signum();
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal20.divideAndRemainder(bigDecimal23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        int int28 = bigMatrixImpl27.getRoundingMode();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        bigMatrixImpl27.setRoundingMode((int) (byte) 10);
        int int32 = bigMatrixImpl27.getRoundingMode();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray37 = bigDecimal34.divideAndRemainder(bigDecimal36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray37);
        java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl27.preMultiply(bigDecimalArray37);
        java.math.BigDecimal[] bigDecimalArray41 = bigMatrixImpl16.preMultiply(bigDecimalArray37);
        java.math.BigDecimal[] bigDecimalArray42 = bigMatrixImpl3.preMultiply(bigDecimalArray41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal9", (bigDecimal7.compareTo(bigDecimal9) == 0) == bigDecimal7.equals(bigDecimal9));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        long long35 = bigDecimal33.longValue();
        long long36 = bigDecimal33.longValueExact();
        int int37 = bigDecimal33.precision();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal33.add(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal66 = bigDecimal39.multiply(bigDecimal53);
        java.math.BigDecimal bigDecimal67 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((int) (byte) 10);
        java.math.BigDecimal bigDecimal70 = bigDecimal39.add(bigDecimal69);
        java.math.BigDecimal bigDecimal71 = bigDecimal30.add(bigDecimal69);
        java.math.BigInteger bigInteger72 = bigDecimal71.unscaledValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        int int42 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.movePointLeft((int) (byte) 100);
        java.math.BigDecimal bigDecimal48 = bigDecimal43.setScale((int) (byte) 100, (int) (short) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl14.getDataRef();
        int int21 = bigMatrixImpl14.getRoundingMode();
        bigMatrixImpl14.setRoundingMode((int) (short) -100);
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.min(bigDecimal28);
        java.math.BigInteger bigInteger31 = bigDecimal25.toBigInteger();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(bigInteger31);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = bigDecimal34.stripTrailingZeros();
        float float36 = bigDecimal34.floatValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.multiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = bigDecimal32.negate();
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal38.setScale((int) (short) 10, 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl14.scalarMultiply(bigDecimal42);
        int int44 = bigMatrixImpl14.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal25 and bigDecimal42", (bigDecimal25.compareTo(bigDecimal42) == 0) == bigDecimal25.equals(bigDecimal42));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.copy();
        java.math.BigDecimal bigDecimal16 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal17 = bigDecimal16.abs();
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigInteger bigInteger42 = bigDecimal36.toBigInteger();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(bigInteger42);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrix34.scalarAdd(bigDecimal43);
        java.math.BigDecimal bigDecimal46 = bigDecimal43.scaleByPowerOfTen(97);
        java.math.BigDecimal bigDecimal47 = bigDecimal16.add(bigDecimal43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal36 and bigDecimal46", (bigDecimal36.compareTo(bigDecimal46) == 0) == bigDecimal36.equals(bigDecimal46));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.lang.String str3 = bigDecimal2.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal2.divideToIntegralValue(bigDecimal6);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal14 = bigDecimal13.negate();
        int int15 = bigDecimal14.scale();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal19 = bigDecimal17.setScale((int) '4');
        java.math.BigDecimal bigDecimal20 = bigDecimal14.multiply(bigDecimal17);
        java.math.BigDecimal bigDecimal23 = bigDecimal10.divide(bigDecimal17, (int) '#', 2);
        java.math.BigDecimal bigDecimal24 = bigDecimal8.subtract(bigDecimal23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal19", (bigDecimal17.compareTo(bigDecimal19) == 0) == bigDecimal17.equals(bigDecimal19));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger28 = bigDecimal27.unscaledValue();
        java.lang.String str29 = bigDecimal27.toPlainString();
        java.math.BigDecimal bigDecimal30 = bigDecimal23.divideToIntegralValue(bigDecimal27);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.unscaledValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal32.add(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(bigInteger37, (int) (short) -1);
        float float40 = bigDecimal39.floatValue();
        java.lang.String str41 = bigDecimal39.toPlainString();
        java.math.BigDecimal bigDecimal42 = bigDecimal23.min(bigDecimal39);
        byte byte43 = bigDecimal42.byteValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal42 and bigDecimal31", (bigDecimal42.compareTo(bigDecimal31) == 0) == bigDecimal42.equals(bigDecimal31));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) -100);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.movePointLeft((int) 'a');
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        long long7 = bigDecimal5.longValue();
        long long8 = bigDecimal5.longValueExact();
        int int9 = bigDecimal5.precision();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        long long13 = bigDecimal11.longValue();
        long long14 = bigDecimal11.longValueExact();
        java.math.BigDecimal bigDecimal15 = bigDecimal5.add(bigDecimal11);
        byte byte16 = bigDecimal5.byteValueExact();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        java.lang.String str19 = bigDecimal18.toString();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        int int23 = bigDecimal21.signum();
        java.math.BigDecimal[] bigDecimalArray24 = bigDecimal18.divideAndRemainder(bigDecimal21);
        java.math.BigDecimal bigDecimal26 = bigDecimal18.pow((int) 'a');
        java.math.BigInteger bigInteger27 = bigDecimal18.toBigIntegerExact();
        float float28 = bigDecimal18.floatValue();
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        double[] doubleArray41 = realMatrix34.operate(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray41);
        java.math.BigDecimal bigDecimal43 = bigMatrix42.getNorm();
        java.math.BigDecimal bigDecimal44 = bigDecimal18.subtract(bigDecimal43);
        int int45 = bigDecimal44.signum();
        java.math.BigInteger bigInteger46 = bigDecimal44.toBigInteger();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal48.divideAndRemainder(bigDecimal50);
        java.math.BigDecimal bigDecimal53 = bigDecimal50.movePointLeft((-1));
        java.math.BigDecimal bigDecimal54 = bigDecimal44.max(bigDecimal50);
        java.math.BigDecimal bigDecimal55 = bigDecimal50.stripTrailingZeros();
        java.math.BigDecimal bigDecimal56 = bigDecimal5.remainder(bigDecimal50);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal58.divideAndRemainder(bigDecimal60);
        java.math.BigDecimal bigDecimal62 = bigDecimal56.divideToIntegralValue(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal3.min(bigDecimal56);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal68 = bigDecimal65.setScale((int) (short) 100, (int) (byte) 1);
        long long69 = bigDecimal65.longValueExact();
        java.math.BigDecimal bigDecimal72 = bigDecimal65.setScale((int) (short) 0, 0);
        int int73 = bigDecimal63.compareTo(bigDecimal65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal21 and bigDecimal68", (bigDecimal21.compareTo(bigDecimal68) == 0) == bigDecimal21.equals(bigDecimal68));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        java.math.MathContext mathContext1 = null;
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(0.0d, mathContext1);
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger5 = bigDecimal4.unscaledValue();
        java.lang.String str6 = bigDecimal4.toPlainString();
        java.math.BigDecimal bigDecimal8 = bigDecimal4.movePointRight(64);
        java.math.BigDecimal bigDecimal9 = bigDecimal8.stripTrailingZeros();
        java.math.BigDecimal bigDecimal10 = bigDecimal2.divide(bigDecimal8);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException12 = new org.apache.commons.math.linear.MatrixIndexException("hi!");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException13 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException14 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException13.addSuppressed((java.lang.Throwable) invalidMatrixException14);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException16 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException17 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException16.addSuppressed((java.lang.Throwable) invalidMatrixException17);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException20 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException16.addSuppressed((java.lang.Throwable) matrixIndexException20);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException22 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException23 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException22.addSuppressed((java.lang.Throwable) invalidMatrixException23);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException26 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException22.addSuppressed((java.lang.Throwable) matrixIndexException26);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException29 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException26.addSuppressed((java.lang.Throwable) matrixIndexException29);
        matrixIndexException20.addSuppressed((java.lang.Throwable) matrixIndexException26);
        invalidMatrixException13.addSuppressed((java.lang.Throwable) matrixIndexException20);
        matrixIndexException12.addSuppressed((java.lang.Throwable) invalidMatrixException13);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException34 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException35 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException34.addSuppressed((java.lang.Throwable) invalidMatrixException35);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException38 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException34.addSuppressed((java.lang.Throwable) matrixIndexException38);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException41 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException38.addSuppressed((java.lang.Throwable) matrixIndexException41);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException43 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException44 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException43.addSuppressed((java.lang.Throwable) invalidMatrixException44);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException46 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException47 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException46.addSuppressed((java.lang.Throwable) invalidMatrixException47);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException50 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException46.addSuppressed((java.lang.Throwable) matrixIndexException50);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException52 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException53 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException52.addSuppressed((java.lang.Throwable) invalidMatrixException53);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException56 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException52.addSuppressed((java.lang.Throwable) matrixIndexException56);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException59 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException56.addSuppressed((java.lang.Throwable) matrixIndexException59);
        matrixIndexException50.addSuppressed((java.lang.Throwable) matrixIndexException56);
        invalidMatrixException43.addSuppressed((java.lang.Throwable) matrixIndexException50);
        matrixIndexException41.addSuppressed((java.lang.Throwable) invalidMatrixException43);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException64 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException43.addSuppressed((java.lang.Throwable) invalidMatrixException64);
        matrixIndexException12.addSuppressed((java.lang.Throwable) invalidMatrixException64);
        boolean boolean67 = bigDecimal2.equals((java.lang.Object) invalidMatrixException64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal8 and bigDecimal9", (bigDecimal8.compareTo(bigDecimal9) == 0) == bigDecimal8.equals(bigDecimal9));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.setScale(5);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str8 = bigDecimal7.toEngineeringString();
        int int9 = bigDecimal5.compareTo(bigDecimal7);
        java.math.BigDecimal bigDecimal10 = bigDecimal1.multiply(bigDecimal5);
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[] doubleArray22 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray23 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl25.transpose();
        double[] doubleArray28 = bigMatrixImpl25.getRowAsDoubleArray((int) (short) 0);
        boolean boolean29 = bigMatrixImpl25.isSingular();
        java.math.BigDecimal[][] bigDecimalArray30 = bigMatrixImpl25.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal34 = bigDecimal33.negate();
        int int35 = bigDecimal34.scale();
        boolean boolean36 = bigMatrixImpl31.equals((java.lang.Object) bigDecimal34);
        java.math.BigDecimal bigDecimal37 = bigDecimal34.plus();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigInteger bigInteger45 = bigDecimal39.toBigInteger();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(bigInteger45);
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        float float50 = bigDecimal48.floatValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.multiply(bigDecimal48);
        java.math.BigDecimal bigDecimal52 = bigDecimal46.negate();
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal52.stripTrailingZeros();
        int int55 = bigDecimal37.compareTo(bigDecimal54);
        java.math.BigInteger bigInteger56 = bigDecimal37.toBigInteger();
        java.math.BigDecimal bigDecimal57 = bigDecimal1.max(bigDecimal37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal5", (bigDecimal3.compareTo(bigDecimal5) == 0) == bigDecimal3.equals(bigDecimal5));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        long long35 = bigDecimal33.longValue();
        long long36 = bigDecimal33.longValueExact();
        int int37 = bigDecimal33.precision();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal33.add(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal66 = bigDecimal39.multiply(bigDecimal53);
        java.math.BigDecimal bigDecimal67 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((int) (byte) 10);
        java.math.BigDecimal bigDecimal70 = bigDecimal39.add(bigDecimal69);
        java.math.BigDecimal bigDecimal71 = bigDecimal30.add(bigDecimal69);
        java.math.BigDecimal bigDecimal73 = bigDecimal69.movePointRight(52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal31 = bigDecimal30.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.scalarMultiply(bigDecimal30);
        java.math.BigInteger bigInteger33 = bigDecimal30.unscaledValue();
        int int34 = bigDecimal30.scale();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal((double) (byte) -112);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray40 = realMatrix38.getColumn(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray40);
        boolean boolean42 = bigMatrix41.isSingular();
        boolean boolean43 = bigDecimal36.equals((java.lang.Object) bigMatrix41);
        java.lang.String str44 = bigDecimal36.toPlainString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.lang.String str48 = bigDecimal47.toString();
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal47.divideToIntegralValue(bigDecimal51);
        java.math.BigDecimal bigDecimal54 = bigDecimal36.add(bigDecimal51);
        java.math.BigDecimal bigDecimal55 = bigDecimal30.add(bigDecimal51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal53", (bigDecimal1.compareTo(bigDecimal53) == 0) == bigDecimal1.equals(bigDecimal53));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getData();
        boolean boolean39 = bigMatrixImpl37.isSquare();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int42 = bigDecimal41.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl37.scalarMultiply(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal1.divide(bigDecimal41, (int) (short) 100, 6);
        int int47 = bigDecimal46.intValueExact();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        java.lang.String str50 = bigDecimal49.toString();
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal53 = bigDecimal52.stripTrailingZeros();
        int int54 = bigDecimal52.signum();
        java.math.BigDecimal[] bigDecimalArray55 = bigDecimal49.divideAndRemainder(bigDecimal52);
        java.math.BigDecimal bigDecimal57 = bigDecimal49.pow((int) 'a');
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigInteger bigInteger68 = bigDecimal59.toBigIntegerExact();
        java.math.BigDecimal bigDecimal69 = bigDecimal57.add(bigDecimal59);
        float float70 = bigDecimal69.floatValue();
        java.math.BigInteger bigInteger71 = bigDecimal69.unscaledValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal46.min(bigDecimal69);
        java.lang.String str73 = bigDecimal72.toPlainString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal72", (bigDecimal1.compareTo(bigDecimal72) == 0) == bigDecimal1.equals(bigDecimal72));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        byte byte5 = bigDecimal4.byteValueExact();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal15 = bigDecimal7.pow((int) 'a');
        java.math.BigInteger bigInteger16 = bigDecimal7.toBigInteger();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(bigInteger16, 6);
        java.math.BigDecimal bigDecimal19 = bigDecimal4.multiply(bigDecimal18);
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal23 = bigDecimal21.setScale(5);
        java.math.BigDecimal bigDecimal24 = bigDecimal19.remainder(bigDecimal21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal18", (bigDecimal1.compareTo(bigDecimal18) == 0) == bigDecimal1.equals(bigDecimal18));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigInteger bigInteger35 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        double[] doubleArray54 = bigMatrixImpl51.getRowAsDoubleArray((int) (short) 0);
        boolean boolean55 = bigMatrixImpl51.isSingular();
        boolean boolean56 = bigMatrixImpl51.isSquare();
        int int57 = bigMatrixImpl51.getScale();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal58.add(bigDecimal60);
        java.math.BigDecimal bigDecimal64 = bigDecimal60.setScale(100);
        boolean boolean65 = bigMatrixImpl51.equals((java.lang.Object) bigDecimal60);
        java.math.BigDecimal bigDecimal66 = bigDecimal36.min(bigDecimal60);
        int int67 = bigDecimal36.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal60 and bigDecimal64", (bigDecimal60.compareTo(bigDecimal64) == 0) == bigDecimal60.equals(bigDecimal64));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal22 = bigDecimal9.abs();
        java.math.BigDecimal bigDecimal25 = bigDecimal9.setScale((int) (short) 1, 0);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.movePointLeft(10);
        int int28 = bigDecimal27.intValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal25", (bigDecimal1.compareTo(bigDecimal25) == 0) == bigDecimal1.equals(bigDecimal25));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        bigMatrixImpl25.setScale((int) 'a');
        int int30 = bigMatrixImpl25.getRowDimension();
        java.math.BigDecimal bigDecimal31 = bigMatrixImpl25.getNorm();
        int int32 = bigMatrixImpl25.getRowDimension();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigInteger bigInteger40 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal42 = bigDecimal34.movePointRight((int) '#');
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger46 = bigDecimal45.unscaledValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal43.add(bigDecimal45);
        java.math.BigDecimal bigDecimal49 = bigDecimal45.setScale(100);
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal42.divideAndRemainder(bigDecimal45);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl25.scalarAdd(bigDecimal42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal45 and bigDecimal49", (bigDecimal45.compareTo(bigDecimal49) == 0) == bigDecimal45.equals(bigDecimal49));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = bigMatrixImpl0.getColumnMatrix((int) (byte) 6);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl14.getDataRef();
        int int21 = bigMatrixImpl14.getRoundingMode();
        bigMatrixImpl14.setRoundingMode((int) (short) -100);
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.min(bigDecimal28);
        java.math.BigInteger bigInteger31 = bigDecimal25.toBigInteger();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(bigInteger31);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = bigDecimal34.stripTrailingZeros();
        float float36 = bigDecimal34.floatValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.multiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = bigDecimal32.negate();
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal38.setScale((int) (short) 10, 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl14.scalarMultiply(bigDecimal42);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl14.transpose();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal25 and bigDecimal42", (bigDecimal25.compareTo(bigDecimal42) == 0) == bigDecimal25.equals(bigDecimal42));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 1);
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.min(bigDecimal38);
        java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal40 };
        java.math.BigDecimal[][] bigDecimalArray42 = new java.math.BigDecimal[][] { bigDecimalArray25, bigDecimalArray33, bigDecimalArray41 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray42);
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrixImpl45.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray46);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl47.getNorm();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        float float52 = bigDecimal50.floatValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.remainder(bigDecimal50);
        long long54 = bigDecimal48.longValueExact();
        java.lang.String str55 = bigDecimal48.toString();
        java.math.BigDecimal bigDecimal56 = bigDecimal48.abs();
        java.math.BigDecimal bigDecimal58 = bigDecimal56.movePointLeft((int) (short) 31464);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl14.scalarMultiply(bigDecimal56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal19 and bigDecimal58", (bigDecimal19.compareTo(bigDecimal58) == 0) == bigDecimal19.equals(bigDecimal58));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal32);
        java.math.BigInteger bigInteger35 = bigDecimal32.unscaledValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        short short42 = bigDecimal40.shortValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.abs();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.setScale((int) (byte) -1);
        java.math.BigDecimal bigDecimal46 = bigDecimal43.ulp();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigDecimal bigDecimal6 = bigDecimal2.setScale(100);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        byte byte8 = bigDecimal6.byteValueExact();
        java.math.BigDecimal bigDecimal10 = bigDecimal6.movePointLeft((int) '#');
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal[][] bigDecimalArray35 = new java.math.BigDecimal[][] { bigDecimalArray18, bigDecimalArray26, bigDecimalArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl38.getDataRef();
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl38.getNorm();
        boolean boolean41 = bigMatrixImpl38.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl38.copy();
        double[] doubleArray44 = bigMatrixImpl38.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(strArray47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl38.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal56 = bigDecimal51.min(bigDecimal54);
        java.math.BigDecimal[] bigDecimalArray57 = new java.math.BigDecimal[] { bigDecimal56 };
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        int int60 = bigDecimal59.intValue();
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal59.min(bigDecimal62);
        java.math.BigDecimal[] bigDecimalArray65 = new java.math.BigDecimal[] { bigDecimal64 };
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.min(bigDecimal70);
        java.math.BigDecimal[] bigDecimalArray73 = new java.math.BigDecimal[] { bigDecimal72 };
        java.math.BigDecimal[][] bigDecimalArray74 = new java.math.BigDecimal[][] { bigDecimalArray57, bigDecimalArray65, bigDecimalArray73 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray74);
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        int int79 = bigDecimal78.intValue();
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(0.0d);
        int int82 = bigDecimal81.intValue();
        java.math.BigDecimal bigDecimal83 = bigDecimal78.min(bigDecimal81);
        java.math.BigInteger bigInteger84 = bigDecimal78.toBigInteger();
        java.math.BigDecimal bigDecimal85 = new java.math.BigDecimal(bigInteger84);
        java.math.BigDecimal bigDecimal87 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal88 = bigDecimal87.stripTrailingZeros();
        float float89 = bigDecimal87.floatValue();
        java.math.BigDecimal bigDecimal90 = bigDecimal85.multiply(bigDecimal87);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrix76.scalarAdd(bigDecimal90);
        float float92 = bigDecimal90.floatValue();
        long long93 = bigDecimal90.longValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrixImpl48.scalarAdd(bigDecimal90);
        java.lang.String str95 = bigDecimal90.toEngineeringString();
        java.math.BigDecimal bigDecimal96 = bigDecimal10.multiply(bigDecimal90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal6", (bigDecimal2.compareTo(bigDecimal6) == 0) == bigDecimal2.equals(bigDecimal6));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal[][] bigDecimalArray1 = bigMatrixImpl0.getData();
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        boolean boolean7 = bigMatrixImpl5.isSingular();
        int int8 = bigMatrixImpl5.getRowDimension();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf(8667.0d);
        java.math.BigInteger bigInteger11 = bigDecimal10.unscaledValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal10.ulp();
        java.math.BigInteger bigInteger13 = bigDecimal10.toBigIntegerExact();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = bigDecimal15.pow((int) 'a');
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigInteger bigInteger34 = bigDecimal25.toBigIntegerExact();
        java.math.BigDecimal bigDecimal35 = bigDecimal23.add(bigDecimal25);
        java.math.BigDecimal bigDecimal37 = bigDecimal35.pow((int) (byte) 97);
        int int38 = bigDecimal35.scale();
        java.math.BigDecimal bigDecimal39 = bigDecimal10.multiply(bigDecimal35);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl5.scalarAdd(bigDecimal10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal15 and bigDecimal39", (bigDecimal15.compareTo(bigDecimal39) == 0) == bigDecimal15.equals(bigDecimal39));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger11 = bigDecimal10.unscaledValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal8.add(bigDecimal10);
        java.math.BigInteger bigInteger13 = bigDecimal10.toBigInteger();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(bigInteger13, 32);
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger18 = bigDecimal17.unscaledValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.stripTrailingZeros();
        boolean boolean20 = bigDecimal15.equals((java.lang.Object) bigDecimal19);
        java.math.BigDecimal bigDecimal21 = bigDecimal4.add(bigDecimal19);
        short short22 = bigDecimal21.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal10 and bigDecimal19", (bigDecimal10.compareTo(bigDecimal19) == 0) == bigDecimal10.equals(bigDecimal19));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) (byte) -100);
        java.math.BigDecimal bigDecimal37 = bigDecimal36.abs();
        float float38 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal37.negate();
        java.math.BigDecimal bigDecimal40 = bigDecimal32.max(bigDecimal37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, 10);
        int int3 = bigMatrixImpl2.getColumnDimension();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[] doubleArray5 = bigMatrixImpl2.getColumnAsDoubleArray(3);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl6.getTrace();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        long long11 = bigDecimal9.longValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = bigMatrixImpl6.scalarAdd(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal14.divideAndRemainder(bigDecimal16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.copy();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        java.lang.String str22 = bigDecimal21.toString();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal25 = bigDecimal24.stripTrailingZeros();
        int int26 = bigDecimal24.signum();
        java.math.BigDecimal[] bigDecimalArray27 = bigDecimal21.divideAndRemainder(bigDecimal24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl28.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl18.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl28);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray35 = bigDecimal32.divideAndRemainder(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray36 = bigMatrixImpl18.preMultiply(bigDecimalArray35);
        java.math.BigDecimal[] bigDecimalArray37 = bigMatrixImpl6.operate(bigDecimalArray36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal9", (bigDecimal7.compareTo(bigDecimal9) == 0) == bigDecimal7.equals(bigDecimal9));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigInteger bigInteger18 = bigDecimal12.toBigInteger();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(bigInteger18);
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.multiply(bigDecimal21);
        java.math.BigDecimal bigDecimal25 = bigDecimal19.negate();
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal27.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal33 = bigDecimal19.divide(bigDecimal30, (int) (short) 10, 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrix10.scalarAdd(bigDecimal33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal21 and bigDecimal30", (bigDecimal21.compareTo(bigDecimal30) == 0) == bigDecimal21.equals(bigDecimal30));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale((int) (short) 100, (int) (byte) 1);
        long long5 = bigDecimal1.longValueExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal1.setScale((int) (short) 0, 0);
        short short9 = bigDecimal8.shortValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal8 and bigDecimal4", (bigDecimal8.compareTo(bigDecimal4) == 0) == bigDecimal8.equals(bigDecimal4));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 97, 97);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[] doubleArray4 = bigMatrixImpl2.getRowAsDoubleArray(7);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl6.getTrace();
        java.math.BigDecimal bigDecimal8 = bigMatrixImpl6.getDeterminant();
        int int9 = bigMatrixImpl6.getScale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal8", (bigDecimal7.compareTo(bigDecimal8) == 0) == bigDecimal7.equals(bigDecimal8));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        bigMatrixImpl2.setScale(10);
        java.math.BigDecimal[] bigDecimalArray6 = bigMatrixImpl2.getColumn(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl2.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = bigMatrix7.getRowMatrix(0);
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigMatrixImpl27.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        java.lang.String str34 = bigDecimal33.toString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        int int38 = bigDecimal36.signum();
        java.math.BigDecimal[] bigDecimalArray39 = bigDecimal33.divideAndRemainder(bigDecimal36);
        java.math.BigDecimal bigDecimal41 = bigDecimal33.pow((int) 'a');
        java.lang.String str42 = bigDecimal33.toPlainString();
        java.math.BigDecimal bigDecimal43 = bigDecimal33.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = bigDecimal33.scaleByPowerOfTen((int) (byte) -1);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl27.scalarAdd(bigDecimal33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        short short42 = bigDecimal40.shortValueExact();
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int45 = bigDecimal44.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal44);
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 0, (int) (short) -100);
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        java.lang.String str53 = bigDecimal52.toString();
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal56 = bigDecimal55.stripTrailingZeros();
        int int57 = bigDecimal55.signum();
        java.math.BigDecimal[] bigDecimalArray58 = bigDecimal52.divideAndRemainder(bigDecimal55);
        java.math.BigDecimal bigDecimal60 = bigDecimal52.pow((int) 'a');
        java.math.BigInteger bigInteger61 = bigDecimal52.toBigIntegerExact();
        float float62 = bigDecimal52.floatValue();
        double[] doubleArray67 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix68 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray67);
        double[] doubleArray73 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix74 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray73);
        double[] doubleArray75 = realMatrix68.operate(doubleArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray75);
        java.math.BigDecimal bigDecimal77 = bigMatrix76.getNorm();
        java.math.BigDecimal bigDecimal78 = bigDecimal52.subtract(bigDecimal77);
        int int79 = bigDecimal78.signum();
        java.math.BigInteger bigInteger80 = bigDecimal78.toBigInteger();
        java.math.BigDecimal bigDecimal82 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray85 = bigDecimal82.divideAndRemainder(bigDecimal84);
        java.math.BigDecimal bigDecimal87 = bigDecimal84.movePointLeft((-1));
        java.math.BigDecimal bigDecimal88 = bigDecimal78.max(bigDecimal84);
        int int89 = bigDecimal84.precision();
        java.math.BigDecimal bigDecimal90 = bigDecimal49.divide(bigDecimal84);
        boolean boolean91 = bigDecimal44.equals((java.lang.Object) bigDecimal49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal90", (bigDecimal1.compareTo(bigDecimal90) == 0) == bigDecimal1.equals(bigDecimal90));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        boolean boolean32 = bigMatrixImpl31.isSquare();
        int int33 = bigMatrixImpl31.getRowDimension();
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl31.getNorm();
        java.math.BigDecimal bigDecimal36 = bigDecimal34.movePointLeft((int) (short) 2805);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 0, (int) (short) -100);
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        java.lang.String str43 = bigDecimal42.toString();
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.stripTrailingZeros();
        int int47 = bigDecimal45.signum();
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal42.divideAndRemainder(bigDecimal45);
        java.math.BigDecimal bigDecimal50 = bigDecimal42.pow((int) 'a');
        java.math.BigInteger bigInteger51 = bigDecimal42.toBigIntegerExact();
        float float52 = bigDecimal42.floatValue();
        double[] doubleArray57 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray57);
        double[] doubleArray63 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix64 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray63);
        double[] doubleArray65 = realMatrix58.operate(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray65);
        java.math.BigDecimal bigDecimal67 = bigMatrix66.getNorm();
        java.math.BigDecimal bigDecimal68 = bigDecimal42.subtract(bigDecimal67);
        int int69 = bigDecimal68.signum();
        java.math.BigInteger bigInteger70 = bigDecimal68.toBigInteger();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal74 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal72.divideAndRemainder(bigDecimal74);
        java.math.BigDecimal bigDecimal77 = bigDecimal74.movePointLeft((-1));
        java.math.BigDecimal bigDecimal78 = bigDecimal68.max(bigDecimal74);
        int int79 = bigDecimal74.precision();
        java.math.BigDecimal bigDecimal80 = bigDecimal39.divide(bigDecimal74);
        java.math.BigDecimal bigDecimal81 = bigDecimal34.multiply(bigDecimal80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal39 and bigDecimal40", (bigDecimal39.compareTo(bigDecimal40) == 0) == bigDecimal39.equals(bigDecimal40));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointRight((-32));
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal7.min(bigDecimal10);
        java.math.BigInteger bigInteger13 = bigDecimal7.toBigInteger();
        java.math.BigInteger bigInteger14 = bigDecimal7.unscaledValue();
        int int15 = bigDecimal7.signum();
        java.math.BigDecimal bigDecimal16 = bigDecimal3.add(bigDecimal7);
        java.math.BigInteger bigInteger17 = bigDecimal16.toBigInteger();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (short) 10);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        java.lang.Class<?> wildcardClass4 = bigDecimalArray3.getClass();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.plus();
        java.math.BigDecimal bigDecimal28 = bigDecimal27.stripTrailingZeros();
        long long29 = bigDecimal28.longValue();
        java.lang.String[] strArray31 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray32 = new java.lang.String[][] { strArray31 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(strArray32);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(strArray32);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray32);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(strArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(strArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(strArray32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(strArray32);
        java.math.BigDecimal bigDecimal42 = bigMatrixImpl41.getTrace();
        boolean boolean43 = bigDecimal28.equals((java.lang.Object) bigMatrixImpl41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal42", (bigDecimal18.compareTo(bigDecimal42) == 0) == bigDecimal18.equals(bigDecimal42));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.setScale(5);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str8 = bigDecimal7.toEngineeringString();
        int int9 = bigDecimal5.compareTo(bigDecimal7);
        java.math.BigDecimal bigDecimal10 = bigDecimal1.multiply(bigDecimal5);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal((long) (byte) 0);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal12.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal16 = bigDecimal5.min(bigDecimal15);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal26.min(bigDecimal29);
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal[][] bigDecimalArray41 = new java.math.BigDecimal[][] { bigDecimalArray24, bigDecimalArray32, bigDecimalArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl44.getDataRef();
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl44.getNorm();
        boolean boolean47 = bigMatrixImpl44.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl44.copy();
        double[] doubleArray50 = bigMatrixImpl44.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl44.scalarMultiply(bigDecimal51);
        short short53 = bigDecimal51.shortValueExact();
        float float54 = bigDecimal51.floatValue();
        int int55 = bigDecimal5.compareTo(bigDecimal51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal12 and bigDecimal15", (bigDecimal12.compareTo(bigDecimal15) == 0) == bigDecimal12.equals(bigDecimal15));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        byte byte5 = bigDecimal4.byteValueExact();
        int int6 = bigDecimal4.precision();
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray19 = new double[][] { doubleArray9, doubleArray12, doubleArray15, doubleArray18 };
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray19);
        boolean boolean21 = bigMatrix20.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrix20.copy();
        java.math.BigDecimal bigDecimal23 = bigMatrix20.getNorm();
        java.math.BigDecimal bigDecimal25 = bigDecimal23.scaleByPowerOfTen((int) '#');
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigInteger bigInteger36 = bigDecimal27.toBigIntegerExact();
        float float37 = bigDecimal27.floatValue();
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        double[] doubleArray50 = realMatrix43.operate(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray50);
        java.math.BigDecimal bigDecimal52 = bigMatrix51.getNorm();
        java.math.BigDecimal bigDecimal53 = bigDecimal27.subtract(bigDecimal52);
        java.math.BigDecimal bigDecimal54 = bigDecimal25.min(bigDecimal27);
        java.math.BigDecimal bigDecimal55 = bigDecimal4.min(bigDecimal54);
        java.math.BigDecimal bigDecimal57 = bigDecimal54.setScale(64);
        byte byte58 = bigDecimal54.byteValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal57", (bigDecimal1.compareTo(bigDecimal57) == 0) == bigDecimal1.equals(bigDecimal57));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSingular();
        boolean boolean31 = bigMatrixImpl27.isSingular();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal36 = bigDecimal34.ulp();
        java.math.BigDecimal bigDecimal38 = bigDecimal36.scaleByPowerOfTen(100);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarMultiply(bigDecimal38);
        java.math.BigDecimal bigDecimal41 = bigDecimal38.scaleByPowerOfTen(2881);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal43.pow((int) 'a');
        java.lang.String str52 = bigDecimal43.toPlainString();
        java.math.BigDecimal bigDecimal53 = bigDecimal43.ulp();
        java.math.BigDecimal bigDecimal54 = bigDecimal41.add(bigDecimal43);
        java.math.BigInteger bigInteger55 = bigDecimal54.toBigIntegerExact();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(bigInteger55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal41 and bigDecimal54", (bigDecimal41.compareTo(bigDecimal54) == 0) == bigDecimal41.equals(bigDecimal54));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("10");
        int int2 = bigDecimal1.signum();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal4.divideAndRemainder(bigDecimal6);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        double[] doubleArray10 = bigMatrixImpl8.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger13 = bigDecimal12.unscaledValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal12.stripTrailingZeros();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        long long18 = bigDecimal16.longValue();
        long long19 = bigDecimal16.longValueExact();
        short short20 = bigDecimal16.shortValueExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal12.min(bigDecimal16);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl8.scalarMultiply(bigDecimal12);
        java.math.BigDecimal bigDecimal23 = bigDecimal1.divideToIntegralValue(bigDecimal12);
        int int24 = bigDecimal1.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal12 and bigDecimal14", (bigDecimal12.compareTo(bigDecimal14) == 0) == bigDecimal12.equals(bigDecimal14));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        double[][] doubleArray11 = bigMatrix10.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray11);
        java.math.BigDecimal bigDecimal13 = bigMatrixImpl12.getNorm();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal13.compareTo(bigDecimal15);
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal21 = bigDecimal18.setScale((int) (short) 100, (int) (byte) 1);
        long long22 = bigDecimal18.longValueExact();
        java.math.BigDecimal bigDecimal25 = bigDecimal18.setScale((int) (short) 0, 0);
        java.math.BigDecimal bigDecimal26 = bigDecimal13.divide(bigDecimal18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal21", (bigDecimal4.compareTo(bigDecimal21) == 0) == bigDecimal4.equals(bigDecimal21));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(100);
        java.math.BigInteger bigInteger5 = bigDecimal4.unscaledValue();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(bigInteger5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal4", (bigDecimal1.compareTo(bigDecimal4) == 0) == bigDecimal1.equals(bigDecimal4));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl14.copy();
        double[][] doubleArray19 = bigMatrixImpl14.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal21 = bigDecimal20.abs();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        long long25 = bigDecimal23.longValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.ulp();
        double double27 = bigDecimal23.doubleValue();
        short short28 = bigDecimal23.shortValueExact();
        java.math.BigDecimal bigDecimal29 = bigDecimal23.negate();
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray42 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray42);
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.min(bigDecimal51);
        java.math.BigInteger bigInteger54 = bigDecimal48.toBigInteger();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(bigInteger54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrix46.scalarAdd(bigDecimal55);
        java.math.BigDecimal bigDecimal58 = bigDecimal55.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger59 = bigDecimal58.toBigIntegerExact();
        java.math.BigInteger bigInteger60 = bigDecimal58.unscaledValue();
        int int61 = bigDecimal58.precision();
        java.math.BigDecimal bigDecimal62 = bigDecimal29.min(bigDecimal58);
        int int63 = bigDecimal20.compareTo(bigDecimal62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal58", (bigDecimal23.compareTo(bigDecimal58) == 0) == bigDecimal23.equals(bigDecimal58));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        java.math.BigInteger bigInteger51 = bigDecimal26.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(bigInteger51, 3);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal((long) (byte) 0);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal53.multiply(bigDecimal55);
        java.math.BigDecimal bigDecimal59 = bigDecimal57.movePointLeft((int) (byte) 11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal53", (bigDecimal23.compareTo(bigDecimal53) == 0) == bigDecimal23.equals(bigDecimal53));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.stripTrailingZeros();
        int int9 = bigDecimal8.signum();
        int int10 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger14 = bigDecimal13.unscaledValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal11.add(bigDecimal13);
        java.math.BigDecimal bigDecimal16 = bigDecimal8.max(bigDecimal13);
        java.math.BigDecimal bigDecimal19 = bigDecimal8.setScale(4, (int) (byte) 0);
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal[][] bigDecimalArray44 = new java.math.BigDecimal[][] { bigDecimalArray27, bigDecimalArray35, bigDecimalArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray44);
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl47.getDataRef();
        java.math.BigDecimal bigDecimal49 = bigMatrixImpl47.getNorm();
        boolean boolean50 = bigMatrixImpl47.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl47.copy();
        double[] doubleArray53 = bigMatrixImpl47.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl47.scalarMultiply(bigDecimal54);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl47.scalarAdd(bigDecimal58);
        java.math.BigDecimal bigDecimal61 = bigDecimal58.scaleByPowerOfTen(7);
        java.math.BigDecimal bigDecimal62 = bigDecimal8.divide(bigDecimal58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal19", (bigDecimal1.compareTo(bigDecimal19) == 0) == bigDecimal1.equals(bigDecimal19));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        long long35 = bigDecimal33.longValue();
        long long36 = bigDecimal33.longValueExact();
        int int37 = bigDecimal33.precision();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal33.add(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal66 = bigDecimal39.multiply(bigDecimal53);
        java.math.BigDecimal bigDecimal67 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((int) (byte) 10);
        java.math.BigDecimal bigDecimal70 = bigDecimal39.add(bigDecimal69);
        java.math.BigDecimal bigDecimal71 = bigDecimal30.add(bigDecimal69);
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((double) 0.0f);
        java.math.BigDecimal bigDecimal74 = bigDecimal71.subtract(bigDecimal73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        java.math.BigInteger bigInteger51 = bigDecimal26.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(bigInteger51, 3);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(bigInteger51, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal53", (bigDecimal23.compareTo(bigDecimal53) == 0) == bigDecimal23.equals(bigDecimal53));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 400, 97);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.getRowMatrix((int) (byte) 110);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl2.getColumnMatrix(64);
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrix4 and bigMatrix4", bigMatrix4.equals(bigMatrix4) ? bigMatrix4.hashCode() == bigMatrix4.hashCode() : true);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger11 = bigDecimal10.unscaledValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal8.add(bigDecimal10);
        java.math.BigInteger bigInteger13 = bigDecimal10.toBigInteger();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(bigInteger13, 32);
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger18 = bigDecimal17.unscaledValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.stripTrailingZeros();
        boolean boolean20 = bigDecimal15.equals((java.lang.Object) bigDecimal19);
        java.math.BigDecimal bigDecimal21 = bigDecimal4.add(bigDecimal19);
        java.math.BigDecimal bigDecimal22 = bigDecimal21.negate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal10 and bigDecimal19", (bigDecimal10.compareTo(bigDecimal19) == 0) == bigDecimal10.equals(bigDecimal19));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (short) 10);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray3);
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        int int21 = bigMatrixImpl14.getRoundingMode();
        int int22 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal25.divideAndRemainder(bigDecimal27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        double[] doubleArray31 = bigMatrixImpl29.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger34 = bigDecimal33.unscaledValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal33.stripTrailingZeros();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        long long39 = bigDecimal37.longValue();
        long long40 = bigDecimal37.longValueExact();
        short short41 = bigDecimal37.shortValueExact();
        java.math.BigDecimal bigDecimal42 = bigDecimal33.min(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl29.scalarMultiply(bigDecimal33);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl14.scalarAdd(bigDecimal33);
        int int45 = bigMatrixImpl14.getRowDimension();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal33 and bigDecimal35", (bigDecimal33.compareTo(bigDecimal35) == 0) == bigDecimal33.equals(bigDecimal35));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal13 = bigDecimal11.setScale(5);
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str16 = bigDecimal15.toEngineeringString();
        int int17 = bigDecimal13.compareTo(bigDecimal15);
        java.math.BigDecimal bigDecimal18 = bigDecimal9.multiply(bigDecimal13);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal((long) (byte) 0);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal20.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal24 = bigDecimal13.min(bigDecimal23);
        java.math.BigDecimal bigDecimal25 = bigDecimal1.subtract(bigDecimal23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal23", (bigDecimal4.compareTo(bigDecimal23) == 0) == bigDecimal4.equals(bigDecimal23));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (byte) 1);
        java.math.BigDecimal bigDecimal34 = bigDecimal30.divideToIntegralValue(bigDecimal33);
        java.math.BigDecimal bigDecimal37 = bigDecimal34.setScale((int) (short) 4, (int) (byte) 6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigInteger bigInteger14 = bigDecimal13.toBigIntegerExact();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(bigInteger14, (-100));
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(bigInteger14, (int) (byte) -100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal16", (bigDecimal1.compareTo(bigDecimal16) == 0) == bigDecimal1.equals(bigDecimal16));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger6 = bigDecimal5.unscaledValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal3.add(bigDecimal5);
        java.math.BigDecimal bigDecimal9 = bigDecimal5.setScale(100);
        long long10 = bigDecimal9.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.divideToIntegralValue(bigDecimal9);
        short short12 = bigDecimal11.shortValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal9", (bigDecimal1.compareTo(bigDecimal9) == 0) == bigDecimal1.equals(bigDecimal9));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        short short42 = bigDecimal40.shortValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.abs();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.movePointLeft((int) '4');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.plus();
        byte byte47 = bigDecimal45.byteValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.stripTrailingZeros();
        int int9 = bigDecimal8.signum();
        int int10 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal13 = bigDecimal12.negate();
        int int14 = bigDecimal13.scale();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal18 = bigDecimal16.setScale((int) '4');
        java.math.BigDecimal bigDecimal19 = bigDecimal13.multiply(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal8.divide(bigDecimal16);
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        long long24 = bigDecimal22.longValue();
        long long25 = bigDecimal22.longValueExact();
        int int26 = bigDecimal22.precision();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        long long30 = bigDecimal28.longValue();
        long long31 = bigDecimal28.longValueExact();
        java.math.BigDecimal bigDecimal32 = bigDecimal22.add(bigDecimal28);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        java.lang.String str35 = bigDecimal34.toString();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        int int39 = bigDecimal37.signum();
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal34.divideAndRemainder(bigDecimal37);
        java.math.BigDecimal bigDecimal42 = bigDecimal34.pow((int) 'a');
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigInteger bigInteger53 = bigDecimal44.toBigIntegerExact();
        java.math.BigDecimal bigDecimal54 = bigDecimal42.add(bigDecimal44);
        java.math.BigDecimal bigDecimal55 = bigDecimal28.multiply(bigDecimal42);
        java.math.BigDecimal bigDecimal56 = bigDecimal28.ulp();
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[] doubleArray65 = new double[] { 1.0d, 100.0f };
        double[] doubleArray68 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray69 = new double[][] { doubleArray59, doubleArray62, doubleArray65, doubleArray68 };
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray69);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray69);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray69);
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(0.0d);
        int int76 = bigDecimal75.intValue();
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        int int79 = bigDecimal78.intValue();
        java.math.BigDecimal bigDecimal80 = bigDecimal75.min(bigDecimal78);
        java.math.BigInteger bigInteger81 = bigDecimal75.toBigInteger();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(bigInteger81);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrix73.scalarAdd(bigDecimal82);
        java.math.BigDecimal bigDecimal84 = bigDecimal28.min(bigDecimal82);
        java.math.BigDecimal bigDecimal85 = bigDecimal8.subtract(bigDecimal84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal16 and bigDecimal18", (bigDecimal16.compareTo(bigDecimal18) == 0) == bigDecimal16.equals(bigDecimal18));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal56 = bigDecimal17.stripTrailingZeros();
        java.math.BigDecimal bigDecimal57 = bigDecimal56.negate();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        java.lang.String str70 = bigDecimal69.toString();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        int int74 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal69.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal77 = bigDecimal69.pow((int) 'a');
        java.math.BigInteger bigInteger78 = bigDecimal69.toBigIntegerExact();
        java.math.BigDecimal bigDecimal79 = bigDecimal67.add(bigDecimal69);
        java.math.BigInteger bigInteger80 = bigDecimal79.unscaledValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(bigInteger80, 100);
        java.math.BigDecimal bigDecimal83 = bigDecimal82.ulp();
        java.math.BigDecimal bigDecimal84 = bigDecimal57.min(bigDecimal82);
        java.math.BigDecimal bigDecimal86 = new java.math.BigDecimal(0.0d);
        int int87 = bigDecimal86.intValue();
        java.math.BigDecimal bigDecimal89 = new java.math.BigDecimal(0.0d);
        int int90 = bigDecimal89.intValue();
        java.math.BigDecimal bigDecimal91 = bigDecimal86.min(bigDecimal89);
        java.math.BigInteger bigInteger92 = bigDecimal86.toBigInteger();
        java.math.BigInteger bigInteger93 = bigDecimal86.unscaledValue();
        java.math.BigDecimal bigDecimal94 = new java.math.BigDecimal(bigInteger93);
        java.math.BigDecimal bigDecimal96 = new java.math.BigDecimal(bigInteger93, (int) ' ');
        java.math.BigDecimal bigDecimal97 = bigDecimal57.subtract(bigDecimal96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal82", (bigDecimal17.compareTo(bigDecimal82) == 0) == bigDecimal17.equals(bigDecimal82));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigInteger bigInteger15 = bigDecimal9.toBigInteger();
        int int16 = bigDecimal9.precision();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal19 = bigDecimal9.subtract(bigDecimal18);
        java.math.BigDecimal bigDecimal20 = bigDecimal18.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl7.scalarAdd(bigDecimal18);
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl7.getTrace();
        boolean boolean23 = bigMatrixImpl7.isSingular();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal9 and bigDecimal22", (bigDecimal9.compareTo(bigDecimal22) == 0) == bigDecimal9.equals(bigDecimal22));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal12 = bigMatrixImpl11.getTrace();
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray25 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigDecimal29.signum();
        java.math.BigDecimal bigDecimal32 = bigDecimal29.movePointLeft((int) (byte) 97);
        java.lang.String str33 = bigDecimal32.toString();
        java.math.BigDecimal bigDecimal34 = bigDecimal12.divide(bigDecimal32);
        java.lang.String[] strArray36 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray36);
        boolean boolean43 = bigDecimal32.equals((java.lang.Object) strArray36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal12 and bigDecimal34", (bigDecimal12.compareTo(bigDecimal34) == 0) == bigDecimal12.equals(bigDecimal34));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(4);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 10);
        int int4 = bigDecimal3.scale();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.divideToIntegralValue(bigDecimal3);
        java.math.MathContext mathContext7 = null;
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal((double) (byte) 0, mathContext7);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal10.min(bigDecimal13);
        java.math.BigInteger bigInteger16 = bigDecimal10.toBigInteger();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(bigInteger16);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(bigInteger16);
        java.math.BigDecimal bigDecimal19 = bigDecimal8.add(bigDecimal18);
        java.math.BigDecimal bigDecimal20 = bigDecimal18.ulp();
        java.math.BigDecimal bigDecimal21 = bigDecimal3.subtract(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        java.lang.String str25 = bigDecimal23.toPlainString();
        java.math.BigDecimal bigDecimal27 = bigDecimal23.movePointRight(64);
        java.math.BigDecimal bigDecimal28 = bigDecimal27.stripTrailingZeros();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal18.divideAndRemainder(bigDecimal27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal27 and bigDecimal28", (bigDecimal27.compareTo(bigDecimal28) == 0) == bigDecimal27.equals(bigDecimal28));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray39, bigDecimalArray47, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray56);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal65 = bigDecimal60.min(bigDecimal63);
        java.math.BigInteger bigInteger66 = bigDecimal60.toBigInteger();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(bigInteger66);
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal70 = bigDecimal69.stripTrailingZeros();
        float float71 = bigDecimal69.floatValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.multiply(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrix58.scalarAdd(bigDecimal72);
        java.math.BigInteger bigInteger74 = bigDecimal72.toBigInteger();
        boolean boolean75 = bigMatrixImpl31.equals((java.lang.Object) bigDecimal72);
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.valueOf((long) 100, 0);
        java.math.BigDecimal bigDecimal80 = bigDecimal78.setScale((int) (byte) -1);
        java.math.BigDecimal bigDecimal81 = bigDecimal72.max(bigDecimal80);
        float float82 = bigDecimal81.floatValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal78 and bigDecimal81", (bigDecimal78.compareTo(bigDecimal81) == 0) == bigDecimal78.equals(bigDecimal81));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.stripTrailingZeros();
        int int9 = bigDecimal8.signum();
        int int10 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal13 = bigDecimal12.negate();
        int int14 = bigDecimal13.scale();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal18 = bigDecimal16.setScale((int) '4');
        java.math.BigDecimal bigDecimal19 = bigDecimal13.multiply(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal8.divide(bigDecimal16);
        int int21 = bigDecimal8.intValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal16 and bigDecimal18", (bigDecimal16.compareTo(bigDecimal18) == 0) == bigDecimal16.equals(bigDecimal18));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        float float5 = bigDecimal2.floatValue();
        java.lang.String str6 = bigDecimal2.toEngineeringString();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        long long10 = bigDecimal8.longValue();
        long long11 = bigDecimal8.longValueExact();
        int int12 = bigDecimal8.precision();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        long long16 = bigDecimal14.longValue();
        long long17 = bigDecimal14.longValueExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal8.add(bigDecimal14);
        java.math.BigDecimal bigDecimal20 = bigDecimal14.pow(3);
        java.math.BigInteger bigInteger21 = bigDecimal20.toBigIntegerExact();
        java.math.BigDecimal bigDecimal22 = bigDecimal20.stripTrailingZeros();
        java.math.BigDecimal bigDecimal23 = bigDecimal2.add(bigDecimal20);
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.min(bigDecimal28);
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal[][] bigDecimalArray48 = new java.math.BigDecimal[][] { bigDecimalArray31, bigDecimalArray39, bigDecimalArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        java.math.BigDecimal[][] bigDecimalArray52 = bigMatrixImpl51.getDataRef();
        java.math.BigDecimal bigDecimal53 = bigMatrixImpl51.getNorm();
        boolean boolean54 = bigMatrixImpl51.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl51.copy();
        double[] doubleArray57 = bigMatrixImpl51.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl51.scalarMultiply(bigDecimal58);
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl51.scalarAdd(bigDecimal62);
        java.math.BigDecimal bigDecimal65 = bigDecimal62.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        long long69 = bigDecimal67.longValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal62.min(bigDecimal67);
        java.math.BigDecimal bigDecimal71 = bigDecimal20.multiply(bigDecimal67);
        java.math.BigDecimal bigDecimal73 = bigDecimal20.setScale(5);
        int int74 = bigDecimal20.precision();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal8 and bigDecimal73", (bigDecimal8.compareTo(bigDecimal73) == 0) == bigDecimal8.equals(bigDecimal73));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) ' ', (int) (short) 400);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[][] doubleArray3 = bigMatrixImpl2.getDataAsDoubleArray();
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        int int10 = bigDecimal1.intValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal13 = bigDecimal1.setScale((int) (byte) 11);
        java.math.BigDecimal bigDecimal15 = bigDecimal13.setScale((int) (short) -2805);
        int int16 = bigDecimal13.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal15", (bigDecimal1.compareTo(bigDecimal15) == 0) == bigDecimal1.equals(bigDecimal15));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(0.0d);
        int int3 = bigDecimal2.intValue();
        long long4 = bigDecimal2.longValue();
        long long5 = bigDecimal2.longValueExact();
        int int6 = bigDecimal2.precision();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        long long10 = bigDecimal8.longValue();
        long long11 = bigDecimal8.longValueExact();
        java.math.BigDecimal bigDecimal12 = bigDecimal2.add(bigDecimal8);
        java.math.BigDecimal bigDecimal14 = bigDecimal8.pow(3);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        float float18 = bigDecimal16.floatValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal16.ulp();
        java.math.BigDecimal bigDecimal20 = bigDecimal8.subtract(bigDecimal19);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl0.scalarMultiply(bigDecimal20);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal8.negate();
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal14.setScale((int) (short) 10, 0);
        java.math.BigDecimal bigDecimal20 = bigDecimal14.setScale(7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal18", (bigDecimal1.compareTo(bigDecimal18) == 0) == bigDecimal1.equals(bigDecimal18));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (byte) 1);
        java.math.BigDecimal bigDecimal34 = bigDecimal30.divideToIntegralValue(bigDecimal33);
        float float35 = bigDecimal33.floatValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        int int21 = bigMatrixImpl14.getRoundingMode();
        int int22 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal25.divideAndRemainder(bigDecimal27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        double[] doubleArray31 = bigMatrixImpl29.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger34 = bigDecimal33.unscaledValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal33.stripTrailingZeros();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        long long39 = bigDecimal37.longValue();
        long long40 = bigDecimal37.longValueExact();
        short short41 = bigDecimal37.shortValueExact();
        java.math.BigDecimal bigDecimal42 = bigDecimal33.min(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl29.scalarMultiply(bigDecimal33);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl14.scalarAdd(bigDecimal33);
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl14.getNorm();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal33 and bigDecimal35", (bigDecimal33.compareTo(bigDecimal35) == 0) == bigDecimal33.equals(bigDecimal35));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.plus();
        java.math.BigDecimal bigDecimal29 = bigDecimal25.movePointLeft((int) 'a');
        java.math.BigInteger bigInteger30 = bigDecimal29.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(bigInteger30, (int) (byte) 110);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal29", (bigDecimal18.compareTo(bigDecimal29) == 0) == bigDecimal18.equals(bigDecimal29));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf(0.0d);
        long long20 = bigDecimal19.longValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.scalarMultiply(bigDecimal19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int26 = bigDecimal25.intValue();
        long long27 = bigDecimal25.longValue();
        java.math.BigInteger bigInteger28 = bigDecimal25.unscaledValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal22.min(bigDecimal25);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal31.toBigInteger();
        int int38 = bigDecimal31.precision();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal40.divideAndRemainder(bigDecimal42);
        java.math.BigDecimal bigDecimal44 = bigDecimal31.multiply(bigDecimal42);
        java.math.BigInteger bigInteger45 = bigDecimal42.unscaledValue();
        int int46 = bigDecimal25.compareTo(bigDecimal42);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrix21.scalarMultiply(bigDecimal42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal19 and bigDecimal31", (bigDecimal19.compareTo(bigDecimal31) == 0) == bigDecimal19.equals(bigDecimal31));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigInteger bigInteger10 = bigDecimal1.toBigIntegerExact();
        float float11 = bigDecimal1.floatValue();
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double[] doubleArray22 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        double[] doubleArray24 = realMatrix17.operate(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray24);
        java.math.BigDecimal bigDecimal26 = bigMatrix25.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal1.subtract(bigDecimal26);
        int int28 = bigDecimal27.signum();
        java.math.BigInteger bigInteger29 = bigDecimal27.toBigInteger();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal31.divideAndRemainder(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = bigDecimal33.movePointLeft((-1));
        java.math.BigDecimal bigDecimal37 = bigDecimal27.max(bigDecimal33);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        java.lang.String str40 = bigDecimal39.toString();
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal43 = bigDecimal42.stripTrailingZeros();
        int int44 = bigDecimal42.signum();
        java.math.BigDecimal[] bigDecimalArray45 = bigDecimal39.divideAndRemainder(bigDecimal42);
        java.math.BigDecimal bigDecimal47 = bigDecimal39.pow((int) 'a');
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        java.lang.String str50 = bigDecimal49.toString();
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal53 = bigDecimal52.stripTrailingZeros();
        int int54 = bigDecimal52.signum();
        java.math.BigDecimal[] bigDecimalArray55 = bigDecimal49.divideAndRemainder(bigDecimal52);
        java.math.BigDecimal bigDecimal57 = bigDecimal49.pow((int) 'a');
        java.math.BigInteger bigInteger58 = bigDecimal49.toBigIntegerExact();
        java.math.BigDecimal bigDecimal59 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal61 = bigDecimal59.pow((int) (byte) 97);
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger64 = bigDecimal63.unscaledValue();
        short short65 = bigDecimal63.shortValueExact();
        java.math.BigDecimal bigDecimal66 = bigDecimal61.divide(bigDecimal63);
        java.math.BigDecimal[] bigDecimalArray67 = bigDecimal37.divideAndRemainder(bigDecimal63);
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal73 = bigDecimal71.setScale(5);
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str76 = bigDecimal75.toEngineeringString();
        int int77 = bigDecimal73.compareTo(bigDecimal75);
        java.math.BigDecimal bigDecimal78 = bigDecimal69.multiply(bigDecimal73);
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal((long) (byte) 0);
        int int81 = bigDecimal80.intValue();
        java.math.BigDecimal bigDecimal83 = bigDecimal80.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal84 = bigDecimal73.min(bigDecimal83);
        int int85 = bigDecimal63.compareTo(bigDecimal84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal84", (bigDecimal1.compareTo(bigDecimal84) == 0) == bigDecimal1.equals(bigDecimal84));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.min(bigDecimal7);
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal("97");
        java.math.BigDecimal bigDecimal19 = bigDecimal1.divide(bigDecimal16, (int) (byte) -54, 0);
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal((long) (short) -100);
        byte byte22 = bigDecimal21.byteValueExact();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigInteger bigInteger47 = bigDecimal41.toBigInteger();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(bigInteger47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrix39.scalarAdd(bigDecimal48);
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal56 = bigDecimal51.min(bigDecimal54);
        java.math.BigInteger bigInteger57 = bigDecimal51.toBigInteger();
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal60 = bigDecimal59.negate();
        java.math.BigDecimal bigDecimal61 = bigDecimal51.add(bigDecimal59);
        java.math.BigDecimal bigDecimal62 = bigDecimal48.divideToIntegralValue(bigDecimal61);
        java.math.BigDecimal bigDecimal63 = bigDecimal21.subtract(bigDecimal61);
        java.math.BigDecimal bigDecimal64 = bigDecimal16.multiply(bigDecimal63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal19", (bigDecimal1.compareTo(bigDecimal19) == 0) == bigDecimal1.equals(bigDecimal19));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarAdd(bigDecimal38);
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        java.math.BigDecimal bigDecimal43 = bigDecimal38.divideToIntegralValue(bigDecimal42);
        float float44 = bigDecimal42.floatValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal43", (bigDecimal1.compareTo(bigDecimal43) == 0) == bigDecimal1.equals(bigDecimal43));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        java.math.BigInteger bigInteger51 = bigDecimal26.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(bigInteger51, 3);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal((long) (byte) 0);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal53.multiply(bigDecimal55);
        byte byte58 = bigDecimal53.byteValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal57", (bigDecimal23.compareTo(bigDecimal57) == 0) == bigDecimal23.equals(bigDecimal57));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        int int42 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.movePointLeft((int) (byte) 100);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        float float49 = bigDecimal47.floatValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal47.ulp();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        java.lang.String str53 = bigDecimal52.toString();
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal56 = bigDecimal55.stripTrailingZeros();
        int int57 = bigDecimal55.signum();
        java.math.BigDecimal[] bigDecimalArray58 = bigDecimal52.divideAndRemainder(bigDecimal55);
        java.math.BigDecimal bigDecimal60 = bigDecimal52.pow((int) 'a');
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        java.lang.String str63 = bigDecimal62.toString();
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal66 = bigDecimal65.stripTrailingZeros();
        int int67 = bigDecimal65.signum();
        java.math.BigDecimal[] bigDecimalArray68 = bigDecimal62.divideAndRemainder(bigDecimal65);
        java.math.BigDecimal bigDecimal70 = bigDecimal62.pow((int) 'a');
        java.math.BigInteger bigInteger71 = bigDecimal62.toBigIntegerExact();
        java.math.BigDecimal bigDecimal72 = bigDecimal60.add(bigDecimal62);
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger76 = bigDecimal75.unscaledValue();
        java.math.BigDecimal bigDecimal77 = bigDecimal73.add(bigDecimal75);
        java.math.BigDecimal bigDecimal78 = bigDecimal62.multiply(bigDecimal73);
        java.math.BigDecimal bigDecimal79 = bigDecimal50.divide(bigDecimal73);
        java.math.BigDecimal[] bigDecimalArray80 = bigDecimal43.divideAndRemainder(bigDecimal73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigInteger bigInteger10 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(bigInteger10, 3);
        java.math.BigDecimal bigDecimal13 = bigDecimal12.ulp();
        java.math.BigDecimal bigDecimal15 = bigDecimal13.scaleByPowerOfTen(2881);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal12", (bigDecimal1.compareTo(bigDecimal12) == 0) == bigDecimal1.equals(bigDecimal12));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        float float3 = bigDecimal1.floatValue();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        int int20 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl18.scalarMultiply(bigDecimal22);
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl18.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal1.remainder(bigDecimal26);
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger30 = bigDecimal29.unscaledValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal29.stripTrailingZeros();
        java.lang.String str32 = bigDecimal31.toEngineeringString();
        java.math.MathContext mathContext34 = null;
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal((double) (byte) 0, mathContext34);
        java.math.BigDecimal bigDecimal36 = bigDecimal31.max(bigDecimal35);
        java.math.BigDecimal bigDecimal38 = bigDecimal27.divide(bigDecimal36, 5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal29 and bigDecimal36", (bigDecimal29.compareTo(bigDecimal36) == 0) == bigDecimal29.equals(bigDecimal36));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        bigMatrixImpl27.setScale((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl27.copy();
        java.lang.String[] strArray32 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray33 = new java.lang.String[][] { strArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(strArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(strArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(strArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(strArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(strArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(strArray33);
        java.math.BigDecimal bigDecimal43 = bigMatrixImpl42.getTrace();
        java.math.BigDecimal bigDecimal44 = bigMatrixImpl42.getTrace();
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl27.scalarAdd(bigDecimal44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal44", (bigDecimal1.compareTo(bigDecimal44) == 0) == bigDecimal1.equals(bigDecimal44));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal31 = bigDecimal30.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.scalarMultiply(bigDecimal30);
        java.math.BigInteger bigInteger33 = bigDecimal30.unscaledValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal((long) (byte) -100);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.subtract(bigDecimal35);
        java.math.BigInteger bigInteger37 = bigDecimal30.toBigInteger();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(bigInteger37);
        java.lang.String[] strArray40 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray41 = new java.lang.String[][] { strArray40 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(strArray41);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(strArray41);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray41);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(strArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(strArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(strArray41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(strArray41);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl50.getTrace();
        double[] doubleArray54 = new double[] { 1.0d, 100.0f };
        double[] doubleArray57 = new double[] { 1.0d, 100.0f };
        double[] doubleArray60 = new double[] { 1.0d, 100.0f };
        double[] doubleArray63 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray64 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl66.transpose();
        java.math.BigDecimal bigDecimal68 = bigMatrixImpl66.getNorm();
        int int69 = bigDecimal68.signum();
        java.math.BigDecimal bigDecimal71 = bigDecimal68.movePointLeft((int) (byte) 97);
        java.lang.String str72 = bigDecimal71.toString();
        java.math.BigDecimal bigDecimal73 = bigDecimal51.divide(bigDecimal71);
        java.math.BigDecimal bigDecimal74 = bigDecimal51.ulp();
        int int75 = bigDecimal38.compareTo(bigDecimal74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal51", (bigDecimal1.compareTo(bigDecimal51) == 0) == bigDecimal1.equals(bigDecimal51));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigInteger bigInteger22 = bigDecimal21.unscaledValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(bigInteger22, 100);
        java.math.BigInteger bigInteger25 = bigDecimal24.toBigInteger();
        java.math.BigDecimal bigDecimal27 = bigDecimal24.scaleByPowerOfTen(5);
        java.math.BigDecimal bigDecimal29 = bigDecimal24.movePointRight(32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal27", (bigDecimal1.compareTo(bigDecimal27) == 0) == bigDecimal1.equals(bigDecimal27));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray63 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal74 = bigDecimal69.min(bigDecimal72);
        java.math.BigInteger bigInteger75 = bigDecimal69.toBigInteger();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(bigInteger75);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrix67.scalarAdd(bigDecimal76);
        java.math.BigDecimal bigDecimal79 = bigDecimal76.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger80 = bigDecimal79.toBigIntegerExact();
        java.math.BigInteger bigInteger81 = bigDecimal79.unscaledValue();
        int int82 = bigDecimal79.precision();
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl14.scalarMultiply(bigDecimal79);
        bigMatrixImpl14.setRoundingMode((int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal79", (bigDecimal23.compareTo(bigDecimal79) == 0) == bigDecimal23.equals(bigDecimal79));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl29.getNorm();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.remainder(bigDecimal32);
        long long36 = bigDecimal30.longValueExact();
        java.lang.String str37 = bigDecimal30.toString();
        java.math.BigDecimal bigDecimal38 = bigDecimal30.abs();
        long long39 = bigDecimal30.longValueExact();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal45 = bigDecimal43.setScale(5);
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str48 = bigDecimal47.toEngineeringString();
        int int49 = bigDecimal45.compareTo(bigDecimal47);
        java.math.BigDecimal bigDecimal50 = bigDecimal41.multiply(bigDecimal45);
        java.math.BigDecimal bigDecimal51 = bigDecimal45.stripTrailingZeros();
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((-1L), (int) (byte) 1);
        java.math.BigDecimal bigDecimal56 = bigDecimal54.pow(2);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        java.math.BigDecimal bigDecimal61 = bigDecimal59.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal62 = bigDecimal56.add(bigDecimal59);
        java.math.BigInteger bigInteger63 = bigDecimal59.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(bigInteger63, 7);
        java.math.BigDecimal bigDecimal66 = bigDecimal45.divideToIntegralValue(bigDecimal65);
        int int67 = bigDecimal30.compareTo(bigDecimal65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal32 and bigDecimal45", (bigDecimal32.compareTo(bigDecimal45) == 0) == bigDecimal32.equals(bigDecimal45));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        long long35 = bigDecimal33.longValue();
        long long36 = bigDecimal33.longValueExact();
        int int37 = bigDecimal33.precision();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal33.add(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal66 = bigDecimal39.multiply(bigDecimal53);
        java.math.BigDecimal bigDecimal67 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((int) (byte) 10);
        java.math.BigDecimal bigDecimal70 = bigDecimal39.add(bigDecimal69);
        java.math.BigDecimal bigDecimal71 = bigDecimal30.add(bigDecimal69);
        java.math.BigDecimal bigDecimal73 = bigDecimal71.movePointLeft(6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigDecimal bigDecimal6 = bigDecimal2.setScale(100);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal9 = bigDecimal6.movePointRight((int) 'a');
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray22 = new double[][] { doubleArray12, doubleArray15, doubleArray18, doubleArray21 };
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl24.transpose();
        int int26 = bigMatrixImpl24.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl24.getDataRef();
        bigMatrixImpl24.setScale((int) (short) 100);
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl24.getNorm();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal32.ulp();
        java.math.BigDecimal bigDecimal36 = bigDecimal35.ulp();
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        int int53 = bigMatrixImpl51.getColumnDimension();
        java.math.BigDecimal bigDecimal54 = bigMatrixImpl51.getNorm();
        java.math.BigDecimal bigDecimal55 = bigDecimal36.subtract(bigDecimal54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl24.scalarAdd(bigDecimal54);
        java.math.BigDecimal bigDecimal57 = bigDecimal9.add(bigDecimal54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal6", (bigDecimal2.compareTo(bigDecimal6) == 0) == bigDecimal2.equals(bigDecimal6));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 110, (int) (byte) 100);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal3 = bigMatrixImpl2.getNorm();
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(2805.0d);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.min(bigDecimal7);
        java.math.BigInteger bigInteger10 = bigDecimal4.toBigInteger();
        int int11 = bigDecimal4.precision();
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray16 = bigDecimal13.divideAndRemainder(bigDecimal15);
        java.math.BigDecimal bigDecimal17 = bigDecimal4.multiply(bigDecimal15);
        java.math.BigDecimal bigDecimal18 = bigDecimal2.max(bigDecimal15);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal[][] bigDecimalArray43 = new java.math.BigDecimal[][] { bigDecimalArray26, bigDecimalArray34, bigDecimalArray42 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray43);
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl46.getDataRef();
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl46.getNorm();
        boolean boolean49 = bigMatrixImpl46.isSingular();
        boolean boolean50 = bigMatrixImpl46.isSingular();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger54 = bigDecimal53.toBigInteger();
        java.math.BigDecimal bigDecimal55 = bigDecimal53.ulp();
        java.math.BigDecimal bigDecimal57 = bigDecimal55.scaleByPowerOfTen(100);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl46.scalarMultiply(bigDecimal57);
        java.math.BigDecimal bigDecimal59 = bigMatrixImpl46.getNorm();
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[] doubleArray65 = new double[] { 1.0d, 100.0f };
        double[] doubleArray68 = new double[] { 1.0d, 100.0f };
        double[] doubleArray71 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray72 = new double[][] { doubleArray62, doubleArray65, doubleArray68, doubleArray71 };
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray72);
        boolean boolean74 = bigMatrix73.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrix73.copy();
        java.math.BigDecimal bigDecimal76 = bigMatrix73.getNorm();
        java.math.BigDecimal bigDecimal77 = bigDecimal76.abs();
        java.math.BigDecimal bigDecimal78 = bigDecimal76.stripTrailingZeros();
        java.math.BigDecimal bigDecimal80 = bigDecimal78.scaleByPowerOfTen(64);
        java.math.BigDecimal bigDecimal81 = bigDecimal59.divideToIntegralValue(bigDecimal78);
        java.math.BigDecimal bigDecimal82 = bigDecimal15.multiply(bigDecimal78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal81", (bigDecimal4.compareTo(bigDecimal81) == 0) == bigDecimal4.equals(bigDecimal81));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigInteger bigInteger56 = bigDecimal17.toBigInteger();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(bigInteger56, 2);
        java.lang.String str59 = bigDecimal58.toPlainString();
        java.math.BigInteger bigInteger60 = bigDecimal58.toBigIntegerExact();
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(bigInteger60, (int) (byte) -100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal58", (bigDecimal17.compareTo(bigDecimal58) == 0) == bigDecimal17.equals(bigDecimal58));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int4 = bigMatrixImpl3.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray5 = bigMatrixImpl3.getData();
        int int6 = bigMatrixImpl3.getRoundingMode();
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl3.getTrace();
        int int8 = bigMatrixImpl3.getColumnDimension();
        java.lang.String str9 = bigMatrixImpl3.toString();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray38);
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl39.getNorm();
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal43 = bigDecimal42.stripTrailingZeros();
        float float44 = bigDecimal42.floatValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.remainder(bigDecimal42);
        java.lang.String str46 = bigDecimal40.toEngineeringString();
        java.math.BigDecimal bigDecimal48 = bigDecimal40.movePointRight((-32));
        java.math.BigDecimal bigDecimal50 = bigDecimal48.setScale((int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl3.scalarAdd(bigDecimal48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal11", (bigDecimal7.compareTo(bigDecimal11) == 0) == bigDecimal7.equals(bigDecimal11));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        int int32 = bigMatrixImpl27.getRowDimension();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(0.0d);
        long long2 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal4 = bigDecimal3.abs();
        java.math.BigDecimal bigDecimal6 = bigDecimal4.movePointLeft((int) (byte) -32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal6", (bigDecimal1.compareTo(bigDecimal6) == 0) == bigDecimal1.equals(bigDecimal6));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf(100L);
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((double) 0L);
        java.math.BigDecimal bigDecimal21 = bigDecimal18.max(bigDecimal20);
        java.lang.String str22 = bigDecimal18.toString();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal((double) ' ');
        java.lang.String str25 = bigDecimal24.toPlainString();
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal18.divideAndRemainder(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = bigMatrixImpl14.preMultiply(bigDecimalArray26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal20", (bigDecimal3.compareTo(bigDecimal20) == 0) == bigDecimal3.equals(bigDecimal20));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(8667.0d);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.ulp();
        int int4 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.plus();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal10.ulp();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = bigDecimal15.pow((int) 'a');
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigInteger bigInteger34 = bigDecimal25.toBigIntegerExact();
        java.math.BigDecimal bigDecimal35 = bigDecimal23.add(bigDecimal25);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger39 = bigDecimal38.unscaledValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal36.add(bigDecimal38);
        java.math.BigDecimal bigDecimal41 = bigDecimal25.multiply(bigDecimal36);
        java.math.BigDecimal bigDecimal42 = bigDecimal13.divide(bigDecimal36);
        int int43 = bigDecimal6.compareTo(bigDecimal13);
        float float44 = bigDecimal6.floatValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal1.multiply(bigDecimal6);
        int int46 = bigDecimal1.scale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal45", (bigDecimal6.compareTo(bigDecimal45) == 0) == bigDecimal6.equals(bigDecimal45));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigInteger bigInteger8 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger8);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(bigInteger8, (int) ' ');
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(bigInteger8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal11", (bigDecimal1.compareTo(bigDecimal11) == 0) == bigDecimal1.equals(bigDecimal11));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("970");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger5 = bigDecimal4.unscaledValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal2.add(bigDecimal4);
        float float7 = bigDecimal4.floatValue();
        java.lang.String str8 = bigDecimal4.toEngineeringString();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.abs();
        java.math.BigDecimal bigDecimal11 = bigDecimal9.movePointLeft((int) (short) 1);
        byte byte12 = bigDecimal11.byteValueExact();
        java.math.BigDecimal bigDecimal13 = bigDecimal1.min(bigDecimal11);
        int int14 = bigDecimal13.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal13", (bigDecimal2.compareTo(bigDecimal13) == 0) == bigDecimal2.equals(bigDecimal13));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[] doubleArray4 = bigMatrixImpl2.getColumnAsDoubleArray((int) (byte) 6);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        int int42 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.movePointLeft((int) (byte) 100);
        java.math.BigDecimal bigDecimal46 = bigDecimal45.ulp();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger49 = bigDecimal48.unscaledValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(bigInteger49);
        java.math.BigInteger bigInteger51 = bigDecimal50.unscaledValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal50.abs();
        java.math.BigDecimal bigDecimal53 = bigDecimal46.divideToIntegralValue(bigDecimal50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale(5);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((double) (-1L));
        java.math.BigDecimal bigDecimal6 = bigDecimal3.subtract(bigDecimal5);
        byte byte7 = bigDecimal6.byteValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 0, (int) (short) -100);
        java.math.BigDecimal bigDecimal3 = bigDecimal2.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        java.lang.String str6 = bigDecimal5.toString();
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal9 = bigDecimal8.stripTrailingZeros();
        int int10 = bigDecimal8.signum();
        java.math.BigDecimal[] bigDecimalArray11 = bigDecimal5.divideAndRemainder(bigDecimal8);
        java.math.BigDecimal bigDecimal13 = bigDecimal5.pow((int) 'a');
        java.math.BigInteger bigInteger14 = bigDecimal5.toBigIntegerExact();
        float float15 = bigDecimal5.floatValue();
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        double[] doubleArray26 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray26);
        double[] doubleArray28 = realMatrix21.operate(doubleArray26);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrix29.getNorm();
        java.math.BigDecimal bigDecimal31 = bigDecimal5.subtract(bigDecimal30);
        int int32 = bigDecimal31.signum();
        java.math.BigInteger bigInteger33 = bigDecimal31.toBigInteger();
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray38 = bigDecimal35.divideAndRemainder(bigDecimal37);
        java.math.BigDecimal bigDecimal40 = bigDecimal37.movePointLeft((-1));
        java.math.BigDecimal bigDecimal41 = bigDecimal31.max(bigDecimal37);
        int int42 = bigDecimal37.precision();
        java.math.BigDecimal bigDecimal43 = bigDecimal2.divide(bigDecimal37);
        java.math.BigInteger bigInteger44 = bigDecimal43.unscaledValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal3", (bigDecimal2.compareTo(bigDecimal3) == 0) == bigDecimal2.equals(bigDecimal3));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        int int42 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.movePointLeft((int) (byte) 100);
        java.math.BigDecimal bigDecimal46 = bigDecimal43.plus();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.plus();
        double double4 = bigDecimal3.doubleValue();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal((int) (byte) 10);
        int int7 = bigDecimal6.scale();
        float float8 = bigDecimal6.floatValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal3.subtract(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal11.divideAndRemainder(bigDecimal13);
        int int15 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal9.remainder(bigDecimal11);
        double[] doubleArray23 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray30 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray37 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray44 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        org.apache.commons.math.linear.RealMatrix realMatrix46 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray45);
        double[][] doubleArray47 = realMatrix46.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.min(bigDecimal61);
        java.math.BigDecimal[] bigDecimalArray64 = new java.math.BigDecimal[] { bigDecimal63 };
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal71 = bigDecimal66.min(bigDecimal69);
        java.math.BigDecimal[] bigDecimalArray72 = new java.math.BigDecimal[] { bigDecimal71 };
        java.math.BigDecimal[][] bigDecimalArray73 = new java.math.BigDecimal[][] { bigDecimalArray56, bigDecimalArray64, bigDecimalArray72 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray73);
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        int int78 = bigDecimal77.intValue();
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal(0.0d);
        int int81 = bigDecimal80.intValue();
        java.math.BigDecimal bigDecimal82 = bigDecimal77.min(bigDecimal80);
        java.math.BigInteger bigInteger83 = bigDecimal77.toBigInteger();
        java.math.BigDecimal bigDecimal84 = new java.math.BigDecimal(bigInteger83);
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal87 = bigDecimal86.stripTrailingZeros();
        float float88 = bigDecimal86.floatValue();
        java.math.BigDecimal bigDecimal89 = bigDecimal84.multiply(bigDecimal86);
        org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrix75.scalarAdd(bigDecimal89);
        java.math.BigInteger bigInteger91 = bigDecimal89.toBigInteger();
        boolean boolean92 = bigMatrixImpl48.equals((java.lang.Object) bigDecimal89);
        java.math.BigDecimal bigDecimal95 = java.math.BigDecimal.valueOf((long) 100, 0);
        java.math.BigDecimal bigDecimal97 = bigDecimal95.setScale((int) (byte) -1);
        java.math.BigDecimal bigDecimal98 = bigDecimal89.max(bigDecimal97);
        java.math.BigDecimal bigDecimal99 = bigDecimal9.max(bigDecimal97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal95 and bigDecimal99", (bigDecimal95.compareTo(bigDecimal99) == 0) == bigDecimal95.equals(bigDecimal99));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int32 = bigDecimal31.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.scalarMultiply(bigDecimal31);
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        java.lang.String str36 = bigDecimal35.toString();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        int int40 = bigDecimal38.signum();
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal35.divideAndRemainder(bigDecimal38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        int int43 = bigMatrixImpl42.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl42.transpose();
        double[][] doubleArray45 = bigMatrix44.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrix44.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.multiply(bigMatrix44);
        int int48 = bigMatrixImpl27.getRoundingMode();
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl27.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.min(bigDecimal57);
        java.math.BigDecimal[] bigDecimalArray60 = new java.math.BigDecimal[] { bigDecimal59 };
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.min(bigDecimal65);
        java.math.BigDecimal[] bigDecimalArray68 = new java.math.BigDecimal[] { bigDecimal67 };
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        java.math.BigDecimal bigDecimal75 = bigDecimal70.min(bigDecimal73);
        java.math.BigDecimal[] bigDecimalArray76 = new java.math.BigDecimal[] { bigDecimal75 };
        java.math.BigDecimal[][] bigDecimalArray77 = new java.math.BigDecimal[][] { bigDecimalArray60, bigDecimalArray68, bigDecimalArray76 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        java.math.BigDecimal[][] bigDecimalArray81 = bigMatrixImpl80.getData();
        boolean boolean82 = bigMatrixImpl80.isSquare();
        java.math.BigDecimal bigDecimal83 = bigMatrixImpl80.getNorm();
        java.math.BigDecimal bigDecimal84 = bigMatrixImpl80.getNorm();
        java.lang.String str85 = bigDecimal84.toEngineeringString();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl27.scalarAdd(bigDecimal84);
        java.math.BigDecimal bigDecimal88 = bigDecimal84.movePointLeft((int) (short) 10);
        byte byte89 = bigDecimal84.byteValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal88", (bigDecimal1.compareTo(bigDecimal88) == 0) == bigDecimal1.equals(bigDecimal88));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal31 = bigDecimal30.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.scalarMultiply(bigDecimal30);
        java.math.BigInteger bigInteger33 = bigDecimal30.unscaledValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal((long) (byte) -100);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.subtract(bigDecimal35);
        java.math.BigInteger bigInteger37 = bigDecimal30.toBigInteger();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(bigInteger37);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(bigInteger37);
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(bigInteger37, (-35));
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        int int47 = bigDecimal43.precision();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        long long51 = bigDecimal49.longValue();
        long long52 = bigDecimal49.longValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal43.add(bigDecimal49);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal55.min(bigDecimal58);
        java.math.BigDecimal bigDecimal61 = bigDecimal53.min(bigDecimal58);
        short short62 = bigDecimal53.shortValueExact();
        java.math.BigInteger bigInteger63 = bigDecimal53.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(bigInteger63, 32);
        java.math.BigDecimal bigDecimal67 = bigDecimal65.setScale((int) (byte) -1);
        int int68 = bigDecimal41.compareTo(bigDecimal65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal67", (bigDecimal1.compareTo(bigDecimal67) == 0) == bigDecimal1.equals(bigDecimal67));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = bigDecimal1.movePointRight((int) '#');
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger13 = bigDecimal12.unscaledValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal10.add(bigDecimal12);
        java.math.BigDecimal bigDecimal16 = bigDecimal12.setScale(100);
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal9.divideAndRemainder(bigDecimal12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal12 and bigDecimal16", (bigDecimal12.compareTo(bigDecimal16) == 0) == bigDecimal12.equals(bigDecimal16));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl14.getDataRef();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal("100");
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.min(bigDecimal28);
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal[][] bigDecimalArray48 = new java.math.BigDecimal[][] { bigDecimalArray31, bigDecimalArray39, bigDecimalArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray48);
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigInteger bigInteger58 = bigDecimal52.toBigInteger();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(bigInteger58);
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        float float63 = bigDecimal61.floatValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal59.multiply(bigDecimal61);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrix50.scalarAdd(bigDecimal64);
        short short66 = bigDecimal64.shortValueExact();
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int69 = bigDecimal68.signum();
        java.math.BigDecimal[] bigDecimalArray70 = bigDecimal64.divideAndRemainder(bigDecimal68);
        java.math.BigDecimal bigDecimal71 = bigDecimal23.add(bigDecimal64);
        int int72 = bigDecimal23.intValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl14.scalarMultiply(bigDecimal23);
        int int74 = bigDecimal23.precision();
        java.math.BigDecimal bigDecimal75 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal bigDecimal78 = bigDecimal77.stripTrailingZeros();
        java.math.BigDecimal bigDecimal80 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal81 = bigDecimal80.negate();
        int int82 = bigDecimal81.scale();
        java.math.BigDecimal bigDecimal84 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal86 = bigDecimal84.setScale((int) '4');
        java.math.BigDecimal bigDecimal87 = bigDecimal81.multiply(bigDecimal84);
        java.math.BigDecimal bigDecimal90 = bigDecimal77.divide(bigDecimal84, (int) '#', 2);
        java.math.BigDecimal bigDecimal91 = bigDecimal75.add(bigDecimal90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal84 and bigDecimal86", (bigDecimal84.compareTo(bigDecimal86) == 0) == bigDecimal84.equals(bigDecimal86));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = bigDecimal41.setScale(0);
        byte byte45 = bigDecimal44.byteValueExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal44.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.scalarMultiply(bigDecimal46);
        boolean boolean48 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal61 = bigDecimal60.stripTrailingZeros();
        float float62 = bigDecimal60.floatValue();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.divideToIntegralValue(bigDecimal60);
        java.math.BigDecimal bigDecimal65 = bigDecimal63.movePointRight((int) (byte) 10);
        java.math.BigDecimal bigDecimal67 = bigDecimal63.movePointLeft((int) '4');
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl27.scalarAdd(bigDecimal67);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl27.transpose();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal67", (bigDecimal1.compareTo(bigDecimal67) == 0) == bigDecimal1.equals(bigDecimal67));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl35.transpose();
        double[] doubleArray38 = bigMatrixImpl35.getRowAsDoubleArray((int) (short) 0);
        boolean boolean39 = bigMatrixImpl35.isSingular();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl35.getDataRef();
        int int41 = bigMatrixImpl35.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl35);
        java.math.BigDecimal[][] bigDecimalArray43 = bigMatrixImpl35.getData();
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal45.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal50 = bigDecimal47.movePointLeft((-1));
        long long51 = bigDecimal50.longValueExact();
        int int52 = bigDecimal50.scale();
        java.math.BigDecimal bigDecimal53 = bigDecimal50.stripTrailingZeros();
        java.math.BigDecimal bigDecimal55 = bigDecimal53.setScale((int) (byte) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl35.scalarAdd(bigDecimal53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal50 and bigDecimal55", (bigDecimal50.compareTo(bigDecimal55) == 0) == bigDecimal50.equals(bigDecimal55));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl29.getNorm();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.remainder(bigDecimal32);
        long long36 = bigDecimal30.longValueExact();
        java.lang.String str37 = bigDecimal30.toString();
        java.math.BigDecimal bigDecimal38 = bigDecimal30.abs();
        java.math.BigDecimal bigDecimal40 = bigDecimal38.movePointLeft((int) (short) 31464);
        byte byte41 = bigDecimal38.byteValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal40", (bigDecimal1.compareTo(bigDecimal40) == 0) == bigDecimal1.equals(bigDecimal40));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.lang.String str10 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal12 = bigDecimal1.scaleByPowerOfTen((int) ' ');
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray25 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl27.transpose();
        double[] doubleArray30 = bigMatrixImpl27.getRowAsDoubleArray((int) (short) 0);
        boolean boolean31 = bigMatrixImpl27.isSingular();
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32);
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal36 = bigDecimal35.negate();
        int int37 = bigDecimal36.scale();
        boolean boolean38 = bigMatrixImpl33.equals((java.lang.Object) bigDecimal36);
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger41 = bigDecimal40.unscaledValue();
        java.lang.String str42 = bigDecimal40.toPlainString();
        java.math.BigDecimal bigDecimal43 = bigDecimal36.divideToIntegralValue(bigDecimal40);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.ulp();
        java.math.BigDecimal bigDecimal45 = bigDecimal1.add(bigDecimal44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal9 and bigDecimal12", (bigDecimal9.compareTo(bigDecimal12) == 0) == bigDecimal9.equals(bigDecimal12));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale((int) (short) 100, (int) (byte) 1);
        long long5 = bigDecimal1.longValueExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal1.setScale((int) (short) 0, 0);
        java.math.BigDecimal bigDecimal10 = bigDecimal8.movePointRight((-2));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal8 and bigDecimal4", (bigDecimal8.compareTo(bigDecimal4) == 0) == bigDecimal8.equals(bigDecimal4));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        java.math.BigDecimal[] bigDecimalArray40 = bigMatrixImpl17.getRow((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray40);
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((double) 0L);
        java.math.BigDecimal bigDecimal45 = bigDecimal43.pow(97);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrix41.scalarMultiply(bigDecimal45);
        int int47 = bigMatrix46.getColumnDimension();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal43 and bigDecimal45", (bigDecimal43.compareTo(bigDecimal45) == 0) == bigDecimal43.equals(bigDecimal45));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger28 = bigDecimal27.unscaledValue();
        java.lang.String str29 = bigDecimal27.toPlainString();
        java.math.BigDecimal bigDecimal30 = bigDecimal23.divideToIntegralValue(bigDecimal27);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.unscaledValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal32.add(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(bigInteger37, (int) (short) -1);
        float float40 = bigDecimal39.floatValue();
        java.lang.String str41 = bigDecimal39.toPlainString();
        java.math.BigDecimal bigDecimal42 = bigDecimal23.min(bigDecimal39);
        short short43 = bigDecimal42.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal42 and bigDecimal31", (bigDecimal42.compareTo(bigDecimal31) == 0) == bigDecimal42.equals(bigDecimal31));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.movePointRight((int) (short) -1);
        java.math.BigDecimal bigDecimal6 = bigDecimal1.stripTrailingZeros();
        short short7 = bigDecimal6.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSingular();
        boolean boolean31 = bigMatrixImpl27.isSingular();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal36 = bigDecimal34.ulp();
        java.math.BigDecimal bigDecimal38 = bigDecimal36.scaleByPowerOfTen(100);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarMultiply(bigDecimal38);
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl27.getNorm();
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[] doubleArray52 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray53 = new double[][] { doubleArray43, doubleArray46, doubleArray49, doubleArray52 };
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray53);
        boolean boolean55 = bigMatrix54.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrix54.copy();
        java.math.BigDecimal bigDecimal57 = bigMatrix54.getNorm();
        java.math.BigDecimal bigDecimal58 = bigDecimal57.abs();
        java.math.BigDecimal bigDecimal59 = bigDecimal57.stripTrailingZeros();
        java.math.BigDecimal bigDecimal61 = bigDecimal59.scaleByPowerOfTen(64);
        java.math.BigDecimal bigDecimal62 = bigDecimal40.divideToIntegralValue(bigDecimal59);
        long long63 = bigDecimal62.longValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal57 and bigDecimal59", (bigDecimal57.compareTo(bigDecimal59) == 0) == bigDecimal57.equals(bigDecimal59));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        byte byte12 = bigDecimal1.byteValueExact();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        java.lang.String str15 = bigDecimal14.toString();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = bigDecimal17.stripTrailingZeros();
        int int19 = bigDecimal17.signum();
        java.math.BigDecimal[] bigDecimalArray20 = bigDecimal14.divideAndRemainder(bigDecimal17);
        java.math.BigDecimal bigDecimal22 = bigDecimal14.pow((int) 'a');
        java.math.BigInteger bigInteger23 = bigDecimal14.toBigIntegerExact();
        float float24 = bigDecimal14.floatValue();
        double[] doubleArray29 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray29);
        double[] doubleArray35 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray35);
        double[] doubleArray37 = realMatrix30.operate(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray37);
        java.math.BigDecimal bigDecimal39 = bigMatrix38.getNorm();
        java.math.BigDecimal bigDecimal40 = bigDecimal14.subtract(bigDecimal39);
        int int41 = bigDecimal40.signum();
        java.math.BigInteger bigInteger42 = bigDecimal40.toBigInteger();
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray47 = bigDecimal44.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal49 = bigDecimal46.movePointLeft((-1));
        java.math.BigDecimal bigDecimal50 = bigDecimal40.max(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal46.stripTrailingZeros();
        java.math.BigDecimal bigDecimal52 = bigDecimal1.remainder(bigDecimal46);
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.min(bigDecimal57);
        java.math.BigDecimal[] bigDecimalArray60 = new java.math.BigDecimal[] { bigDecimal59 };
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.min(bigDecimal65);
        java.math.BigDecimal[] bigDecimalArray68 = new java.math.BigDecimal[] { bigDecimal67 };
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        java.math.BigDecimal bigDecimal75 = bigDecimal70.min(bigDecimal73);
        java.math.BigDecimal[] bigDecimalArray76 = new java.math.BigDecimal[] { bigDecimal75 };
        java.math.BigDecimal[][] bigDecimalArray77 = new java.math.BigDecimal[][] { bigDecimalArray60, bigDecimalArray68, bigDecimalArray76 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        java.math.BigDecimal[][] bigDecimalArray81 = bigMatrixImpl80.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl82 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray81);
        java.math.BigDecimal bigDecimal83 = bigMatrixImpl82.getNorm();
        java.math.BigDecimal bigDecimal85 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal86 = bigDecimal85.stripTrailingZeros();
        float float87 = bigDecimal85.floatValue();
        java.math.BigDecimal bigDecimal88 = bigDecimal83.remainder(bigDecimal85);
        java.lang.String str89 = bigDecimal83.toEngineeringString();
        java.math.BigDecimal bigDecimal91 = bigDecimal83.movePointRight((-32));
        java.math.BigDecimal bigDecimal93 = bigDecimal91.setScale((int) (byte) 10);
        java.math.BigDecimal bigDecimal94 = bigDecimal52.add(bigDecimal93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal91", (bigDecimal1.compareTo(bigDecimal91) == 0) == bigDecimal1.equals(bigDecimal91));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(bigInteger7, (-100));
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(bigInteger7, 5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal12", (bigDecimal1.compareTo(bigDecimal12) == 0) == bigDecimal1.equals(bigDecimal12));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigInteger bigInteger35 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        double[] doubleArray54 = bigMatrixImpl51.getRowAsDoubleArray((int) (short) 0);
        boolean boolean55 = bigMatrixImpl51.isSingular();
        boolean boolean56 = bigMatrixImpl51.isSquare();
        int int57 = bigMatrixImpl51.getScale();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal58.add(bigDecimal60);
        java.math.BigDecimal bigDecimal64 = bigDecimal60.setScale(100);
        boolean boolean65 = bigMatrixImpl51.equals((java.lang.Object) bigDecimal60);
        java.math.BigDecimal bigDecimal66 = bigDecimal36.min(bigDecimal60);
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf(8667.0d);
        java.math.BigInteger bigInteger69 = bigDecimal68.unscaledValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal68.ulp();
        java.math.BigDecimal bigDecimal71 = bigDecimal66.divide(bigDecimal68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal60 and bigDecimal64", (bigDecimal60.compareTo(bigDecimal64) == 0) == bigDecimal60.equals(bigDecimal64));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (byte) 1);
        java.math.BigDecimal bigDecimal34 = bigDecimal30.divideToIntegralValue(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 4);
        int int37 = bigDecimal36.signum();
        java.math.BigDecimal bigDecimal38 = bigDecimal36.abs();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.max(bigDecimal38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) (byte) 0);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.setScale((int) '4');
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal7.min(bigDecimal10);
        java.math.BigDecimal[] bigDecimalArray13 = new java.math.BigDecimal[] { bigDecimal12 };
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.min(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal[][] bigDecimalArray30 = new java.math.BigDecimal[][] { bigDecimalArray13, bigDecimalArray21, bigDecimalArray29 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl33.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal bigDecimal36 = bigMatrixImpl35.getNorm();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        float float40 = bigDecimal38.floatValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.remainder(bigDecimal38);
        long long42 = bigDecimal36.longValueExact();
        java.math.BigDecimal bigDecimal44 = bigDecimal36.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal45 = bigDecimal5.add(bigDecimal36);
        java.math.BigDecimal bigDecimal46 = bigDecimal1.divide(bigDecimal5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal45", (bigDecimal3.compareTo(bigDecimal45) == 0) == bigDecimal3.equals(bigDecimal45));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = bigDecimal41.setScale(0);
        byte byte45 = bigDecimal44.byteValueExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal44.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.scalarMultiply(bigDecimal46);
        boolean boolean48 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal61 = bigDecimal60.stripTrailingZeros();
        float float62 = bigDecimal60.floatValue();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.divideToIntegralValue(bigDecimal60);
        java.math.BigDecimal bigDecimal65 = bigDecimal63.movePointRight((int) (byte) 10);
        java.math.BigDecimal bigDecimal67 = bigDecimal63.movePointLeft((int) '4');
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl27.scalarAdd(bigDecimal67);
        java.lang.String str69 = bigMatrixImpl27.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal67", (bigDecimal1.compareTo(bigDecimal67) == 0) == bigDecimal1.equals(bigDecimal67));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        int int3 = bigMatrixImpl2.getColumnDimension();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        int int20 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray21 = bigMatrixImpl18.getDataRef();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl2.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl18);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 6);
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger5 = bigDecimal4.unscaledValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal2.add(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal4.toBigInteger();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger7, (int) (short) -1);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str12 = bigDecimal11.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal9.divideAndRemainder(bigDecimal11);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.remainder(bigDecimal9);
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray27 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26 };
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        java.lang.String str34 = bigDecimal33.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl30.scalarMultiply(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = bigDecimal1.max(bigDecimal33);
        java.math.BigDecimal bigDecimal37 = bigDecimal33.plus();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal((long) 0);
        java.math.BigDecimal bigDecimal41 = bigDecimal39.pow(4);
        java.math.BigDecimal bigDecimal42 = bigDecimal33.min(bigDecimal39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal42 and bigDecimal41", (bigDecimal42.compareTo(bigDecimal41) == 0) == bigDecimal42.equals(bigDecimal41));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(64, 10);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double double5 = bigMatrixImpl2.getEntryAsDouble(4, 2);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        short short42 = bigDecimal40.shortValueExact();
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int45 = bigDecimal44.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal44);
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal((long) (short) -100);
        byte byte49 = bigDecimal48.byteValueExact();
        double[] doubleArray52 = new double[] { 1.0d, 100.0f };
        double[] doubleArray55 = new double[] { 1.0d, 100.0f };
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray62 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal(0.0d);
        int int72 = bigDecimal71.intValue();
        java.math.BigDecimal bigDecimal73 = bigDecimal68.min(bigDecimal71);
        java.math.BigInteger bigInteger74 = bigDecimal68.toBigInteger();
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(bigInteger74);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrix66.scalarAdd(bigDecimal75);
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        int int79 = bigDecimal78.intValue();
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(0.0d);
        int int82 = bigDecimal81.intValue();
        java.math.BigDecimal bigDecimal83 = bigDecimal78.min(bigDecimal81);
        java.math.BigInteger bigInteger84 = bigDecimal78.toBigInteger();
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal87 = bigDecimal86.negate();
        java.math.BigDecimal bigDecimal88 = bigDecimal78.add(bigDecimal86);
        java.math.BigDecimal bigDecimal89 = bigDecimal75.divideToIntegralValue(bigDecimal88);
        java.math.BigDecimal bigDecimal90 = bigDecimal48.subtract(bigDecimal88);
        java.math.BigDecimal bigDecimal91 = bigDecimal44.add(bigDecimal88);
        java.math.BigDecimal bigDecimal92 = bigDecimal88.negate();
        java.math.BigDecimal bigDecimal94 = bigDecimal88.setScale(2);
        long long95 = bigDecimal88.longValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal44 and bigDecimal94", (bigDecimal44.compareTo(bigDecimal94) == 0) == bigDecimal44.equals(bigDecimal94));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigInteger bigInteger14 = bigDecimal13.toBigIntegerExact();
        int int15 = bigDecimal13.scale();
        int int16 = bigDecimal13.precision();
        java.lang.String str17 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal13.movePointRight((int) (byte) -112);
        java.math.BigDecimal bigDecimal20 = bigDecimal13.plus();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal19", (bigDecimal1.compareTo(bigDecimal19) == 0) == bigDecimal1.equals(bigDecimal19));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(0.0d);
        long long2 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.setScale((int) ' ', 2);
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        long long10 = bigDecimal8.longValue();
        long long11 = bigDecimal8.longValueExact();
        int int12 = bigDecimal8.precision();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        long long16 = bigDecimal14.longValue();
        long long17 = bigDecimal14.longValueExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal8.add(bigDecimal14);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal bigDecimal26 = bigDecimal18.min(bigDecimal23);
        java.math.BigDecimal bigDecimal27 = bigDecimal6.min(bigDecimal18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal18", (bigDecimal1.compareTo(bigDecimal18) == 0) == bigDecimal1.equals(bigDecimal18));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal27 = bigDecimal23.setScale(100);
        boolean boolean28 = bigMatrixImpl14.equals((java.lang.Object) bigDecimal23);
        java.lang.Class<?> wildcardClass29 = bigMatrixImpl14.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal27", (bigDecimal23.compareTo(bigDecimal27) == 0) == bigDecimal23.equals(bigDecimal27));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal bigDecimal7 = bigDecimal1.plus();
        java.math.BigInteger bigInteger8 = bigDecimal7.toBigIntegerExact();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger12 = bigDecimal11.unscaledValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal9.add(bigDecimal11);
        float float14 = bigDecimal11.floatValue();
        java.lang.String str15 = bigDecimal11.toEngineeringString();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        long long19 = bigDecimal17.longValue();
        long long20 = bigDecimal17.longValueExact();
        int int21 = bigDecimal17.precision();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        long long25 = bigDecimal23.longValue();
        long long26 = bigDecimal23.longValueExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal17.add(bigDecimal23);
        java.math.BigDecimal bigDecimal29 = bigDecimal23.pow(3);
        java.math.BigInteger bigInteger30 = bigDecimal29.toBigIntegerExact();
        java.math.BigDecimal bigDecimal31 = bigDecimal29.stripTrailingZeros();
        java.math.BigDecimal bigDecimal32 = bigDecimal11.add(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl60.getDataRef();
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl60.getNorm();
        boolean boolean63 = bigMatrixImpl60.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl60.copy();
        double[] doubleArray66 = bigMatrixImpl60.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl60.scalarMultiply(bigDecimal67);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl60.scalarAdd(bigDecimal71);
        java.math.BigDecimal bigDecimal74 = bigDecimal71.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        long long78 = bigDecimal76.longValue();
        java.math.BigDecimal bigDecimal79 = bigDecimal71.min(bigDecimal76);
        java.math.BigDecimal bigDecimal80 = bigDecimal29.multiply(bigDecimal76);
        java.math.BigDecimal bigDecimal82 = bigDecimal29.setScale(5);
        java.math.BigDecimal bigDecimal83 = bigDecimal7.min(bigDecimal82);
        java.math.BigDecimal bigDecimal85 = new java.math.BigDecimal("970");
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal88 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger89 = bigDecimal88.unscaledValue();
        java.math.BigDecimal bigDecimal90 = bigDecimal86.add(bigDecimal88);
        float float91 = bigDecimal88.floatValue();
        java.lang.String str92 = bigDecimal88.toEngineeringString();
        java.math.BigDecimal bigDecimal93 = bigDecimal88.abs();
        java.math.BigDecimal bigDecimal95 = bigDecimal93.movePointLeft((int) (short) 1);
        byte byte96 = bigDecimal95.byteValueExact();
        java.math.BigDecimal bigDecimal97 = bigDecimal85.min(bigDecimal95);
        java.math.BigDecimal bigDecimal98 = bigDecimal7.subtract(bigDecimal85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal82", (bigDecimal7.compareTo(bigDecimal82) == 0) == bigDecimal7.equals(bigDecimal82));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray19);
        int int22 = bigMatrix21.getRoundingMode();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        boolean boolean37 = bigMatrix36.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrix36.copy();
        java.math.BigDecimal bigDecimal39 = bigMatrix36.getNorm();
        java.math.BigDecimal bigDecimal40 = bigDecimal39.abs();
        java.math.BigDecimal bigDecimal41 = bigDecimal39.stripTrailingZeros();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrix21.scalarMultiply(bigDecimal39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal39 and bigDecimal41", (bigDecimal39.compareTo(bigDecimal41) == 0) == bigDecimal39.equals(bigDecimal41));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal27 = bigDecimal23.setScale(100);
        boolean boolean28 = bigMatrixImpl14.equals((java.lang.Object) bigDecimal23);
        java.math.BigDecimal bigDecimal29 = bigDecimal23.ulp();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException31 = new org.apache.commons.math.linear.InvalidMatrixException("10000000000000000000000000000000000000000000000000000000000000000000000");
        java.lang.Throwable[] throwableArray32 = invalidMatrixException31.getSuppressed();
        boolean boolean33 = bigDecimal29.equals((java.lang.Object) throwableArray32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal27", (bigDecimal23.compareTo(bigDecimal27) == 0) == bigDecimal23.equals(bigDecimal27));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        java.math.BigDecimal bigDecimal9 = bigMatrixImpl8.getNorm();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.ZERO;
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal[][] bigDecimalArray35 = new java.math.BigDecimal[][] { bigDecimalArray18, bigDecimalArray26, bigDecimalArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl38.getDataRef();
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl38.getNorm();
        boolean boolean41 = bigMatrixImpl38.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl38.copy();
        double[] doubleArray44 = bigMatrixImpl38.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(strArray47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl38.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl38.getNorm();
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl38.getData();
        int int52 = bigMatrixImpl38.getScale();
        boolean boolean53 = bigDecimal10.equals((java.lang.Object) bigMatrixImpl38);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl8.scalarMultiply(bigDecimal10);
        java.math.BigDecimal[] bigDecimalArray56 = bigMatrixImpl8.getRow(1);
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal59 = bigDecimal58.negate();
        java.math.BigDecimal bigDecimal61 = bigDecimal59.setScale((int) (short) 31464);
        java.math.BigDecimal bigDecimal63 = bigDecimal59.movePointLeft((int) (short) 400);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl8.scalarAdd(bigDecimal63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal59 and bigDecimal61", (bigDecimal59.compareTo(bigDecimal61) == 0) == bigDecimal59.equals(bigDecimal61));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal12 = bigMatrixImpl11.getTrace();
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray25 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigDecimal29.signum();
        java.math.BigDecimal bigDecimal32 = bigDecimal29.movePointLeft((int) (byte) 97);
        java.lang.String str33 = bigDecimal32.toString();
        java.math.BigDecimal bigDecimal34 = bigDecimal12.divide(bigDecimal32);
        java.math.BigDecimal bigDecimal35 = bigDecimal12.ulp();
        byte byte36 = bigDecimal35.byteValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal12 and bigDecimal34", (bigDecimal12.compareTo(bigDecimal34) == 0) == bigDecimal12.equals(bigDecimal34));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (short) 10);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray3);
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, 400);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double double5 = bigMatrixImpl2.getEntryAsDouble((int) (short) 0, (int) (byte) 100);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrix15.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
        int int18 = bigMatrixImpl17.getRoundingMode();
        java.math.BigDecimal bigDecimal19 = bigMatrixImpl17.getNorm();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl17.getData();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl35.transpose();
        int int37 = bigMatrixImpl35.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl35.getDataRef();
        bigMatrixImpl35.setScale((int) (short) 100);
        boolean boolean41 = bigMatrixImpl35.isSingular();
        int int42 = bigMatrixImpl35.getScale();
        int int43 = bigMatrixImpl35.getScale();
        double[] doubleArray45 = bigMatrixImpl35.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray47 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray48 = new java.lang.String[][] { strArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl57.getTrace();
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[] doubleArray64 = new double[] { 1.0d, 100.0f };
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[] doubleArray70 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray71 = new double[][] { doubleArray61, doubleArray64, doubleArray67, doubleArray70 };
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl73.transpose();
        java.math.BigDecimal bigDecimal75 = bigMatrixImpl73.getNorm();
        int int76 = bigDecimal75.signum();
        java.math.BigDecimal bigDecimal78 = bigDecimal75.movePointLeft((int) (byte) 97);
        java.lang.String str79 = bigDecimal78.toString();
        java.math.BigDecimal bigDecimal80 = bigDecimal58.divide(bigDecimal78);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrixImpl35.scalarAdd(bigDecimal58);
        boolean boolean82 = bigMatrixImpl17.equals((java.lang.Object) bigMatrix81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal58 and bigDecimal80", (bigDecimal58.compareTo(bigDecimal80) == 0) == bigDecimal58.equals(bigDecimal80));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl5.copy();
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray21 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl23.transpose();
        int int25 = bigMatrixImpl23.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl23.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl5.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl23);
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        java.lang.String str32 = bigDecimal31.toString();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = bigDecimal34.stripTrailingZeros();
        int int36 = bigDecimal34.signum();
        java.math.BigDecimal[] bigDecimalArray37 = bigDecimal31.divideAndRemainder(bigDecimal34);
        java.math.BigDecimal bigDecimal39 = bigDecimal31.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal29, bigDecimal31 };
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray40);
        java.math.BigDecimal[] bigDecimalArray44 = bigMatrixImpl5.preMultiply(bigDecimalArray40);
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.min(bigDecimal57);
        java.math.BigDecimal[] bigDecimalArray60 = new java.math.BigDecimal[] { bigDecimal59 };
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.min(bigDecimal65);
        java.math.BigDecimal[] bigDecimalArray68 = new java.math.BigDecimal[] { bigDecimal67 };
        java.math.BigDecimal[][] bigDecimalArray69 = new java.math.BigDecimal[][] { bigDecimalArray52, bigDecimalArray60, bigDecimalArray68 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray69);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl72.getDataRef();
        java.math.BigDecimal bigDecimal74 = bigMatrixImpl72.getNorm();
        int int75 = bigMatrixImpl72.getColumnDimension();
        bigMatrixImpl72.setRoundingMode((int) (byte) -100);
        bigMatrixImpl72.setScale(10);
        java.math.BigDecimal bigDecimal81 = java.math.BigDecimal.valueOf(100L);
        java.math.BigDecimal bigDecimal83 = java.math.BigDecimal.valueOf((double) 0L);
        java.math.BigDecimal bigDecimal84 = bigDecimal81.max(bigDecimal83);
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrixImpl72.scalarAdd(bigDecimal83);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl5.scalarMultiply(bigDecimal83);
        boolean boolean87 = bigMatrix86.isSquare();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal31 and bigDecimal83", (bigDecimal31.compareTo(bigDecimal83) == 0) == bigDecimal31.equals(bigDecimal83));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.getRowMatrix(0);
        int int5 = bigMatrix4.getColumnDimension();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale(5);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointRight(5);
        java.math.BigDecimal bigDecimal7 = bigDecimal3.movePointLeft((int) (short) 100);
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger11 = bigDecimal10.unscaledValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal8.add(bigDecimal10);
        float float13 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal10.setScale((int) (short) 97);
        java.math.BigDecimal bigDecimal16 = bigDecimal3.remainder(bigDecimal15);
        java.math.BigDecimal bigDecimal18 = bigDecimal16.pow(3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        java.lang.String str19 = bigDecimal18.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl15.scalarMultiply(bigDecimal18);
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal27 = bigDecimal22.min(bigDecimal25);
        java.math.BigInteger bigInteger28 = bigDecimal27.toBigIntegerExact();
        java.math.BigDecimal bigDecimal29 = bigDecimal27.stripTrailingZeros();
        int int30 = bigDecimal29.signum();
        int int31 = bigDecimal29.intValueExact();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.unscaledValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal32.add(bigDecimal34);
        java.math.BigDecimal bigDecimal37 = bigDecimal29.max(bigDecimal34);
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray50 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49 };
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl52.transpose();
        double[] doubleArray55 = bigMatrixImpl52.getRowAsDoubleArray((int) (short) 0);
        boolean boolean56 = bigMatrixImpl52.isSingular();
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrixImpl52.getData();
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl52.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl52.transpose();
        java.math.BigDecimal bigDecimal60 = bigMatrixImpl52.getNorm();
        int int61 = bigDecimal60.precision();
        java.math.BigDecimal bigDecimal62 = bigDecimal29.divideToIntegralValue(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = bigDecimal18.divideToIntegralValue(bigDecimal60);
        short short64 = bigDecimal60.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal22", (bigDecimal18.compareTo(bigDecimal22) == 0) == bigDecimal18.equals(bigDecimal22));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        byte byte5 = bigDecimal4.byteValueExact();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal15 = bigDecimal7.pow((int) 'a');
        java.math.BigInteger bigInteger16 = bigDecimal7.toBigInteger();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(bigInteger16, 6);
        java.math.BigDecimal bigDecimal19 = bigDecimal4.multiply(bigDecimal18);
        java.lang.Class<?> wildcardClass20 = bigDecimal19.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal18", (bigDecimal1.compareTo(bigDecimal18) == 0) == bigDecimal1.equals(bigDecimal18));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigInteger bigInteger22 = bigDecimal21.unscaledValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(bigInteger22, 100);
        short short25 = bigDecimal24.shortValueExact();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal((double) (short) -100);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        java.lang.String str30 = bigDecimal29.toString();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        int int34 = bigDecimal32.signum();
        java.math.BigDecimal[] bigDecimalArray35 = bigDecimal29.divideAndRemainder(bigDecimal32);
        java.math.BigDecimal bigDecimal37 = bigDecimal29.pow((int) 'a');
        java.math.BigInteger bigInteger38 = bigDecimal29.toBigIntegerExact();
        int int39 = bigDecimal29.precision();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal45 = bigDecimal44.stripTrailingZeros();
        int int46 = bigDecimal44.signum();
        java.math.BigDecimal[] bigDecimalArray47 = bigDecimal41.divideAndRemainder(bigDecimal44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        java.math.BigDecimal bigDecimal49 = bigMatrixImpl48.getNorm();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        java.lang.String str52 = bigDecimal51.toString();
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal55 = bigDecimal54.stripTrailingZeros();
        int int56 = bigDecimal54.signum();
        java.math.BigDecimal[] bigDecimalArray57 = bigDecimal51.divideAndRemainder(bigDecimal54);
        java.math.BigDecimal bigDecimal59 = bigDecimal51.pow((int) 'a');
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        float float63 = bigDecimal61.floatValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal59.divideToIntegralValue(bigDecimal61);
        boolean boolean65 = bigMatrixImpl48.equals((java.lang.Object) bigDecimal61);
        java.math.BigDecimal[] bigDecimalArray66 = bigDecimal29.divideAndRemainder(bigDecimal61);
        java.math.BigDecimal bigDecimal67 = bigDecimal27.remainder(bigDecimal61);
        java.math.BigDecimal bigDecimal68 = bigDecimal61.negate();
        java.math.BigDecimal bigDecimal69 = bigDecimal24.multiply(bigDecimal61);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger72 = bigDecimal71.unscaledValue();
        java.lang.String str73 = bigDecimal71.toPlainString();
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal76 = bigDecimal75.stripTrailingZeros();
        float float77 = bigDecimal75.floatValue();
        java.math.BigDecimal bigDecimal78 = bigDecimal75.ulp();
        java.math.BigDecimal bigDecimal79 = bigDecimal78.ulp();
        java.math.BigDecimal bigDecimal80 = bigDecimal71.remainder(bigDecimal79);
        java.math.BigDecimal bigDecimal82 = bigDecimal71.pow((int) '#');
        java.math.BigDecimal bigDecimal84 = bigDecimal69.divide(bigDecimal82, 3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal24", (bigDecimal1.compareTo(bigDecimal24) == 0) == bigDecimal1.equals(bigDecimal24));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        int int4 = bigDecimal3.intValue();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal3.min(bigDecimal6);
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal[][] bigDecimalArray26 = new java.math.BigDecimal[][] { bigDecimalArray9, bigDecimalArray17, bigDecimalArray25 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray41 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray41);
        boolean boolean43 = bigMatrixImpl27.equals((java.lang.Object) bigMatrix42);
        int int44 = bigMatrixImpl27.getRowDimension();
        bigMatrixImpl27.setRoundingMode(0);
        double[] doubleArray48 = bigMatrixImpl27.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str49 = bigMatrixImpl27.toString();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger53 = bigDecimal52.unscaledValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal50.add(bigDecimal52);
        java.math.BigInteger bigInteger55 = bigDecimal52.toBigInteger();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl27.scalarMultiply(bigDecimal52);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((double) (byte) -112);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl27.scalarMultiply(bigDecimal58);
        java.math.BigDecimal bigDecimal61 = bigDecimal58.setScale(32);
        java.math.BigDecimal bigDecimal63 = bigDecimal1.divide(bigDecimal61, (int) (byte) 6);
        java.math.BigDecimal bigDecimal64 = bigDecimal63.ulp();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal58 and bigDecimal61", (bigDecimal58.compareTo(bigDecimal61) == 0) == bigDecimal58.equals(bigDecimal61));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, 1);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal3 = bigMatrixImpl2.getDeterminant();
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        int int22 = bigMatrixImpl14.getScale();
        double[] doubleArray24 = bigMatrixImpl14.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray26 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray26 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        java.math.BigDecimal bigDecimal37 = bigMatrixImpl36.getTrace();
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray50 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49 };
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl52.transpose();
        java.math.BigDecimal bigDecimal54 = bigMatrixImpl52.getNorm();
        int int55 = bigDecimal54.signum();
        java.math.BigDecimal bigDecimal57 = bigDecimal54.movePointLeft((int) (byte) 97);
        java.lang.String str58 = bigDecimal57.toString();
        java.math.BigDecimal bigDecimal59 = bigDecimal37.divide(bigDecimal57);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl14.scalarAdd(bigDecimal37);
        int int61 = bigMatrixImpl14.getColumnDimension();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal37 and bigDecimal59", (bigDecimal37.compareTo(bigDecimal59) == 0) == bigDecimal37.equals(bigDecimal59));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal32 = bigDecimal30.plus();
        java.math.BigDecimal bigDecimal34 = bigDecimal30.pow((int) (byte) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        java.math.BigInteger bigInteger30 = bigDecimal28.unscaledValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal28.movePointLeft(32);
        java.math.BigDecimal bigDecimal34 = bigDecimal32.movePointRight(10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        long long35 = bigDecimal33.longValue();
        long long36 = bigDecimal33.longValueExact();
        int int37 = bigDecimal33.precision();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal33.add(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal66 = bigDecimal39.multiply(bigDecimal53);
        java.math.BigDecimal bigDecimal67 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal((int) (byte) 10);
        java.math.BigDecimal bigDecimal70 = bigDecimal39.add(bigDecimal69);
        java.math.BigDecimal bigDecimal71 = bigDecimal30.add(bigDecimal69);
        long long72 = bigDecimal69.longValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal12 = bigMatrixImpl11.getTrace();
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray25 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigDecimal29.signum();
        java.math.BigDecimal bigDecimal32 = bigDecimal29.movePointLeft((int) (byte) 97);
        java.lang.String str33 = bigDecimal32.toString();
        java.math.BigDecimal bigDecimal34 = bigDecimal12.divide(bigDecimal32);
        double double35 = bigDecimal32.doubleValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal12 and bigDecimal34", (bigDecimal12.compareTo(bigDecimal34) == 0) == bigDecimal12.equals(bigDecimal34));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.plus();
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal6 = bigDecimal5.stripTrailingZeros();
        float float7 = bigDecimal5.floatValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal5.ulp();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        java.lang.String str11 = bigDecimal10.toString();
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        int int15 = bigDecimal13.signum();
        java.math.BigDecimal[] bigDecimalArray16 = bigDecimal10.divideAndRemainder(bigDecimal13);
        java.math.BigDecimal bigDecimal18 = bigDecimal10.pow((int) 'a');
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        java.lang.String str21 = bigDecimal20.toString();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        int int25 = bigDecimal23.signum();
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal20.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal bigDecimal28 = bigDecimal20.pow((int) 'a');
        java.math.BigInteger bigInteger29 = bigDecimal20.toBigIntegerExact();
        java.math.BigDecimal bigDecimal30 = bigDecimal18.add(bigDecimal20);
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger34 = bigDecimal33.unscaledValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal31.add(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = bigDecimal20.multiply(bigDecimal31);
        java.math.BigDecimal bigDecimal37 = bigDecimal8.divide(bigDecimal31);
        int int38 = bigDecimal1.compareTo(bigDecimal8);
        int int39 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger42 = bigDecimal41.unscaledValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal41.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        long long47 = bigDecimal45.longValue();
        long long48 = bigDecimal45.longValueExact();
        short short49 = bigDecimal45.shortValueExact();
        java.math.BigDecimal bigDecimal50 = bigDecimal41.min(bigDecimal45);
        java.math.BigDecimal bigDecimal51 = bigDecimal8.multiply(bigDecimal50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal33 and bigDecimal43", (bigDecimal33.compareTo(bigDecimal43) == 0) == bigDecimal33.equals(bigDecimal43));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        short short42 = bigDecimal40.shortValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.abs();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.setScale((int) (byte) -1);
        java.math.BigInteger bigInteger46 = bigDecimal43.toBigInteger();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        int int42 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.movePointLeft((int) (byte) 100);
        java.math.BigDecimal bigDecimal46 = bigDecimal45.ulp();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal("0.1");
        int int49 = bigDecimal46.compareTo(bigDecimal48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        int int10 = bigDecimal1.intValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal13 = bigDecimal1.setScale((int) (byte) 11);
        java.lang.String str14 = bigDecimal1.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal13", (bigDecimal4.compareTo(bigDecimal13) == 0) == bigDecimal4.equals(bigDecimal13));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) ' ', (int) ' ');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger6 = bigDecimal5.unscaledValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal3.add(bigDecimal5);
        java.math.BigInteger bigInteger8 = bigDecimal5.toBigInteger();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(bigInteger8, (int) (short) -1);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str13 = bigDecimal12.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal10.divideAndRemainder(bigDecimal12);
        java.math.BigDecimal bigDecimal16 = bigDecimal10.setScale((int) (short) 2805);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl2.scalarMultiply(bigDecimal16);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigInteger bigInteger35 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        double[] doubleArray54 = bigMatrixImpl51.getRowAsDoubleArray((int) (short) 0);
        boolean boolean55 = bigMatrixImpl51.isSingular();
        boolean boolean56 = bigMatrixImpl51.isSquare();
        int int57 = bigMatrixImpl51.getScale();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal58.add(bigDecimal60);
        java.math.BigDecimal bigDecimal64 = bigDecimal60.setScale(100);
        boolean boolean65 = bigMatrixImpl51.equals((java.lang.Object) bigDecimal60);
        java.math.BigDecimal bigDecimal66 = bigDecimal36.min(bigDecimal60);
        byte byte67 = bigDecimal36.byteValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal60 and bigDecimal64", (bigDecimal60.compareTo(bigDecimal64) == 0) == bigDecimal60.equals(bigDecimal64));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        java.lang.String str1 = bigMatrixImpl0.toString();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[] doubleArray3 = bigMatrixImpl0.getRowAsDoubleArray((int) (byte) 6);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal56 = bigDecimal17.stripTrailingZeros();
        java.math.BigDecimal bigDecimal57 = bigDecimal56.negate();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        java.lang.String str70 = bigDecimal69.toString();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        int int74 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal69.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal77 = bigDecimal69.pow((int) 'a');
        java.math.BigInteger bigInteger78 = bigDecimal69.toBigIntegerExact();
        java.math.BigDecimal bigDecimal79 = bigDecimal67.add(bigDecimal69);
        java.math.BigInteger bigInteger80 = bigDecimal79.unscaledValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(bigInteger80, 100);
        java.math.BigDecimal bigDecimal83 = bigDecimal82.ulp();
        java.math.BigDecimal bigDecimal84 = bigDecimal57.min(bigDecimal82);
        java.lang.String str85 = bigDecimal82.toPlainString();
        java.math.BigDecimal bigDecimal87 = java.math.BigDecimal.valueOf((double) (-1.0f));
        java.math.BigDecimal bigDecimal88 = bigDecimal82.remainder(bigDecimal87);
        java.math.MathContext mathContext90 = null;
        java.math.BigDecimal bigDecimal91 = new java.math.BigDecimal(0.0d, mathContext90);
        java.math.BigDecimal bigDecimal93 = bigDecimal91.movePointRight((int) (byte) -11);
        int int94 = bigDecimal82.compareTo(bigDecimal91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal88", (bigDecimal17.compareTo(bigDecimal88) == 0) == bigDecimal17.equals(bigDecimal88));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(100L);
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((double) 0L);
        java.math.BigDecimal bigDecimal4 = bigDecimal1.max(bigDecimal3);
        int int5 = bigDecimal3.intValueExact();
        java.lang.String[] strArray7 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray8 = new java.lang.String[][] { strArray7 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray8);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray8);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray8);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(strArray8);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray8);
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.min(bigDecimal18);
        java.math.BigInteger bigInteger21 = bigDecimal15.toBigInteger();
        int int22 = bigDecimal15.precision();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal25 = bigDecimal15.subtract(bigDecimal24);
        java.math.BigDecimal bigDecimal26 = bigDecimal24.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl13.scalarAdd(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal3.divideAndRemainder(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal15", (bigDecimal3.compareTo(bigDecimal15) == 0) == bigDecimal3.equals(bigDecimal15));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (byte) 110);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal3 = bigMatrixImpl2.getNorm();
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.copy();
        java.math.BigDecimal bigDecimal16 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal17 = bigDecimal16.abs();
        java.math.BigDecimal bigDecimal18 = bigDecimal16.stripTrailingZeros();
        java.math.BigDecimal bigDecimal20 = bigDecimal18.scaleByPowerOfTen(64);
        int int21 = bigDecimal20.precision();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal16 and bigDecimal18", (bigDecimal16.compareTo(bigDecimal18) == 0) == bigDecimal16.equals(bigDecimal18));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger30 = bigDecimal29.unscaledValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal27.add(bigDecimal29);
        java.math.BigDecimal bigDecimal32 = bigDecimal16.multiply(bigDecimal27);
        java.math.BigDecimal bigDecimal33 = bigDecimal0.subtract(bigDecimal16);
        java.math.BigDecimal bigDecimal34 = bigDecimal33.abs();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal[][] bigDecimalArray59 = new java.math.BigDecimal[][] { bigDecimalArray42, bigDecimalArray50, bigDecimalArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl62.scalarAdd(bigDecimal65);
        java.math.BigDecimal bigDecimal67 = bigDecimal34.add(bigDecimal65);
        java.math.BigInteger bigInteger68 = bigDecimal65.toBigInteger();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal0 and bigDecimal67", (bigDecimal0.compareTo(bigDecimal67) == 0) == bigDecimal0.equals(bigDecimal67));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        bigMatrixImpl25.setRoundingMode(0);
        double[] doubleArray46 = bigMatrixImpl25.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str47 = bigMatrixImpl25.toString();
        int int48 = bigMatrixImpl25.getRoundingMode();
        bigMatrixImpl25.setRoundingMode((-3));
        int int51 = bigMatrixImpl25.getColumnDimension();
        double[] doubleArray54 = new double[] { 1.0d, 100.0f };
        double[] doubleArray57 = new double[] { 1.0d, 100.0f };
        double[] doubleArray60 = new double[] { 1.0d, 100.0f };
        double[] doubleArray63 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray64 = new double[][] { doubleArray54, doubleArray57, doubleArray60, doubleArray63 };
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray64);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl66 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray64);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray64);
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray64);
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        java.math.BigDecimal bigDecimal75 = bigDecimal70.min(bigDecimal73);
        java.math.BigInteger bigInteger76 = bigDecimal70.toBigInteger();
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(bigInteger76);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrix68.scalarAdd(bigDecimal77);
        java.math.BigDecimal bigDecimal80 = bigDecimal77.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger81 = bigDecimal80.toBigIntegerExact();
        boolean boolean82 = bigMatrixImpl25.equals((java.lang.Object) bigInteger81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal80", (bigDecimal1.compareTo(bigDecimal80) == 0) == bigDecimal1.equals(bigDecimal80));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray63 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal74 = bigDecimal69.min(bigDecimal72);
        java.math.BigInteger bigInteger75 = bigDecimal69.toBigInteger();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(bigInteger75);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrix67.scalarAdd(bigDecimal76);
        java.math.BigDecimal bigDecimal79 = bigDecimal76.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger80 = bigDecimal79.toBigIntegerExact();
        java.math.BigInteger bigInteger81 = bigDecimal79.unscaledValue();
        int int82 = bigDecimal79.precision();
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl14.scalarMultiply(bigDecimal79);
        org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrixImpl14.transpose();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal79", (bigDecimal23.compareTo(bigDecimal79) == 0) == bigDecimal23.equals(bigDecimal79));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(2805.0d);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        java.lang.String str3 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal6 = bigDecimal5.negate();
        int int7 = bigDecimal6.scale();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal11 = bigDecimal9.setScale((int) '4');
        java.math.BigDecimal bigDecimal12 = bigDecimal6.multiply(bigDecimal9);
        java.math.BigDecimal bigDecimal13 = bigDecimal1.multiply(bigDecimal9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal11", (bigDecimal2.compareTo(bigDecimal11) == 0) == bigDecimal2.equals(bigDecimal11));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal31 = bigMatrixImpl27.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal bigDecimal35 = bigDecimal34.stripTrailingZeros();
        java.math.BigDecimal bigDecimal37 = bigDecimal34.setScale(100);
        java.math.BigInteger bigInteger38 = bigDecimal37.unscaledValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrix32.scalarAdd(bigDecimal37);
        double[][] doubleArray40 = bigMatrix32.getDataAsDoubleArray();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal37", (bigDecimal1.compareTo(bigDecimal37) == 0) == bigDecimal1.equals(bigDecimal37));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger28 = bigDecimal27.unscaledValue();
        java.lang.String str29 = bigDecimal27.toPlainString();
        java.math.BigDecimal bigDecimal30 = bigDecimal23.divideToIntegralValue(bigDecimal27);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.unscaledValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal32.add(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(bigInteger37, (int) (short) -1);
        float float40 = bigDecimal39.floatValue();
        java.lang.String str41 = bigDecimal39.toPlainString();
        java.math.BigDecimal bigDecimal42 = bigDecimal23.min(bigDecimal39);
        short short43 = bigDecimal42.shortValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal42 and bigDecimal31", (bigDecimal42.compareTo(bigDecimal31) == 0) == bigDecimal42.equals(bigDecimal31));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(97, 3);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal3 = bigMatrixImpl2.getNorm();
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[][] doubleArray6 = bigMatrixImpl5.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray6);
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger11 = bigDecimal10.unscaledValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal8.add(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        java.lang.String str15 = bigDecimal14.toString();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = bigDecimal17.stripTrailingZeros();
        int int19 = bigDecimal17.signum();
        java.math.BigDecimal[] bigDecimalArray20 = bigDecimal14.divideAndRemainder(bigDecimal17);
        java.math.BigDecimal bigDecimal22 = bigDecimal14.pow((int) 'a');
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        java.lang.String str25 = bigDecimal24.toString();
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal28 = bigDecimal27.stripTrailingZeros();
        int int29 = bigDecimal27.signum();
        java.math.BigDecimal[] bigDecimalArray30 = bigDecimal24.divideAndRemainder(bigDecimal27);
        java.math.BigDecimal bigDecimal32 = bigDecimal24.pow((int) 'a');
        java.math.BigInteger bigInteger33 = bigDecimal24.toBigIntegerExact();
        java.math.BigDecimal bigDecimal34 = bigDecimal22.add(bigDecimal24);
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger38 = bigDecimal37.unscaledValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal35.add(bigDecimal37);
        java.math.BigDecimal bigDecimal40 = bigDecimal24.multiply(bigDecimal35);
        java.math.BigDecimal bigDecimal41 = bigDecimal8.subtract(bigDecimal24);
        java.math.BigDecimal bigDecimal42 = bigDecimal41.abs();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl7.scalarAdd(bigDecimal41);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        long long47 = bigDecimal45.longValue();
        long long48 = bigDecimal45.longValueExact();
        int int49 = bigDecimal45.precision();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        long long53 = bigDecimal51.longValue();
        long long54 = bigDecimal51.longValueExact();
        java.math.BigDecimal bigDecimal55 = bigDecimal45.add(bigDecimal51);
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.min(bigDecimal60);
        java.math.BigDecimal bigDecimal65 = bigDecimal63.movePointRight((int) (short) 10);
        int int66 = bigDecimal65.intValueExact();
        java.math.BigDecimal bigDecimal67 = bigDecimal65.plus();
        byte byte68 = bigDecimal67.byteValueExact();
        java.math.BigDecimal bigDecimal70 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger71 = bigDecimal70.unscaledValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal70.stripTrailingZeros();
        java.math.BigDecimal bigDecimal73 = bigDecimal67.max(bigDecimal70);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrix43.scalarAdd(bigDecimal70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal10 and bigDecimal72", (bigDecimal10.compareTo(bigDecimal72) == 0) == bigDecimal10.equals(bigDecimal72));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale(5);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointRight(5);
        java.math.BigDecimal bigDecimal7 = bigDecimal3.movePointLeft((int) (short) 100);
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger11 = bigDecimal10.unscaledValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal8.add(bigDecimal10);
        float float13 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal10.setScale((int) (short) 97);
        java.math.BigDecimal bigDecimal16 = bigDecimal3.remainder(bigDecimal15);
        java.math.BigInteger bigInteger17 = bigDecimal16.toBigInteger();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigInteger bigInteger12 = bigDecimal3.toBigIntegerExact();
        int int13 = bigDecimal3.precision();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl22.getNorm();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = bigDecimal35.stripTrailingZeros();
        float float37 = bigDecimal35.floatValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.divideToIntegralValue(bigDecimal35);
        boolean boolean39 = bigMatrixImpl22.equals((java.lang.Object) bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal3.divideAndRemainder(bigDecimal35);
        java.math.BigDecimal bigDecimal41 = bigDecimal1.remainder(bigDecimal35);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        int int47 = bigDecimal43.precision();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        long long51 = bigDecimal49.longValue();
        long long52 = bigDecimal49.longValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal43.add(bigDecimal49);
        java.math.BigDecimal bigDecimal55 = bigDecimal53.setScale((int) (byte) 10);
        java.math.BigDecimal bigDecimal56 = bigDecimal41.min(bigDecimal55);
        java.math.BigDecimal bigDecimal57 = bigDecimal55.negate();
        int int58 = bigDecimal55.intValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal55", (bigDecimal3.compareTo(bigDecimal55) == 0) == bigDecimal3.equals(bigDecimal55));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(5, 110);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        float float18 = bigDecimal16.floatValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal14.divideToIntegralValue(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal4.max(bigDecimal14);
        int int21 = bigDecimal14.intValueExact();
        java.math.BigDecimal bigDecimal22 = bigDecimal14.abs();
        boolean boolean23 = bigMatrixImpl2.equals((java.lang.Object) bigDecimal22);
        short short24 = bigDecimal22.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray28);
        int int33 = bigMatrixImpl32.getColumnDimension();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal38.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal42 = bigDecimal35.divide(bigDecimal38);
        java.math.BigInteger bigInteger43 = bigDecimal38.toBigIntegerExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl32.scalarAdd(bigDecimal38);
        int int45 = bigMatrix44.getColumnDimension();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal38 and bigDecimal41", (bigDecimal38.compareTo(bigDecimal41) == 0) == bigDecimal38.equals(bigDecimal41));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        boolean boolean10 = bigMatrixImpl8.isSquare();
        boolean boolean11 = bigMatrixImpl8.isSquare();
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl26.transpose();
        double[] doubleArray29 = bigMatrixImpl26.getRowAsDoubleArray((int) (short) 0);
        boolean boolean30 = bigMatrixImpl26.isSingular();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl26.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal35 = bigDecimal34.negate();
        int int36 = bigDecimal35.scale();
        boolean boolean37 = bigMatrixImpl32.equals((java.lang.Object) bigDecimal35);
        java.lang.String str38 = bigDecimal35.toEngineeringString();
        java.math.BigDecimal bigDecimal39 = bigDecimal35.stripTrailingZeros();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        long long43 = bigDecimal41.longValue();
        long long44 = bigDecimal41.longValueExact();
        int int45 = bigDecimal41.precision();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        long long49 = bigDecimal47.longValue();
        long long50 = bigDecimal47.longValueExact();
        java.math.BigDecimal bigDecimal51 = bigDecimal41.add(bigDecimal47);
        byte byte52 = bigDecimal41.byteValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal39.add(bigDecimal41);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl8.scalarAdd(bigDecimal39);
        int int55 = bigMatrix54.getRowDimension();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal35 and bigDecimal39", (bigDecimal35.compareTo(bigDecimal39) == 0) == bigDecimal35.equals(bigDecimal39));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal56 = bigDecimal17.stripTrailingZeros();
        java.math.BigDecimal bigDecimal57 = bigDecimal56.negate();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        java.lang.String str70 = bigDecimal69.toString();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        int int74 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal69.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal77 = bigDecimal69.pow((int) 'a');
        java.math.BigInteger bigInteger78 = bigDecimal69.toBigIntegerExact();
        java.math.BigDecimal bigDecimal79 = bigDecimal67.add(bigDecimal69);
        java.math.BigInteger bigInteger80 = bigDecimal79.unscaledValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(bigInteger80, 100);
        java.math.BigDecimal bigDecimal83 = bigDecimal82.ulp();
        java.math.BigDecimal bigDecimal84 = bigDecimal57.min(bigDecimal82);
        java.lang.String str85 = bigDecimal82.toPlainString();
        java.math.BigDecimal bigDecimal87 = java.math.BigDecimal.valueOf((double) (-1.0f));
        java.math.BigDecimal bigDecimal88 = bigDecimal82.remainder(bigDecimal87);
        long long89 = bigDecimal87.longValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal82", (bigDecimal17.compareTo(bigDecimal82) == 0) == bigDecimal17.equals(bigDecimal82));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        java.lang.String str5 = bigDecimal1.toEngineeringString();
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.valueOf(97L, 6);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.add(bigDecimal8);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger13 = bigDecimal12.unscaledValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal10.add(bigDecimal12);
        java.math.BigInteger bigInteger15 = bigDecimal12.toBigInteger();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(bigInteger15, (int) (short) -1);
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str20 = bigDecimal19.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal17.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal23 = bigDecimal17.setScale((int) (short) 2805);
        java.math.BigDecimal bigDecimal25 = bigDecimal17.movePointLeft((int) (byte) 11);
        java.math.BigDecimal bigDecimal26 = bigDecimal8.max(bigDecimal17);
        java.math.BigInteger bigInteger27 = bigDecimal8.toBigInteger();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal23", (bigDecimal17.compareTo(bigDecimal23) == 0) == bigDecimal17.equals(bigDecimal23));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal56 = bigDecimal17.stripTrailingZeros();
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) (short) -2805, (int) (short) 1);
        java.math.BigDecimal bigDecimal60 = bigDecimal56.divide(bigDecimal59);
        java.math.BigDecimal bigDecimal62 = bigDecimal60.setScale((int) (byte) -112);
        java.math.BigInteger bigInteger63 = bigDecimal60.unscaledValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal62", (bigDecimal17.compareTo(bigDecimal62) == 0) == bigDecimal17.equals(bigDecimal62));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        int int22 = bigDecimal9.scale();
        java.lang.String[] strArray24 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray25 = new java.lang.String[][] { strArray24 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(strArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(strArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(strArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(strArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(strArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(strArray25);
        java.math.BigDecimal bigDecimal35 = bigMatrixImpl34.getTrace();
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray48 = new double[][] { doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl50.transpose();
        java.math.BigDecimal bigDecimal52 = bigMatrixImpl50.getNorm();
        int int53 = bigDecimal52.signum();
        java.math.BigDecimal bigDecimal55 = bigDecimal52.movePointLeft((int) (byte) 97);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal57 = bigDecimal35.divide(bigDecimal55);
        java.math.BigDecimal bigDecimal58 = bigDecimal35.ulp();
        java.math.BigDecimal bigDecimal59 = bigDecimal9.add(bigDecimal35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal57", (bigDecimal1.compareTo(bigDecimal57) == 0) == bigDecimal1.equals(bigDecimal57));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        java.math.BigDecimal bigDecimal16 = bigMatrixImpl14.getNorm();
        int int17 = bigDecimal16.signum();
        java.math.BigDecimal bigDecimal19 = bigDecimal16.movePointLeft((int) (byte) 97);
        java.lang.String str20 = bigDecimal19.toString();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal26 = bigDecimal25.stripTrailingZeros();
        int int27 = bigDecimal25.signum();
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal22.divideAndRemainder(bigDecimal25);
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger32 = bigDecimal31.unscaledValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal29.add(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal31.toBigInteger();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger34, 32);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger39 = bigDecimal38.unscaledValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal38.stripTrailingZeros();
        boolean boolean41 = bigDecimal36.equals((java.lang.Object) bigDecimal40);
        java.math.BigDecimal bigDecimal42 = bigDecimal25.add(bigDecimal40);
        java.math.BigDecimal bigDecimal43 = bigDecimal19.remainder(bigDecimal25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal31 and bigDecimal40", (bigDecimal31.compareTo(bigDecimal40) == 0) == bigDecimal31.equals(bigDecimal40));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        int int3 = bigDecimal2.scale();
        int int4 = bigDecimal2.intValueExact();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf(0L, (int) (short) 1);
        java.math.BigDecimal bigDecimal8 = bigDecimal2.add(bigDecimal7);
        java.math.BigDecimal bigDecimal9 = bigDecimal8.abs();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal7", (bigDecimal2.compareTo(bigDecimal7) == 0) == bigDecimal2.equals(bigDecimal7));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[] bigDecimalArray18 = bigMatrix16.getColumn(0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl19.getNorm();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigInteger bigInteger45 = bigDecimal39.toBigInteger();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(bigInteger45);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrix37.scalarAdd(bigDecimal46);
        java.math.BigDecimal bigDecimal49 = bigDecimal46.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger50 = bigDecimal49.toBigIntegerExact();
        java.math.BigInteger bigInteger51 = bigDecimal49.unscaledValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl19.scalarMultiply(bigDecimal49);
        int int53 = bigMatrix52.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal39 and bigDecimal49", (bigDecimal39.compareTo(bigDecimal49) == 0) == bigDecimal39.equals(bigDecimal49));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(8667.0d);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.ulp();
        java.math.BigInteger bigInteger4 = bigDecimal1.toBigIntegerExact();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal28 = bigDecimal26.pow((int) (byte) 97);
        int int29 = bigDecimal26.scale();
        java.math.BigDecimal bigDecimal30 = bigDecimal1.multiply(bigDecimal26);
        long long31 = bigDecimal1.longValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal30", (bigDecimal6.compareTo(bigDecimal30) == 0) == bigDecimal6.equals(bigDecimal30));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        int int3 = bigDecimal1.intValueExact();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger7 = bigDecimal6.unscaledValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal4.add(bigDecimal6);
        java.math.BigInteger bigInteger9 = bigDecimal6.toBigInteger();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(bigInteger9, 32);
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger14 = bigDecimal13.unscaledValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal13.stripTrailingZeros();
        boolean boolean16 = bigDecimal11.equals((java.lang.Object) bigDecimal15);
        java.math.BigDecimal bigDecimal17 = bigDecimal1.add(bigDecimal11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal15", (bigDecimal6.compareTo(bigDecimal15) == 0) == bigDecimal6.equals(bigDecimal15));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray39, bigDecimalArray47, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray56);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal65 = bigDecimal60.min(bigDecimal63);
        java.math.BigInteger bigInteger66 = bigDecimal60.toBigInteger();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(bigInteger66);
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal70 = bigDecimal69.stripTrailingZeros();
        float float71 = bigDecimal69.floatValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.multiply(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrix58.scalarAdd(bigDecimal72);
        java.math.BigInteger bigInteger74 = bigDecimal72.toBigInteger();
        boolean boolean75 = bigMatrixImpl31.equals((java.lang.Object) bigDecimal72);
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.valueOf((long) 100, 0);
        java.math.BigDecimal bigDecimal80 = bigDecimal78.setScale((int) (byte) -1);
        java.math.BigDecimal bigDecimal81 = bigDecimal72.max(bigDecimal80);
        java.math.BigDecimal bigDecimal83 = new java.math.BigDecimal(0.0d);
        int int84 = bigDecimal83.intValue();
        java.math.BigDecimal bigDecimal86 = new java.math.BigDecimal(0.0d);
        int int87 = bigDecimal86.intValue();
        java.math.BigDecimal bigDecimal88 = bigDecimal83.min(bigDecimal86);
        int int89 = bigDecimal86.signum();
        java.math.BigDecimal bigDecimal90 = bigDecimal86.stripTrailingZeros();
        java.math.BigDecimal bigDecimal91 = bigDecimal81.max(bigDecimal86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal78 and bigDecimal91", (bigDecimal78.compareTo(bigDecimal91) == 0) == bigDecimal78.equals(bigDecimal91));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.lang.String str26 = bigDecimal23.toEngineeringString();
        java.math.BigDecimal bigDecimal27 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal29 = bigDecimal23.setScale((int) (byte) 110);
        short short30 = bigDecimal29.shortValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal27", (bigDecimal23.compareTo(bigDecimal27) == 0) == bigDecimal23.equals(bigDecimal27));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        java.lang.String str5 = bigDecimal4.toString();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal8 = bigDecimal7.stripTrailingZeros();
        int int9 = bigDecimal7.signum();
        java.math.BigDecimal[] bigDecimalArray10 = bigDecimal4.divideAndRemainder(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal4.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray13 = new java.math.BigDecimal[] { bigDecimal2, bigDecimal4 };
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray13);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray13);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = bigMatrixImpl15.transpose();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl0.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl15);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(5, 110);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        float float18 = bigDecimal16.floatValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal14.divideToIntegralValue(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal4.max(bigDecimal14);
        int int21 = bigDecimal14.intValueExact();
        java.math.BigDecimal bigDecimal22 = bigDecimal14.abs();
        boolean boolean23 = bigMatrixImpl2.equals((java.lang.Object) bigDecimal22);
        bigMatrixImpl2.setScale((int) (byte) -100);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl2.getNorm();
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray19 = new double[][] { doubleArray9, doubleArray12, doubleArray15, doubleArray18 };
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl21.transpose();
        boolean boolean23 = bigMatrixImpl21.isSingular();
        double[] doubleArray25 = bigMatrixImpl21.getColumnAsDoubleArray(0);
        int int26 = bigMatrixImpl21.getRoundingMode();
        boolean boolean27 = bigMatrixImpl21.isSingular();
        int int28 = bigMatrixImpl21.getRoundingMode();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((int) (byte) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl21.scalarMultiply(bigDecimal30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl6.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl21);
        double[][] doubleArray33 = bigMatrixImpl6.getDataAsDoubleArray();
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray46 = new double[][] { doubleArray36, doubleArray39, doubleArray42, doubleArray45 };
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl48.transpose();
        double[] doubleArray51 = bigMatrixImpl48.getRowAsDoubleArray((int) (short) 0);
        boolean boolean52 = bigMatrixImpl48.isSingular();
        boolean boolean53 = bigMatrixImpl48.isSquare();
        int int54 = bigMatrixImpl48.getScale();
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger58 = bigDecimal57.unscaledValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal55.add(bigDecimal57);
        java.math.BigDecimal bigDecimal61 = bigDecimal57.setScale(100);
        boolean boolean62 = bigMatrixImpl48.equals((java.lang.Object) bigDecimal57);
        java.lang.String str63 = bigDecimal57.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl6.scalarAdd(bigDecimal57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal30 and bigDecimal61", (bigDecimal30.compareTo(bigDecimal61) == 0) == bigDecimal30.equals(bigDecimal61));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.lang.String str26 = bigDecimal23.toEngineeringString();
        java.math.BigDecimal bigDecimal27 = bigDecimal23.stripTrailingZeros();
        java.math.BigInteger bigInteger28 = bigDecimal27.toBigIntegerExact();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(bigInteger28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal27", (bigDecimal23.compareTo(bigDecimal27) == 0) == bigDecimal23.equals(bigDecimal27));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        java.lang.String str48 = bigDecimal47.toString();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        int int52 = bigDecimal50.signum();
        java.math.BigDecimal[] bigDecimalArray53 = bigDecimal47.divideAndRemainder(bigDecimal50);
        java.math.BigDecimal bigDecimal55 = bigDecimal47.pow((int) 'a');
        java.math.BigInteger bigInteger56 = bigDecimal47.toBigIntegerExact();
        java.math.BigDecimal bigDecimal57 = bigDecimal45.add(bigDecimal47);
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigInteger bigInteger68 = bigDecimal59.toBigIntegerExact();
        float float69 = bigDecimal59.floatValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal45.add(bigDecimal59);
        java.math.BigDecimal bigDecimal72 = bigDecimal59.pow((int) ' ');
        java.math.BigDecimal bigDecimal73 = bigDecimal35.subtract(bigDecimal72);
        java.math.BigDecimal bigDecimal74 = bigDecimal25.subtract(bigDecimal72);
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal(0.0d);
        int int80 = bigDecimal79.intValue();
        java.math.BigDecimal bigDecimal81 = bigDecimal76.min(bigDecimal79);
        java.math.BigInteger bigInteger82 = bigDecimal76.toBigInteger();
        java.math.BigInteger bigInteger83 = bigDecimal76.unscaledValue();
        java.math.BigDecimal bigDecimal84 = new java.math.BigDecimal(bigInteger83);
        java.math.BigDecimal bigDecimal86 = new java.math.BigDecimal(bigInteger83, (int) ' ');
        java.math.BigDecimal bigDecimal87 = bigDecimal25.multiply(bigDecimal86);
        java.math.BigInteger bigInteger88 = bigDecimal87.toBigIntegerExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal86", (bigDecimal18.compareTo(bigDecimal86) == 0) == bigDecimal18.equals(bigDecimal86));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointRight((-32));
        java.math.BigDecimal bigDecimal6 = bigDecimal5.ulp();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger10 = bigDecimal9.unscaledValue();
        java.math.BigDecimal bigDecimal11 = bigDecimal9.stripTrailingZeros();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        long long15 = bigDecimal13.longValue();
        long long16 = bigDecimal13.longValueExact();
        short short17 = bigDecimal13.shortValueExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal9.min(bigDecimal13);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl5.scalarMultiply(bigDecimal9);
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl5.transpose();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal9 and bigDecimal11", (bigDecimal9.compareTo(bigDecimal11) == 0) == bigDecimal9.equals(bigDecimal11));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrix10.getData();
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrix27.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray42 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl44.transpose();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        java.lang.String str50 = bigDecimal49.toString();
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal53 = bigDecimal52.stripTrailingZeros();
        int int54 = bigDecimal52.signum();
        java.math.BigDecimal[] bigDecimalArray55 = bigDecimal49.divideAndRemainder(bigDecimal52);
        java.math.BigDecimal bigDecimal57 = bigDecimal49.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal47, bigDecimal49 };
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray58);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray58);
        java.math.BigDecimal[] bigDecimalArray61 = bigMatrix45.preMultiply(bigDecimalArray58);
        java.math.BigDecimal[] bigDecimalArray62 = bigMatrixImpl29.preMultiply(bigDecimalArray61);
        java.math.BigDecimal[] bigDecimalArray64 = bigMatrixImpl29.getRow(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray64);
        java.math.BigDecimal[] bigDecimalArray66 = bigMatrix10.operate(bigDecimalArray64);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray66);
        // Transitivity of equals
        org.junit.Assert.assertTrue("Contract failed: equals-transitive on bigMatrix67, bigMatrixImpl8, and bigDecimal1.", !(bigMatrix67.equals(bigMatrixImpl8) && bigMatrixImpl8.equals(bigDecimal1)) || bigMatrix67.equals(bigDecimal1));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.setScale(5);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str8 = bigDecimal7.toEngineeringString();
        int int9 = bigDecimal5.compareTo(bigDecimal7);
        java.math.BigDecimal bigDecimal10 = bigDecimal1.multiply(bigDecimal5);
        java.math.BigDecimal bigDecimal11 = bigDecimal5.stripTrailingZeros();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((-1L), (int) (byte) 1);
        java.math.BigDecimal bigDecimal16 = bigDecimal14.pow(2);
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        java.math.BigDecimal bigDecimal21 = bigDecimal19.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal22 = bigDecimal16.add(bigDecimal19);
        java.math.BigInteger bigInteger23 = bigDecimal19.toBigIntegerExact();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger23, 7);
        java.math.BigDecimal bigDecimal26 = bigDecimal5.divideToIntegralValue(bigDecimal25);
        int int27 = bigDecimal26.precision();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal5", (bigDecimal3.compareTo(bigDecimal5) == 0) == bigDecimal3.equals(bigDecimal5));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) 6);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.unscaledValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal32.add(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(bigInteger37, (int) (short) -1);
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str42 = bigDecimal41.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal39.divideAndRemainder(bigDecimal41);
        java.math.BigDecimal bigDecimal44 = bigDecimal31.remainder(bigDecimal39);
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray57 = new double[][] { doubleArray47, doubleArray50, doubleArray53, doubleArray56 };
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        java.lang.String str64 = bigDecimal63.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl60.scalarMultiply(bigDecimal63);
        java.math.BigDecimal bigDecimal66 = bigDecimal31.max(bigDecimal63);
        java.math.BigDecimal bigDecimal67 = bigDecimal63.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl29.scalarMultiply(bigDecimal63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal63", (bigDecimal1.compareTo(bigDecimal63) == 0) == bigDecimal1.equals(bigDecimal63));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        int int35 = bigDecimal34.scale();
        java.math.BigDecimal bigDecimal37 = bigDecimal34.scaleByPowerOfTen(4);
        java.math.BigDecimal bigDecimal39 = bigDecimal37.setScale((int) (short) 4);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl27.scalarMultiply(bigDecimal37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal34", (bigDecimal1.compareTo(bigDecimal34) == 0) == bigDecimal1.equals(bigDecimal34));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal33 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal34 = bigDecimal7.multiply(bigDecimal21);
        java.math.BigDecimal bigDecimal35 = bigDecimal7.ulp();
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray48 = new double[][] { doubleArray38, doubleArray41, doubleArray44, doubleArray47 };
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray48);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray48);
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.min(bigDecimal57);
        java.math.BigInteger bigInteger60 = bigDecimal54.toBigInteger();
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(bigInteger60);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrix52.scalarAdd(bigDecimal61);
        java.math.BigDecimal bigDecimal63 = bigDecimal7.min(bigDecimal61);
        long long64 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal66 = bigDecimal7.movePointRight(0);
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[] doubleArray72 = new double[] { 1.0d, 100.0f };
        double[] doubleArray75 = new double[] { 1.0d, 100.0f };
        double[] doubleArray78 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray79 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray79);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray79);
        java.lang.String str82 = bigMatrixImpl81.toString();
        int int83 = bigMatrixImpl81.getRowDimension();
        bigMatrixImpl81.setScale((int) (byte) 1);
        java.math.BigDecimal bigDecimal88 = java.math.BigDecimal.valueOf((long) 4, 7);
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl81.scalarAdd(bigDecimal88);
        java.math.BigDecimal bigDecimal92 = bigDecimal66.divide(bigDecimal88, 52, 3);
        java.math.BigDecimal bigDecimal94 = bigDecimal66.movePointRight(400);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal92", (bigDecimal1.compareTo(bigDecimal92) == 0) == bigDecimal1.equals(bigDecimal92));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray39, bigDecimalArray47, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray56);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal65 = bigDecimal60.min(bigDecimal63);
        java.math.BigInteger bigInteger66 = bigDecimal60.toBigInteger();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(bigInteger66);
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal70 = bigDecimal69.stripTrailingZeros();
        float float71 = bigDecimal69.floatValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.multiply(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrix58.scalarAdd(bigDecimal72);
        java.math.BigInteger bigInteger74 = bigDecimal72.toBigInteger();
        boolean boolean75 = bigMatrixImpl31.equals((java.lang.Object) bigDecimal72);
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.valueOf((long) 100, 0);
        java.math.BigDecimal bigDecimal80 = bigDecimal78.setScale((int) (byte) -1);
        java.math.BigDecimal bigDecimal81 = bigDecimal72.max(bigDecimal80);
        java.lang.String str82 = bigDecimal80.toPlainString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal78 and bigDecimal80", (bigDecimal78.compareTo(bigDecimal80) == 0) == bigDecimal78.equals(bigDecimal80));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal16.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl14.preMultiply(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        boolean boolean22 = bigMatrixImpl21.isSingular();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal[][] bigDecimalArray47 = new java.math.BigDecimal[][] { bigDecimalArray30, bigDecimalArray38, bigDecimalArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray47);
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal56 = bigDecimal51.min(bigDecimal54);
        java.math.BigInteger bigInteger57 = bigDecimal51.toBigInteger();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(bigInteger57);
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal61 = bigDecimal60.stripTrailingZeros();
        float float62 = bigDecimal60.floatValue();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.multiply(bigDecimal60);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrix49.scalarAdd(bigDecimal63);
        int int65 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal66 = bigDecimal63.stripTrailingZeros();
        java.math.BigDecimal bigDecimal67 = bigDecimal63.plus();
        java.math.BigDecimal bigDecimal69 = bigDecimal63.scaleByPowerOfTen(8667);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl21.scalarMultiply(bigDecimal63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal69", (bigDecimal3.compareTo(bigDecimal69) == 0) == bigDecimal3.equals(bigDecimal69));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getData();
        boolean boolean39 = bigMatrixImpl37.isSquare();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int42 = bigDecimal41.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl37.scalarMultiply(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal1.divide(bigDecimal41, (int) (short) 100, 6);
        int int47 = bigDecimal46.scale();
        java.math.BigDecimal bigDecimal49 = bigDecimal46.movePointRight((int) (byte) -100);
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal((long) '4');
        int int52 = bigDecimal51.intValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal46.add(bigDecimal51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal49", (bigDecimal1.compareTo(bigDecimal49) == 0) == bigDecimal1.equals(bigDecimal49));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSingular();
        boolean boolean31 = bigMatrixImpl27.isSingular();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger35 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal36 = bigDecimal34.ulp();
        java.math.BigDecimal bigDecimal38 = bigDecimal36.scaleByPowerOfTen(100);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarMultiply(bigDecimal38);
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl27.getNorm();
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[] doubleArray52 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray53 = new double[][] { doubleArray43, doubleArray46, doubleArray49, doubleArray52 };
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray53);
        boolean boolean55 = bigMatrix54.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrix54.copy();
        java.math.BigDecimal bigDecimal57 = bigMatrix54.getNorm();
        java.math.BigDecimal bigDecimal58 = bigDecimal57.abs();
        java.math.BigDecimal bigDecimal59 = bigDecimal57.stripTrailingZeros();
        java.math.BigDecimal bigDecimal61 = bigDecimal59.scaleByPowerOfTen(64);
        java.math.BigDecimal bigDecimal62 = bigDecimal40.divideToIntegralValue(bigDecimal59);
        int int63 = bigDecimal62.precision();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal57 and bigDecimal59", (bigDecimal57.compareTo(bigDecimal59) == 0) == bigDecimal57.equals(bigDecimal59));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) (short) -100);
        byte byte2 = bigDecimal1.byteValueExact();
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray15 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14 };
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray15);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray15);
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray15);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray15);
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigInteger bigInteger27 = bigDecimal21.toBigInteger();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(bigInteger27);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrix19.scalarAdd(bigDecimal28);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal31.toBigInteger();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal40 = bigDecimal39.negate();
        java.math.BigDecimal bigDecimal41 = bigDecimal31.add(bigDecimal39);
        java.math.BigDecimal bigDecimal42 = bigDecimal28.divideToIntegralValue(bigDecimal41);
        java.math.BigDecimal bigDecimal43 = bigDecimal1.subtract(bigDecimal41);
        java.math.BigInteger bigInteger44 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(bigInteger44, 0);
        java.math.BigDecimal bigDecimal47 = bigDecimal46.plus();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 6);
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal("0.0");
        int int52 = bigDecimal49.compareTo(bigDecimal51);
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.valueOf((long) 6);
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger58 = bigDecimal57.unscaledValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal55.add(bigDecimal57);
        java.math.BigInteger bigInteger60 = bigDecimal57.toBigInteger();
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(bigInteger60, (int) (short) -1);
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str65 = bigDecimal64.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray66 = bigDecimal62.divideAndRemainder(bigDecimal64);
        java.math.BigDecimal bigDecimal67 = bigDecimal54.remainder(bigDecimal62);
        java.math.BigDecimal bigDecimal68 = bigDecimal51.subtract(bigDecimal54);
        java.math.BigDecimal bigDecimal69 = bigDecimal46.min(bigDecimal68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal21 and bigDecimal51", (bigDecimal21.compareTo(bigDecimal51) == 0) == bigDecimal21.equals(bigDecimal51));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl27.getRowMatrix((int) (byte) 1);
        double[][] doubleArray43 = bigMatrixImpl27.getDataAsDoubleArray();
        int int44 = bigMatrixImpl27.getRoundingMode();
        bigMatrixImpl27.setScale((-100));
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        java.lang.String str49 = bigDecimal48.toString();
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal52 = bigDecimal51.stripTrailingZeros();
        int int53 = bigDecimal51.signum();
        java.math.BigDecimal[] bigDecimalArray54 = bigDecimal48.divideAndRemainder(bigDecimal51);
        java.math.BigDecimal bigDecimal56 = bigDecimal48.pow((int) 'a');
        java.math.BigInteger bigInteger57 = bigDecimal48.toBigInteger();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(bigInteger57, 3);
        java.math.BigDecimal bigDecimal61 = bigDecimal59.setScale((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl27.scalarAdd(bigDecimal59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal61", (bigDecimal1.compareTo(bigDecimal61) == 0) == bigDecimal1.equals(bigDecimal61));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.lang.String str3 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.movePointRight(64);
        java.math.BigDecimal bigDecimal7 = bigDecimal5.movePointLeft((int) (short) 0);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        java.lang.String str10 = bigDecimal9.toString();
        java.math.BigDecimal bigDecimal12 = bigDecimal9.setScale(0);
        byte byte13 = bigDecimal12.byteValueExact();
        int int14 = bigDecimal12.precision();
        short short15 = bigDecimal12.shortValueExact();
        java.math.BigDecimal bigDecimal16 = bigDecimal5.multiply(bigDecimal12);
        long long17 = bigDecimal16.longValue();
        int int18 = bigDecimal16.intValue();
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray31 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30 };
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl33.transpose();
        double[] doubleArray36 = bigMatrixImpl33.getRowAsDoubleArray((int) (short) 0);
        boolean boolean37 = bigMatrixImpl33.isSingular();
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl33.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray38);
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal42 = bigDecimal41.negate();
        int int43 = bigDecimal42.scale();
        boolean boolean44 = bigMatrixImpl39.equals((java.lang.Object) bigDecimal42);
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger47 = bigDecimal46.unscaledValue();
        java.lang.String str48 = bigDecimal46.toPlainString();
        java.math.BigDecimal bigDecimal49 = bigDecimal42.divideToIntegralValue(bigDecimal46);
        java.math.BigDecimal bigDecimal50 = bigDecimal42.ulp();
        java.math.BigDecimal bigDecimal51 = bigDecimal16.min(bigDecimal50);
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal55 = bigDecimal53.setScale(5);
        java.math.BigDecimal bigDecimal57 = bigDecimal55.movePointRight(5);
        java.math.BigDecimal bigDecimal59 = bigDecimal55.movePointLeft((int) (short) 100);
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger63 = bigDecimal62.unscaledValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal60.add(bigDecimal62);
        float float65 = bigDecimal62.floatValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.setScale((int) (short) 97);
        java.math.BigDecimal bigDecimal68 = bigDecimal55.remainder(bigDecimal67);
        java.math.BigDecimal bigDecimal69 = bigDecimal16.min(bigDecimal68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal67", (bigDecimal1.compareTo(bigDecimal67) == 0) == bigDecimal1.equals(bigDecimal67));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigDecimal bigDecimal30 = bigDecimal28.movePointLeft(546084);
        java.lang.String str31 = bigDecimal30.toEngineeringString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigInteger bigInteger47 = bigDecimal41.toBigInteger();
        java.math.BigDecimal bigDecimal48 = bigDecimal39.max(bigDecimal41);
        long long49 = bigDecimal48.longValueExact();
        java.math.BigDecimal bigDecimal50 = bigDecimal48.abs();
        java.math.BigDecimal bigDecimal52 = bigDecimal48.movePointRight((int) (short) -100);
        java.math.BigDecimal bigDecimal54 = bigDecimal48.movePointLeft(10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal52", (bigDecimal1.compareTo(bigDecimal52) == 0) == bigDecimal1.equals(bigDecimal52));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.lang.String str3 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.movePointRight(64);
        java.math.BigDecimal bigDecimal6 = bigDecimal5.stripTrailingZeros();
        java.math.BigInteger bigInteger7 = bigDecimal5.unscaledValue();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger7, (int) (short) -2805);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal5 and bigDecimal6", (bigDecimal5.compareTo(bigDecimal6) == 0) == bigDecimal5.equals(bigDecimal6));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        int int3 = bigMatrixImpl2.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl2.getDataRef();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((double) (-1.0f));
        int int7 = bigDecimal6.precision();
        boolean boolean8 = bigMatrixImpl2.equals((java.lang.Object) bigDecimal6);
        java.math.BigInteger bigInteger9 = bigDecimal6.toBigIntegerExact();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.getRowMatrix(0);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal5 = bigMatrixImpl2.getNorm();
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.transpose();
        boolean boolean4 = bigMatrix3.isSingular();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger30 = bigDecimal29.unscaledValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal27.add(bigDecimal29);
        java.math.BigDecimal bigDecimal32 = bigDecimal16.multiply(bigDecimal27);
        java.math.BigDecimal bigDecimal33 = bigDecimal0.subtract(bigDecimal16);
        java.math.BigDecimal bigDecimal34 = bigDecimal33.abs();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal[][] bigDecimalArray59 = new java.math.BigDecimal[][] { bigDecimalArray42, bigDecimalArray50, bigDecimalArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl62.scalarAdd(bigDecimal65);
        java.math.BigDecimal bigDecimal67 = bigDecimal34.add(bigDecimal65);
        short short68 = bigDecimal67.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal65", (bigDecimal6.compareTo(bigDecimal65) == 0) == bigDecimal6.equals(bigDecimal65));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger32 = bigDecimal31.unscaledValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal31.stripTrailingZeros();
        java.math.BigDecimal bigDecimal35 = bigDecimal31.movePointRight((int) (short) -1);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl29.scalarMultiply(bigDecimal31);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (byte) 97);
        int int39 = bigDecimal38.intValueExact();
        java.math.BigDecimal bigDecimal42 = bigDecimal38.setScale(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl29.scalarMultiply(bigDecimal38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal31 and bigDecimal33", (bigDecimal31.compareTo(bigDecimal33) == 0) == bigDecimal31.equals(bigDecimal33));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal21.pow((int) (byte) 100);
        double double24 = bigDecimal21.doubleValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl19.scalarAdd(bigDecimal21);
        int int26 = bigMatrixImpl19.getRoundingMode();
        int int27 = bigMatrixImpl19.getColumnDimension();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal33 = bigDecimal31.setScale(5);
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str36 = bigDecimal35.toEngineeringString();
        int int37 = bigDecimal33.compareTo(bigDecimal35);
        java.math.BigDecimal bigDecimal38 = bigDecimal29.multiply(bigDecimal33);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal((long) (byte) 0);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal44 = bigDecimal33.min(bigDecimal43);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl19.scalarMultiply(bigDecimal33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal40 and bigDecimal43", (bigDecimal40.compareTo(bigDecimal43) == 0) == bigDecimal40.equals(bigDecimal43));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        int int65 = bigMatrixImpl27.getRoundingMode();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        java.lang.String str68 = bigDecimal67.toString();
        java.math.BigDecimal bigDecimal70 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal71 = bigDecimal70.stripTrailingZeros();
        int int72 = bigDecimal70.signum();
        java.math.BigDecimal[] bigDecimalArray73 = bigDecimal67.divideAndRemainder(bigDecimal70);
        java.math.BigDecimal bigDecimal75 = bigDecimal67.pow((int) 'a');
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        java.lang.String str78 = bigDecimal77.toString();
        java.math.BigDecimal bigDecimal80 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal81 = bigDecimal80.stripTrailingZeros();
        int int82 = bigDecimal80.signum();
        java.math.BigDecimal[] bigDecimalArray83 = bigDecimal77.divideAndRemainder(bigDecimal80);
        java.math.BigDecimal bigDecimal85 = bigDecimal77.pow((int) 'a');
        java.math.BigInteger bigInteger86 = bigDecimal77.toBigIntegerExact();
        java.math.BigDecimal bigDecimal87 = bigDecimal75.add(bigDecimal77);
        int int88 = bigDecimal77.scale();
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl27.scalarAdd(bigDecimal77);
        java.math.BigDecimal bigDecimal91 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal93 = bigDecimal91.setScale((int) '4');
        java.math.BigDecimal bigDecimal94 = bigDecimal91.abs();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl27.scalarMultiply(bigDecimal94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal94 and bigDecimal93", (bigDecimal94.compareTo(bigDecimal93) == 0) == bigDecimal94.equals(bigDecimal93));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.scalarAdd(bigDecimal30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.copy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal30", (bigDecimal1.compareTo(bigDecimal30) == 0) == bigDecimal1.equals(bigDecimal30));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        double[][] doubleArray10 = bigMatrixImpl5.getDataAsDoubleArray();
        boolean boolean11 = bigMatrixImpl5.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode((-35));
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal16.divideAndRemainder(bigDecimal18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl20.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl20.copy();
        bigMatrixImpl20.setRoundingMode(10);
        java.lang.String[] strArray26 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray26 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(strArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl20.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl31);
        java.math.BigDecimal[][] bigDecimalArray33 = bigMatrix32.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl5.subtract(bigMatrix32);
        java.math.BigDecimal bigDecimal35 = bigMatrix32.getNorm();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal53.min(bigDecimal56);
        java.math.BigDecimal[] bigDecimalArray59 = new java.math.BigDecimal[] { bigDecimal58 };
        java.math.BigDecimal[][] bigDecimalArray60 = new java.math.BigDecimal[][] { bigDecimalArray43, bigDecimalArray51, bigDecimalArray59 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray60);
        int int64 = bigMatrixImpl63.getScale();
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal67 = bigDecimal66.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl63.scalarMultiply(bigDecimal66);
        java.math.BigInteger bigInteger69 = bigDecimal66.unscaledValue();
        int int70 = bigDecimal66.scale();
        java.math.BigDecimal bigDecimal71 = bigDecimal66.stripTrailingZeros();
        java.math.BigDecimal bigDecimal72 = bigDecimal35.divide(bigDecimal71);
        int int73 = bigDecimal35.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal37 and bigDecimal72", (bigDecimal37.compareTo(bigDecimal72) == 0) == bigDecimal37.equals(bigDecimal72));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        int int32 = bigMatrixImpl31.getColumnDimension();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal("100");
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal[][] bigDecimalArray59 = new java.math.BigDecimal[][] { bigDecimalArray42, bigDecimalArray50, bigDecimalArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray59);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        java.math.BigDecimal bigDecimal68 = bigDecimal63.min(bigDecimal66);
        java.math.BigInteger bigInteger69 = bigDecimal63.toBigInteger();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(bigInteger69);
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        float float74 = bigDecimal72.floatValue();
        java.math.BigDecimal bigDecimal75 = bigDecimal70.multiply(bigDecimal72);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrix61.scalarAdd(bigDecimal75);
        short short77 = bigDecimal75.shortValueExact();
        java.math.BigDecimal bigDecimal79 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int80 = bigDecimal79.signum();
        java.math.BigDecimal[] bigDecimalArray81 = bigDecimal75.divideAndRemainder(bigDecimal79);
        java.math.BigDecimal bigDecimal82 = bigDecimal34.add(bigDecimal75);
        java.math.BigDecimal bigDecimal84 = new java.math.BigDecimal((long) (short) -100);
        java.math.BigDecimal bigDecimal85 = bigDecimal82.min(bigDecimal84);
        org.apache.commons.math.linear.BigMatrix bigMatrix87 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal88 = bigMatrix87.getDeterminant();
        int int89 = bigDecimal88.precision();
        java.math.BigDecimal bigDecimal90 = bigDecimal82.remainder(bigDecimal88);
        java.math.BigDecimal bigDecimal92 = bigDecimal90.movePointRight(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix93 = bigMatrixImpl31.scalarAdd(bigDecimal90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal92", (bigDecimal1.compareTo(bigDecimal92) == 0) == bigDecimal1.equals(bigDecimal92));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.lang.String str26 = bigDecimal23.toEngineeringString();
        java.math.BigDecimal bigDecimal27 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal29 = bigDecimal23.setScale((int) (byte) 110);
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray42 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl44.transpose();
        int int46 = bigMatrixImpl44.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl44.transpose();
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrix47.getData();
        java.math.BigDecimal bigDecimal49 = bigMatrix47.getNorm();
        java.math.BigDecimal bigDecimal51 = bigDecimal49.scaleByPowerOfTen((int) '#');
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(5);
        java.math.BigDecimal bigDecimal56 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger57 = bigDecimal56.toBigInteger();
        java.math.BigDecimal bigDecimal58 = bigDecimal56.ulp();
        java.math.BigDecimal bigDecimal59 = bigDecimal53.min(bigDecimal58);
        java.math.BigDecimal bigDecimal60 = bigDecimal49.remainder(bigDecimal53);
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        java.lang.String str63 = bigDecimal62.toString();
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal66 = bigDecimal65.stripTrailingZeros();
        int int67 = bigDecimal65.signum();
        java.math.BigDecimal[] bigDecimalArray68 = bigDecimal62.divideAndRemainder(bigDecimal65);
        java.math.BigDecimal bigDecimal70 = bigDecimal62.pow((int) 'a');
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        java.lang.String str73 = bigDecimal72.toString();
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal76 = bigDecimal75.stripTrailingZeros();
        int int77 = bigDecimal75.signum();
        java.math.BigDecimal[] bigDecimalArray78 = bigDecimal72.divideAndRemainder(bigDecimal75);
        java.math.BigDecimal bigDecimal80 = bigDecimal72.pow((int) 'a');
        java.math.BigInteger bigInteger81 = bigDecimal72.toBigIntegerExact();
        java.math.BigDecimal bigDecimal82 = bigDecimal70.add(bigDecimal72);
        short short83 = bigDecimal72.shortValueExact();
        java.lang.String str84 = bigDecimal72.toString();
        java.math.BigDecimal bigDecimal85 = bigDecimal60.max(bigDecimal72);
        int int86 = bigDecimal29.compareTo(bigDecimal60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal27", (bigDecimal23.compareTo(bigDecimal27) == 0) == bigDecimal23.equals(bigDecimal27));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarAdd(bigDecimal38);
        java.math.BigDecimal bigDecimal41 = bigDecimal38.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal38.min(bigDecimal43);
        java.math.BigDecimal bigDecimal49 = bigDecimal43.setScale((int) (byte) 11, (int) (byte) 0);
        int int50 = bigDecimal43.scale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal49", (bigDecimal1.compareTo(bigDecimal49) == 0) == bigDecimal1.equals(bigDecimal49));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        int int42 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.movePointLeft((int) (byte) 100);
        int int46 = bigDecimal43.intValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal1.ulp();
        java.lang.String str13 = bigDecimal1.toEngineeringString();
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[] doubleArray22 = new double[] { 1.0d, 100.0f };
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray26 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25 };
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray26);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray26);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl28.transpose();
        double[] doubleArray31 = bigMatrixImpl28.getRowAsDoubleArray((int) (short) 0);
        boolean boolean32 = bigMatrixImpl28.isSingular();
        java.math.BigDecimal[][] bigDecimalArray33 = bigMatrixImpl28.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray33);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal37 = bigDecimal36.negate();
        int int38 = bigDecimal37.scale();
        boolean boolean39 = bigMatrixImpl34.equals((java.lang.Object) bigDecimal37);
        java.math.BigDecimal bigDecimal40 = bigDecimal37.plus();
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal1.divide(bigDecimal40, (int) (short) 9, 5);
        java.math.BigDecimal bigDecimal45 = bigDecimal44.negate();
        double double46 = bigDecimal45.doubleValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(bigInteger32, 3);
        java.lang.String[] strArray36 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray37 = new java.lang.String[][] { strArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(strArray37);
        int int39 = bigMatrixImpl38.getColumnDimension();
        boolean boolean40 = bigDecimal34.equals((java.lang.Object) int39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal43 = bigDecimal34.pow(6);
        java.lang.String str44 = bigDecimal43.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal34", (bigDecimal23.compareTo(bigDecimal34) == 0) == bigDecimal23.equals(bigDecimal34));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, 1);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getData();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getDataRef();
        java.math.BigDecimal bigDecimal33 = bigMatrixImpl31.getNorm();
        boolean boolean34 = bigMatrixImpl31.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl31.copy();
        double[] doubleArray37 = bigMatrixImpl31.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl31.scalarMultiply(bigDecimal38);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl31.transpose();
        boolean boolean41 = bigMatrixImpl31.isSquare();
        java.math.BigDecimal[] bigDecimalArray43 = bigMatrixImpl31.getRow((int) (byte) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray43);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal[] bigDecimalArray45 = bigMatrixImpl2.operate(bigDecimalArray43);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = bigDecimal41.setScale(0);
        byte byte45 = bigDecimal44.byteValueExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal44.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.scalarMultiply(bigDecimal46);
        boolean boolean48 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal61 = bigDecimal60.stripTrailingZeros();
        float float62 = bigDecimal60.floatValue();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.divideToIntegralValue(bigDecimal60);
        java.math.BigDecimal bigDecimal65 = bigDecimal63.movePointRight((int) (byte) 10);
        java.math.BigDecimal bigDecimal67 = bigDecimal63.movePointLeft((int) '4');
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl27.scalarAdd(bigDecimal67);
        double[] doubleArray70 = bigMatrixImpl27.getRowAsDoubleArray(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal67", (bigDecimal1.compareTo(bigDecimal67) == 0) == bigDecimal1.equals(bigDecimal67));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(4);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 10);
        int int4 = bigDecimal3.scale();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.divideToIntegralValue(bigDecimal3);
        java.math.MathContext mathContext7 = null;
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal((double) (byte) 0, mathContext7);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal10.min(bigDecimal13);
        java.math.BigInteger bigInteger16 = bigDecimal10.toBigInteger();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(bigInteger16);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(bigInteger16);
        java.math.BigDecimal bigDecimal19 = bigDecimal8.add(bigDecimal18);
        java.math.BigDecimal bigDecimal20 = bigDecimal18.ulp();
        java.math.BigDecimal bigDecimal21 = bigDecimal3.subtract(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        java.lang.String str25 = bigDecimal23.toPlainString();
        java.math.BigDecimal bigDecimal27 = bigDecimal23.movePointRight(64);
        java.math.BigDecimal bigDecimal28 = bigDecimal27.stripTrailingZeros();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal18.divideAndRemainder(bigDecimal27);
        java.math.BigDecimal bigDecimal31 = bigDecimal18.pow(400);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal27 and bigDecimal28", (bigDecimal27.compareTo(bigDecimal28) == 0) == bigDecimal27.equals(bigDecimal28));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.setScale(5);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str8 = bigDecimal7.toEngineeringString();
        int int9 = bigDecimal5.compareTo(bigDecimal7);
        java.math.BigDecimal bigDecimal10 = bigDecimal1.multiply(bigDecimal5);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal((long) (byte) 0);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal12.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal16 = bigDecimal5.min(bigDecimal15);
        java.lang.String str17 = bigDecimal15.toEngineeringString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal5", (bigDecimal3.compareTo(bigDecimal5) == 0) == bigDecimal3.equals(bigDecimal5));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(5141.0d);
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray6 = bigDecimal3.divideAndRemainder(bigDecimal5);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray6);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl7.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = bigMatrixImpl7.copy();
        bigMatrixImpl7.setRoundingMode(10);
        double[][] doubleArray12 = bigMatrixImpl7.getDataAsDoubleArray();
        boolean boolean13 = bigMatrixImpl7.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl7.copy();
        bigMatrixImpl7.setRoundingMode((-35));
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal18.divideAndRemainder(bigDecimal20);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl22.copy();
        bigMatrixImpl22.setRoundingMode(10);
        java.lang.String[] strArray28 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray29 = new java.lang.String[][] { strArray28 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(strArray29);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(strArray29);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(strArray29);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(strArray29);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl22.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl33);
        java.math.BigDecimal[][] bigDecimalArray35 = bigMatrix34.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl7.subtract(bigMatrix34);
        java.math.BigDecimal bigDecimal37 = bigMatrix34.getNorm();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal55.min(bigDecimal58);
        java.math.BigDecimal[] bigDecimalArray61 = new java.math.BigDecimal[] { bigDecimal60 };
        java.math.BigDecimal[][] bigDecimalArray62 = new java.math.BigDecimal[][] { bigDecimalArray45, bigDecimalArray53, bigDecimalArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray62);
        int int66 = bigMatrixImpl65.getScale();
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal69 = bigDecimal68.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl65.scalarMultiply(bigDecimal68);
        java.math.BigInteger bigInteger71 = bigDecimal68.unscaledValue();
        int int72 = bigDecimal68.scale();
        java.math.BigDecimal bigDecimal73 = bigDecimal68.stripTrailingZeros();
        java.math.BigDecimal bigDecimal74 = bigDecimal37.divide(bigDecimal73);
        java.math.BigDecimal bigDecimal75 = bigDecimal1.add(bigDecimal37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal39 and bigDecimal74", (bigDecimal39.compareTo(bigDecimal74) == 0) == bigDecimal39.equals(bigDecimal74));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, 400);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[][] doubleArray3 = bigMatrixImpl2.getDataAsDoubleArray();
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray39, bigDecimalArray47, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray56);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal65 = bigDecimal60.min(bigDecimal63);
        java.math.BigInteger bigInteger66 = bigDecimal60.toBigInteger();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(bigInteger66);
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal70 = bigDecimal69.stripTrailingZeros();
        float float71 = bigDecimal69.floatValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.multiply(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrix58.scalarAdd(bigDecimal72);
        java.math.BigInteger bigInteger74 = bigDecimal72.toBigInteger();
        boolean boolean75 = bigMatrixImpl31.equals((java.lang.Object) bigDecimal72);
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.valueOf((long) 100, 0);
        java.math.BigDecimal bigDecimal80 = bigDecimal78.setScale((int) (byte) -1);
        java.math.BigDecimal bigDecimal81 = bigDecimal72.max(bigDecimal80);
        short short82 = bigDecimal80.shortValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal78 and bigDecimal80", (bigDecimal78.compareTo(bigDecimal80) == 0) == bigDecimal78.equals(bigDecimal80));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, 7);
        int int3 = bigMatrixImpl2.getRoundingMode();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal4 = bigMatrixImpl2.getNorm();
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        int int3 = bigMatrixImpl2.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl2.getDataRef();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((double) (-1.0f));
        int int7 = bigDecimal6.precision();
        boolean boolean8 = bigMatrixImpl2.equals((java.lang.Object) bigDecimal6);
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray21 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl23.transpose();
        int int25 = bigMatrixImpl23.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl23.transpose();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrix26.getData();
        java.math.BigDecimal bigDecimal28 = bigMatrix26.getNorm();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrixImpl56.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal bigDecimal59 = bigMatrixImpl58.getNorm();
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        float float63 = bigDecimal61.floatValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal59.remainder(bigDecimal61);
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        long long68 = bigDecimal66.longValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal66.ulp();
        double double70 = bigDecimal66.doubleValue();
        short short71 = bigDecimal66.shortValueExact();
        byte byte72 = bigDecimal66.byteValueExact();
        java.math.BigDecimal bigDecimal73 = bigDecimal66.stripTrailingZeros();
        java.math.BigDecimal bigDecimal74 = bigDecimal61.multiply(bigDecimal66);
        int int75 = bigDecimal28.compareTo(bigDecimal61);
        java.math.BigDecimal bigDecimal77 = bigDecimal28.scaleByPowerOfTen(10);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl2.scalarMultiply(bigDecimal28);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl5.getTrace();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        long long10 = bigDecimal8.longValue();
        long long11 = bigDecimal8.longValueExact();
        int int12 = bigDecimal8.precision();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        long long16 = bigDecimal14.longValue();
        long long17 = bigDecimal14.longValueExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal8.add(bigDecimal14);
        byte byte19 = bigDecimal8.byteValueExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal8.movePointLeft((int) (byte) -1);
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((double) 10);
        java.math.BigDecimal bigDecimal24 = bigDecimal8.min(bigDecimal23);
        java.math.BigDecimal bigDecimal25 = bigDecimal6.subtract(bigDecimal24);
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.min(bigDecimal38);
        java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal40 };
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal48 };
        java.math.BigDecimal[][] bigDecimalArray50 = new java.math.BigDecimal[][] { bigDecimalArray33, bigDecimalArray41, bigDecimalArray49 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        java.math.BigDecimal[][] bigDecimalArray54 = bigMatrixImpl53.getDataRef();
        java.math.BigDecimal bigDecimal55 = bigMatrixImpl53.getNorm();
        int int56 = bigMatrixImpl53.getColumnDimension();
        bigMatrixImpl53.setRoundingMode((int) (byte) -100);
        boolean boolean59 = bigDecimal6.equals((java.lang.Object) (byte) -100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal8 and bigDecimal25", (bigDecimal8.compareTo(bigDecimal25) == 0) == bigDecimal8.equals(bigDecimal25));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal4 = bigDecimal1.abs();
        long long5 = bigDecimal1.longValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal1", (bigDecimal3.compareTo(bigDecimal1) == 0) == bigDecimal3.equals(bigDecimal1));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        int int4 = bigDecimal3.intValue();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal3.min(bigDecimal6);
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal[][] bigDecimalArray26 = new java.math.BigDecimal[][] { bigDecimalArray9, bigDecimalArray17, bigDecimalArray25 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray41 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40 };
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray41);
        boolean boolean43 = bigMatrixImpl27.equals((java.lang.Object) bigMatrix42);
        int int44 = bigMatrixImpl27.getRowDimension();
        bigMatrixImpl27.setRoundingMode(0);
        double[] doubleArray48 = bigMatrixImpl27.getColumnAsDoubleArray((int) (short) 0);
        java.lang.String str49 = bigMatrixImpl27.toString();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger53 = bigDecimal52.unscaledValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal50.add(bigDecimal52);
        java.math.BigInteger bigInteger55 = bigDecimal52.toBigInteger();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl27.scalarMultiply(bigDecimal52);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((double) (byte) -112);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl27.scalarMultiply(bigDecimal58);
        java.math.BigDecimal bigDecimal61 = bigDecimal58.setScale(32);
        java.math.BigDecimal bigDecimal63 = bigDecimal1.divide(bigDecimal61, (int) (byte) 6);
        float float64 = bigDecimal1.floatValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal58 and bigDecimal61", (bigDecimal58.compareTo(bigDecimal61) == 0) == bigDecimal58.equals(bigDecimal61));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal10 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal9);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal[][] bigDecimalArray36 = new java.math.BigDecimal[][] { bigDecimalArray19, bigDecimalArray27, bigDecimalArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl39.getDataRef();
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl39.getNorm();
        boolean boolean42 = bigMatrixImpl39.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl39.copy();
        double[] doubleArray45 = bigMatrixImpl39.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray47 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray48 = new java.lang.String[][] { strArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl39.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl39.getNorm();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal53.min(bigDecimal56);
        java.math.BigInteger bigInteger59 = bigDecimal53.toBigInteger();
        java.math.BigDecimal bigDecimal60 = bigDecimal51.max(bigDecimal53);
        java.math.BigDecimal bigDecimal61 = bigDecimal1.max(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((int) 'a');
        int int64 = bigDecimal63.intValueExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal1.divide(bigDecimal63);
        double[] doubleArray68 = new double[] { 1.0d, 100.0f };
        double[] doubleArray71 = new double[] { 1.0d, 100.0f };
        double[] doubleArray74 = new double[] { 1.0d, 100.0f };
        double[] doubleArray77 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray78 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77 };
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        java.lang.String str85 = bigDecimal84.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl81.scalarMultiply(bigDecimal84);
        java.math.BigDecimal bigDecimal87 = bigDecimal63.multiply(bigDecimal84);
        java.math.BigDecimal bigDecimal89 = bigDecimal63.movePointLeft(4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal84", (bigDecimal1.compareTo(bigDecimal84) == 0) == bigDecimal1.equals(bigDecimal84));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray3);
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        java.lang.String str15 = bigMatrixImpl14.toString();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl14.getRowMatrix((int) (byte) 0);
        int int19 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.lang.String str32 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal34 = bigDecimal23.scaleByPowerOfTen((int) ' ');
        int int35 = bigDecimal21.compareTo(bigDecimal34);
        java.math.BigDecimal bigDecimal37 = bigDecimal34.setScale((int) (byte) -54);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl14.scalarMultiply(bigDecimal37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal34", (bigDecimal23.compareTo(bigDecimal34) == 0) == bigDecimal23.equals(bigDecimal34));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        boolean boolean21 = bigMatrixImpl14.isSquare();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.setScale(5);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str30 = bigDecimal29.toEngineeringString();
        int int31 = bigDecimal27.compareTo(bigDecimal29);
        java.math.BigDecimal bigDecimal32 = bigDecimal23.multiply(bigDecimal27);
        java.math.BigDecimal bigDecimal33 = bigDecimal27.stripTrailingZeros();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((-1L), (int) (byte) 1);
        java.math.BigDecimal bigDecimal38 = bigDecimal36.pow(2);
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal43 = bigDecimal41.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal44 = bigDecimal38.add(bigDecimal41);
        java.math.BigInteger bigInteger45 = bigDecimal41.toBigIntegerExact();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(bigInteger45, 7);
        java.math.BigDecimal bigDecimal48 = bigDecimal27.divideToIntegralValue(bigDecimal47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl14.scalarAdd(bigDecimal48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal25 and bigDecimal27", (bigDecimal25.compareTo(bigDecimal27) == 0) == bigDecimal25.equals(bigDecimal27));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal10 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal9);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal[][] bigDecimalArray36 = new java.math.BigDecimal[][] { bigDecimalArray19, bigDecimalArray27, bigDecimalArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl39.getDataRef();
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl39.getNorm();
        boolean boolean42 = bigMatrixImpl39.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl39.copy();
        double[] doubleArray45 = bigMatrixImpl39.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray47 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray48 = new java.lang.String[][] { strArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl39.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl39.getNorm();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal53.min(bigDecimal56);
        java.math.BigInteger bigInteger59 = bigDecimal53.toBigInteger();
        java.math.BigDecimal bigDecimal60 = bigDecimal51.max(bigDecimal53);
        java.math.BigDecimal bigDecimal61 = bigDecimal1.max(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((int) 'a');
        int int64 = bigDecimal63.intValueExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal1.divide(bigDecimal63);
        java.math.BigDecimal bigDecimal67 = bigDecimal65.setScale((-1));
        java.lang.String[] strArray69 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray70 = new java.lang.String[][] { strArray69 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(strArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(strArray70);
        java.math.BigDecimal bigDecimal75 = bigMatrixImpl74.getTrace();
        java.math.BigDecimal bigDecimal76 = bigMatrixImpl74.getDeterminant();
        java.math.BigDecimal bigDecimal77 = bigDecimal67.add(bigDecimal76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal75", (bigDecimal1.compareTo(bigDecimal75) == 0) == bigDecimal1.equals(bigDecimal75));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(8667.0d);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.ulp();
        int int4 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.plus();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal10.ulp();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = bigDecimal15.pow((int) 'a');
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigInteger bigInteger34 = bigDecimal25.toBigIntegerExact();
        java.math.BigDecimal bigDecimal35 = bigDecimal23.add(bigDecimal25);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger39 = bigDecimal38.unscaledValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal36.add(bigDecimal38);
        java.math.BigDecimal bigDecimal41 = bigDecimal25.multiply(bigDecimal36);
        java.math.BigDecimal bigDecimal42 = bigDecimal13.divide(bigDecimal36);
        int int43 = bigDecimal6.compareTo(bigDecimal13);
        float float44 = bigDecimal6.floatValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal1.multiply(bigDecimal6);
        short short46 = bigDecimal1.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal45", (bigDecimal6.compareTo(bigDecimal45) == 0) == bigDecimal6.equals(bigDecimal45));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) (short) 10, (int) (byte) -54);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl2.scalarMultiply(bigDecimal5);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 400, (int) ' ');
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.min(bigDecimal7);
        java.math.BigInteger bigInteger10 = bigDecimal9.toBigIntegerExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal9.stripTrailingZeros();
        int int12 = bigDecimal11.signum();
        int int13 = bigDecimal11.intValueExact();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger17 = bigDecimal16.unscaledValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.max(bigDecimal16);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl2.scalarAdd(bigDecimal19);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(2805.0d);
        java.lang.String str2 = bigDecimal1.toPlainString();
        int int3 = bigDecimal1.scale();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        java.lang.String str6 = bigDecimal5.toString();
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal9 = bigDecimal8.stripTrailingZeros();
        int int10 = bigDecimal8.signum();
        java.math.BigDecimal[] bigDecimalArray11 = bigDecimal5.divideAndRemainder(bigDecimal8);
        java.math.BigDecimal bigDecimal13 = bigDecimal5.pow((int) 'a');
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = bigDecimal15.pow((int) 'a');
        java.math.BigInteger bigInteger24 = bigDecimal15.toBigIntegerExact();
        java.math.BigDecimal bigDecimal25 = bigDecimal13.add(bigDecimal15);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.pow((int) (byte) 97);
        int int28 = bigDecimal25.scale();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger31 = bigDecimal30.unscaledValue();
        java.lang.String str32 = bigDecimal30.toPlainString();
        java.math.BigDecimal bigDecimal34 = bigDecimal30.movePointRight(64);
        java.math.BigDecimal bigDecimal35 = bigDecimal34.stripTrailingZeros();
        java.math.BigInteger bigInteger36 = bigDecimal34.unscaledValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal25.divide(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = bigDecimal34.ulp();
        java.math.BigDecimal bigDecimal39 = bigDecimal1.max(bigDecimal38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal34 and bigDecimal35", (bigDecimal34.compareTo(bigDecimal35) == 0) == bigDecimal34.equals(bigDecimal35));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigInteger bigInteger5 = bigDecimal2.toBigInteger();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(bigInteger5, (int) (short) -1);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str10 = bigDecimal9.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray11 = bigDecimal7.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger15 = bigDecimal14.unscaledValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal12.add(bigDecimal14);
        float float17 = bigDecimal14.floatValue();
        java.lang.String str18 = bigDecimal14.toEngineeringString();
        java.math.BigDecimal bigDecimal19 = bigDecimal14.abs();
        java.math.BigDecimal bigDecimal21 = bigDecimal19.movePointLeft((int) (short) 1);
        java.math.BigDecimal bigDecimal22 = bigDecimal9.remainder(bigDecimal19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal0 and bigDecimal21", (bigDecimal0.compareTo(bigDecimal21) == 0) == bigDecimal0.equals(bigDecimal21));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal11 = bigDecimal1.subtract(bigDecimal10);
        java.math.BigDecimal bigDecimal12 = bigDecimal10.ulp();
        java.math.BigDecimal bigDecimal13 = bigDecimal10.negate();
        java.math.BigDecimal bigDecimal15 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int16 = bigDecimal15.signum();
        java.lang.String str17 = bigDecimal15.toEngineeringString();
        java.math.BigDecimal bigDecimal18 = bigDecimal10.min(bigDecimal15);
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray31 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30 };
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl33.transpose();
        double[] doubleArray36 = bigMatrixImpl33.getRowAsDoubleArray((int) (short) 0);
        boolean boolean37 = bigMatrixImpl33.isSingular();
        boolean boolean38 = bigMatrixImpl33.isSquare();
        int int39 = bigMatrixImpl33.getScale();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger43 = bigDecimal42.unscaledValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal40.add(bigDecimal42);
        java.math.BigDecimal bigDecimal46 = bigDecimal42.setScale(100);
        boolean boolean47 = bigMatrixImpl33.equals((java.lang.Object) bigDecimal42);
        java.math.BigDecimal bigDecimal49 = bigDecimal42.setScale((int) (byte) 100);
        java.math.BigDecimal bigDecimal52 = bigDecimal15.divide(bigDecimal49, 0, 5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal10 and bigDecimal46", (bigDecimal10.compareTo(bigDecimal46) == 0) == bigDecimal10.equals(bigDecimal46));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal10 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal9);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal[][] bigDecimalArray36 = new java.math.BigDecimal[][] { bigDecimalArray19, bigDecimalArray27, bigDecimalArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl39.getDataRef();
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl39.getNorm();
        boolean boolean42 = bigMatrixImpl39.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl39.copy();
        double[] doubleArray45 = bigMatrixImpl39.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray47 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray48 = new java.lang.String[][] { strArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl39.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl39.getNorm();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal53.min(bigDecimal56);
        java.math.BigInteger bigInteger59 = bigDecimal53.toBigInteger();
        java.math.BigDecimal bigDecimal60 = bigDecimal51.max(bigDecimal53);
        java.math.BigDecimal bigDecimal61 = bigDecimal1.max(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((int) 'a');
        int int64 = bigDecimal63.intValueExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal1.divide(bigDecimal63);
        double[] doubleArray68 = new double[] { 1.0d, 100.0f };
        double[] doubleArray71 = new double[] { 1.0d, 100.0f };
        double[] doubleArray74 = new double[] { 1.0d, 100.0f };
        double[] doubleArray77 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray78 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77 };
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        java.lang.String str85 = bigDecimal84.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl81.scalarMultiply(bigDecimal84);
        java.math.BigDecimal bigDecimal87 = bigDecimal63.multiply(bigDecimal84);
        java.math.BigInteger bigInteger88 = bigDecimal84.toBigInteger();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal87", (bigDecimal1.compareTo(bigDecimal87) == 0) == bigDecimal1.equals(bigDecimal87));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 97, 4);
        int int3 = bigMatrixImpl2.getRowDimension();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        java.lang.String str6 = bigDecimal5.toString();
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal9 = bigDecimal8.stripTrailingZeros();
        int int10 = bigDecimal8.signum();
        java.math.BigDecimal[] bigDecimalArray11 = bigDecimal5.divideAndRemainder(bigDecimal8);
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal5, bigDecimal14, bigDecimal16, bigDecimal18 };
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray19);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl2.multiply(bigMatrix20);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.setScale(5);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str8 = bigDecimal7.toEngineeringString();
        int int9 = bigDecimal5.compareTo(bigDecimal7);
        java.math.BigDecimal bigDecimal10 = bigDecimal1.multiply(bigDecimal5);
        java.math.BigDecimal bigDecimal11 = bigDecimal5.stripTrailingZeros();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((-1L), (int) (byte) 1);
        java.math.BigDecimal bigDecimal16 = bigDecimal14.pow(2);
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        java.math.BigDecimal bigDecimal21 = bigDecimal19.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal22 = bigDecimal16.add(bigDecimal19);
        java.math.BigInteger bigInteger23 = bigDecimal19.toBigIntegerExact();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger23, 7);
        java.math.BigDecimal bigDecimal26 = bigDecimal5.divideToIntegralValue(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.pow(3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal5", (bigDecimal3.compareTo(bigDecimal5) == 0) == bigDecimal3.equals(bigDecimal5));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
        double double5 = bigDecimal1.doubleValue();
        short short6 = bigDecimal1.shortValueExact();
        java.math.BigDecimal bigDecimal7 = bigDecimal1.negate();
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray20 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19 };
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal26.min(bigDecimal29);
        java.math.BigInteger bigInteger32 = bigDecimal26.toBigInteger();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(bigInteger32);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrix24.scalarAdd(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = bigDecimal33.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger37 = bigDecimal36.toBigIntegerExact();
        java.math.BigInteger bigInteger38 = bigDecimal36.unscaledValue();
        int int39 = bigDecimal36.precision();
        java.math.BigDecimal bigDecimal40 = bigDecimal7.min(bigDecimal36);
        int int41 = bigDecimal7.precision();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal36", (bigDecimal1.compareTo(bigDecimal36) == 0) == bigDecimal1.equals(bigDecimal36));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32);
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl33.getNorm();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        float float38 = bigDecimal36.floatValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.remainder(bigDecimal36);
        long long40 = bigDecimal34.longValueExact();
        java.math.BigDecimal bigDecimal42 = bigDecimal34.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal43 = bigDecimal3.add(bigDecimal34);
        int int44 = bigDecimal3.precision();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal43", (bigDecimal1.compareTo(bigDecimal43) == 0) == bigDecimal1.equals(bigDecimal43));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigInteger bigInteger56 = bigDecimal17.toBigInteger();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(bigInteger56, 2);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(bigInteger56, (int) (byte) -112);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal58", (bigDecimal17.compareTo(bigDecimal58) == 0) == bigDecimal17.equals(bigDecimal58));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.movePointRight((int) (short) -1);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal7.min(bigDecimal10);
        java.math.BigDecimal[] bigDecimalArray13 = new java.math.BigDecimal[] { bigDecimal12 };
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.min(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal[][] bigDecimalArray30 = new java.math.BigDecimal[][] { bigDecimalArray13, bigDecimalArray21, bigDecimalArray29 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        int int34 = bigMatrixImpl33.getScale();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal37 = bigDecimal36.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl33.scalarMultiply(bigDecimal36);
        java.math.BigInteger bigInteger39 = bigDecimal36.unscaledValue();
        int int40 = bigDecimal36.scale();
        java.math.BigDecimal bigDecimal41 = bigDecimal5.max(bigDecimal36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = bigDecimal32.movePointRight(110);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal5 = bigDecimal3.setScale(5);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str8 = bigDecimal7.toEngineeringString();
        int int9 = bigDecimal5.compareTo(bigDecimal7);
        java.math.BigDecimal bigDecimal10 = bigDecimal1.multiply(bigDecimal5);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal((long) (byte) 0);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal12.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal16 = bigDecimal5.min(bigDecimal15);
        java.math.BigDecimal bigDecimal17 = bigDecimal16.plus();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal5", (bigDecimal3.compareTo(bigDecimal5) == 0) == bigDecimal3.equals(bigDecimal5));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigInteger bigInteger12 = bigDecimal3.toBigIntegerExact();
        int int13 = bigDecimal3.precision();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl22.getNorm();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = bigDecimal35.stripTrailingZeros();
        float float37 = bigDecimal35.floatValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.divideToIntegralValue(bigDecimal35);
        boolean boolean39 = bigMatrixImpl22.equals((java.lang.Object) bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal3.divideAndRemainder(bigDecimal35);
        java.math.BigDecimal bigDecimal41 = bigDecimal1.remainder(bigDecimal35);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        int int47 = bigDecimal43.precision();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        long long51 = bigDecimal49.longValue();
        long long52 = bigDecimal49.longValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal43.add(bigDecimal49);
        java.math.BigDecimal bigDecimal55 = bigDecimal53.setScale((int) (byte) 10);
        java.math.BigDecimal bigDecimal56 = bigDecimal41.min(bigDecimal55);
        java.math.BigDecimal bigDecimal57 = bigDecimal55.negate();
        java.math.BigDecimal bigDecimal58 = bigDecimal55.negate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal58", (bigDecimal3.compareTo(bigDecimal58) == 0) == bigDecimal3.equals(bigDecimal58));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(8667.0d);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.ulp();
        java.math.BigInteger bigInteger4 = bigDecimal1.toBigIntegerExact();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal28 = bigDecimal26.pow((int) (byte) 97);
        int int29 = bigDecimal26.scale();
        java.math.BigDecimal bigDecimal30 = bigDecimal1.multiply(bigDecimal26);
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigInteger bigInteger55 = bigDecimal49.toBigInteger();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(bigInteger55);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrix47.scalarAdd(bigDecimal56);
        java.math.BigDecimal bigDecimal58 = bigDecimal26.add(bigDecimal56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal30", (bigDecimal6.compareTo(bigDecimal30) == 0) == bigDecimal6.equals(bigDecimal30));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(97, 3);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[][] doubleArray3 = bigMatrixImpl2.getDataAsDoubleArray();
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        int int10 = bigDecimal1.intValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal12 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal14 = bigDecimal12.movePointRight(3);
        java.math.BigDecimal bigDecimal16 = bigDecimal14.movePointRight((int) (byte) 35);
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        int int20 = bigDecimal19.scale();
        java.math.BigDecimal bigDecimal22 = bigDecimal19.scaleByPowerOfTen(4);
        byte byte23 = bigDecimal19.byteValueExact();
        int int24 = bigDecimal16.compareTo(bigDecimal19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal22", (bigDecimal1.compareTo(bigDecimal22) == 0) == bigDecimal1.equals(bigDecimal22));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        java.math.BigInteger bigInteger51 = bigDecimal26.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(bigInteger51, 3);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal((long) (byte) 0);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal53.multiply(bigDecimal55);
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger60 = bigDecimal59.unscaledValue();
        java.lang.String str61 = bigDecimal59.toPlainString();
        java.math.BigDecimal bigDecimal63 = bigDecimal59.movePointRight(64);
        java.math.BigDecimal bigDecimal65 = bigDecimal63.movePointLeft((int) (short) 0);
        java.math.BigDecimal bigDecimal66 = bigDecimal55.add(bigDecimal65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal53", (bigDecimal23.compareTo(bigDecimal53) == 0) == bigDecimal23.equals(bigDecimal53));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode(10);
        boolean boolean31 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        java.lang.String str34 = bigDecimal33.toString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        int int38 = bigDecimal36.signum();
        java.math.BigDecimal[] bigDecimalArray39 = bigDecimal33.divideAndRemainder(bigDecimal36);
        java.math.BigDecimal bigDecimal41 = bigDecimal33.pow((int) 'a');
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal43.pow((int) 'a');
        java.math.BigInteger bigInteger52 = bigDecimal43.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal41.add(bigDecimal43);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        float float65 = bigDecimal55.floatValue();
        java.math.BigDecimal bigDecimal66 = bigDecimal41.add(bigDecimal55);
        java.math.BigDecimal bigDecimal67 = bigDecimal41.ulp();
        java.math.BigDecimal bigDecimal68 = bigDecimal41.negate();
        java.math.BigDecimal bigDecimal70 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal71 = bigDecimal70.negate();
        java.math.BigDecimal bigDecimal73 = bigDecimal70.pow((int) (byte) 100);
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal((long) (byte) -11);
        java.lang.String str76 = bigDecimal75.toString();
        java.math.BigDecimal bigDecimal78 = bigDecimal70.divide(bigDecimal75, 3);
        java.math.BigDecimal bigDecimal79 = bigDecimal68.remainder(bigDecimal78);
        java.math.BigDecimal bigDecimal81 = bigDecimal79.movePointLeft(44);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrixImpl27.scalarMultiply(bigDecimal79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal81", (bigDecimal1.compareTo(bigDecimal81) == 0) == bigDecimal1.equals(bigDecimal81));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getColumnDimension();
        int int22 = bigMatrixImpl14.getRowDimension();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal("32");
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger27 = bigDecimal26.unscaledValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal26.stripTrailingZeros();
        java.math.BigDecimal bigDecimal30 = bigDecimal26.movePointRight((int) (short) -1);
        float float31 = bigDecimal26.floatValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal24.divideToIntegralValue(bigDecimal26);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl14.scalarMultiply(bigDecimal32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal26 and bigDecimal28", (bigDecimal26.compareTo(bigDecimal28) == 0) == bigDecimal26.equals(bigDecimal28));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        java.math.BigInteger bigInteger51 = bigDecimal26.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(bigInteger51, 3);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal((long) (byte) 0);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal53.multiply(bigDecimal55);
        java.math.BigDecimal bigDecimal59 = bigDecimal55.pow(546084);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal53", (bigDecimal23.compareTo(bigDecimal53) == 0) == bigDecimal23.equals(bigDecimal53));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        int int43 = bigMatrixImpl25.getRoundingMode();
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger46 = bigDecimal45.unscaledValue();
        java.lang.String str47 = bigDecimal45.toPlainString();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        float float51 = bigDecimal49.floatValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal49.ulp();
        java.math.BigDecimal bigDecimal53 = bigDecimal52.ulp();
        java.math.BigDecimal bigDecimal54 = bigDecimal45.remainder(bigDecimal53);
        java.math.BigDecimal bigDecimal56 = bigDecimal45.pow((int) '#');
        int int57 = bigDecimal45.precision();
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl25.scalarAdd(bigDecimal45);
        int int59 = bigMatrixImpl25.getRoundingMode();
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 97);
        java.lang.String[] strArray63 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray64 = new java.lang.String[][] { strArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(strArray64);
        java.math.BigDecimal[][] bigDecimalArray66 = bigMatrixImpl65.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray66);
        java.math.BigDecimal bigDecimal69 = bigMatrixImpl68.getTrace();
        java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal(0.0d);
        int int72 = bigDecimal71.intValue();
        long long73 = bigDecimal71.longValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl68.scalarAdd(bigDecimal71);
        java.math.BigDecimal bigDecimal75 = bigDecimal61.min(bigDecimal71);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl25.scalarMultiply(bigDecimal61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal69", (bigDecimal1.compareTo(bigDecimal69) == 0) == bigDecimal1.equals(bigDecimal69));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        float float5 = bigDecimal2.floatValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal15 = bigDecimal7.pow((int) 'a');
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal21 = bigDecimal20.stripTrailingZeros();
        int int22 = bigDecimal20.signum();
        java.math.BigDecimal[] bigDecimalArray23 = bigDecimal17.divideAndRemainder(bigDecimal20);
        java.math.BigDecimal bigDecimal25 = bigDecimal17.pow((int) 'a');
        java.math.BigInteger bigInteger26 = bigDecimal17.toBigIntegerExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal15.add(bigDecimal17);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigInteger bigInteger35 = bigDecimal29.toBigInteger();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        float float40 = bigDecimal38.floatValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.multiply(bigDecimal38);
        java.math.BigDecimal bigDecimal42 = bigDecimal36.negate();
        java.math.BigDecimal bigDecimal43 = bigDecimal27.add(bigDecimal42);
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.stripTrailingZeros();
        float float47 = bigDecimal45.floatValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal45.ulp();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        java.lang.String str61 = bigDecimal60.toString();
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal64 = bigDecimal63.stripTrailingZeros();
        int int65 = bigDecimal63.signum();
        java.math.BigDecimal[] bigDecimalArray66 = bigDecimal60.divideAndRemainder(bigDecimal63);
        java.math.BigDecimal bigDecimal68 = bigDecimal60.pow((int) 'a');
        java.math.BigInteger bigInteger69 = bigDecimal60.toBigIntegerExact();
        java.math.BigDecimal bigDecimal70 = bigDecimal58.add(bigDecimal60);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger74 = bigDecimal73.unscaledValue();
        java.math.BigDecimal bigDecimal75 = bigDecimal71.add(bigDecimal73);
        java.math.BigDecimal bigDecimal76 = bigDecimal60.multiply(bigDecimal71);
        java.math.BigDecimal bigDecimal77 = bigDecimal48.divide(bigDecimal71);
        java.math.BigDecimal bigDecimal78 = bigDecimal42.remainder(bigDecimal48);
        java.math.BigDecimal bigDecimal79 = bigDecimal2.subtract(bigDecimal42);
        byte byte80 = bigDecimal79.byteValueExact();
        java.math.BigDecimal bigDecimal81 = bigDecimal79.stripTrailingZeros();
        float float82 = bigDecimal79.floatValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal81", (bigDecimal2.compareTo(bigDecimal81) == 0) == bigDecimal2.equals(bigDecimal81));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal18.divideAndRemainder(bigDecimal20);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        int int23 = bigMatrixImpl22.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl22.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl22.transpose();
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl22.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        java.lang.String str30 = bigDecimal29.toString();
        java.math.BigDecimal bigDecimal32 = bigDecimal29.setScale(0);
        byte byte33 = bigDecimal32.byteValueExact();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        java.lang.String str36 = bigDecimal35.toString();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        int int40 = bigDecimal38.signum();
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal35.divideAndRemainder(bigDecimal38);
        java.math.BigDecimal bigDecimal43 = bigDecimal35.pow((int) 'a');
        java.math.BigInteger bigInteger44 = bigDecimal35.toBigInteger();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(bigInteger44, 6);
        java.math.BigDecimal bigDecimal47 = bigDecimal32.multiply(bigDecimal46);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl14.scalarAdd(bigDecimal46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal47", (bigDecimal3.compareTo(bigDecimal47) == 0) == bigDecimal3.equals(bigDecimal47));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal27 = bigDecimal25.plus();
        java.math.BigDecimal bigDecimal29 = bigDecimal25.movePointLeft((int) 'a');
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf(0L, (-32));
        java.math.BigDecimal bigDecimal33 = bigDecimal32.ulp();
        int int34 = bigDecimal25.compareTo(bigDecimal33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal29", (bigDecimal18.compareTo(bigDecimal29) == 0) == bigDecimal18.equals(bigDecimal29));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.lang.String str3 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.movePointRight(64);
        java.math.BigDecimal bigDecimal6 = bigDecimal5.stripTrailingZeros();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        java.math.BigDecimal bigDecimal10 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal11 = bigDecimal6.multiply(bigDecimal10);
        java.math.MathContext mathContext13 = null;
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal((double) (byte) 0, mathContext13);
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal21 = bigDecimal16.min(bigDecimal19);
        java.math.BigInteger bigInteger22 = bigDecimal16.toBigInteger();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(bigInteger22);
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(bigInteger22);
        java.math.BigDecimal bigDecimal25 = bigDecimal14.add(bigDecimal24);
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigInteger bigInteger46 = bigDecimal37.toBigIntegerExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal35.add(bigDecimal37);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        java.lang.String str50 = bigDecimal49.toString();
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal53 = bigDecimal52.stripTrailingZeros();
        int int54 = bigDecimal52.signum();
        java.math.BigDecimal[] bigDecimalArray55 = bigDecimal49.divideAndRemainder(bigDecimal52);
        java.math.BigDecimal bigDecimal57 = bigDecimal49.pow((int) 'a');
        java.math.BigInteger bigInteger58 = bigDecimal49.toBigIntegerExact();
        float float59 = bigDecimal49.floatValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal35.add(bigDecimal49);
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal63 = bigDecimal49.divideToIntegralValue(bigDecimal62);
        java.math.BigDecimal bigDecimal64 = bigDecimal14.add(bigDecimal63);
        double[] doubleArray69 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix70 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray69);
        double[] doubleArray75 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray75);
        double[] doubleArray77 = realMatrix70.operate(doubleArray75);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray75);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray75);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray75);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrix80.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrix81.getRowMatrix((int) (short) 0);
        boolean boolean84 = bigDecimal14.equals((java.lang.Object) (short) 0);
        java.math.BigDecimal bigDecimal85 = bigDecimal10.subtract(bigDecimal14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal5 and bigDecimal6", (bigDecimal5.compareTo(bigDecimal6) == 0) == bigDecimal5.equals(bigDecimal6));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        boolean boolean17 = bigMatrixImpl14.isSingular();
        java.lang.String str18 = bigMatrixImpl14.toString();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl20.copy();
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray34 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl36.transpose();
        boolean boolean38 = bigMatrixImpl36.isSingular();
        double[] doubleArray40 = bigMatrixImpl36.getColumnAsDoubleArray(0);
        int int41 = bigMatrixImpl36.getRoundingMode();
        boolean boolean42 = bigMatrixImpl36.isSingular();
        int int43 = bigMatrixImpl36.getRoundingMode();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal67 = bigDecimal65.pow((int) (byte) 97);
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger70 = bigDecimal69.unscaledValue();
        short short71 = bigDecimal69.shortValueExact();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.divide(bigDecimal69);
        byte byte73 = bigDecimal69.byteValueExact();
        java.math.BigDecimal bigDecimal74 = bigDecimal69.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl36.scalarMultiply(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrixImpl20.scalarAdd(bigDecimal69);
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        int int79 = bigDecimal78.intValue();
        long long80 = bigDecimal78.longValue();
        long long81 = bigDecimal78.longValueExact();
        int int82 = bigDecimal78.precision();
        java.math.BigDecimal bigDecimal84 = new java.math.BigDecimal(0.0d);
        int int85 = bigDecimal84.intValue();
        long long86 = bigDecimal84.longValue();
        long long87 = bigDecimal84.longValueExact();
        java.math.BigDecimal bigDecimal88 = bigDecimal78.add(bigDecimal84);
        java.math.BigDecimal bigDecimal90 = bigDecimal88.setScale((int) (byte) 10);
        java.math.BigDecimal bigDecimal92 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal93 = bigDecimal92.stripTrailingZeros();
        float float94 = bigDecimal92.floatValue();
        java.math.BigDecimal bigDecimal95 = bigDecimal92.ulp();
        java.math.BigDecimal bigDecimal96 = bigDecimal95.ulp();
        java.lang.String str97 = bigDecimal95.toEngineeringString();
        java.math.BigDecimal bigDecimal98 = bigDecimal90.divideToIntegralValue(bigDecimal95);
        int int99 = bigDecimal69.compareTo(bigDecimal98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal45 and bigDecimal98", (bigDecimal45.compareTo(bigDecimal98) == 0) == bigDecimal45.equals(bigDecimal98));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int4 = bigMatrixImpl3.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray5 = bigMatrixImpl3.getData();
        int int6 = bigMatrixImpl3.getRoundingMode();
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl3.getTrace();
        int int8 = bigMatrixImpl3.getColumnDimension();
        java.math.BigDecimal bigDecimal9 = bigMatrixImpl3.getDeterminant();
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray22 = new double[][] { doubleArray12, doubleArray15, doubleArray18, doubleArray21 };
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray22);
        boolean boolean24 = bigMatrix23.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrix23.copy();
        java.math.BigDecimal bigDecimal26 = bigMatrix23.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal26.abs();
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl3.scalarMultiply(bigDecimal26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal9", (bigDecimal7.compareTo(bigDecimal9) == 0) == bigDecimal7.equals(bigDecimal9));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.movePointRight((int) (short) -1);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal15 = bigDecimal7.pow((int) 'a');
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal21 = bigDecimal20.stripTrailingZeros();
        int int22 = bigDecimal20.signum();
        java.math.BigDecimal[] bigDecimalArray23 = bigDecimal17.divideAndRemainder(bigDecimal20);
        java.math.BigDecimal bigDecimal25 = bigDecimal17.pow((int) 'a');
        java.math.BigInteger bigInteger26 = bigDecimal17.toBigIntegerExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal15.add(bigDecimal17);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        java.lang.String str30 = bigDecimal29.toString();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        int int34 = bigDecimal32.signum();
        java.math.BigDecimal[] bigDecimalArray35 = bigDecimal29.divideAndRemainder(bigDecimal32);
        java.math.BigDecimal bigDecimal37 = bigDecimal29.pow((int) 'a');
        java.math.BigInteger bigInteger38 = bigDecimal29.toBigIntegerExact();
        float float39 = bigDecimal29.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal15.add(bigDecimal29);
        java.math.BigInteger bigInteger41 = bigDecimal29.toBigIntegerExact();
        byte byte42 = bigDecimal29.byteValueExact();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal((double) 5);
        java.math.BigDecimal bigDecimal45 = bigDecimal29.remainder(bigDecimal44);
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[] doubleArray51 = new double[] { 1.0d, 100.0f };
        double[] doubleArray54 = new double[] { 1.0d, 100.0f };
        double[] doubleArray57 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray58 = new double[][] { doubleArray48, doubleArray51, doubleArray54, doubleArray57 };
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray58);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray58);
        java.math.BigDecimal[][] bigDecimalArray62 = bigMatrix61.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray62);
        int int64 = bigMatrixImpl63.getRoundingMode();
        java.math.BigDecimal bigDecimal65 = bigMatrixImpl63.getNorm();
        java.math.BigDecimal[][] bigDecimalArray66 = bigMatrixImpl63.getData();
        java.lang.String str67 = bigMatrixImpl63.toString();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(10);
        java.math.BigDecimal bigDecimal71 = bigDecimal69.scaleByPowerOfTen((int) (short) 400);
        boolean boolean72 = bigMatrixImpl63.equals((java.lang.Object) bigDecimal69);
        java.math.BigDecimal bigDecimal74 = bigDecimal69.movePointRight((int) (byte) -11);
        java.math.BigDecimal bigDecimal76 = bigDecimal44.divide(bigDecimal74, 3);
        java.math.BigDecimal bigDecimal77 = bigDecimal44.stripTrailingZeros();
        int int78 = bigDecimal1.compareTo(bigDecimal44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal5 and bigDecimal69", (bigDecimal5.compareTo(bigDecimal69) == 0) == bigDecimal5.equals(bigDecimal69));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 97, 97);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.copy();
        bigMatrixImpl2.setRoundingMode((int) ' ');
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrix3 and bigMatrix3", bigMatrix3.equals(bigMatrix3) ? bigMatrix3.hashCode() == bigMatrix3.hashCode() : true);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(0L, (-32));
        long long3 = bigDecimal2.longValue();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        boolean boolean20 = bigMatrixImpl18.isSingular();
        double[] doubleArray22 = bigMatrixImpl18.getColumnAsDoubleArray(0);
        int int23 = bigMatrixImpl18.getRoundingMode();
        boolean boolean24 = bigMatrixImpl18.isSingular();
        int int25 = bigMatrixImpl18.getRoundingMode();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigInteger bigInteger46 = bigDecimal37.toBigIntegerExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal35.add(bigDecimal37);
        java.math.BigDecimal bigDecimal49 = bigDecimal47.pow((int) (byte) 97);
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger52 = bigDecimal51.unscaledValue();
        short short53 = bigDecimal51.shortValueExact();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.divide(bigDecimal51);
        byte byte55 = bigDecimal51.byteValueExact();
        java.math.BigDecimal bigDecimal56 = bigDecimal51.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl18.scalarMultiply(bigDecimal51);
        java.math.BigDecimal bigDecimal58 = bigDecimal51.stripTrailingZeros();
        java.math.BigDecimal bigDecimal59 = bigDecimal2.remainder(bigDecimal51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal51 and bigDecimal58", (bigDecimal51.compareTo(bigDecimal58) == 0) == bigDecimal51.equals(bigDecimal58));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) ' ', (int) (short) 400);
        boolean boolean3 = bigMatrixImpl2.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrixImpl2.copy();
        boolean boolean5 = bigMatrixImpl2.isSquare();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrix4 and bigMatrix4", bigMatrix4.equals(bigMatrix4) ? bigMatrix4.hashCode() == bigMatrix4.hashCode() : true);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (byte) 100);
        java.math.BigDecimal bigDecimal42 = bigMatrix41.getTrace();
        double[][] doubleArray43 = bigMatrix41.getDataAsDoubleArray();
        boolean boolean44 = bigMatrixImpl27.equals((java.lang.Object) bigMatrix41);
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal52 = bigDecimal49.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal53 = bigDecimal46.divide(bigDecimal49);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl27.scalarMultiply(bigDecimal49);
        double double55 = bigDecimal49.doubleValue();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 6);
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal("0.0");
        int int60 = bigDecimal57.compareTo(bigDecimal59);
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 6);
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger66 = bigDecimal65.unscaledValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal63.add(bigDecimal65);
        java.math.BigInteger bigInteger68 = bigDecimal65.toBigInteger();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(bigInteger68, (int) (short) -1);
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str73 = bigDecimal72.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray74 = bigDecimal70.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal75 = bigDecimal62.remainder(bigDecimal70);
        java.math.BigDecimal bigDecimal76 = bigDecimal59.subtract(bigDecimal62);
        java.math.BigDecimal[] bigDecimalArray77 = bigDecimal49.divideAndRemainder(bigDecimal62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal59", (bigDecimal1.compareTo(bigDecimal59) == 0) == bigDecimal1.equals(bigDecimal59));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl6.getTrace();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        long long11 = bigDecimal9.longValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = bigMatrixImpl6.scalarAdd(bigDecimal9);
        double[][] doubleArray13 = bigMatrix12.getDataAsDoubleArray();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal9", (bigDecimal7.compareTo(bigDecimal9) == 0) == bigDecimal7.equals(bigDecimal9));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 97, 97);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.copy();
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl2.getData();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrix3 and bigMatrix3", bigMatrix3.equals(bigMatrix3) ? bigMatrix3.hashCode() == bigMatrix3.hashCode() : true);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigDecimal bigDecimal6 = bigDecimal4.pow((int) (byte) 0);
        java.math.BigDecimal bigDecimal9 = bigDecimal6.setScale((int) (byte) 35, 2);
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger12 = bigDecimal11.unscaledValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal11.stripTrailingZeros();
        int int14 = bigDecimal11.precision();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.setScale((int) '4');
        java.math.BigDecimal bigDecimal17 = bigDecimal9.multiply(bigDecimal16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal13", (bigDecimal2.compareTo(bigDecimal13) == 0) == bigDecimal2.equals(bigDecimal13));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrix31.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32);
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal37 = bigDecimal35.setScale((int) '4');
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl33.scalarAdd(bigDecimal35);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl33.transpose();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal35 and bigDecimal37", (bigDecimal35.compareTo(bigDecimal37) == 0) == bigDecimal35.equals(bigDecimal37));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        short short42 = bigDecimal40.shortValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.abs();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.setScale((int) (byte) -1);
        java.math.BigDecimal bigDecimal47 = bigDecimal43.movePointRight((-2));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.plus();
        java.math.BigDecimal bigDecimal4 = bigDecimal3.negate();
        java.lang.String str5 = bigDecimal3.toPlainString();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal7.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.remainder(bigDecimal10);
        java.lang.String str12 = bigDecimal11.toPlainString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal10", (bigDecimal7.compareTo(bigDecimal10) == 0) == bigDecimal7.equals(bigDecimal10));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 97, 97);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        java.lang.String str5 = bigDecimal4.toString();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal8 = bigDecimal7.stripTrailingZeros();
        int int9 = bigDecimal7.signum();
        java.math.BigDecimal[] bigDecimalArray10 = bigDecimal4.divideAndRemainder(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal4.pow((int) 'a');
        java.math.BigInteger bigInteger13 = bigDecimal4.toBigInteger();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(bigInteger13);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal17 = bigDecimal16.negate();
        java.math.BigDecimal[] bigDecimalArray18 = bigDecimal14.divideAndRemainder(bigDecimal16);
        int int19 = bigDecimal16.signum();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl2.scalarMultiply(bigDecimal16);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 400, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.copy();
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl2.getEntry(7, (int) (byte) 11);
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrix3 and bigMatrix3", bigMatrix3.equals(bigMatrix3) ? bigMatrix3.hashCode() == bigMatrix3.hashCode() : true);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl5.getTrace();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        long long10 = bigDecimal8.longValue();
        long long11 = bigDecimal8.longValueExact();
        int int12 = bigDecimal8.precision();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        long long16 = bigDecimal14.longValue();
        long long17 = bigDecimal14.longValueExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal8.add(bigDecimal14);
        byte byte19 = bigDecimal8.byteValueExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal8.movePointLeft((int) (byte) -1);
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((double) 10);
        java.math.BigDecimal bigDecimal24 = bigDecimal8.min(bigDecimal23);
        java.math.BigDecimal bigDecimal25 = bigDecimal6.subtract(bigDecimal24);
        short short26 = bigDecimal25.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal8", (bigDecimal6.compareTo(bigDecimal8) == 0) == bigDecimal6.equals(bigDecimal8));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray63 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal74 = bigDecimal69.min(bigDecimal72);
        java.math.BigInteger bigInteger75 = bigDecimal69.toBigInteger();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(bigInteger75);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrix67.scalarAdd(bigDecimal76);
        java.math.BigDecimal bigDecimal79 = bigDecimal76.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger80 = bigDecimal79.toBigIntegerExact();
        java.math.BigInteger bigInteger81 = bigDecimal79.unscaledValue();
        int int82 = bigDecimal79.precision();
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl14.scalarMultiply(bigDecimal79);
        boolean boolean84 = bigMatrixImpl14.isSquare();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal79", (bigDecimal23.compareTo(bigDecimal79) == 0) == bigDecimal23.equals(bigDecimal79));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigInteger bigInteger22 = bigDecimal21.unscaledValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(bigInteger22, 100);
        java.math.BigInteger bigInteger25 = bigDecimal24.toBigInteger();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(bigInteger25, 546084);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal24", (bigDecimal1.compareTo(bigDecimal24) == 0) == bigDecimal1.equals(bigDecimal24));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int32 = bigDecimal31.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.scalarMultiply(bigDecimal31);
        long long34 = bigDecimal31.longValueExact();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((double) '#');
        boolean boolean37 = bigDecimal31.equals((java.lang.Object) bigDecimal36);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal60 = bigDecimal55.min(bigDecimal58);
        java.math.BigDecimal[] bigDecimalArray61 = new java.math.BigDecimal[] { bigDecimal60 };
        java.math.BigDecimal[][] bigDecimalArray62 = new java.math.BigDecimal[][] { bigDecimalArray45, bigDecimalArray53, bigDecimalArray61 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl63 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray62);
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl65.scalarAdd(bigDecimal68);
        java.math.BigDecimal bigDecimal70 = bigDecimal68.plus();
        java.math.BigDecimal bigDecimal71 = bigDecimal31.add(bigDecimal68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal68", (bigDecimal1.compareTo(bigDecimal68) == 0) == bigDecimal1.equals(bigDecimal68));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal35 = bigDecimal9.ulp();
        java.math.BigDecimal bigDecimal36 = bigDecimal9.negate();
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        java.math.BigDecimal bigDecimal53 = bigMatrixImpl51.getNorm();
        int int54 = bigDecimal53.signum();
        java.math.BigDecimal bigDecimal56 = java.math.BigDecimal.valueOf((long) 4);
        int int57 = bigDecimal56.signum();
        java.math.BigDecimal bigDecimal58 = bigDecimal53.subtract(bigDecimal56);
        java.math.BigDecimal bigDecimal59 = bigDecimal36.min(bigDecimal53);
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((double) 4);
        java.math.BigDecimal bigDecimal63 = bigDecimal61.movePointRight(2805);
        java.math.BigDecimal bigDecimal64 = bigDecimal61.negate();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.max(bigDecimal64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal56 and bigDecimal61", (bigDecimal56.compareTo(bigDecimal61) == 0) == bigDecimal56.equals(bigDecimal61));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.lang.String str26 = bigDecimal23.toEngineeringString();
        java.math.BigDecimal bigDecimal27 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal29 = bigDecimal23.setScale((int) (byte) 110);
        java.math.BigDecimal bigDecimal30 = bigDecimal29.negate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal27", (bigDecimal23.compareTo(bigDecimal27) == 0) == bigDecimal23.equals(bigDecimal27));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal4.setScale((int) (short) 100, (int) (byte) 1);
        java.math.BigDecimal bigDecimal8 = bigDecimal1.divide(bigDecimal4);
        java.math.BigInteger bigInteger9 = bigDecimal4.toBigIntegerExact();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        java.lang.String str22 = bigDecimal21.toString();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal25 = bigDecimal24.stripTrailingZeros();
        int int26 = bigDecimal24.signum();
        java.math.BigDecimal[] bigDecimalArray27 = bigDecimal21.divideAndRemainder(bigDecimal24);
        java.math.BigDecimal bigDecimal29 = bigDecimal21.pow((int) 'a');
        java.math.BigInteger bigInteger30 = bigDecimal21.toBigIntegerExact();
        java.math.BigDecimal bigDecimal31 = bigDecimal19.add(bigDecimal21);
        java.math.BigDecimal bigDecimal33 = bigDecimal31.pow((int) (byte) 97);
        int int34 = bigDecimal31.scale();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int37 = bigDecimal36.signum();
        java.math.BigDecimal bigDecimal38 = bigDecimal31.add(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = bigDecimal4.add(bigDecimal31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal14", (bigDecimal7.compareTo(bigDecimal14) == 0) == bigDecimal7.equals(bigDecimal14));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray52 = bigMatrixImpl14.getRow(2);
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.valueOf((long) (short) 100, 0);
        short short56 = bigDecimal55.shortValueExact();
        java.math.BigDecimal bigDecimal57 = bigDecimal55.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl14.scalarAdd(bigDecimal57);
        java.lang.String[] strArray60 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray61 = new java.lang.String[][] { strArray60 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(strArray61);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray61);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(strArray61);
        java.math.BigDecimal bigDecimal66 = bigMatrixImpl65.getTrace();
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger70 = bigDecimal69.unscaledValue();
        java.math.BigDecimal bigDecimal71 = bigDecimal67.add(bigDecimal69);
        java.math.BigInteger bigInteger72 = bigDecimal69.toBigInteger();
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl65.scalarMultiply(bigDecimal69);
        java.math.BigDecimal bigDecimal74 = bigDecimal57.subtract(bigDecimal69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal66", (bigDecimal23.compareTo(bigDecimal66) == 0) == bigDecimal23.equals(bigDecimal66));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int32 = bigDecimal31.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.scalarMultiply(bigDecimal31);
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        java.lang.String str36 = bigDecimal35.toString();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        int int40 = bigDecimal38.signum();
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal35.divideAndRemainder(bigDecimal38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        int int43 = bigMatrixImpl42.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl42.transpose();
        double[][] doubleArray45 = bigMatrix44.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrix44.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.multiply(bigMatrix44);
        int int48 = bigMatrixImpl27.getRoundingMode();
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl27.getEntry(0, (int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.min(bigDecimal57);
        java.math.BigDecimal[] bigDecimalArray60 = new java.math.BigDecimal[] { bigDecimal59 };
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.min(bigDecimal65);
        java.math.BigDecimal[] bigDecimalArray68 = new java.math.BigDecimal[] { bigDecimal67 };
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        java.math.BigDecimal bigDecimal75 = bigDecimal70.min(bigDecimal73);
        java.math.BigDecimal[] bigDecimalArray76 = new java.math.BigDecimal[] { bigDecimal75 };
        java.math.BigDecimal[][] bigDecimalArray77 = new java.math.BigDecimal[][] { bigDecimalArray60, bigDecimalArray68, bigDecimalArray76 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        java.math.BigDecimal[][] bigDecimalArray81 = bigMatrixImpl80.getData();
        boolean boolean82 = bigMatrixImpl80.isSquare();
        java.math.BigDecimal bigDecimal83 = bigMatrixImpl80.getNorm();
        java.math.BigDecimal bigDecimal84 = bigMatrixImpl80.getNorm();
        java.lang.String str85 = bigDecimal84.toEngineeringString();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl27.scalarAdd(bigDecimal84);
        java.math.BigDecimal bigDecimal88 = bigDecimal84.movePointLeft((int) (short) 10);
        long long89 = bigDecimal84.longValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal88", (bigDecimal1.compareTo(bigDecimal88) == 0) == bigDecimal1.equals(bigDecimal88));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 0, (int) (short) -100);
        java.math.BigDecimal bigDecimal3 = bigDecimal2.stripTrailingZeros();
        float float4 = bigDecimal3.floatValue();
        java.math.BigDecimal bigDecimal5 = bigDecimal3.negate();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal("10");
        int int8 = bigDecimal7.signum();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal10.divideAndRemainder(bigDecimal12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray13);
        double[] doubleArray16 = bigMatrixImpl14.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger19 = bigDecimal18.unscaledValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal18.stripTrailingZeros();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        long long24 = bigDecimal22.longValue();
        long long25 = bigDecimal22.longValueExact();
        short short26 = bigDecimal22.shortValueExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal18.min(bigDecimal22);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl14.scalarMultiply(bigDecimal18);
        java.math.BigDecimal bigDecimal29 = bigDecimal7.divideToIntegralValue(bigDecimal18);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal31.toBigInteger();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(bigInteger37);
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        float float42 = bigDecimal40.floatValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.multiply(bigDecimal40);
        java.math.BigDecimal bigDecimal44 = bigDecimal38.negate();
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        long long49 = bigDecimal47.longValue();
        long long50 = bigDecimal47.longValueExact();
        int int51 = bigDecimal47.precision();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        long long55 = bigDecimal53.longValue();
        long long56 = bigDecimal53.longValueExact();
        java.math.BigDecimal bigDecimal57 = bigDecimal47.add(bigDecimal53);
        java.math.BigDecimal bigDecimal59 = bigDecimal53.pow(3);
        int int60 = bigDecimal44.compareTo(bigDecimal53);
        java.math.BigDecimal bigDecimal62 = bigDecimal53.pow((int) (byte) 10);
        int int63 = bigDecimal18.compareTo(bigDecimal62);
        java.math.BigDecimal bigDecimal64 = bigDecimal5.divide(bigDecimal18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal2 and bigDecimal64", (bigDecimal2.compareTo(bigDecimal64) == 0) == bigDecimal2.equals(bigDecimal64));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale(5);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str6 = bigDecimal5.toEngineeringString();
        int int7 = bigDecimal3.compareTo(bigDecimal5);
        java.math.BigDecimal bigDecimal8 = bigDecimal5.negate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test407");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger32 = bigDecimal31.unscaledValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal31.stripTrailingZeros();
        java.math.BigDecimal bigDecimal35 = bigDecimal31.movePointRight((int) (short) -1);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl29.scalarMultiply(bigDecimal31);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl29.scalarMultiply(bigDecimal38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal31 and bigDecimal33", (bigDecimal31.compareTo(bigDecimal33) == 0) == bigDecimal31.equals(bigDecimal33));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test408");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal56 = bigDecimal17.stripTrailingZeros();
        java.math.BigDecimal bigDecimal57 = bigDecimal56.negate();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        java.lang.String str70 = bigDecimal69.toString();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        int int74 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal69.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal77 = bigDecimal69.pow((int) 'a');
        java.math.BigInteger bigInteger78 = bigDecimal69.toBigIntegerExact();
        java.math.BigDecimal bigDecimal79 = bigDecimal67.add(bigDecimal69);
        java.math.BigInteger bigInteger80 = bigDecimal79.unscaledValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(bigInteger80, 100);
        java.math.BigDecimal bigDecimal83 = bigDecimal82.ulp();
        java.math.BigDecimal bigDecimal84 = bigDecimal57.min(bigDecimal82);
        java.math.BigDecimal bigDecimal86 = bigDecimal82.movePointLeft((int) (byte) -54);
        java.math.BigDecimal bigDecimal88 = new java.math.BigDecimal(0.0d);
        java.lang.String str89 = bigDecimal88.toString();
        java.math.BigDecimal bigDecimal90 = bigDecimal88.plus();
        double double91 = bigDecimal88.doubleValue();
        java.math.BigDecimal bigDecimal93 = bigDecimal88.scaleByPowerOfTen((int) (short) 35);
        java.math.BigDecimal bigDecimal94 = bigDecimal86.max(bigDecimal88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal82", (bigDecimal17.compareTo(bigDecimal82) == 0) == bigDecimal17.equals(bigDecimal82));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test409");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigInteger bigInteger14 = bigDecimal13.toBigIntegerExact();
        java.math.BigDecimal bigDecimal16 = bigDecimal13.setScale(7);
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf(10L, (int) (short) 1);
        java.lang.String str20 = bigDecimal19.toString();
        java.math.BigDecimal bigDecimal21 = bigDecimal13.divideToIntegralValue(bigDecimal19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal16", (bigDecimal1.compareTo(bigDecimal16) == 0) == bigDecimal1.equals(bigDecimal16));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test410");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.toBigInteger();
        java.math.BigDecimal bigDecimal4 = bigDecimal2.ulp();
        java.math.BigDecimal bigDecimal6 = bigDecimal4.scaleByPowerOfTen(100);
        java.math.BigDecimal bigDecimal8 = bigDecimal6.movePointRight((int) 'a');
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray21 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl23.transpose();
        double[] doubleArray26 = bigMatrixImpl23.getRowAsDoubleArray((int) (short) 0);
        boolean boolean27 = bigMatrixImpl23.isSingular();
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl23.getData();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl23.getDataRef();
        int int30 = bigMatrixImpl23.getRoundingMode();
        bigMatrixImpl23.setRoundingMode((int) (short) -100);
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray45 = new double[][] { doubleArray35, doubleArray38, doubleArray41, doubleArray44 };
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray45);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl47.transpose();
        boolean boolean49 = bigMatrixImpl47.isSingular();
        int int50 = bigMatrixImpl47.getRoundingMode();
        double[][] doubleArray51 = bigMatrixImpl47.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl23.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl47);
        java.math.BigDecimal bigDecimal53 = bigMatrixImpl23.getNorm();
        java.math.BigDecimal bigDecimal55 = bigDecimal8.divide(bigDecimal53, 3);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf(10L, (int) (short) 1);
        byte byte59 = bigDecimal58.byteValueExact();
        java.lang.String str60 = bigDecimal58.toEngineeringString();
        java.math.BigDecimal bigDecimal62 = bigDecimal58.pow((int) '#');
        java.math.BigDecimal bigDecimal63 = bigDecimal8.remainder(bigDecimal58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal62", (bigDecimal6.compareTo(bigDecimal62) == 0) == bigDecimal6.equals(bigDecimal62));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test411");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(10L);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal5 = bigDecimal3.plus();
        double double6 = bigDecimal5.doubleValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal1.max(bigDecimal5);
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray20 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19 };
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        boolean boolean22 = bigMatrix21.isSingular();
        int int23 = bigMatrix21.getColumnDimension();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal27 = bigDecimal25.plus();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        float float31 = bigDecimal29.floatValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal29.ulp();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        java.lang.String str35 = bigDecimal34.toString();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        int int39 = bigDecimal37.signum();
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal34.divideAndRemainder(bigDecimal37);
        java.math.BigDecimal bigDecimal42 = bigDecimal34.pow((int) 'a');
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigInteger bigInteger53 = bigDecimal44.toBigIntegerExact();
        java.math.BigDecimal bigDecimal54 = bigDecimal42.add(bigDecimal44);
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger58 = bigDecimal57.unscaledValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal55.add(bigDecimal57);
        java.math.BigDecimal bigDecimal60 = bigDecimal44.multiply(bigDecimal55);
        java.math.BigDecimal bigDecimal61 = bigDecimal32.divide(bigDecimal55);
        int int62 = bigDecimal25.compareTo(bigDecimal32);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrix21.scalarMultiply(bigDecimal25);
        java.math.BigDecimal bigDecimal65 = bigDecimal25.scaleByPowerOfTen((int) (byte) 0);
        java.lang.String str66 = bigDecimal25.toEngineeringString();
        int int67 = bigDecimal25.scale();
        java.math.BigDecimal bigDecimal69 = bigDecimal25.setScale((int) (byte) 110);
        java.math.BigDecimal bigDecimal70 = bigDecimal5.min(bigDecimal69);
        int int71 = bigDecimal5.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal5 and bigDecimal69", (bigDecimal5.compareTo(bigDecimal69) == 0) == bigDecimal5.equals(bigDecimal69));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test412");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        byte byte5 = bigDecimal4.byteValueExact();
        int int6 = bigDecimal4.precision();
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray19 = new double[][] { doubleArray9, doubleArray12, doubleArray15, doubleArray18 };
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray19);
        boolean boolean21 = bigMatrix20.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrix20.copy();
        java.math.BigDecimal bigDecimal23 = bigMatrix20.getNorm();
        java.math.BigDecimal bigDecimal25 = bigDecimal23.scaleByPowerOfTen((int) '#');
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigInteger bigInteger36 = bigDecimal27.toBigIntegerExact();
        float float37 = bigDecimal27.floatValue();
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        double[] doubleArray50 = realMatrix43.operate(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray50);
        java.math.BigDecimal bigDecimal52 = bigMatrix51.getNorm();
        java.math.BigDecimal bigDecimal53 = bigDecimal27.subtract(bigDecimal52);
        java.math.BigDecimal bigDecimal54 = bigDecimal25.min(bigDecimal27);
        java.math.BigDecimal bigDecimal55 = bigDecimal4.min(bigDecimal54);
        java.math.BigDecimal bigDecimal57 = bigDecimal54.setScale(64);
        int int58 = bigDecimal54.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal57", (bigDecimal1.compareTo(bigDecimal57) == 0) == bigDecimal1.equals(bigDecimal57));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test413");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal37 = bigDecimal23.divideToIntegralValue(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = bigDecimal23.movePointLeft((int) (short) -1);
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[] doubleArray51 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray52 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51 };
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl54.transpose();
        double[] doubleArray57 = bigMatrixImpl54.getRowAsDoubleArray((int) (short) 0);
        boolean boolean58 = bigMatrixImpl54.isSingular();
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl54.getData();
        java.math.BigDecimal[][] bigDecimalArray60 = bigMatrixImpl54.getDataRef();
        int int61 = bigMatrixImpl54.getRoundingMode();
        bigMatrixImpl54.setRoundingMode((int) (short) -100);
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal65.min(bigDecimal68);
        java.math.BigInteger bigInteger71 = bigDecimal65.toBigInteger();
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(bigInteger71);
        java.math.BigDecimal bigDecimal74 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal75 = bigDecimal74.stripTrailingZeros();
        float float76 = bigDecimal74.floatValue();
        java.math.BigDecimal bigDecimal77 = bigDecimal72.multiply(bigDecimal74);
        java.math.BigDecimal bigDecimal78 = bigDecimal72.negate();
        int int79 = bigDecimal78.intValue();
        java.math.BigDecimal bigDecimal82 = bigDecimal78.setScale((int) (short) 10, 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl54.scalarMultiply(bigDecimal82);
        java.math.BigDecimal bigDecimal85 = bigDecimal82.scaleByPowerOfTen((int) (short) 0);
        java.math.BigDecimal bigDecimal86 = bigDecimal23.max(bigDecimal85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal82", (bigDecimal1.compareTo(bigDecimal82) == 0) == bigDecimal1.equals(bigDecimal82));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test414");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger30 = bigDecimal29.unscaledValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal27.add(bigDecimal29);
        java.math.BigDecimal bigDecimal32 = bigDecimal16.multiply(bigDecimal27);
        java.math.BigDecimal bigDecimal33 = bigDecimal0.subtract(bigDecimal16);
        java.math.BigDecimal bigDecimal34 = bigDecimal33.abs();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal[][] bigDecimalArray59 = new java.math.BigDecimal[][] { bigDecimalArray42, bigDecimalArray50, bigDecimalArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl62.scalarAdd(bigDecimal65);
        java.math.BigDecimal bigDecimal67 = bigDecimal34.add(bigDecimal65);
        java.math.BigDecimal bigDecimal68 = bigDecimal34.stripTrailingZeros();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal34 and bigDecimal67", (bigDecimal34.compareTo(bigDecimal67) == 0) == bigDecimal34.equals(bigDecimal67));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test415");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(0.0d);
        long long2 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal4 = bigDecimal3.abs();
        int int5 = bigDecimal4.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal4", (bigDecimal1.compareTo(bigDecimal4) == 0) == bigDecimal1.equals(bigDecimal4));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test416");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 1, 1);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[][] doubleArray3 = bigMatrixImpl2.getDataAsDoubleArray();
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test417");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal10 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal9);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal[][] bigDecimalArray36 = new java.math.BigDecimal[][] { bigDecimalArray19, bigDecimalArray27, bigDecimalArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl39.getDataRef();
        java.math.BigDecimal bigDecimal41 = bigMatrixImpl39.getNorm();
        boolean boolean42 = bigMatrixImpl39.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl39.copy();
        double[] doubleArray45 = bigMatrixImpl39.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray47 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray48 = new java.lang.String[][] { strArray47 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(strArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl39.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl49);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl39.getNorm();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal53.min(bigDecimal56);
        java.math.BigInteger bigInteger59 = bigDecimal53.toBigInteger();
        java.math.BigDecimal bigDecimal60 = bigDecimal51.max(bigDecimal53);
        java.math.BigDecimal bigDecimal61 = bigDecimal1.max(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((int) 'a');
        int int64 = bigDecimal63.intValueExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal1.divide(bigDecimal63);
        double[] doubleArray68 = new double[] { 1.0d, 100.0f };
        double[] doubleArray71 = new double[] { 1.0d, 100.0f };
        double[] doubleArray74 = new double[] { 1.0d, 100.0f };
        double[] doubleArray77 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray78 = new double[][] { doubleArray68, doubleArray71, doubleArray74, doubleArray77 };
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray78);
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        java.lang.String str85 = bigDecimal84.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl81.scalarMultiply(bigDecimal84);
        java.math.BigDecimal bigDecimal87 = bigDecimal63.multiply(bigDecimal84);
        java.math.BigInteger bigInteger88 = bigDecimal63.toBigInteger();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal84", (bigDecimal1.compareTo(bigDecimal84) == 0) == bigDecimal1.equals(bigDecimal84));
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test418");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigInteger bigInteger15 = bigDecimal9.toBigInteger();
        int int16 = bigDecimal9.precision();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal19 = bigDecimal9.subtract(bigDecimal18);
        java.math.BigDecimal bigDecimal20 = bigDecimal18.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl7.scalarAdd(bigDecimal18);
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl7.getTrace();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl7.getDataRef();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal9 and bigDecimal22", (bigDecimal9.compareTo(bigDecimal22) == 0) == bigDecimal9.equals(bigDecimal22));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test419");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(5, 110);
        double[] doubleArray6 = new double[] { 62.0d, 52.0d, (-35) };
        double[] doubleArray10 = new double[] { 62.0d, 52.0d, (-35) };
        double[] doubleArray14 = new double[] { 62.0d, 52.0d, (-35) };
        double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray10, doubleArray14 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray15);
        int int17 = bigMatrixImpl16.getScale();
        bigMatrixImpl16.setRoundingMode((int) (byte) -100);
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl16.getNorm();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl2.scalarMultiply(bigDecimal20);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test420");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (byte) 97);
        int int2 = bigDecimal1.intValueExact();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.setScale(0, (int) (short) 0);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = bigDecimal7.setScale(0);
        byte byte11 = bigDecimal10.byteValueExact();
        java.math.BigDecimal bigDecimal12 = bigDecimal10.plus();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger15 = bigDecimal14.unscaledValue();
        java.lang.String str16 = bigDecimal14.toPlainString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        float float20 = bigDecimal18.floatValue();
        java.math.BigDecimal bigDecimal21 = bigDecimal18.ulp();
        java.math.BigDecimal bigDecimal22 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal23 = bigDecimal14.remainder(bigDecimal22);
        java.math.BigDecimal bigDecimal25 = bigDecimal14.pow((int) '#');
        int int26 = bigDecimal10.compareTo(bigDecimal25);
        java.lang.String str27 = bigDecimal10.toEngineeringString();
        java.lang.String str28 = bigDecimal10.toString();
        java.math.BigDecimal bigDecimal30 = bigDecimal10.movePointRight((-1));
        java.math.BigDecimal bigDecimal31 = bigDecimal1.subtract(bigDecimal30);
        java.math.BigDecimal bigDecimal32 = bigDecimal1.abs();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal32 and bigDecimal31", (bigDecimal32.compareTo(bigDecimal31) == 0) == bigDecimal32.equals(bigDecimal31));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test421");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (byte) 110, 6);
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger6 = bigDecimal5.unscaledValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal3.add(bigDecimal5);
        float float8 = bigDecimal5.floatValue();
        java.lang.String str9 = bigDecimal5.toEngineeringString();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        long long13 = bigDecimal11.longValue();
        long long14 = bigDecimal11.longValueExact();
        int int15 = bigDecimal11.precision();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        long long19 = bigDecimal17.longValue();
        long long20 = bigDecimal17.longValueExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal11.add(bigDecimal17);
        java.math.BigDecimal bigDecimal23 = bigDecimal17.pow(3);
        java.math.BigInteger bigInteger24 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal25 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal26 = bigDecimal5.add(bigDecimal23);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal[][] bigDecimalArray51 = new java.math.BigDecimal[][] { bigDecimalArray34, bigDecimalArray42, bigDecimalArray50 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray51);
        java.math.BigDecimal[][] bigDecimalArray55 = bigMatrixImpl54.getDataRef();
        java.math.BigDecimal bigDecimal56 = bigMatrixImpl54.getNorm();
        boolean boolean57 = bigMatrixImpl54.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl54.copy();
        double[] doubleArray60 = bigMatrixImpl54.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl54.scalarMultiply(bigDecimal61);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl54.scalarAdd(bigDecimal65);
        java.math.BigDecimal bigDecimal68 = bigDecimal65.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        long long72 = bigDecimal70.longValue();
        java.math.BigDecimal bigDecimal73 = bigDecimal65.min(bigDecimal70);
        java.math.BigDecimal bigDecimal74 = bigDecimal23.multiply(bigDecimal70);
        java.math.BigDecimal bigDecimal76 = bigDecimal23.setScale(5);
        java.math.BigDecimal bigDecimal77 = bigDecimal2.min(bigDecimal23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal11 and bigDecimal76", (bigDecimal11.compareTo(bigDecimal76) == 0) == bigDecimal11.equals(bigDecimal76));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test422");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (short) 400, (int) ' ');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger6 = bigDecimal5.unscaledValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal3.add(bigDecimal5);
        java.math.BigInteger bigInteger8 = bigDecimal5.toBigInteger();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(bigInteger8, (int) (short) -1);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str13 = bigDecimal12.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal10.divideAndRemainder(bigDecimal12);
        java.math.BigDecimal bigDecimal16 = bigDecimal10.setScale((int) (short) 2805);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl2.scalarAdd(bigDecimal16);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test423");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        java.math.BigInteger bigInteger30 = bigDecimal28.unscaledValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal28.movePointLeft(32);
        java.math.BigDecimal bigDecimal34 = bigDecimal32.pow((int) (byte) 32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test424");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal1.ulp();
        java.lang.String str13 = bigDecimal1.toEngineeringString();
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[] doubleArray22 = new double[] { 1.0d, 100.0f };
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray26 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25 };
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray26);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray26);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl28.transpose();
        double[] doubleArray31 = bigMatrixImpl28.getRowAsDoubleArray((int) (short) 0);
        boolean boolean32 = bigMatrixImpl28.isSingular();
        java.math.BigDecimal[][] bigDecimalArray33 = bigMatrixImpl28.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray33);
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal37 = bigDecimal36.negate();
        int int38 = bigDecimal37.scale();
        boolean boolean39 = bigMatrixImpl34.equals((java.lang.Object) bigDecimal37);
        java.math.BigDecimal bigDecimal40 = bigDecimal37.plus();
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal1.divide(bigDecimal40, (int) (short) 9, 5);
        java.math.BigDecimal bigDecimal45 = bigDecimal44.negate();
        int int46 = bigDecimal44.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal44", (bigDecimal1.compareTo(bigDecimal44) == 0) == bigDecimal1.equals(bigDecimal44));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test425");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        int int17 = bigMatrixImpl14.getRoundingMode();
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl32.getNorm();
        int int35 = bigDecimal34.signum();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 4);
        int int38 = bigDecimal37.signum();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.subtract(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl14.scalarAdd(bigDecimal39);
        double double41 = bigDecimal39.doubleValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        int int47 = bigDecimal43.precision();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        long long51 = bigDecimal49.longValue();
        long long52 = bigDecimal49.longValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal43.add(bigDecimal49);
        java.math.BigDecimal bigDecimal54 = bigDecimal43.ulp();
        java.lang.String str55 = bigDecimal43.toEngineeringString();
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[] doubleArray64 = new double[] { 1.0d, 100.0f };
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray68 = new double[][] { doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl70.transpose();
        double[] doubleArray73 = bigMatrixImpl70.getRowAsDoubleArray((int) (short) 0);
        boolean boolean74 = bigMatrixImpl70.isSingular();
        java.math.BigDecimal[][] bigDecimalArray75 = bigMatrixImpl70.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray75);
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal79 = bigDecimal78.negate();
        int int80 = bigDecimal79.scale();
        boolean boolean81 = bigMatrixImpl76.equals((java.lang.Object) bigDecimal79);
        java.math.BigDecimal bigDecimal82 = bigDecimal79.plus();
        int int83 = bigDecimal82.intValue();
        java.math.BigDecimal bigDecimal86 = bigDecimal43.divide(bigDecimal82, (int) (short) 9, 5);
        int int87 = bigDecimal39.compareTo(bigDecimal82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal43 and bigDecimal86", (bigDecimal43.compareTo(bigDecimal86) == 0) == bigDecimal43.equals(bigDecimal86));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test426");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrix10.getData();
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrix27.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray42 = new double[][] { doubleArray32, doubleArray35, doubleArray38, doubleArray41 };
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray42);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl44 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl44.transpose();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        java.lang.String str50 = bigDecimal49.toString();
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal53 = bigDecimal52.stripTrailingZeros();
        int int54 = bigDecimal52.signum();
        java.math.BigDecimal[] bigDecimalArray55 = bigDecimal49.divideAndRemainder(bigDecimal52);
        java.math.BigDecimal bigDecimal57 = bigDecimal49.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal47, bigDecimal49 };
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray58);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray58);
        java.math.BigDecimal[] bigDecimalArray61 = bigMatrix45.preMultiply(bigDecimalArray58);
        java.math.BigDecimal[] bigDecimalArray62 = bigMatrixImpl29.preMultiply(bigDecimalArray61);
        java.math.BigDecimal[] bigDecimalArray64 = bigMatrixImpl29.getRow(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray64);
        java.math.BigDecimal[] bigDecimalArray66 = bigMatrix10.operate(bigDecimalArray64);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray66);
        // Transitivity of equals
        org.junit.Assert.assertTrue("Contract failed: equals-transitive on bigMatrix67, bigMatrix10, and bigDecimal1.", !(bigMatrix67.equals(bigMatrix10) && bigMatrix10.equals(bigDecimal1)) || bigMatrix67.equals(bigDecimal1));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test427");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.min(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal19.movePointRight((int) (short) 10);
        java.math.BigInteger bigInteger22 = bigDecimal21.toBigInteger();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(bigInteger22, 110);
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf(100L);
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((double) 0L);
        java.math.BigDecimal bigDecimal29 = bigDecimal26.max(bigDecimal28);
        java.lang.String str30 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal((double) ' ');
        java.lang.String str33 = bigDecimal32.toPlainString();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal26.divideAndRemainder(bigDecimal32);
        java.math.BigDecimal bigDecimal35 = bigDecimal24.divide(bigDecimal26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal28", (bigDecimal1.compareTo(bigDecimal28) == 0) == bigDecimal1.equals(bigDecimal28));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test428");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl5.getTrace();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        long long10 = bigDecimal8.longValue();
        long long11 = bigDecimal8.longValueExact();
        int int12 = bigDecimal8.precision();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        long long16 = bigDecimal14.longValue();
        long long17 = bigDecimal14.longValueExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal8.add(bigDecimal14);
        byte byte19 = bigDecimal8.byteValueExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal8.movePointLeft((int) (byte) -1);
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((double) 10);
        java.math.BigDecimal bigDecimal24 = bigDecimal8.min(bigDecimal23);
        java.math.BigDecimal bigDecimal25 = bigDecimal6.subtract(bigDecimal24);
        short short26 = bigDecimal24.shortValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal24", (bigDecimal6.compareTo(bigDecimal24) == 0) == bigDecimal6.equals(bigDecimal24));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test429");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode(10);
        int int31 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        java.lang.String str34 = bigDecimal33.toString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        int int38 = bigDecimal36.signum();
        java.math.BigDecimal[] bigDecimalArray39 = bigDecimal33.divideAndRemainder(bigDecimal36);
        java.math.BigDecimal bigDecimal41 = bigDecimal33.pow((int) 'a');
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        float float45 = bigDecimal43.floatValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.divideToIntegralValue(bigDecimal43);
        java.math.BigDecimal bigDecimal47 = bigDecimal43.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl27.scalarMultiply(bigDecimal47);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        java.math.BigDecimal bigDecimal54 = bigDecimal51.setScale((-100), 0);
        java.math.BigDecimal bigDecimal55 = bigDecimal47.multiply(bigDecimal54);
        long long56 = bigDecimal47.longValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal54", (bigDecimal1.compareTo(bigDecimal54) == 0) == bigDecimal1.equals(bigDecimal54));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test430");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigInteger bigInteger14 = bigDecimal13.toBigIntegerExact();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(bigInteger14, (-100));
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(bigInteger14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal16", (bigDecimal1.compareTo(bigDecimal16) == 0) == bigDecimal1.equals(bigDecimal16));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test431");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (byte) -112);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) ' ');
        java.math.BigDecimal bigDecimal5 = bigDecimal3.scaleByPowerOfTen((int) (byte) 97);
        java.math.BigDecimal bigDecimal7 = bigDecimal3.movePointLeft(7);
        double double8 = bigDecimal7.doubleValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test432");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        short short42 = bigDecimal40.shortValueExact();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.abs();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.movePointLeft((int) (short) 400);
        java.math.BigDecimal bigDecimal46 = bigDecimal43.stripTrailingZeros();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test433");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal12 = bigMatrixImpl11.getTrace();
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray25 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigDecimal29.signum();
        java.math.BigDecimal bigDecimal32 = bigDecimal29.movePointLeft((int) (byte) 97);
        java.lang.String str33 = bigDecimal32.toString();
        java.math.BigDecimal bigDecimal34 = bigDecimal12.divide(bigDecimal32);
        java.math.BigDecimal bigDecimal35 = bigDecimal32.negate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal12 and bigDecimal34", (bigDecimal12.compareTo(bigDecimal34) == 0) == bigDecimal12.equals(bigDecimal34));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test434");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(bigInteger32, 3);
        java.lang.String[] strArray36 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray37 = new java.lang.String[][] { strArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(strArray37);
        int int39 = bigMatrixImpl38.getColumnDimension();
        boolean boolean40 = bigDecimal34.equals((java.lang.Object) int39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        int int47 = bigDecimal43.precision();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        long long51 = bigDecimal49.longValue();
        long long52 = bigDecimal49.longValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal43.add(bigDecimal49);
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl14.scalarMultiply(bigDecimal54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal34", (bigDecimal23.compareTo(bigDecimal34) == 0) == bigDecimal23.equals(bigDecimal34));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test435");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        long long69 = bigDecimal67.longValue();
        long long70 = bigDecimal67.longValueExact();
        int int71 = bigDecimal67.precision();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        long long75 = bigDecimal73.longValue();
        long long76 = bigDecimal73.longValueExact();
        java.math.BigDecimal bigDecimal77 = bigDecimal67.add(bigDecimal73);
        java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal(0.0d);
        int int80 = bigDecimal79.intValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(0.0d);
        int int83 = bigDecimal82.intValue();
        java.math.BigDecimal bigDecimal84 = bigDecimal79.min(bigDecimal82);
        java.math.BigDecimal bigDecimal85 = bigDecimal77.min(bigDecimal82);
        java.math.BigDecimal bigDecimal87 = bigDecimal85.movePointRight((int) (short) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix88 = bigMatrixImpl27.scalarAdd(bigDecimal85);
        java.math.BigDecimal bigDecimal90 = bigDecimal85.setScale(5);
        java.math.BigDecimal bigDecimal91 = bigDecimal90.stripTrailingZeros();
        java.math.BigDecimal bigDecimal93 = bigDecimal90.setScale((-100));
        short short94 = bigDecimal90.shortValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal93", (bigDecimal1.compareTo(bigDecimal93) == 0) == bigDecimal1.equals(bigDecimal93));
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test436");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = bigMatrix1.inverse();
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrix2.copy();
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal15 = bigDecimal7.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal5, bigDecimal7 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray16);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrix18.getRow(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrix2.preMultiply(bigMatrix21);
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger25 = bigDecimal24.unscaledValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal24.stripTrailingZeros();
        java.math.BigDecimal bigDecimal28 = bigDecimal24.movePointRight((int) (short) -1);
        java.math.BigDecimal bigDecimal29 = bigDecimal24.stripTrailingZeros();
        java.math.BigDecimal bigDecimal30 = bigDecimal24.stripTrailingZeros();
        java.math.BigDecimal bigDecimal32 = bigDecimal24.scaleByPowerOfTen((int) (short) 1);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrix2.scalarMultiply(bigDecimal32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal24 and bigDecimal26", (bigDecimal24.compareTo(bigDecimal26) == 0) == bigDecimal24.equals(bigDecimal26));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test437");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) 4);
        double double2 = bigDecimal1.doubleValue();
        java.math.BigInteger bigInteger3 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((double) (byte) 0);
        java.math.BigDecimal bigDecimal6 = bigDecimal1.multiply(bigDecimal5);
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.min(bigDecimal11);
        java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal13 };
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal21 = bigDecimal16.min(bigDecimal19);
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal[][] bigDecimalArray31 = new java.math.BigDecimal[][] { bigDecimalArray14, bigDecimalArray22, bigDecimalArray30 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        java.math.BigDecimal[][] bigDecimalArray35 = bigMatrixImpl34.getDataRef();
        java.math.BigDecimal bigDecimal36 = bigMatrixImpl34.getNorm();
        boolean boolean37 = bigMatrixImpl34.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl34.copy();
        double[] doubleArray40 = bigMatrixImpl34.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl34.scalarMultiply(bigDecimal41);
        java.math.BigDecimal bigDecimal43 = bigDecimal41.negate();
        java.math.BigInteger bigInteger44 = bigDecimal41.toBigIntegerExact();
        int int45 = bigDecimal41.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal1.divideAndRemainder(bigDecimal41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal5 and bigDecimal6", (bigDecimal5.compareTo(bigDecimal6) == 0) == bigDecimal5.equals(bigDecimal6));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test438");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal8 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal9 = bigDecimal8.negate();
        java.math.BigDecimal bigDecimal10 = bigDecimal9.ulp();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((double) 1.0f);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        double[] doubleArray23 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray23);
        double[] doubleArray25 = realMatrix18.operate(doubleArray23);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray25);
        java.math.BigDecimal bigDecimal27 = bigMatrix26.getNorm();
        java.math.BigDecimal bigDecimal29 = bigDecimal27.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal31 = bigDecimal27.pow((int) (short) 10);
        int int32 = bigDecimal12.compareTo(bigDecimal27);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl60.getDataRef();
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl60.getNorm();
        boolean boolean63 = bigMatrixImpl60.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl60.copy();
        double[] doubleArray66 = bigMatrixImpl60.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl60.scalarMultiply(bigDecimal67);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl60.scalarAdd(bigDecimal71);
        int int73 = bigDecimal71.precision();
        java.math.BigDecimal bigDecimal74 = bigDecimal27.subtract(bigDecimal71);
        int int75 = bigDecimal9.compareTo(bigDecimal74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal10 and bigDecimal12", (bigDecimal10.compareTo(bigDecimal12) == 0) == bigDecimal10.equals(bigDecimal12));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test439");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal32);
        java.math.BigDecimal bigDecimal35 = bigDecimal28.ulp();
        java.math.BigInteger bigInteger36 = bigDecimal35.unscaledValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test440");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl0 = new org.apache.commons.math.linear.BigMatrixImpl();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal3 = bigMatrixImpl0.getEntry(44, 10);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test441");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) (short) -100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigInteger bigInteger12 = bigDecimal3.toBigIntegerExact();
        int int13 = bigDecimal3.precision();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl22.getNorm();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = bigDecimal35.stripTrailingZeros();
        float float37 = bigDecimal35.floatValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.divideToIntegralValue(bigDecimal35);
        boolean boolean39 = bigMatrixImpl22.equals((java.lang.Object) bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal3.divideAndRemainder(bigDecimal35);
        java.math.BigDecimal bigDecimal41 = bigDecimal1.remainder(bigDecimal35);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        int int47 = bigDecimal43.precision();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        long long51 = bigDecimal49.longValue();
        long long52 = bigDecimal49.longValueExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal43.add(bigDecimal49);
        java.math.BigDecimal bigDecimal55 = bigDecimal53.setScale((int) (byte) 10);
        java.math.BigDecimal bigDecimal56 = bigDecimal41.min(bigDecimal55);
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        java.lang.String str59 = bigDecimal58.toString();
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        int int63 = bigDecimal61.signum();
        java.math.BigDecimal[] bigDecimalArray64 = bigDecimal58.divideAndRemainder(bigDecimal61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray64);
        int int66 = bigMatrixImpl65.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl65.transpose();
        double[][] doubleArray68 = bigMatrix67.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        int int70 = bigMatrixImpl69.getScale();
        int int71 = bigMatrixImpl69.getRoundingMode();
        boolean boolean72 = bigDecimal41.equals((java.lang.Object) int71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal55", (bigDecimal3.compareTo(bigDecimal55) == 0) == bigDecimal3.equals(bigDecimal55));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test442");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.lang.String str3 = bigDecimal2.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal2.divideToIntegralValue(bigDecimal6);
        java.math.BigDecimal bigDecimal10 = bigDecimal8.pow((int) (short) 31464);
        java.math.BigDecimal bigDecimal11 = bigDecimal10.plus();
        int int12 = bigDecimal10.scale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal8 and bigDecimal10", (bigDecimal8.compareTo(bigDecimal10) == 0) == bigDecimal8.equals(bigDecimal10));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test443");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal bigDecimal7 = bigDecimal1.plus();
        java.math.BigInteger bigInteger8 = bigDecimal7.toBigIntegerExact();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger12 = bigDecimal11.unscaledValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal9.add(bigDecimal11);
        float float14 = bigDecimal11.floatValue();
        java.lang.String str15 = bigDecimal11.toEngineeringString();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        long long19 = bigDecimal17.longValue();
        long long20 = bigDecimal17.longValueExact();
        int int21 = bigDecimal17.precision();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        long long25 = bigDecimal23.longValue();
        long long26 = bigDecimal23.longValueExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal17.add(bigDecimal23);
        java.math.BigDecimal bigDecimal29 = bigDecimal23.pow(3);
        java.math.BigInteger bigInteger30 = bigDecimal29.toBigIntegerExact();
        java.math.BigDecimal bigDecimal31 = bigDecimal29.stripTrailingZeros();
        java.math.BigDecimal bigDecimal32 = bigDecimal11.add(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl60.getDataRef();
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl60.getNorm();
        boolean boolean63 = bigMatrixImpl60.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl60.copy();
        double[] doubleArray66 = bigMatrixImpl60.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl60.scalarMultiply(bigDecimal67);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl60.scalarAdd(bigDecimal71);
        java.math.BigDecimal bigDecimal74 = bigDecimal71.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        long long78 = bigDecimal76.longValue();
        java.math.BigDecimal bigDecimal79 = bigDecimal71.min(bigDecimal76);
        java.math.BigDecimal bigDecimal80 = bigDecimal29.multiply(bigDecimal76);
        java.math.BigDecimal bigDecimal82 = bigDecimal29.setScale(5);
        java.math.BigDecimal bigDecimal83 = bigDecimal7.min(bigDecimal82);
        java.math.BigDecimal bigDecimal85 = bigDecimal83.movePointLeft((int) (byte) -112);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal83 and bigDecimal82", (bigDecimal83.compareTo(bigDecimal82) == 0) == bigDecimal83.equals(bigDecimal82));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test444");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (byte) -112);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) ' ');
        java.math.BigDecimal bigDecimal5 = bigDecimal3.scaleByPowerOfTen((int) (byte) 97);
        byte byte6 = bigDecimal5.byteValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test445");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[] doubleArray70 = new double[] { 1.0d, 100.0f };
        double[] doubleArray73 = new double[] { 1.0d, 100.0f };
        double[] doubleArray76 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray77 = new double[][] { doubleArray67, doubleArray70, doubleArray73, doubleArray76 };
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray77);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl79.transpose();
        double[] doubleArray82 = bigMatrixImpl79.getRowAsDoubleArray((int) (short) 0);
        boolean boolean83 = bigMatrixImpl79.isSingular();
        boolean boolean84 = bigMatrixImpl79.isSquare();
        int int85 = bigMatrixImpl79.getScale();
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal88 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger89 = bigDecimal88.unscaledValue();
        java.math.BigDecimal bigDecimal90 = bigDecimal86.add(bigDecimal88);
        java.math.BigDecimal bigDecimal92 = bigDecimal88.setScale(100);
        boolean boolean93 = bigMatrixImpl79.equals((java.lang.Object) bigDecimal88);
        java.lang.String str94 = bigDecimal88.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl27.scalarAdd(bigDecimal88);
        double[][] doubleArray96 = bigMatrix95.getDataAsDoubleArray();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal88 and bigDecimal92", (bigDecimal88.compareTo(bigDecimal92) == 0) == bigDecimal88.equals(bigDecimal92));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test446");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        bigMatrixImpl2.setScale(10);
        java.math.BigDecimal[] bigDecimalArray6 = bigMatrixImpl2.getColumn(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl2.transpose();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal bigDecimal8 = bigMatrixImpl2.getNorm();
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test447");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf(1122000.0d);
        java.math.BigDecimal bigDecimal15 = bigDecimal12.multiply(bigDecimal14);
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        long long19 = bigDecimal17.longValue();
        long long20 = bigDecimal17.longValueExact();
        int int21 = bigDecimal17.precision();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        long long25 = bigDecimal23.longValue();
        long long26 = bigDecimal23.longValueExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal17.add(bigDecimal23);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        java.lang.String str30 = bigDecimal29.toString();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        int int34 = bigDecimal32.signum();
        java.math.BigDecimal[] bigDecimalArray35 = bigDecimal29.divideAndRemainder(bigDecimal32);
        java.math.BigDecimal bigDecimal37 = bigDecimal29.pow((int) 'a');
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        java.lang.String str40 = bigDecimal39.toString();
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal43 = bigDecimal42.stripTrailingZeros();
        int int44 = bigDecimal42.signum();
        java.math.BigDecimal[] bigDecimalArray45 = bigDecimal39.divideAndRemainder(bigDecimal42);
        java.math.BigDecimal bigDecimal47 = bigDecimal39.pow((int) 'a');
        java.math.BigInteger bigInteger48 = bigDecimal39.toBigIntegerExact();
        java.math.BigDecimal bigDecimal49 = bigDecimal37.add(bigDecimal39);
        java.math.BigDecimal bigDecimal50 = bigDecimal23.multiply(bigDecimal37);
        java.math.BigDecimal bigDecimal51 = bigDecimal23.ulp();
        java.math.BigDecimal bigDecimal53 = bigDecimal51.scaleByPowerOfTen((int) '#');
        java.math.BigDecimal bigDecimal54 = bigDecimal51.ulp();
        java.math.BigDecimal bigDecimal56 = bigDecimal54.setScale((int) (byte) 0);
        java.math.BigDecimal bigDecimal59 = bigDecimal12.divide(bigDecimal56, (int) (byte) 11, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal15", (bigDecimal1.compareTo(bigDecimal15) == 0) == bigDecimal1.equals(bigDecimal15));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test448");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        java.lang.String str36 = bigDecimal35.toString();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        int int40 = bigDecimal38.signum();
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal35.divideAndRemainder(bigDecimal38);
        java.math.BigDecimal bigDecimal43 = bigDecimal35.pow((int) 'a');
        java.math.BigInteger bigInteger44 = bigDecimal35.toBigIntegerExact();
        java.math.BigDecimal bigDecimal45 = bigDecimal33.add(bigDecimal35);
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        java.lang.String str48 = bigDecimal47.toString();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        int int52 = bigDecimal50.signum();
        java.math.BigDecimal[] bigDecimalArray53 = bigDecimal47.divideAndRemainder(bigDecimal50);
        java.math.BigDecimal bigDecimal55 = bigDecimal47.pow((int) 'a');
        java.math.BigInteger bigInteger56 = bigDecimal47.toBigIntegerExact();
        float float57 = bigDecimal47.floatValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal33.add(bigDecimal47);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal61 = bigDecimal47.divideToIntegralValue(bigDecimal60);
        java.math.BigDecimal bigDecimal62 = bigDecimal23.divideToIntegralValue(bigDecimal60);
        boolean boolean63 = bigMatrixImpl14.equals((java.lang.Object) bigDecimal62);
        double[] doubleArray66 = new double[] { 1.0d, 100.0f };
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[] doubleArray72 = new double[] { 1.0d, 100.0f };
        double[] doubleArray75 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray76 = new double[][] { doubleArray66, doubleArray69, doubleArray72, doubleArray75 };
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray76);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray76);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl78.transpose();
        int int80 = bigMatrixImpl78.getColumnDimension();
        java.math.BigDecimal bigDecimal81 = bigMatrixImpl78.getNorm();
        int int82 = bigMatrixImpl78.getScale();
        boolean boolean83 = bigMatrixImpl78.isSingular();
        int int84 = bigMatrixImpl78.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrixImpl78.copy();
        java.math.BigDecimal bigDecimal87 = new java.math.BigDecimal((long) 0);
        java.math.BigDecimal bigDecimal89 = bigDecimal87.pow(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl78.scalarMultiply(bigDecimal89);
        java.math.BigDecimal bigDecimal92 = bigDecimal89.movePointLeft(32);
        org.apache.commons.math.linear.BigMatrix bigMatrix93 = bigMatrixImpl14.scalarMultiply(bigDecimal89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal25 and bigDecimal92", (bigDecimal25.compareTo(bigDecimal92) == 0) == bigDecimal25.equals(bigDecimal92));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test449");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl29.getNorm();
        java.math.BigInteger bigInteger31 = bigDecimal30.unscaledValue();
        java.lang.String str32 = bigDecimal30.toString();
        java.lang.String str33 = bigDecimal30.toPlainString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 64, (int) (short) 35);
        java.math.BigDecimal bigDecimal37 = bigDecimal30.divideToIntegralValue(bigDecimal36);
        int int38 = bigDecimal36.signum();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal37", (bigDecimal1.compareTo(bigDecimal37) == 0) == bigDecimal1.equals(bigDecimal37));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test450");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        int int42 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        long long47 = bigDecimal45.longValue();
        long long48 = bigDecimal45.longValueExact();
        int int49 = bigDecimal45.precision();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        long long53 = bigDecimal51.longValue();
        long long54 = bigDecimal51.longValueExact();
        java.math.BigDecimal bigDecimal55 = bigDecimal45.add(bigDecimal51);
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.min(bigDecimal60);
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        java.lang.String str66 = bigDecimal65.toString();
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal69 = bigDecimal68.stripTrailingZeros();
        int int70 = bigDecimal68.signum();
        java.math.BigDecimal[] bigDecimalArray71 = bigDecimal65.divideAndRemainder(bigDecimal68);
        java.math.BigDecimal bigDecimal73 = bigDecimal65.pow((int) 'a');
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(0.0d);
        java.lang.String str76 = bigDecimal75.toString();
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal79 = bigDecimal78.stripTrailingZeros();
        int int80 = bigDecimal78.signum();
        java.math.BigDecimal[] bigDecimalArray81 = bigDecimal75.divideAndRemainder(bigDecimal78);
        java.math.BigDecimal bigDecimal83 = bigDecimal75.pow((int) 'a');
        java.math.BigInteger bigInteger84 = bigDecimal75.toBigIntegerExact();
        java.math.BigDecimal bigDecimal85 = bigDecimal73.add(bigDecimal75);
        java.math.BigDecimal bigDecimal87 = bigDecimal85.pow((int) (byte) 97);
        int int88 = bigDecimal85.scale();
        int int89 = bigDecimal85.intValue();
        java.math.BigDecimal bigDecimal90 = bigDecimal63.max(bigDecimal85);
        java.math.BigDecimal bigDecimal91 = bigDecimal43.add(bigDecimal90);
        java.math.BigInteger bigInteger92 = bigDecimal91.unscaledValue();
        java.math.BigDecimal bigDecimal94 = new java.math.BigDecimal(bigInteger92, (-35));
        java.math.BigDecimal bigDecimal95 = bigDecimal94.negate();
        java.math.BigDecimal bigDecimal97 = bigDecimal95.scaleByPowerOfTen((int) (byte) -11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal94", (bigDecimal1.compareTo(bigDecimal94) == 0) == bigDecimal1.equals(bigDecimal94));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test451");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(100L);
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((double) 0L);
        java.math.BigDecimal bigDecimal4 = bigDecimal1.max(bigDecimal3);
        int int5 = bigDecimal3.intValueExact();
        java.lang.String[] strArray7 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray8 = new java.lang.String[][] { strArray7 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray8);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray8);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray8);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(strArray8);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray8);
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.min(bigDecimal18);
        java.math.BigInteger bigInteger21 = bigDecimal15.toBigInteger();
        int int22 = bigDecimal15.precision();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal25 = bigDecimal15.subtract(bigDecimal24);
        java.math.BigDecimal bigDecimal26 = bigDecimal24.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl13.scalarAdd(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal3.divideAndRemainder(bigDecimal24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal15", (bigDecimal3.compareTo(bigDecimal15) == 0) == bigDecimal3.equals(bigDecimal15));
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test452");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(5, 110);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = bigMatrixImpl2.copy();
        int int4 = bigMatrixImpl2.getRoundingMode();
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrix3 and bigMatrix3", bigMatrix3.equals(bigMatrix3) ? bigMatrix3.hashCode() == bigMatrix3.hashCode() : true);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test453");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigInteger bigInteger14 = bigDecimal13.toBigIntegerExact();
        int int15 = bigDecimal13.scale();
        int int16 = bigDecimal13.precision();
        java.lang.String str17 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal13.movePointRight((int) (byte) -112);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.movePointRight((int) ' ');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal19", (bigDecimal1.compareTo(bigDecimal19) == 0) == bigDecimal1.equals(bigDecimal19));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test454");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl5.getTrace();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        java.lang.String str9 = bigDecimal8.toString();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        int int13 = bigDecimal11.signum();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal8.divideAndRemainder(bigDecimal11);
        java.math.BigDecimal bigDecimal16 = bigDecimal8.pow((int) 'a');
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        java.lang.String str19 = bigDecimal18.toString();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        int int23 = bigDecimal21.signum();
        java.math.BigDecimal[] bigDecimalArray24 = bigDecimal18.divideAndRemainder(bigDecimal21);
        java.math.BigDecimal bigDecimal26 = bigDecimal18.pow((int) 'a');
        java.math.BigInteger bigInteger27 = bigDecimal18.toBigIntegerExact();
        java.math.BigDecimal bigDecimal28 = bigDecimal16.add(bigDecimal18);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        java.lang.String str31 = bigDecimal30.toString();
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal34 = bigDecimal33.stripTrailingZeros();
        int int35 = bigDecimal33.signum();
        java.math.BigDecimal[] bigDecimalArray36 = bigDecimal30.divideAndRemainder(bigDecimal33);
        java.math.BigDecimal bigDecimal38 = bigDecimal30.pow((int) 'a');
        java.math.BigInteger bigInteger39 = bigDecimal30.toBigIntegerExact();
        float float40 = bigDecimal30.floatValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal16.add(bigDecimal30);
        java.math.BigInteger bigInteger42 = bigDecimal30.toBigInteger();
        int int43 = bigDecimal30.signum();
        java.math.BigDecimal bigDecimal44 = bigDecimal30.stripTrailingZeros();
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl5.scalarMultiply(bigDecimal44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal8", (bigDecimal6.compareTo(bigDecimal8) == 0) == bigDecimal6.equals(bigDecimal8));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test455");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        java.lang.String[] strArray11 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl5.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl16);
        java.math.BigDecimal bigDecimal18 = bigMatrixImpl16.getTrace();
        double[] doubleArray23 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray23);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray23);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix25.scalarAdd((double) 6);
        int int28 = realMatrix25.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix25.scalarAdd(10.0d);
        double[] doubleArray35 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray35);
        double double37 = realMatrix36.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix36.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix30.preMultiply(realMatrix39);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix40.scalarAdd((double) 1.0f);
        boolean boolean43 = bigMatrixImpl16.equals((java.lang.Object) realMatrix40);
        java.math.BigDecimal bigDecimal44 = bigMatrixImpl16.getNorm();
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl16.getTrace();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal45 and bigDecimal44", (bigDecimal45.compareTo(bigDecimal44) == 0) == bigDecimal45.equals(bigDecimal44));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test456");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        int int20 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        java.lang.String str25 = bigDecimal24.toString();
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal28 = bigDecimal27.stripTrailingZeros();
        int int29 = bigDecimal27.signum();
        java.math.BigDecimal[] bigDecimalArray30 = bigDecimal24.divideAndRemainder(bigDecimal27);
        java.math.BigDecimal bigDecimal32 = bigDecimal24.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal22, bigDecimal24 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrix34.getColumnMatrix(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl14.multiply(bigMatrix34);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal("10");
        int int40 = bigDecimal39.signum();
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray45 = bigDecimal42.divideAndRemainder(bigDecimal44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45);
        double[] doubleArray48 = bigMatrixImpl46.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger51 = bigDecimal50.unscaledValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal50.stripTrailingZeros();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        long long56 = bigDecimal54.longValue();
        long long57 = bigDecimal54.longValueExact();
        short short58 = bigDecimal54.shortValueExact();
        java.math.BigDecimal bigDecimal59 = bigDecimal50.min(bigDecimal54);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl46.scalarMultiply(bigDecimal50);
        java.math.BigDecimal bigDecimal61 = bigDecimal39.divideToIntegralValue(bigDecimal50);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrix37.scalarAdd(bigDecimal39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal50 and bigDecimal52", (bigDecimal50.compareTo(bigDecimal52) == 0) == bigDecimal50.equals(bigDecimal52));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test457");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(bigInteger32, 3);
        java.lang.String[] strArray36 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray37 = new java.lang.String[][] { strArray36 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(strArray37);
        int int39 = bigMatrixImpl38.getColumnDimension();
        boolean boolean40 = bigDecimal34.equals((java.lang.Object) int39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal43 = bigDecimal34.movePointLeft((-3));
        byte byte44 = bigDecimal43.byteValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal34", (bigDecimal23.compareTo(bigDecimal34) == 0) == bigDecimal23.equals(bigDecimal34));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test458");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale(5);
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        double[] doubleArray21 = bigMatrixImpl18.getRowAsDoubleArray((int) (short) 0);
        boolean boolean22 = bigMatrixImpl18.isSingular();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl18.getData();
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl18.getNorm();
        java.math.BigDecimal bigDecimal25 = bigMatrixImpl18.getNorm();
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray38 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37 };
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl40.transpose();
        boolean boolean42 = bigMatrixImpl40.isSingular();
        double[] doubleArray44 = bigMatrixImpl40.getColumnAsDoubleArray(0);
        int int45 = bigMatrixImpl40.getRoundingMode();
        boolean boolean46 = bigMatrixImpl40.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl18.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl40);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl40.transpose();
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl40.getData();
        double[] doubleArray52 = new double[] { 1.0d, 100.0f };
        double[] doubleArray55 = new double[] { 1.0d, 100.0f };
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray62 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal(0.0d);
        int int72 = bigDecimal71.intValue();
        java.math.BigDecimal bigDecimal73 = bigDecimal68.min(bigDecimal71);
        java.math.BigInteger bigInteger74 = bigDecimal68.toBigInteger();
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(bigInteger74);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrix66.scalarAdd(bigDecimal75);
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        int int79 = bigDecimal78.intValue();
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(0.0d);
        int int82 = bigDecimal81.intValue();
        java.math.BigDecimal bigDecimal83 = bigDecimal78.min(bigDecimal81);
        java.math.BigInteger bigInteger84 = bigDecimal78.toBigInteger();
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal87 = bigDecimal86.negate();
        java.math.BigDecimal bigDecimal88 = bigDecimal78.add(bigDecimal86);
        java.math.BigDecimal bigDecimal89 = bigDecimal75.divideToIntegralValue(bigDecimal88);
        org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl40.scalarMultiply(bigDecimal88);
        java.math.BigInteger bigInteger91 = bigDecimal88.unscaledValue();
        java.math.BigDecimal bigDecimal92 = bigDecimal3.subtract(bigDecimal88);
        java.lang.Object obj93 = null;
        boolean boolean94 = bigDecimal88.equals(obj93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test459");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigInteger bigInteger10 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(bigInteger10, 3);
        java.math.BigDecimal bigDecimal14 = bigDecimal12.setScale((int) (short) 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray17 = new java.lang.String[][] { strArray16 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(strArray17);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(strArray17);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(strArray17);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(strArray17);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(strArray17);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(strArray17);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray17);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(strArray17);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl25.transpose();
        boolean boolean27 = bigDecimal12.equals((java.lang.Object) bigMatrix26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal14", (bigDecimal1.compareTo(bigDecimal14) == 0) == bigDecimal1.equals(bigDecimal14));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test460");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        java.math.BigInteger bigInteger51 = bigDecimal26.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(bigInteger51, 3);
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal((long) (byte) 0);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal53.multiply(bigDecimal55);
        int int58 = bigDecimal53.precision();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal57", (bigDecimal23.compareTo(bigDecimal57) == 0) == bigDecimal23.equals(bigDecimal57));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test461");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        java.lang.String str48 = bigDecimal47.toString();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        int int52 = bigDecimal50.signum();
        java.math.BigDecimal[] bigDecimalArray53 = bigDecimal47.divideAndRemainder(bigDecimal50);
        java.math.BigDecimal bigDecimal55 = bigDecimal47.pow((int) 'a');
        java.math.BigInteger bigInteger56 = bigDecimal47.toBigIntegerExact();
        java.math.BigDecimal bigDecimal57 = bigDecimal45.add(bigDecimal47);
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigInteger bigInteger68 = bigDecimal59.toBigIntegerExact();
        float float69 = bigDecimal59.floatValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal45.add(bigDecimal59);
        java.math.BigDecimal bigDecimal72 = bigDecimal59.pow((int) ' ');
        java.math.BigDecimal bigDecimal73 = bigDecimal35.subtract(bigDecimal72);
        java.math.BigDecimal bigDecimal74 = bigDecimal25.subtract(bigDecimal72);
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal(0.0d);
        int int80 = bigDecimal79.intValue();
        java.math.BigDecimal bigDecimal81 = bigDecimal76.min(bigDecimal79);
        java.math.BigInteger bigInteger82 = bigDecimal76.toBigInteger();
        java.math.BigInteger bigInteger83 = bigDecimal76.unscaledValue();
        java.math.BigDecimal bigDecimal84 = new java.math.BigDecimal(bigInteger83);
        java.math.BigDecimal bigDecimal86 = new java.math.BigDecimal(bigInteger83, (int) ' ');
        java.math.BigDecimal bigDecimal87 = bigDecimal25.multiply(bigDecimal86);
        java.lang.String str88 = bigDecimal25.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal86", (bigDecimal18.compareTo(bigDecimal86) == 0) == bigDecimal18.equals(bigDecimal86));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test462");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal bigDecimal7 = bigDecimal1.plus();
        java.math.BigInteger bigInteger8 = bigDecimal7.toBigIntegerExact();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger12 = bigDecimal11.unscaledValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal9.add(bigDecimal11);
        float float14 = bigDecimal11.floatValue();
        java.lang.String str15 = bigDecimal11.toEngineeringString();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        long long19 = bigDecimal17.longValue();
        long long20 = bigDecimal17.longValueExact();
        int int21 = bigDecimal17.precision();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        long long25 = bigDecimal23.longValue();
        long long26 = bigDecimal23.longValueExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal17.add(bigDecimal23);
        java.math.BigDecimal bigDecimal29 = bigDecimal23.pow(3);
        java.math.BigInteger bigInteger30 = bigDecimal29.toBigIntegerExact();
        java.math.BigDecimal bigDecimal31 = bigDecimal29.stripTrailingZeros();
        java.math.BigDecimal bigDecimal32 = bigDecimal11.add(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl60.getDataRef();
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl60.getNorm();
        boolean boolean63 = bigMatrixImpl60.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl60.copy();
        double[] doubleArray66 = bigMatrixImpl60.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl60.scalarMultiply(bigDecimal67);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl60.scalarAdd(bigDecimal71);
        java.math.BigDecimal bigDecimal74 = bigDecimal71.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        long long78 = bigDecimal76.longValue();
        java.math.BigDecimal bigDecimal79 = bigDecimal71.min(bigDecimal76);
        java.math.BigDecimal bigDecimal80 = bigDecimal29.multiply(bigDecimal76);
        java.math.BigDecimal bigDecimal82 = bigDecimal29.setScale(5);
        java.math.BigDecimal bigDecimal83 = bigDecimal7.min(bigDecimal82);
        java.math.BigDecimal bigDecimal85 = new java.math.BigDecimal("197");
        java.math.BigDecimal bigDecimal87 = bigDecimal85.movePointRight(110);
        java.math.BigDecimal bigDecimal88 = bigDecimal83.add(bigDecimal85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal83 and bigDecimal82", (bigDecimal83.compareTo(bigDecimal82) == 0) == bigDecimal83.equals(bigDecimal82));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test463");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (byte) 100);
        java.math.BigDecimal[][] bigDecimalArray2 = bigMatrix1.getData();
        boolean boolean3 = bigMatrix1.isSquare();
        java.math.BigDecimal bigDecimal4 = bigMatrix1.getDeterminant();
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger8 = bigDecimal7.unscaledValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal5.add(bigDecimal7);
        float float10 = bigDecimal7.floatValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        java.lang.String str13 = bigDecimal12.toString();
        java.math.BigDecimal bigDecimal15 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal16 = bigDecimal15.stripTrailingZeros();
        int int17 = bigDecimal15.signum();
        java.math.BigDecimal[] bigDecimalArray18 = bigDecimal12.divideAndRemainder(bigDecimal15);
        java.math.BigDecimal bigDecimal20 = bigDecimal12.pow((int) 'a');
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal26 = bigDecimal25.stripTrailingZeros();
        int int27 = bigDecimal25.signum();
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal22.divideAndRemainder(bigDecimal25);
        java.math.BigDecimal bigDecimal30 = bigDecimal22.pow((int) 'a');
        java.math.BigInteger bigInteger31 = bigDecimal22.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = bigDecimal20.add(bigDecimal22);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigInteger bigInteger40 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(bigInteger40);
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        float float45 = bigDecimal43.floatValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.multiply(bigDecimal43);
        java.math.BigDecimal bigDecimal47 = bigDecimal41.negate();
        java.math.BigDecimal bigDecimal48 = bigDecimal32.add(bigDecimal47);
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        float float52 = bigDecimal50.floatValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal50.ulp();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        java.lang.String str66 = bigDecimal65.toString();
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal69 = bigDecimal68.stripTrailingZeros();
        int int70 = bigDecimal68.signum();
        java.math.BigDecimal[] bigDecimalArray71 = bigDecimal65.divideAndRemainder(bigDecimal68);
        java.math.BigDecimal bigDecimal73 = bigDecimal65.pow((int) 'a');
        java.math.BigInteger bigInteger74 = bigDecimal65.toBigIntegerExact();
        java.math.BigDecimal bigDecimal75 = bigDecimal63.add(bigDecimal65);
        java.math.BigDecimal bigDecimal76 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger79 = bigDecimal78.unscaledValue();
        java.math.BigDecimal bigDecimal80 = bigDecimal76.add(bigDecimal78);
        java.math.BigDecimal bigDecimal81 = bigDecimal65.multiply(bigDecimal76);
        java.math.BigDecimal bigDecimal82 = bigDecimal53.divide(bigDecimal76);
        java.math.BigDecimal bigDecimal83 = bigDecimal47.remainder(bigDecimal53);
        java.math.BigDecimal bigDecimal84 = bigDecimal7.subtract(bigDecimal47);
        java.math.BigDecimal bigDecimal85 = bigDecimal7.ulp();
        java.math.BigDecimal bigDecimal87 = bigDecimal85.movePointRight(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix88 = bigMatrix1.scalarAdd(bigDecimal85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal85", (bigDecimal4.compareTo(bigDecimal85) == 0) == bigDecimal4.equals(bigDecimal85));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test464");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        double[][] doubleArray11 = bigMatrix10.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray11);
        java.math.BigDecimal bigDecimal13 = bigMatrixImpl12.getNorm();
        int int14 = bigMatrixImpl12.getColumnDimension();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        int int24 = bigMatrixImpl23.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl23.transpose();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl23.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl23.getDataRef();
        boolean boolean28 = bigMatrixImpl12.equals((java.lang.Object) bigMatrixImpl23);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal30.divideAndRemainder(bigDecimal32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray33);
        double[] doubleArray36 = bigMatrixImpl34.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl34.copy();
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray50 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49 };
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl52.transpose();
        int int54 = bigMatrixImpl52.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray55 = bigMatrixImpl52.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl34.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl52);
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrixImpl34.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl34.getData();
        int int59 = bigMatrixImpl34.getRowDimension();
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((double) 'a');
        double double62 = bigDecimal61.doubleValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl34.scalarMultiply(bigDecimal61);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl12.preMultiply(bigMatrix63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal61", (bigDecimal4.compareTo(bigDecimal61) == 0) == bigDecimal4.equals(bigDecimal61));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test465");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigInteger bigInteger24 = bigDecimal18.toBigInteger();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix16.scalarAdd(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger29 = bigDecimal28.toBigIntegerExact();
        java.math.BigInteger bigInteger30 = bigDecimal28.unscaledValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal28.movePointLeft(32);
        byte byte33 = bigDecimal32.byteValueExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal28", (bigDecimal18.compareTo(bigDecimal28) == 0) == bigDecimal18.equals(bigDecimal28));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test466");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.negate();
        java.math.BigDecimal bigDecimal4 = bigDecimal2.setScale((int) (short) 31464);
        java.math.BigDecimal bigDecimal6 = bigDecimal2.movePointLeft((int) (short) 400);
        java.math.BigDecimal bigDecimal7 = bigDecimal2.plus();
        int int8 = bigDecimal2.scale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal2", (bigDecimal4.compareTo(bigDecimal2) == 0) == bigDecimal4.equals(bigDecimal2));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test467");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        bigMatrixImpl2.setScale((int) 'a');
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl2.getEntry(0, (int) (byte) 6);
        bigMatrixImpl2.setScale((int) (byte) 62);
        bigMatrixImpl2.setScale(8667);
        int int12 = bigMatrixImpl2.getRoundingMode();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[] doubleArray14 = bigMatrixImpl2.getRowAsDoubleArray(0);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test468");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigInteger bigInteger35 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        double[] doubleArray54 = bigMatrixImpl51.getRowAsDoubleArray((int) (short) 0);
        boolean boolean55 = bigMatrixImpl51.isSingular();
        boolean boolean56 = bigMatrixImpl51.isSquare();
        int int57 = bigMatrixImpl51.getScale();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal58.add(bigDecimal60);
        java.math.BigDecimal bigDecimal64 = bigDecimal60.setScale(100);
        boolean boolean65 = bigMatrixImpl51.equals((java.lang.Object) bigDecimal60);
        java.math.BigDecimal bigDecimal66 = bigDecimal36.min(bigDecimal60);
        java.math.BigInteger bigInteger67 = bigDecimal60.toBigInteger();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(bigInteger67, 50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal60 and bigDecimal64", (bigDecimal60.compareTo(bigDecimal64) == 0) == bigDecimal60.equals(bigDecimal64));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test469");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        float float22 = bigDecimal21.floatValue();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigInteger bigInteger47 = bigDecimal41.toBigInteger();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(bigInteger47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrix39.scalarAdd(bigDecimal48);
        java.math.BigDecimal bigDecimal50 = bigDecimal48.stripTrailingZeros();
        java.math.BigDecimal bigDecimal51 = bigDecimal21.min(bigDecimal50);
        java.math.BigInteger bigInteger52 = bigDecimal21.unscaledValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal21.scaleByPowerOfTen(7);
        java.math.BigDecimal bigDecimal56 = bigDecimal54.pow((int) (short) 2805);
        java.math.BigDecimal bigDecimal58 = bigDecimal54.setScale((int) (byte) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal56", (bigDecimal1.compareTo(bigDecimal56) == 0) == bigDecimal1.equals(bigDecimal56));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test470");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        java.lang.String str26 = bigDecimal23.toEngineeringString();
        java.math.BigDecimal bigDecimal27 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        long long31 = bigDecimal29.longValue();
        long long32 = bigDecimal29.longValueExact();
        int int33 = bigDecimal29.precision();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        long long37 = bigDecimal35.longValue();
        long long38 = bigDecimal35.longValueExact();
        java.math.BigDecimal bigDecimal39 = bigDecimal29.add(bigDecimal35);
        byte byte40 = bigDecimal29.byteValueExact();
        java.math.BigDecimal bigDecimal41 = bigDecimal27.add(bigDecimal29);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal((long) 4);
        java.lang.String str44 = bigDecimal43.toEngineeringString();
        java.math.BigDecimal bigDecimal45 = bigDecimal41.max(bigDecimal43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal27", (bigDecimal23.compareTo(bigDecimal27) == 0) == bigDecimal23.equals(bigDecimal27));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test471");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal8.negate();
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal14.setScale((int) (short) 10, 0);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        java.lang.String str21 = bigDecimal20.toString();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        int int25 = bigDecimal23.signum();
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal20.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal bigDecimal28 = bigDecimal20.pow((int) 'a');
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        float float32 = bigDecimal30.floatValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.divideToIntegralValue(bigDecimal30);
        java.math.BigDecimal bigDecimal34 = bigDecimal30.ulp();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger37 = bigDecimal36.unscaledValue();
        short short38 = bigDecimal36.shortValueExact();
        java.lang.String str39 = bigDecimal36.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal34.divideAndRemainder(bigDecimal36);
        java.lang.String str41 = bigDecimal34.toEngineeringString();
        java.math.BigDecimal bigDecimal43 = bigDecimal34.pow((int) (short) 7888);
        java.math.BigDecimal[] bigDecimalArray44 = bigDecimal14.divideAndRemainder(bigDecimal43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal18", (bigDecimal1.compareTo(bigDecimal18) == 0) == bigDecimal1.equals(bigDecimal18));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test472");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray32);
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl33.getNorm();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        float float38 = bigDecimal36.floatValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.remainder(bigDecimal36);
        long long40 = bigDecimal34.longValueExact();
        java.math.BigDecimal bigDecimal42 = bigDecimal34.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal43 = bigDecimal3.add(bigDecimal34);
        java.lang.String str44 = bigDecimal3.toPlainString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal43", (bigDecimal1.compareTo(bigDecimal43) == 0) == bigDecimal1.equals(bigDecimal43));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test473");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl37.copy();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl37.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray40);
        boolean boolean42 = bigMatrixImpl41.isSquare();
        java.math.BigDecimal bigDecimal43 = bigMatrixImpl41.getTrace();
        java.math.BigDecimal[][] bigDecimalArray44 = bigMatrixImpl41.getDataRef();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal43", (bigDecimal1.compareTo(bigDecimal43) == 0) == bigDecimal1.equals(bigDecimal43));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test474");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale((int) (short) 100, (int) (byte) 1);
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray17 = new double[][] { doubleArray7, doubleArray10, doubleArray13, doubleArray16 };
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray17);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray17);
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl19.transpose();
        double[] doubleArray22 = bigMatrixImpl19.getRowAsDoubleArray((int) (short) 0);
        boolean boolean23 = bigMatrixImpl19.isSingular();
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrixImpl19.getData();
        java.math.BigDecimal bigDecimal25 = bigMatrixImpl19.getNorm();
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl19.getNorm();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl41.transpose();
        boolean boolean43 = bigMatrixImpl41.isSingular();
        double[] doubleArray45 = bigMatrixImpl41.getColumnAsDoubleArray(0);
        int int46 = bigMatrixImpl41.getRoundingMode();
        boolean boolean47 = bigMatrixImpl41.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl19.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl41);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl41.transpose();
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl41.getData();
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray63 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal74 = bigDecimal69.min(bigDecimal72);
        java.math.BigInteger bigInteger75 = bigDecimal69.toBigInteger();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(bigInteger75);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrix67.scalarAdd(bigDecimal76);
        java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal(0.0d);
        int int80 = bigDecimal79.intValue();
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(0.0d);
        int int83 = bigDecimal82.intValue();
        java.math.BigDecimal bigDecimal84 = bigDecimal79.min(bigDecimal82);
        java.math.BigInteger bigInteger85 = bigDecimal79.toBigInteger();
        java.math.BigDecimal bigDecimal87 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal88 = bigDecimal87.negate();
        java.math.BigDecimal bigDecimal89 = bigDecimal79.add(bigDecimal87);
        java.math.BigDecimal bigDecimal90 = bigDecimal76.divideToIntegralValue(bigDecimal89);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl41.scalarMultiply(bigDecimal89);
        java.math.BigInteger bigInteger92 = bigDecimal89.unscaledValue();
        int int93 = bigDecimal4.compareTo(bigDecimal89);
        java.math.BigDecimal bigDecimal94 = bigDecimal89.abs();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal4", (bigDecimal1.compareTo(bigDecimal4) == 0) == bigDecimal1.equals(bigDecimal4));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test475");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal16.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl14.preMultiply(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl38.transpose();
        int int40 = bigMatrixImpl38.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl38.getDataRef();
        bigMatrixImpl38.setScale((int) (short) 100);
        boolean boolean44 = bigMatrixImpl38.isSingular();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        java.lang.String str47 = bigDecimal46.toString();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        int int51 = bigDecimal49.signum();
        java.math.BigDecimal[] bigDecimalArray52 = bigDecimal46.divideAndRemainder(bigDecimal49);
        java.math.BigDecimal bigDecimal54 = bigDecimal46.pow((int) 'a');
        java.math.BigDecimal bigDecimal56 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal57 = bigDecimal56.stripTrailingZeros();
        float float58 = bigDecimal56.floatValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.divideToIntegralValue(bigDecimal56);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl38.scalarMultiply(bigDecimal56);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl38.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray61);
        boolean boolean63 = bigMatrix62.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl23.preMultiply(bigMatrix62);
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf(0L, (int) ' ');
        int int68 = bigDecimal67.scale();
        int int69 = bigDecimal67.intValueExact();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf(0L, (int) (short) 1);
        java.math.BigDecimal bigDecimal73 = bigDecimal67.add(bigDecimal72);
        boolean boolean74 = bigMatrixImpl23.equals((java.lang.Object) bigDecimal73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal67", (bigDecimal3.compareTo(bigDecimal67) == 0) == bigDecimal3.equals(bigDecimal67));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test476");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal12 = bigMatrixImpl11.getTrace();
        java.math.BigDecimal bigDecimal13 = bigMatrixImpl11.getTrace();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.min(bigDecimal18);
        int int21 = bigDecimal18.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl11.scalarMultiply(bigDecimal18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal12 and bigDecimal15", (bigDecimal12.compareTo(bigDecimal15) == 0) == bigDecimal12.equals(bigDecimal15));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test477");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.transpose();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((double) 0L);
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrix15.scalarAdd(bigDecimal17);
        java.math.BigInteger bigInteger19 = bigDecimal17.unscaledValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(bigInteger19, (int) (short) 10);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(bigInteger19, (int) (short) -100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal17 and bigDecimal21", (bigDecimal17.compareTo(bigDecimal21) == 0) == bigDecimal17.equals(bigDecimal21));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test478");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) 'a', (int) (short) 10);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        int int4 = bigMatrixImpl2.getScale();
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        double[][] doubleArray5 = bigMatrixImpl2.getDataAsDoubleArray();
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test479");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int4 = bigMatrixImpl3.getColumnDimension();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 97, 97);
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = bigMatrixImpl7.getColumnMatrix(4);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl3.preMultiply(bigMatrix9);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test480");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal[][] bigDecimalArray36 = bigMatrixImpl27.getDataRef();
        int int37 = bigMatrixImpl27.getRowDimension();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal39.divideAndRemainder(bigDecimal41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray42);
        double[] doubleArray45 = bigMatrixImpl43.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl43.copy();
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[] doubleArray52 = new double[] { 1.0d, 100.0f };
        double[] doubleArray55 = new double[] { 1.0d, 100.0f };
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray59 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58 };
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl61.transpose();
        int int63 = bigMatrixImpl61.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray64 = bigMatrixImpl61.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl43.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl61);
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        java.lang.String str70 = bigDecimal69.toString();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        int int74 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal69.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal77 = bigDecimal69.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray78 = new java.math.BigDecimal[] { bigDecimal67, bigDecimal69 };
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray78);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray78);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray78);
        java.math.BigDecimal[] bigDecimalArray82 = bigMatrixImpl43.preMultiply(bigDecimalArray78);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl43.copy();
        java.math.BigDecimal bigDecimal85 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger86 = bigDecimal85.unscaledValue();
        short short87 = bigDecimal85.shortValueExact();
        java.math.BigInteger bigInteger88 = bigDecimal85.toBigInteger();
        java.math.BigDecimal bigDecimal90 = new java.math.BigDecimal(bigInteger88, (int) (byte) 1);
        java.math.BigDecimal bigDecimal92 = new java.math.BigDecimal(bigInteger88, (int) (byte) 110);
        org.apache.commons.math.linear.BigMatrix bigMatrix93 = bigMatrixImpl43.scalarAdd(bigDecimal92);
        java.math.BigDecimal bigDecimal95 = bigDecimal92.scaleByPowerOfTen((-100));
        org.apache.commons.math.linear.BigMatrix bigMatrix96 = bigMatrixImpl27.scalarAdd(bigDecimal95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal34 and bigDecimal90", (bigDecimal34.compareTo(bigDecimal90) == 0) == bigDecimal34.equals(bigDecimal90));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test481");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl37.getNorm();
        java.math.BigDecimal bigDecimal64 = bigDecimal62.scaleByPowerOfTen((int) '4');
        java.math.BigInteger bigInteger65 = bigDecimal62.toBigIntegerExact();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal64", (bigDecimal1.compareTo(bigDecimal64) == 0) == bigDecimal1.equals(bigDecimal64));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test482");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 97);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigInteger bigInteger22 = bigDecimal13.toBigIntegerExact();
        java.math.BigDecimal bigDecimal23 = bigDecimal11.add(bigDecimal13);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray37 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigInteger bigInteger49 = bigDecimal43.toBigInteger();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(bigInteger49);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrix41.scalarAdd(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal23, bigDecimal50 };
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray52);
        java.math.BigDecimal bigDecimal56 = bigMatrix55.getNorm();
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrix55.getData();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = bigDecimal59.setScale(0);
        byte byte63 = bigDecimal62.byteValueExact();
        int int64 = bigDecimal62.precision();
        int int65 = bigDecimal62.intValueExact();
        short short66 = bigDecimal62.shortValueExact();
        java.math.BigInteger bigInteger67 = bigDecimal62.unscaledValue();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(bigInteger67);
        java.math.BigDecimal bigDecimal70 = bigDecimal68.scaleByPowerOfTen((int) (byte) -54);
        java.math.BigDecimal bigDecimal71 = bigDecimal70.stripTrailingZeros();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrix55.scalarAdd(bigDecimal71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal3 and bigDecimal70", (bigDecimal3.compareTo(bigDecimal70) == 0) == bigDecimal3.equals(bigDecimal70));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test483");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl6.getTrace();
        java.math.BigDecimal bigDecimal8 = bigMatrixImpl6.getDeterminant();
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = bigMatrixImpl6.copy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal8", (bigDecimal7.compareTo(bigDecimal8) == 0) == bigDecimal7.equals(bigDecimal8));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test484");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        boolean boolean5 = bigMatrix4.isSquare();
        java.math.BigDecimal[] bigDecimalArray7 = bigMatrix4.getRow(0);
        // during test generation this statement threw an exception of type java.lang.NullPointerException in error
        java.math.BigDecimal[] bigDecimalArray8 = bigMatrixImpl2.operate(bigDecimalArray7);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test485");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        java.lang.String[] strArray11 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl5.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl16);
        java.math.BigDecimal bigDecimal18 = bigMatrixImpl16.getTrace();
        double[] doubleArray23 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray23);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray23);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix25.scalarAdd((double) 6);
        int int28 = realMatrix25.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix25.scalarAdd(10.0d);
        double[] doubleArray35 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray35);
        double double37 = realMatrix36.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix36.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix30.preMultiply(realMatrix39);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix40.scalarAdd((double) 1.0f);
        boolean boolean43 = bigMatrixImpl16.equals((java.lang.Object) realMatrix40);
        java.math.BigDecimal bigDecimal44 = bigMatrixImpl16.getNorm();
        int int45 = bigMatrixImpl16.getRowDimension();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal18 and bigDecimal44", (bigDecimal18.compareTo(bigDecimal44) == 0) == bigDecimal18.equals(bigDecimal44));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test486");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        int int20 = bigMatrixImpl14.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.copy();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal((long) 0);
        java.math.BigDecimal bigDecimal25 = bigDecimal23.pow(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl14.scalarMultiply(bigDecimal25);
        java.math.BigDecimal bigDecimal28 = bigDecimal25.movePointLeft(32);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((double) (short) 10);
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        java.math.BigDecimal bigDecimal47 = bigMatrixImpl45.getNorm();
        int int48 = bigDecimal47.signum();
        java.math.BigDecimal bigDecimal50 = bigDecimal47.movePointLeft((int) (byte) 97);
        java.lang.String str51 = bigDecimal50.toString();
        int int52 = bigDecimal30.compareTo(bigDecimal50);
        java.math.BigDecimal bigDecimal53 = bigDecimal25.remainder(bigDecimal50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal28", (bigDecimal23.compareTo(bigDecimal28) == 0) == bigDecimal23.equals(bigDecimal28));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test487");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal bigDecimal7 = bigDecimal1.plus();
        java.math.BigInteger bigInteger8 = bigDecimal7.toBigIntegerExact();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger12 = bigDecimal11.unscaledValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal9.add(bigDecimal11);
        float float14 = bigDecimal11.floatValue();
        java.lang.String str15 = bigDecimal11.toEngineeringString();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        long long19 = bigDecimal17.longValue();
        long long20 = bigDecimal17.longValueExact();
        int int21 = bigDecimal17.precision();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        long long25 = bigDecimal23.longValue();
        long long26 = bigDecimal23.longValueExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal17.add(bigDecimal23);
        java.math.BigDecimal bigDecimal29 = bigDecimal23.pow(3);
        java.math.BigInteger bigInteger30 = bigDecimal29.toBigIntegerExact();
        java.math.BigDecimal bigDecimal31 = bigDecimal29.stripTrailingZeros();
        java.math.BigDecimal bigDecimal32 = bigDecimal11.add(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl60.getDataRef();
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl60.getNorm();
        boolean boolean63 = bigMatrixImpl60.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl60.copy();
        double[] doubleArray66 = bigMatrixImpl60.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl60.scalarMultiply(bigDecimal67);
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl60.scalarAdd(bigDecimal71);
        java.math.BigDecimal bigDecimal74 = bigDecimal71.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        long long78 = bigDecimal76.longValue();
        java.math.BigDecimal bigDecimal79 = bigDecimal71.min(bigDecimal76);
        java.math.BigDecimal bigDecimal80 = bigDecimal29.multiply(bigDecimal76);
        java.math.BigDecimal bigDecimal82 = bigDecimal29.setScale(5);
        java.math.BigDecimal bigDecimal83 = bigDecimal7.min(bigDecimal82);
        float float84 = bigDecimal7.floatValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal82", (bigDecimal7.compareTo(bigDecimal82) == 0) == bigDecimal7.equals(bigDecimal82));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test488");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.copy();
        java.math.BigDecimal bigDecimal16 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal17 = bigDecimal16.abs();
        java.math.BigDecimal bigDecimal18 = bigDecimal16.stripTrailingZeros();
        java.math.BigDecimal bigDecimal21 = bigDecimal16.setScale((-300), 4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal16 and bigDecimal18", (bigDecimal16.compareTo(bigDecimal18) == 0) == bigDecimal16.equals(bigDecimal18));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test489");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        long long8 = bigDecimal6.longValue();
        long long9 = bigDecimal6.longValueExact();
        short short10 = bigDecimal6.shortValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal6);
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigInteger bigInteger36 = bigDecimal30.toBigInteger();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(bigInteger36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrix28.scalarAdd(bigDecimal37);
        java.math.BigDecimal bigDecimal39 = bigDecimal37.plus();
        java.math.BigDecimal bigDecimal40 = bigDecimal11.min(bigDecimal39);
        int int41 = bigDecimal11.signum();
        java.math.BigDecimal bigDecimal43 = bigDecimal11.setScale(546084);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        java.lang.String str68 = bigDecimal67.toString();
        java.math.BigDecimal bigDecimal70 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal71 = bigDecimal70.stripTrailingZeros();
        int int72 = bigDecimal70.signum();
        java.math.BigDecimal[] bigDecimalArray73 = bigDecimal67.divideAndRemainder(bigDecimal70);
        java.math.BigDecimal bigDecimal75 = bigDecimal67.pow((int) 'a');
        java.math.BigInteger bigInteger76 = bigDecimal67.toBigIntegerExact();
        float float77 = bigDecimal67.floatValue();
        java.math.BigDecimal bigDecimal78 = bigDecimal53.add(bigDecimal67);
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal81 = bigDecimal67.divideToIntegralValue(bigDecimal80);
        java.math.BigDecimal bigDecimal82 = bigDecimal11.subtract(bigDecimal81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal43", (bigDecimal1.compareTo(bigDecimal43) == 0) == bigDecimal1.equals(bigDecimal43));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test490");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl5.getTrace();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        long long10 = bigDecimal8.longValue();
        long long11 = bigDecimal8.longValueExact();
        int int12 = bigDecimal8.precision();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        long long16 = bigDecimal14.longValue();
        long long17 = bigDecimal14.longValueExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal8.add(bigDecimal14);
        byte byte19 = bigDecimal8.byteValueExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal8.movePointLeft((int) (byte) -1);
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((double) 10);
        java.math.BigDecimal bigDecimal24 = bigDecimal8.min(bigDecimal23);
        java.math.BigDecimal bigDecimal25 = bigDecimal6.subtract(bigDecimal24);
        java.math.BigInteger bigInteger26 = bigDecimal24.unscaledValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal6 and bigDecimal24", (bigDecimal6.compareTo(bigDecimal24) == 0) == bigDecimal6.equals(bigDecimal24));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test491");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl31.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl31.copy();
        double[][] doubleArray35 = bigMatrix34.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((double) (short) -100);
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal((int) (byte) 97);
        java.math.BigDecimal bigDecimal43 = bigDecimal41.setScale(5);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal((long) (short) 100);
        java.lang.String str46 = bigDecimal45.toEngineeringString();
        int int47 = bigDecimal43.compareTo(bigDecimal45);
        java.math.BigDecimal bigDecimal48 = bigDecimal39.multiply(bigDecimal43);
        java.math.BigDecimal bigDecimal49 = bigDecimal43.stripTrailingZeros();
        int int50 = bigDecimal43.signum();
        boolean boolean51 = bigMatrixImpl37.equals((java.lang.Object) int50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal41 and bigDecimal43", (bigDecimal41.compareTo(bigDecimal43) == 0) == bigDecimal41.equals(bigDecimal43));
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test492");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal27 = bigDecimal23.setScale(100);
        boolean boolean28 = bigMatrixImpl14.equals((java.lang.Object) bigDecimal23);
        java.math.BigDecimal bigDecimal29 = bigDecimal23.ulp();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        java.lang.String str32 = bigDecimal31.toString();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = bigDecimal34.stripTrailingZeros();
        int int36 = bigDecimal34.signum();
        java.math.BigDecimal[] bigDecimalArray37 = bigDecimal31.divideAndRemainder(bigDecimal34);
        java.math.BigDecimal bigDecimal39 = bigDecimal31.pow((int) 'a');
        java.math.BigInteger bigInteger40 = bigDecimal31.toBigIntegerExact();
        int int41 = bigDecimal31.precision();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl50.getNorm();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        java.lang.String str54 = bigDecimal53.toString();
        java.math.BigDecimal bigDecimal56 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal57 = bigDecimal56.stripTrailingZeros();
        int int58 = bigDecimal56.signum();
        java.math.BigDecimal[] bigDecimalArray59 = bigDecimal53.divideAndRemainder(bigDecimal56);
        java.math.BigDecimal bigDecimal61 = bigDecimal53.pow((int) 'a');
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal64 = bigDecimal63.stripTrailingZeros();
        float float65 = bigDecimal63.floatValue();
        java.math.BigDecimal bigDecimal66 = bigDecimal61.divideToIntegralValue(bigDecimal63);
        boolean boolean67 = bigMatrixImpl50.equals((java.lang.Object) bigDecimal63);
        java.math.BigDecimal[] bigDecimalArray68 = bigDecimal31.divideAndRemainder(bigDecimal63);
        double[] doubleArray73 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix74 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray73);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray73);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray73);
        boolean boolean78 = bigDecimal63.equals((java.lang.Object) bigMatrix77);
        java.math.BigDecimal[] bigDecimalArray79 = bigDecimal23.divideAndRemainder(bigDecimal63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal23 and bigDecimal27", (bigDecimal23.compareTo(bigDecimal27) == 0) == bigDecimal23.equals(bigDecimal27));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test493");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int4 = bigMatrixImpl3.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray5 = bigMatrixImpl3.getData();
        int int6 = bigMatrixImpl3.getRoundingMode();
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl3.getTrace();
        int int8 = bigMatrixImpl3.getColumnDimension();
        java.math.BigDecimal bigDecimal9 = bigMatrixImpl3.getTrace();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal11.divideAndRemainder(bigDecimal13);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray14);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = bigMatrixImpl15.copy();
        boolean boolean17 = bigMatrixImpl15.isSingular();
        int int18 = bigMatrixImpl15.getRowDimension();
        bigMatrixImpl15.setRoundingMode((int) (byte) 10);
        java.math.BigDecimal[][] bigDecimalArray21 = bigMatrixImpl15.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray34);
        double[] doubleArray36 = realMatrix29.operate(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray34);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray34);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix38.transpose();
        double[][] doubleArray40 = realMatrix38.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        boolean boolean42 = bigMatrixImpl41.isSingular();
        int int43 = bigMatrixImpl41.getScale();
        double[][] doubleArray44 = bigMatrixImpl41.getDataAsDoubleArray();
        bigMatrixImpl41.setRoundingMode((-32));
        int int47 = bigMatrixImpl41.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray48 = bigMatrixImpl41.getData();
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl41.getData();
        java.math.BigDecimal[][] bigDecimalArray50 = bigMatrixImpl41.getData();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        java.lang.String str53 = bigDecimal52.toString();
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal56 = bigDecimal55.stripTrailingZeros();
        int int57 = bigDecimal55.signum();
        java.math.BigDecimal[] bigDecimalArray58 = bigDecimal52.divideAndRemainder(bigDecimal55);
        java.math.BigDecimal bigDecimal60 = bigDecimal52.pow((int) 'a');
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        java.lang.String str63 = bigDecimal62.toString();
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal66 = bigDecimal65.stripTrailingZeros();
        int int67 = bigDecimal65.signum();
        java.math.BigDecimal[] bigDecimalArray68 = bigDecimal62.divideAndRemainder(bigDecimal65);
        java.math.BigDecimal bigDecimal70 = bigDecimal62.pow((int) 'a');
        java.math.BigInteger bigInteger71 = bigDecimal62.toBigIntegerExact();
        java.math.BigDecimal bigDecimal72 = bigDecimal60.add(bigDecimal62);
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger76 = bigDecimal75.unscaledValue();
        java.math.BigDecimal bigDecimal77 = bigDecimal73.add(bigDecimal75);
        java.math.BigDecimal bigDecimal78 = bigDecimal62.multiply(bigDecimal73);
        java.math.BigDecimal bigDecimal80 = bigDecimal73.scaleByPowerOfTen(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrixImpl41.scalarAdd(bigDecimal80);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrixImpl23.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl41);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl3.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal7 and bigDecimal52", (bigDecimal7.compareTo(bigDecimal52) == 0) == bigDecimal7.equals(bigDecimal52));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test494");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl27.getData();
        boolean boolean41 = bigMatrixImpl27.isSquare();
        java.lang.String[] strArray43 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray44 = new java.lang.String[][] { strArray43 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(strArray44);
        java.math.BigDecimal bigDecimal53 = bigMatrixImpl52.getNorm();
        java.lang.String str54 = bigMatrixImpl52.toString();
        java.math.BigDecimal bigDecimal55 = bigMatrixImpl52.getTrace();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl27.scalarAdd(bigDecimal55);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl27.getRowMatrix((int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal55", (bigDecimal1.compareTo(bigDecimal55) == 0) == bigDecimal1.equals(bigDecimal55));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test495");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        int int65 = bigMatrixImpl27.getRowDimension();
        bigMatrixImpl27.setRoundingMode(3);
        java.math.BigDecimal bigDecimal70 = java.math.BigDecimal.valueOf(0L, (-32));
        java.math.BigDecimal bigDecimal71 = bigDecimal70.ulp();
        boolean boolean72 = bigMatrixImpl27.equals((java.lang.Object) bigDecimal71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal70", (bigDecimal1.compareTo(bigDecimal70) == 0) == bigDecimal1.equals(bigDecimal70));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test496");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        float float2 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.min(bigDecimal7);
        java.math.BigDecimal[] bigDecimalArray10 = new java.math.BigDecimal[] { bigDecimal9 };
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal[][] bigDecimalArray27 = new java.math.BigDecimal[][] { bigDecimalArray10, bigDecimalArray18, bigDecimalArray26 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray27);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal31.toBigInteger();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(bigInteger37);
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        float float42 = bigDecimal40.floatValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.multiply(bigDecimal40);
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrix29.scalarAdd(bigDecimal43);
        short short45 = bigDecimal43.shortValueExact();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int48 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal50 = bigDecimal1.min(bigDecimal43);
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray63 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl65.transpose();
        double[] doubleArray68 = bigMatrixImpl65.getRowAsDoubleArray((int) (short) 0);
        boolean boolean69 = bigMatrixImpl65.isSingular();
        java.math.BigDecimal[][] bigDecimalArray70 = bigMatrixImpl65.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray70);
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal74 = bigDecimal73.negate();
        int int75 = bigDecimal74.scale();
        boolean boolean76 = bigMatrixImpl71.equals((java.lang.Object) bigDecimal74);
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger79 = bigDecimal78.unscaledValue();
        java.lang.String str80 = bigDecimal78.toPlainString();
        java.math.BigDecimal bigDecimal81 = bigDecimal74.divideToIntegralValue(bigDecimal78);
        java.math.BigDecimal bigDecimal82 = bigDecimal74.ulp();
        java.math.BigDecimal bigDecimal83 = bigDecimal43.min(bigDecimal74);
        java.lang.String str84 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal86 = bigDecimal43.movePointLeft(970);
        int int87 = bigDecimal43.precision();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal4 and bigDecimal86", (bigDecimal4.compareTo(bigDecimal86) == 0) == bigDecimal4.equals(bigDecimal86));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test497");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal28.toBigInteger();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        float float39 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.multiply(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrix26.scalarAdd(bigDecimal40);
        int int42 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.movePointLeft((int) (byte) 100);
        java.math.BigDecimal bigDecimal46 = bigDecimal45.ulp();
        java.math.BigInteger bigInteger47 = bigDecimal45.unscaledValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(bigInteger47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal45", (bigDecimal1.compareTo(bigDecimal45) == 0) == bigDecimal1.equals(bigDecimal45));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test498");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 110, (int) (byte) 100);
        java.math.BigDecimal[][] bigDecimalArray3 = bigMatrixImpl2.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray3);
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on bigMatrixImpl2 and bigMatrixImpl2", bigMatrixImpl2.equals(bigMatrixImpl2) ? bigMatrixImpl2.hashCode() == bigMatrixImpl2.hashCode() : true);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test499");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.transpose();
        java.math.BigDecimal[][] bigDecimalArray36 = bigMatrixImpl27.getData();
        int int37 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 0, (int) (short) -100);
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal43.pow((int) 'a');
        java.math.BigInteger bigInteger52 = bigDecimal43.toBigIntegerExact();
        float float53 = bigDecimal43.floatValue();
        double[] doubleArray58 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix59 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray58);
        double[] doubleArray64 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix65 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray64);
        double[] doubleArray66 = realMatrix59.operate(doubleArray64);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray66);
        java.math.BigDecimal bigDecimal68 = bigMatrix67.getNorm();
        java.math.BigDecimal bigDecimal69 = bigDecimal43.subtract(bigDecimal68);
        int int70 = bigDecimal69.signum();
        java.math.BigInteger bigInteger71 = bigDecimal69.toBigInteger();
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray76 = bigDecimal73.divideAndRemainder(bigDecimal75);
        java.math.BigDecimal bigDecimal78 = bigDecimal75.movePointLeft((-1));
        java.math.BigDecimal bigDecimal79 = bigDecimal69.max(bigDecimal75);
        int int80 = bigDecimal75.precision();
        java.math.BigDecimal bigDecimal81 = bigDecimal40.divide(bigDecimal75);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrixImpl27.scalarAdd(bigDecimal75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal40", (bigDecimal1.compareTo(bigDecimal40) == 0) == bigDecimal1.equals(bigDecimal40));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test500");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.setScale((int) '4');
        java.math.BigDecimal bigDecimal5 = bigDecimal3.movePointRight((-32));
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal7.min(bigDecimal10);
        java.math.BigInteger bigInteger13 = bigDecimal7.toBigInteger();
        java.math.BigInteger bigInteger14 = bigDecimal7.unscaledValue();
        int int15 = bigDecimal7.signum();
        java.math.BigDecimal bigDecimal16 = bigDecimal3.add(bigDecimal7);
        byte byte17 = bigDecimal7.byteValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on bigDecimal1 and bigDecimal3", (bigDecimal1.compareTo(bigDecimal3) == 0) == bigDecimal1.equals(bigDecimal3));
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest38 {

    public static boolean debug = false;

    @Test
    public void test19001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19001");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.LocalDate localDate27 = dateTime20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfEra();
        long long34 = chronology14.set((org.joda.time.ReadablePartial) localDate31, (long) 11);
        org.joda.time.LocalDate.Property property35 = localDate31.era();
        java.lang.String str37 = localDate31.toString("1970-01-01");
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.plus(readableDuration42);
        org.joda.time.DateTime dateTime45 = dateTime40.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime47 = dateTime40.minusMillis(100);
        org.joda.time.DateTime dateTime48 = localDate31.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        java.util.Date date49 = localDate31.toDate();
        int int50 = date49.getHours();
        int int51 = date49.getMonth();
        date49.setMinutes((-19044));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9223372016611199989L) + "'", long34 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Wed Jul 24 08:36:51 GMT+00:00 292272993");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 14 + "'", int50 == 14);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
    }

    @Test
    public void test19002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19002");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        int int22 = localDateTime21.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(11);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minus(readableDuration25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readablePeriod27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusYears(31);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears(54275);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withPeriodAdded(readablePeriod35, (-1950));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test19003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19003");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        int int18 = dateTime2.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime2.withWeekOfWeekyear(23);
        boolean boolean21 = dateTime20.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37920 + "'", int18 == 37920);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test19004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19004");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        long long15 = dateTimeZone2.convertLocalToUTC((long) 23, false);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone2);
        int int18 = dateTimeZone2.getOffsetFromLocal(1645455600728L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-37919977L) + "'", long15 == (-37919977L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37920000 + "'", int18 == 37920000);
    }

    @Test
    public void test19005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19005");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("South Korea");
        timeZone4.setID("South Korea");
        calendar0.setTimeZone(timeZone4);
        calendar0.set((int) (byte) 0, (int) (byte) 100, (int) (short) 10, 2, 2, 292278993);
        calendar0.setLenient(true);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder21 = builder17.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder25 = builder17.setDate(20, (int) 'u', 37920197);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.util.Calendar.Builder builder27 = builder25.setLocale(locale26);
        java.util.Calendar.Builder builder31 = builder27.setWeekDate(52, 5, 11);
        java.util.Calendar.Builder builder35 = builder27.setDate(327735, (int) (byte) 100, 728);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("South Korea");
        int int38 = timeZone37.getRawOffset();
        timeZone37.setRawOffset(10);
        int int41 = timeZone37.getRawOffset();
        java.util.TimeZone.setDefault(timeZone37);
        java.util.TimeZone.setDefault(timeZone37);
        java.time.ZoneId zoneId44 = timeZone37.toZoneId();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone37);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("South Korea");
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        timeZone47.setID("-1");
        timeZone47.setID("Thu");
        boolean boolean53 = timeZone37.hasSameRules(timeZone47);
        timeZone37.setRawOffset(5429188);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone37);
        java.util.Calendar.Builder builder57 = builder35.setTimeZone(timeZone37);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        int int60 = calendar58.getMaximum(11);
        java.lang.Object obj61 = null;
        boolean boolean62 = calendar58.before(obj61);
        java.time.Instant instant63 = calendar58.toInstant();
        calendar58.set(10, 32, 70, 10, (int) (byte) -1);
        java.util.TimeZone timeZone70 = calendar58.getTimeZone();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 0, chronology72);
        int int74 = dateTime73.getSecondOfMinute();
        org.joda.time.DateTime dateTime76 = dateTime73.withYear(10);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) 0, chronology78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime79.toMutableDateTime(chronology80);
        org.joda.time.DateTime dateTime83 = dateTime79.minus((long) '#');
        org.joda.time.DateTime dateTime85 = dateTime79.withDayOfWeek(4);
        boolean boolean87 = dateTime79.equals((java.lang.Object) "eras");
        boolean boolean88 = dateTime73.isEqual((org.joda.time.ReadableInstant) dateTime79);
        java.util.Locale locale90 = java.util.Locale.forLanguageTag("");
        java.lang.String str91 = locale90.getScript();
        java.util.Calendar calendar92 = dateTime79.toCalendar(locale90);
        java.util.TimeZone timeZone93 = calendar92.getTimeZone();
        java.lang.String str94 = timeZone93.getID();
        java.util.TimeZone.setDefault(timeZone93);
        boolean boolean96 = timeZone70.hasSameRules(timeZone93);
        java.util.Calendar.Builder builder97 = builder35.setTimeZone(timeZone70);
        calendar0.setTimeZone(timeZone70);
        java.time.ZoneId zoneId99 = timeZone70.toZoneId();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=5429188,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=100,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=10,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=2,MINUTE=2,SECOND=292278993,MILLISECOND=209,ZONE_OFFSET=696,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645456035513,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=5429188,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=15,MILLISECOND=523,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645456035513,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=5429188,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=37,SECOND=44,MILLISECOND=701,ZONE_OFFSET=5429188,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=5429188,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=32,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=70,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=10,MINUTE=-1,SECOND=44,MILLISECOND=701,ZONE_OFFSET=5429188,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 23 + "'", int60 == 23);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone93);
        org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "GMT+10:32" + "'", str94, "GMT+10:32");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(zoneId99);
    }

    @Test
    public void test19006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19006");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekyearOfCentury();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(obj0, chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.minuteOfHour();
        org.joda.time.DurationField durationField22 = chronology15.months();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.dayOfYear();
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Calendar.Builder builder26 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder30 = builder26.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder34 = builder26.setDate(20, (int) 'u', 37920197);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.util.Calendar.Builder builder36 = builder34.setLocale(locale35);
        java.util.Calendar.Builder builder37 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder41 = builder37.setWeekDate(16, (-292275054), 8);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("South Korea");
        int int44 = timeZone43.getRawOffset();
        timeZone43.setRawOffset(10);
        java.lang.String str47 = timeZone43.getID();
        java.util.Calendar.Builder builder48 = builder41.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder49 = builder34.setTimeZone(timeZone43);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.yearOfCentury();
        org.joda.time.DateTime dateTime55 = property53.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime59 = dateTime55.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfMonth(2);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.util.Calendar calendar63 = dateTime59.toCalendar(locale62);
        java.util.TimeZone timeZone64 = calendar63.getTimeZone();
        java.util.Calendar.Builder builder65 = builder49.setTimeZone(timeZone64);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) 37920000, dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localTime69.toDateTimeToday();
        int int71 = localTime69.getHourOfDay();
        org.joda.time.DateTime dateTime72 = localTime69.toDateTimeToday();
        int[] intArray73 = localTime69.getValues();
        java.util.Calendar.Builder builder74 = builder49.setFields(intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray76 = dateTimeField23.add(readablePartial24, 5870902, intArray73, 692);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GMT" + "'", str47, "GMT");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 32, 0, 100]");
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test19007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19007");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.plus(readablePeriod14);
        org.joda.time.LocalDate localDate17 = localDate15.plusMonths(13670);
        org.joda.time.LocalDate localDate19 = localDate15.plusYears(5546650);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDate19.getValue((-632));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -632");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test19008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19008");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.DateTime dateTime11 = dateTime8.minus(0L);
        org.joda.time.LocalTime localTime12 = dateTime8.toLocalTime();
        org.joda.time.LocalTime localTime14 = localTime12.plusMinutes(15);
        int int15 = localTime12.getHourOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test19009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19009");
        java.util.Date date1 = new java.util.Date((long) 44940);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromDateFields(date1);
        java.lang.String str4 = localDateTime2.toString("-292275054");
        int int5 = localDateTime2.getDayOfWeek();
        int int6 = localDateTime2.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMonthOfYear(97);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 10:32:44 GMT+10:32 1970");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-292275054" + "'", str4, "-292275054");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
    }

    @Test
    public void test19010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19010");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfCentury();
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) dateTime2);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property14 = localTime13.secondOfMinute();
        int int15 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime localTime17 = localTime13.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        org.joda.time.LocalTime localTime20 = property18.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime21 = property18.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime24.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime24.minus(readablePeriod32);
        long long34 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalTime localTime35 = property18.withMaximumValue();
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay(632L, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType7.getField(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime6.toDateTime(chronology36);
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = null;
        org.joda.time.format.DateTimeParser dateTimeParser41 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter40, dateTimeParser41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.plus(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int51 = dateTime49.get(dateTimeFieldType50);
        org.joda.time.DateTime dateTime52 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime56 = dateTime49.toDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType43.getField(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.halfdayOfDay();
        org.joda.time.DurationField durationField61 = chronology57.hours();
        org.joda.time.DurationField durationField62 = chronology57.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter42.withChronology(chronology57);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter42.withChronology(chronology64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter42.withPivotYear((java.lang.Integer) 889);
        java.util.Locale locale68 = dateTimeFormatter42.getLocale();
        boolean boolean69 = dateTimeFormatter42.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateTime39.toString(dateTimeFormatter42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 632L + "'", long34 == 632L);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 37920000 + "'", int51 == 37920000);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNull(locale68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test19011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19011");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfHour();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.plus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime10.withWeekOfWeekyear((int) (short) 10);
        long long16 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property17 = dateTime10.millisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime10.minusHours(5562183);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test19012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19012");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long4 = dateTimeField2.remainder(4325919069L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test19013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19013");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.setCopy(31);
        org.joda.time.LocalTime localTime6 = property2.addWrapFieldToCopy(37920000);
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds(11);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        int[] intArray10 = localTime6.getValues();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.plus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime16.withWeekOfWeekyear((int) (short) 10);
        int int22 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        long long26 = dateTimeZone13.convertLocalToUTC((long) 23, false);
        java.util.TimeZone timeZone27 = dateTimeZone13.toTimeZone();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = localTime6.isEqual((org.joda.time.ReadablePartial) localDateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, 32, 0, 97]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37920000 + "'", int22 == 37920000);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-37919977L) + "'", long26 == (-37919977L));
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test19014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19014");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withDefaultYear((-632));
        java.lang.Integer int10 = dateTimeFormatter9.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withDefaultYear(332);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(951);
        java.lang.Integer int15 = dateTimeFormatter12.getPivotYear();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test19015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19015");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str6 = nameProvider0.getName(locale2, "+00:00:00.100", "53");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime16 = dateTime12.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfMonth(2);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Calendar calendar20 = dateTime16.toCalendar(locale19);
        java.lang.String str23 = nameProvider0.getShortName(locale19, "DateTimeField[hourOfDay]", "DateTimeField[millisOfDay]");
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str28 = nameProvider0.getShortName(locale24, "2022-02-21T01:05:05.325", "70");
        java.util.Set<java.lang.Character> charSet29 = locale24.getExtensionKeys();
        java.lang.String str30 = locale24.getDisplayCountry();
        java.lang.String str31 = locale24.getScript();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfCentury();
        int int36 = dateTime34.getMillisOfSecond();
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears(6);
        boolean boolean39 = dateTime38.isAfterNow();
        org.joda.time.DateTime dateTime40 = dateTime38.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime40.withWeekyear(49);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfCentury();
        org.joda.time.DateTime dateTime44 = property43.roundFloorCopy();
        org.joda.time.DateTime dateTime45 = property43.roundHalfEvenCopy();
        org.joda.time.tz.NameProvider nameProvider46 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str52 = nameProvider46.getName(locale48, "+00:00:00.100", "53");
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str56 = nameProvider46.getName(locale53, "53", "1 janv. 1970 00:00:00");
        java.util.Locale locale60 = new java.util.Locale("", "South Korea", "1970-01-01");
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(dateTimeZone61);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime65 = localTime62.withFields((org.joda.time.ReadablePartial) localTime64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime(dateTimeZone66);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime70 = localTime67.withFields((org.joda.time.ReadablePartial) localTime69);
        int int71 = localTime64.compareTo((org.joda.time.ReadablePartial) localTime67);
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.lang.String str74 = localTime64.toString("1", locale73);
        java.lang.String str75 = locale60.getDisplayScript(locale73);
        java.lang.String str76 = locale60.getDisplayCountry();
        java.lang.String str79 = nameProvider46.getShortName(locale60, "zh_CN", "32");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider46);
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("10");
        java.lang.String str85 = nameProvider46.getName(locale82, "2022-02-21t01:05:23.500", "Property[dayOfYear]");
        int int86 = property43.getMaximumShortTextLength(locale82);
        boolean boolean87 = locale82.hasExtensions();
        java.lang.String str88 = locale24.getDisplayVariant(locale82);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(nameProvider46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals(locale60.toString(), "_SOUTH KOREA_1970-01-01");
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1" + "'", str74, "1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "SOUTH KOREA" + "'", str76, "SOUTH KOREA");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test19016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19016");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.DateTime.Property property9 = dateTime2.weekyear();
        org.joda.time.DateTime dateTime11 = dateTime2.withYear((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(5539852);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone17);
        int int19 = localDate18.getDayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime22.toMutableDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((long) '#');
        org.joda.time.DateTime dateTime28 = dateTime22.withDayOfWeek(4);
        boolean boolean30 = dateTime22.equals((java.lang.Object) "eras");
        int int31 = dateTime22.getWeekyear();
        org.joda.time.DateTime dateTime32 = localDate18.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes((int) 'u');
        int int35 = dateTime34.getWeekyear();
        int int36 = dateTime34.getSecondOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.minusWeeks((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime41.toMutableDateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime41.minus((long) '#');
        org.joda.time.DateTime dateTime47 = dateTime41.withDayOfWeek(4);
        org.joda.time.LocalDate localDate48 = dateTime41.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDate localDate50 = localDate48.plus(readablePeriod49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate53 = localDate48.withFieldAdded(durationFieldType51, 6);
        org.joda.time.DateTime dateTime55 = dateTime38.withFieldAdded(durationFieldType51, 1);
        int int56 = dateTime38.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime38.minus(readableDuration57);
        org.joda.time.DateTime.Property property59 = dateTime38.dayOfWeek();
        boolean boolean60 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getRangeDurationType();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 0, chronology64);
        int int66 = dateTime65.getSecondOfMinute();
        org.joda.time.DateTime dateTime68 = dateTime65.withYear(10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 0, chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime71.toMutableDateTime(chronology72);
        org.joda.time.DateTime dateTime75 = dateTime71.minus((long) '#');
        org.joda.time.DateTime dateTime77 = dateTime71.withDayOfWeek(4);
        boolean boolean79 = dateTime71.equals((java.lang.Object) "eras");
        boolean boolean80 = dateTime65.isEqual((org.joda.time.ReadableInstant) dateTime71);
        int int81 = dateTime65.getSecondOfDay();
        org.joda.time.DateTime dateTime83 = dateTime65.withWeekOfWeekyear(23);
        org.joda.time.Chronology chronology84 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.secondOfMinute();
        org.joda.time.DurationField durationField86 = chronology84.centuries();
        org.joda.time.DateTimeField dateTimeField87 = dateTimeFieldType61.getField(chronology84);
        org.joda.time.DateTime dateTime88 = dateTime38.toDateTime(chronology84);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 44940 + "'", int36 == 44940);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 37920 + "'", int81 == 37920);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test19017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19017");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eras");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        double double8 = languageRange1.getWeight();
        java.lang.String str9 = languageRange1.getRange();
        double double10 = languageRange1.getWeight();
        java.lang.String str11 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eras" + "'", str2, "eras");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eras" + "'", str4, "eras");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eras" + "'", str7, "eras");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eras" + "'", str9, "eras");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eras" + "'", str11, "eras");
    }

    @Test
    public void test19018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19018");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(51, 42);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType3.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.centuryOfEra();
        org.joda.time.DurationField durationField21 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.era();
        long long26 = chronology17.add(56L, (-62197664487806L), (int) (short) -1);
        boolean boolean27 = dateTimeZone2.equals((java.lang.Object) 56L);
        long long29 = dateTimeZone2.convertUTCToLocal(1705847580357L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 62197664487862L + "'", long26 == 62197664487862L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1706033700357L + "'", long29 == 1706033700357L);
    }

    @Test
    public void test19019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19019");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfMonth(2);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Calendar calendar13 = dateTime9.toCalendar(locale12);
        org.joda.time.LocalDateTime localDateTime14 = dateTime9.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra(632);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.centuryOfEra();
        org.joda.time.Chronology chronology21 = localDateTime17.getChronology();
        int int22 = localDateTime17.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withMillisOfDay(37330536);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 40 + "'", int22 == 40);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test19020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19020");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.minuteOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19021");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        int int12 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime10);
        boolean boolean13 = dateTimeField8.isSupported();
        long long16 = dateTimeField8.add((long) 631, 1645455491851L);
        java.util.Locale locale21 = new java.util.Locale("Greenwich Mean Time", "ISOChronology[+10:32]", "en_CA");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property27 = localTime26.secondOfMinute();
        int int28 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localTime26);
        boolean boolean29 = dateTimeField24.isSupported();
        long long32 = dateTimeField24.add((long) 631, 1645455491851L);
        java.util.Locale locale34 = new java.util.Locale("37920001");
        int int35 = dateTimeField24.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale21.getDisplayLanguage(locale34);
        java.lang.String str37 = dateTimeField8.getAsText((int) (short) 10, locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter5.withLocale(locale34);
        org.joda.time.format.DateTimeParser dateTimeParser39 = dateTimeFormatter38.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser40 = dateTimeFormatter38.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter38.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter41.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTimeFormatter42.parseDateTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645455492482L + "'", long16 == 1645455492482L);
        org.junit.Assert.assertEquals(locale21.toString(), "greenwich mean time_ISOCHRONOLOGY[+10:32]_en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645455492482L + "'", long32 == 1645455492482L);
        org.junit.Assert.assertEquals(locale34.toString(), "37920001");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "greenwich mean time" + "'", str36, "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "10" + "'", str37, "10");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(dateTimeParser39);
        org.junit.Assert.assertNull(dateTimeParser40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test19022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19022");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int9 = dateTime6.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime15.withYear(11);
        boolean boolean21 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property22 = dateTime15.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.plus(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.centuryOfEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime43.toMutableDateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime43.minus((long) '#');
        org.joda.time.DateTime dateTime49 = dateTime43.withDayOfWeek(4);
        org.joda.time.LocalDate localDate50 = dateTime43.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDate localDate52 = localDate50.plus(readablePeriod51);
        org.joda.time.LocalDate.Property property53 = localDate52.weekyear();
        org.joda.time.LocalDate localDate54 = property53.withMinimumValue();
        org.joda.time.LocalDate.Property property55 = localDate54.yearOfEra();
        long long57 = chronology37.set((org.joda.time.ReadablePartial) localDate54, (long) 11);
        org.joda.time.DurationField durationField58 = chronology37.months();
        org.joda.time.DateTimeField dateTimeField59 = chronology37.year();
        org.joda.time.DateTimeField dateTimeField60 = chronology37.weekyearOfCentury();
        int int61 = dateTime15.get(dateTimeField60);
        org.joda.time.DateTime dateTime63 = dateTime15.minusDays(5500115);
        org.joda.time.DateTime dateTime65 = dateTime15.plus((-62197664377349L));
        org.joda.time.format.DateTimePrinter dateTimePrinter66 = null;
        org.joda.time.format.DateTimeParser dateTimeParser67 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter66, dateTimeParser67);
        org.joda.time.Chronology chronology69 = dateTimeFormatter68.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter70 = dateTimeFormatter68.getPrinter();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 0, chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime74.toMutableDateTime(chronology75);
        org.joda.time.DateTime dateTime78 = dateTime74.minus((long) '#');
        org.joda.time.DateTime dateTime80 = dateTime74.withDayOfWeek(4);
        org.joda.time.Chronology chronology81 = dateTime74.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType71.getField(chronology81);
        org.joda.time.DateTimeField dateTimeField83 = chronology81.millisOfDay();
        org.joda.time.DurationField durationField84 = chronology81.centuries();
        org.joda.time.DateTimeField dateTimeField85 = chronology81.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter68.withChronology(chronology81);
        org.joda.time.DateTime dateTime87 = dateTime15.toDateTime(chronology81);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37920000 + "'", int17 == 37920000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 37920000 + "'", int31 == 37920000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-9223372016611199989L) + "'", long57 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 70 + "'", int61 == 70);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNull(chronology69);
        org.junit.Assert.assertNull(dateTimePrinter70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test19023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19023");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 14, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.plus(readableDuration25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType20.getField(chronology34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withField(dateTimeFieldType37, 5);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusHours(23);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withWeekyear(632);
        int int49 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        int int50 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime46.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime52 = property51.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minus(readableDuration53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minus(readablePeriod55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = localDateTime56.withTime(5443066, 86399999, 173, 50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5443066 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 37920000 + "'", int28 == 37920000);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test19024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19024");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone1);
        long long7 = dateTimeZone1.convertLocalToUTC(1645455534081L, false, (long) 50);
        long long9 = dateTimeZone1.nextTransition(40L);
        int int11 = dateTimeZone1.getOffsetFromLocal((-27424259L));
        int int13 = dateTimeZone1.getOffsetFromLocal(77L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645455534081L + "'", long7 == 1645455534081L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 40L + "'", long9 == 40L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test19025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        java.util.Date date16 = new java.util.Date((long) (byte) -1);
        date16.setTime((long) ' ');
        date16.setYear((int) 'u');
        int int21 = date16.getMonth();
        boolean boolean22 = localDate13.equals((java.lang.Object) int21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.plus(readableDuration32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int35 = dateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDate27.equals((java.lang.Object) dateTime33);
        int int37 = localDate27.getWeekyear();
        boolean boolean38 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate40 = localDate27.withYear((int) ' ');
        org.joda.time.LocalDate localDate42 = localDate27.plusWeeks(5436181);
        org.joda.time.LocalDate localDate44 = localDate27.plusDays((int) (short) 100);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfYear();
        org.joda.time.LocalDate localDate46 = property45.roundFloorCopy();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        int int49 = calendar47.getMaximum(11);
        java.lang.Object obj50 = null;
        boolean boolean51 = calendar47.before(obj50);
        java.time.Instant instant52 = calendar47.toInstant();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.fromCalendarFields(calendar47);
        org.joda.time.LocalTime localTime55 = localTime53.plusMillis(37920000);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalTime localTime57 = localTime53.minus(readablePeriod56);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) 37920000, dateTimeZone60);
        org.joda.time.DateTime dateTime62 = localTime61.toDateTimeToday();
        int int63 = localTime61.getHourOfDay();
        org.joda.time.DateTime dateTime64 = localTime61.toDateTimeToday();
        org.joda.time.DateTime dateTime66 = dateTime64.withDayOfYear(17);
        org.joda.time.DateTime dateTime68 = dateTime66.plus((long) 37920);
        org.joda.time.DateTime dateTime70 = dateTime68.plus(1645455539820L);
        org.joda.time.DateTime.Property property71 = dateTime68.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int73 = dateTime68.get(dateTimeFieldType72);
        int int74 = localTime53.get(dateTimeFieldType72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate76 = localDate46.withField(dateTimeFieldType72, 669);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 01 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37920000 + "'", int35 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645456035905,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=15,MILLISECOND=905,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 23 + "'", int49 == 23);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 632 + "'", int73 == 632);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 99 + "'", int74 == 99);
    }

    @Test
    public void test19026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19026");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime6.withDurationAdded(readableDuration8, (int) (short) 10);
        org.joda.time.DateTime.Property property11 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        java.lang.String str13 = property11.getAsString();
        java.lang.String str14 = property11.getAsText();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970" + "'", str14, "1970");
    }

    @Test
    public void test19027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19027");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) 100);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, 37920);
        org.joda.time.DateTime dateTime21 = dateTime13.withDurationAdded(1645455492482L, 0);
        org.joda.time.DateTime dateTime23 = dateTime13.withMillis(0L);
        org.joda.time.DateTime.Property property24 = dateTime23.monthOfYear();
        org.joda.time.DateTime dateTime25 = property24.roundFloorCopy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime28.minus((long) '#');
        org.joda.time.DateTime dateTime34 = dateTime28.withDayOfWeek(4);
        int int35 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime dateTime37 = dateTime34.plusMinutes((int) 'u');
        org.joda.time.DateTime dateTime39 = dateTime37.plusWeeks(4);
        java.lang.Object obj40 = null;
        boolean boolean41 = dateTime37.equals(obj40);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property44 = localTime43.secondOfMinute();
        org.joda.time.LocalTime localTime46 = property44.setCopy(31);
        org.joda.time.LocalTime localTime48 = property44.addWrapFieldToCopy(37920000);
        org.joda.time.LocalTime localTime50 = property44.addWrapFieldToCopy(1969);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalTime localTime52 = localTime50.minus(readablePeriod51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean54 = localTime52.isSupported(dateTimeFieldType53);
        boolean boolean55 = dateTime37.isSupported(dateTimeFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime25.withField(dateTimeFieldType53, 3869259);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3869259 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test19028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19028");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) 100);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, 37920);
        org.joda.time.DateTime dateTime21 = dateTime18.withDurationAdded((-9223372016611199989L), (-1));
        boolean boolean22 = dateTime21.isAfterNow();
        org.joda.time.LocalDateTime localDateTime23 = dateTime21.toLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test19029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19029");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DurationField durationField18 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.plus(readableDuration25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType20.getField(chronology34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int40 = dateTimeZone38.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime41 = localDateTime36.toDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime.Property property42 = localDateTime36.millisOfSecond();
        int int43 = localDateTime36.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property44 = localDateTime36.year();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy((long) 2022);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays(37214189);
        int int49 = dateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) localDateTime46);
        int int50 = localDateTime46.getYear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.plusSeconds(5901180);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 37920000 + "'", int28 == 37920000);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 15 + "'", int43 == 15);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 99 + "'", int49 == 99);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4044 + "'", int50 == 4044);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test19030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19030");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("37979097");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime5.minus((long) '#');
        org.joda.time.DateTime dateTime11 = dateTime5.withDayOfWeek(4);
        boolean boolean12 = instant1.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test19031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19031");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfCentury();
        org.joda.time.TimeOfDay timeOfDay5 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((java.lang.Object) dateTime2);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property14 = localTime13.secondOfMinute();
        int int15 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime localTime17 = localTime13.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        org.joda.time.LocalTime localTime20 = property18.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime21 = property18.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime24.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime24.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime24.minus(readablePeriod32);
        long long34 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalTime localTime35 = property18.withMaximumValue();
        org.joda.time.Chronology chronology36 = localTime35.getChronology();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay(632L, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType7.getField(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime6.toDateTime(chronology36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime39.toMutableDateTime(dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime39.withHourOfDay(37920056);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37920056 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 632L + "'", long34 == 632L);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test19032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19032");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str2 = locale0.getExtension('a');
        java.lang.String str3 = locale0.getDisplayScript();
        java.util.Locale.setDefault(locale0);
        boolean boolean5 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test19033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19033");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        boolean boolean5 = dateTimeFormatter2.isParser();
        int int6 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(5481456);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter8.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter8.getPrinter();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(dateTimePrinter10);
    }

    @Test
    public void test19034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19034");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        int int20 = localDateTime16.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.minusYears(6);
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        int int25 = localDateTime24.getCenturyOfEra();
        java.lang.String str26 = localDateTime24.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusHours(19);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusDays(631);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5956033 + "'", int20 == 5956033);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T01:39:16.033" + "'", str26, "2022-02-21T01:39:16.033");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test19035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19035");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        int int18 = dateTime2.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long23 = dateTimeZone20.adjustOffset((long) 9, true);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2, dateTimeZone20);
        int int25 = localDateTime24.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusHours(43);
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.secondOfMinute();
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.yearOfCentury();
        org.joda.time.Chronology chronology31 = localDateTime24.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = localDateTime24.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37920 + "'", int18 == 37920);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9L + "'", long23 == 9L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test19036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19036");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.String str8 = locale7.getScript();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Set<java.lang.String> strSet10 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet10);
        strSet10.clear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime15.toMutableDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime15.minus((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime15.withDayOfWeek(4);
        org.joda.time.LocalDate localDate22 = dateTime15.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.plus(readablePeriod23);
        org.joda.time.LocalDate.Property property25 = localDate24.weekyear();
        org.joda.time.LocalDate localDate26 = property25.withMinimumValue();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfEra();
        org.joda.time.LocalDate localDate29 = property27.setCopy((int) (short) 10);
        boolean boolean30 = strSet10.remove((java.lang.Object) localDate29);
        int int31 = localDate29.size();
        org.joda.time.LocalDate.Property property32 = localDate29.weekOfWeekyear();
        org.joda.time.LocalDate.Property property33 = localDate29.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long39 = dateTimeZone36.adjustOffset((long) 9, true);
        java.lang.String str40 = dateTimeZone36.getID();
        java.lang.String str42 = dateTimeZone36.getNameKey(1645455495846L);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(1645455520950L, dateTimeZone36);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology45);
        int int47 = dateTime46.getSecondOfMinute();
        org.joda.time.DateTime dateTime49 = dateTime46.withYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType50.getField(chronology51);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property55 = localTime54.secondOfMinute();
        int int56 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localTime54);
        org.joda.time.LocalTime localTime58 = localTime54.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property59 = localTime58.minuteOfHour();
        org.joda.time.DateTime dateTime60 = dateTime49.withFields((org.joda.time.ReadablePartial) localTime58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getRangeDurationType();
        int int63 = localTime58.get(dateTimeFieldType61);
        int int64 = localTime43.get(dateTimeFieldType61);
        java.lang.String str65 = dateTimeFieldType61.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property66 = localDate29.property(dateTimeFieldType61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.100" + "'", str40, "+00:00:00.100");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 632 + "'", int63 == 632);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 898 + "'", int64 == 898);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "minuteOfDay" + "'", str65, "minuteOfDay");
    }

    @Test
    public void test19037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19037");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology14.hours();
        org.joda.time.DurationField durationField19 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone23);
        org.joda.time.LocalDate.Property property25 = localDate24.weekOfWeekyear();
        org.joda.time.LocalDate localDate26 = property25.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.plus(readableDuration31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int34 = dateTime32.get(dateTimeFieldType33);
        boolean boolean35 = localDate26.equals((java.lang.Object) dateTime32);
        int int36 = localDate26.getWeekyear();
        org.joda.time.Chronology chronology37 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        long long41 = dateTimeZone38.adjustOffset(946646880000L, false);
        org.joda.time.Chronology chronology42 = chronology14.withZone(dateTimeZone38);
        java.lang.String str43 = dateTimeZone38.getID();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 37920000 + "'", int34 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 946646880000L + "'", long41 == 946646880000L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
    }

    @Test
    public void test19038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19038");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        long long15 = dateTimeZone2.convertLocalToUTC((long) 23, false);
        java.util.TimeZone timeZone16 = dateTimeZone2.toTimeZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone16);
        timeZone16.setRawOffset(15);
        int int20 = timeZone16.getRawOffset();
        int int21 = timeZone16.getRawOffset();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-37919977L) + "'", long15 == (-37919977L));
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645456036134,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=15,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=16,MILLISECOND=134,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
    }

    @Test
    public void test19039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19039");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        int int12 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime10);
        boolean boolean13 = dateTimeField8.isSupported();
        long long16 = dateTimeField8.add((long) 631, 1645455491851L);
        java.util.Locale locale21 = new java.util.Locale("Greenwich Mean Time", "ISOChronology[+10:32]", "en_CA");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property27 = localTime26.secondOfMinute();
        int int28 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localTime26);
        boolean boolean29 = dateTimeField24.isSupported();
        long long32 = dateTimeField24.add((long) 631, 1645455491851L);
        java.util.Locale locale34 = new java.util.Locale("37920001");
        int int35 = dateTimeField24.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale21.getDisplayLanguage(locale34);
        java.lang.String str37 = dateTimeField8.getAsText((int) (short) 10, locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter5.withLocale(locale34);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeFormatter5.getZone();
        boolean boolean40 = dateTimeFormatter5.isOffsetParsed();
        int int41 = dateTimeFormatter5.getDefaultYear();
        java.io.Writer writer42 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.plus(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int51 = dateTime49.get(dateTimeFieldType50);
        org.joda.time.DateTime dateTime52 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime56 = dateTime49.toDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType43.getField(chronology57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withField(dateTimeFieldType60, 5);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusHours(23);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundHalfCeilingCopy();
        boolean boolean67 = property65.isLeap();
        org.joda.time.LocalDateTime localDateTime69 = property65.addWrapFieldToCopy(25);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minus(readablePeriod70);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer42, (org.joda.time.ReadablePartial) localDateTime71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645455492482L + "'", long16 == 1645455492482L);
        org.junit.Assert.assertEquals(locale21.toString(), "greenwich mean time_ISOCHRONOLOGY[+10:32]_en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645455492482L + "'", long32 == 1645455492482L);
        org.junit.Assert.assertEquals(locale34.toString(), "37920001");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "greenwich mean time" + "'", str36, "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "10" + "'", str37, "10");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2000 + "'", int41 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 37920000 + "'", int51 == 37920000);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test19040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19040");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        java.lang.Object obj3 = null;
        boolean boolean4 = calendar0.before(obj3);
        java.time.Instant instant5 = calendar0.toInstant();
        calendar0.set(10, 32, 70, 10, (int) (byte) -1);
        java.util.TimeZone timeZone12 = calendar0.getTimeZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        int int16 = dateTime15.getSecondOfMinute();
        org.joda.time.DateTime dateTime18 = dateTime15.withYear(10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime21.withDayOfWeek(4);
        boolean boolean29 = dateTime21.equals((java.lang.Object) "eras");
        boolean boolean30 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("");
        java.lang.String str33 = locale32.getScript();
        java.util.Calendar calendar34 = dateTime21.toCalendar(locale32);
        java.util.TimeZone timeZone35 = calendar34.getTimeZone();
        java.lang.String str36 = timeZone35.getID();
        java.util.TimeZone.setDefault(timeZone35);
        boolean boolean38 = timeZone12.hasSameRules(timeZone35);
        timeZone35.setID("2022-2-21 15:07:12");
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=32,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=70,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=10,MINUTE=-1,SECOND=16,MILLISECOND=179,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-2-21 15:07:12\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GMT+10:32" + "'", str36, "GMT+10:32");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test19041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19041");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone4);
        org.joda.time.LocalDate.Property property6 = localDate5.weekOfWeekyear();
        int[] intArray10 = new int[] { 7, 100, (short) 10 };
        int int11 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate5, intArray10);
        org.joda.time.LocalDate.Property property12 = localDate5.dayOfMonth();
        org.joda.time.LocalDate localDate14 = property12.addToCopy(46);
        java.lang.String str15 = property12.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[7, 100, 10]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
    }

    @Test
    public void test19042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19042");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.plus(readableDuration31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int34 = dateTime32.get(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType26.getField(chronology40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withField(dateTimeFieldType43, 5);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusHours(23);
        int int48 = localDateTime47.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withYearOfEra(11);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.minus(readableDuration51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plus(readablePeriod53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusYears(31);
        java.lang.String str57 = localDateTime54.toString();
        java.util.Date date58 = localDateTime54.toDate();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.minusYears(69);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime54.minusSeconds((-632));
        boolean boolean63 = localDateTime21.isAfter((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime54.minusMillis(28);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime54.withDayOfYear(155);
        int int68 = localDateTime67.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 37920000 + "'", int34 == 37920000);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-21T01:05:16.210" + "'", str57, "2022-02-21T01:05:16.210");
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Mon Feb 21 01:05:16 GMT+10:32 2022");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
    }

    @Test
    public void test19043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19043");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=-19768725120000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1343,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=195,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test19044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19044");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 1);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        int int21 = dateTime20.getSecondOfMinute();
        org.joda.time.DateTime dateTime23 = dateTime20.withYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property29 = localTime28.secondOfMinute();
        int int30 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.LocalTime localTime32 = localTime28.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property33 = localTime32.minuteOfHour();
        org.joda.time.DateTime dateTime34 = dateTime23.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        int int37 = localTime32.get(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.DateTime dateTime40 = dateTime15.withFieldAdded(durationFieldType38, (int) (short) 100);
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfDay();
        java.util.GregorianCalendar gregorianCalendar42 = dateTime40.toGregorianCalendar();
        java.util.Date date43 = gregorianCalendar42.getTime();
        java.lang.String str44 = gregorianCalendar42.getCalendarType();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 632 + "'", int37 == 632);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(gregorianCalendar42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jun 13 10:31:59 GMT+10:32 1901");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "gregory" + "'", str44, "gregory");
    }

    @Test
    public void test19045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19045");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(18);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        int int3 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusSeconds(1980);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = localDateTime2.toString("37920000-02-21T01:05:10.363");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test19046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19046");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone4);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone4);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("");
        java.lang.String str12 = locale9.getDisplayLanguage(locale11);
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale9.getDisplayVariant(locale14);
        java.lang.String str17 = dateTimeZone4.getShortName((long) '#', locale14);
        java.lang.String str18 = locale14.getCountry();
        java.util.Locale.setDefault(category0, locale14);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.plus(readableDuration27);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekOfWeekyear((int) (short) 10);
        int int31 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime30.minus((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readableDuration39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int42 = dateTime40.get(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime47 = dateTime40.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType34.getField(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.weekyear();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.halfdayOfDay();
        org.joda.time.DurationField durationField52 = chronology48.hours();
        org.joda.time.DateTime dateTime53 = dateTime30.toDateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField54 = chronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.hourOfDay();
        java.util.Locale locale59 = new java.util.Locale("9", "en-CA");
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = dateTimeField55.getAsText(37273589, locale59);
        java.util.Locale.setDefault(category0, locale59);
        java.util.Locale locale66 = new java.util.Locale("Greenwich Mean Time", "ISOChronology[+10:32]", "en_CA");
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType67.getField(chronology68);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property72 = localTime71.secondOfMinute();
        int int73 = dateTimeField69.getMinimumValue((org.joda.time.ReadablePartial) localTime71);
        boolean boolean74 = dateTimeField69.isSupported();
        long long77 = dateTimeField69.add((long) 631, 1645455491851L);
        java.util.Locale locale79 = new java.util.Locale("37920001");
        int int80 = dateTimeField69.getMaximumShortTextLength(locale79);
        java.lang.String str81 = locale66.getDisplayLanguage(locale79);
        java.util.Locale.setDefault(category0, locale79);
        java.util.Locale locale83 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 37920000 + "'", int31 == 37920000);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 37920000 + "'", int42 == 37920000);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals(locale59.toString(), "9_EN-CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "37273589" + "'", str61, "37273589");
        org.junit.Assert.assertEquals(locale66.toString(), "greenwich mean time_ISOCHRONOLOGY[+10:32]_en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645455492482L + "'", long77 == 1645455492482L);
        org.junit.Assert.assertEquals(locale79.toString(), "37920001");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "greenwich mean time" + "'", str81, "greenwich mean time");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "37920001");
    }

    @Test
    public void test19047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19047");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        java.lang.Object obj3 = null;
        boolean boolean4 = calendar0.before(obj3);
        java.lang.String str5 = calendar0.getCalendarType();
        calendar0.set(4, 14);
        int int9 = calendar0.getWeekYear();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        java.time.Instant instant11 = calendar0.toInstant();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1651504036307,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-2-21 15:07:12\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=123,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=16,MILLISECOND=307,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gregory" + "'", str5, "gregory");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test19048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19048");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths(37919999);
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtMidnight();
        int int12 = dateTime11.getMinuteOfDay();
        int int13 = dateTime11.getEra();
        int int14 = dateTime11.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3161970 + "'", int14 == 3161970);
    }

    @Test
    public void test19049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate13 = property11.setCopy(7);
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property14.withMinimumValue();
        org.joda.time.LocalDate localDate17 = property14.addToCopy(19);
        org.joda.time.LocalDate localDate18 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone21);
        org.joda.time.LocalDate.Property property23 = localDate22.weekOfWeekyear();
        org.joda.time.LocalDate localDate24 = property23.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.plus(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int32 = dateTime30.get(dateTimeFieldType31);
        boolean boolean33 = localDate24.equals((java.lang.Object) dateTime30);
        int int34 = localDate24.getWeekyear();
        org.joda.time.Chronology chronology35 = localDate24.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType19.getField(chronology35);
        java.lang.String str39 = dateTimeFieldType19.toString();
        int int40 = localDate18.get(dateTimeFieldType19);
        org.joda.time.DateTime dateTime41 = localDate18.toDateTimeAtMidnight();
        int int42 = localDate18.size();
        org.joda.time.Chronology chronology43 = localDate18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate45 = localDate18.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 37920000 + "'", int32 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "yearOfEra" + "'", str39, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2000 + "'", int40 == 2000);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test19050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19050");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalDateTime localDateTime24 = property22.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = property22.addWrapFieldToCopy(37920197);
        org.joda.time.LocalDateTime localDateTime27 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekyear(19);
        int int30 = localDateTime27.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 39 + "'", int30 == 39);
    }

    @Test
    public void test19051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19051");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("South Korea");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1);
        java.util.Date date4 = new java.util.Date();
        long long5 = date4.getTime();
        long long6 = date4.getTime();
        int int7 = date4.getDay();
        int int8 = date4.getMinutes();
        calendar3.setTime(date4);
        calendar3.setMinimalDaysInFirstWeek(5482542);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("South Korea");
        boolean boolean14 = timeZone13.observesDaylightTime();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13);
        java.util.Date date16 = new java.util.Date();
        long long17 = date16.getTime();
        long long18 = date16.getTime();
        int int19 = date16.getDay();
        int int20 = date16.getMinutes();
        calendar15.setTime(date16);
        int int22 = date16.getYear();
        calendar3.setTime(date16);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456036353,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5482542,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=16,MILLISECOND=353,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 01:39:16 GMT+10:32 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645456036353L + "'", long5 == 1645456036353L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645456036353L + "'", long6 == 1645456036353L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 39 + "'", int8 == 39);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645456036353,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=16,MILLISECOND=353,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Feb 22 01:39:16 GMT+10:32 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645456036353L + "'", long17 == 1645456036353L);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645456036353L + "'", long18 == 1645456036353L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 39 + "'", int20 == 39);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 122 + "'", int22 == 122);
    }

    @Test
    public void test19052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19052");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusDays(4);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withMillisOfSecond(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test19053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19053");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        java.lang.String str8 = property6.getAsString();
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        int int12 = dateTimeField9.getDifference((long) 8, 157560524946L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.plus(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime19.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType13.getField(chronology27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withField(dateTimeFieldType30, 5);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusHours(23);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withSecondOfMinute(49);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.plus(readableDuration44);
        org.joda.time.DateTime.Property property46 = dateTime45.hourOfDay();
        org.joda.time.DateTime dateTime47 = localDateTime39.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        int int48 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime39.minusMonths(305282);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime50.withTime(330060, 1672, 115, 9867);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 330060 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-43766) + "'", int12 == (-43766));
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37920000 + "'", int21 == 37920000);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test19054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19054");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(1);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded(readableDuration16, 24);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(dateTimeZone20);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone20);
        long long25 = dateTimeZone20.convertLocalToUTC((-1969L), false);
        java.lang.String str27 = dateTimeZone20.getShortName((long) 5436181);
        org.joda.time.DateTime dateTime28 = dateTime15.withZoneRetainFields(dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusHours(37289415);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime32.withTime(32, 616, 290, 45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1969L) + "'", long25 == (-1969L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test19055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19055");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType6.getField(chronology20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withField(dateTimeFieldType23, 5);
        int int26 = localDateTime25.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusMonths(44940);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekOfWeekyear();
        int int30 = localDateTime28.getDayOfMonth();
        java.lang.String str31 = localDateTime28.toString();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusDays(41);
        org.joda.time.Chronology chronology34 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((-5458174), 5680, 454454, (-43766), 482880, 5513416, chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -43766 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37920000 + "'", int14 == 37920000);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "5767-02-22T00:05:16.396" + "'", str31, "5767-02-22T00:05:16.396");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test19056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19056");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        org.joda.time.DateTime.Property property15 = dateTime8.year();
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime8.minusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(16981594L, dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(5948895, (int) (short) 100, 5540006, 5545465, 5801605, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5545465 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test19057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19057");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes((int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime16.minusSeconds(14);
        org.joda.time.DateTime dateTime22 = dateTime16.withDayOfMonth(2);
        org.joda.time.DateTime dateTime24 = dateTime16.minus((long) 1980);
        org.joda.time.DateTime dateTime26 = dateTime16.minusMonths(53);
        org.joda.time.DateTime dateTime28 = dateTime16.withYear(632);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths(667);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) ' ');
        int int33 = dateTime32.getSecondOfDay();
        boolean boolean34 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 37920 + "'", int33 == 37920);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test19058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19058");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-62197471924358L));
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test19059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19059");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("China");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("21 Feb 2022 14:59:47 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 21 Feb 2022 14:59:47 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test19060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19060");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        int int22 = localDateTime21.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(11);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minus(readableDuration25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readablePeriod27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusYears(31);
        int int31 = localDateTime30.getMonthOfYear();
        int int32 = localDateTime30.getYear();
        int int33 = localDateTime30.getEra();
        java.lang.Object obj34 = null;
        boolean boolean35 = localDateTime30.equals(obj34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = localDateTime30.toString("eng");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: n");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1991 + "'", int32 == 1991);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test19061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        int int4 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime2.plusYears(6);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime9 = dateTime2.withFieldAdded(durationFieldType7, (int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime9.plusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = property12.addWrapFieldToCopy(292269054);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test19062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19062");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale9 = new java.util.Locale("", "South Korea", "1970-01-01");
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime14 = localTime11.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime19 = localTime16.withFields((org.joda.time.ReadablePartial) localTime18);
        int int20 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime16);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = localTime13.toString("1", locale22);
        java.lang.String str24 = locale9.getDisplayScript(locale22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.DateTime dateTime30 = property28.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime34 = dateTime30.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfMonth(2);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Calendar calendar38 = dateTime34.toCalendar(locale37);
        java.lang.String str39 = locale9.getDisplayLanguage(locale37);
        java.lang.String str40 = locale37.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withLocale(locale37);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime44.toMutableDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime44.minus((long) '#');
        org.joda.time.DateTime dateTime50 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTime.Property property51 = dateTime44.year();
        org.joda.time.DateTime.Property property52 = dateTime44.yearOfEra();
        org.joda.time.DateTime dateTime54 = property52.setCopy(5429188);
        org.joda.time.DateTime dateTime57 = dateTime54.withDurationAdded((long) (short) -1, 5427565);
        boolean boolean58 = dateTime57.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime57.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter41.withZone(dateTimeZone59);
        boolean boolean61 = dateTimeFormatter41.isPrinter();
        int int62 = dateTimeFormatter41.getDefaultYear();
        java.util.Locale locale64 = new java.util.Locale("eng");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter41.withLocale(locale64);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals(locale9.toString(), "_SOUTH KOREA_1970-01-01");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fra" + "'", str40, "fra");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2000 + "'", int62 == 2000);
        org.junit.Assert.assertEquals(locale64.toString(), "eng");
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
    }

    @Test
    public void test19063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19063");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfMonth(2);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Calendar calendar13 = dateTime9.toCalendar(locale12);
        org.joda.time.LocalDateTime localDateTime14 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime dateTime16 = dateTime9.withMillisOfDay(1999);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMillis(5614780);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test19064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19064");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.FormatUtils.writeUnpaddedInteger(writer0, (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19065");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        int int17 = localDateTime16.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalDateTime localDateTime21 = property18.setCopy("69");
        int int22 = localDateTime21.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
    }

    @Test
    public void test19066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19066");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate14 = localDate11.withYearOfEra(37919999);
        org.joda.time.LocalDate.Property property15 = localDate14.era();
        int int16 = localDate14.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test19067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19067");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        org.joda.time.LocalDate localDate16 = property14.setCopy((int) (short) 10);
        int int17 = localDate16.getCenturyOfEra();
        org.joda.time.LocalDate localDate19 = localDate16.withWeekyear(4);
        org.joda.time.LocalDate localDate21 = localDate19.plusYears(2068);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test19068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19068");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundHalfEvenCopy();
        int int25 = property22.getMaximumValueOverall();
        int int26 = property22.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property22.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test19069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19069");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(4L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test19070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19070");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-21T01:05:58.044");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t01:05:58.044");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19071");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("ISOChronology[+10:32]");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("10:32:00.097");
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("21 Feb 2022 14:58:48 GMT");
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("10:32:00.032");
        org.joda.time.DateTimeZone dateTimeZone12 = provider0.getZone("");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(dateTimeZone12);
    }

    @Test
    public void test19072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19072");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder8 = builder0.setDate(37920000, (-1), 37920);
        java.util.Calendar.Builder builder10 = builder8.setLenient(true);
        java.util.Calendar.Builder builder12 = builder8.setLenient(false);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder18 = builder12.setWeekDate(5510877, (int) (byte) 10, 1404);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder21 = builder12.set(9867, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test19073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19073");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds(15);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond(31);
        int int24 = localDateTime21.getMonthOfYear();
        int int25 = localDateTime21.getCenturyOfEra();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.parse("10");
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime28.withWeekOfWeekyear(59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test19074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19074");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.setScript("days");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.removeUnicodeLocaleAttribute("5767-02-22T00:05:35.282");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 5767-02-22T00:05:35.282 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test19075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19075");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("53");
        java.lang.String str2 = timeZone1.getID();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
    }

    @Test
    public void test19076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19076");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType1.getField(chronology2);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property6 = localTime5.secondOfMinute();
        int int7 = dateTimeField3.getMinimumValue((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime localTime9 = localTime5.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime13 = property10.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.plus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime16.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime16.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime16.minus(readablePeriod24);
        long long26 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalTime localTime27 = property10.withMaximumValue();
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay(632L, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime31 = localTime29.minus(readablePeriod30);
        int int32 = localTime31.getMillisOfSecond();
        org.joda.time.LocalTime localTime34 = localTime31.plusHours(37310608);
        org.joda.time.LocalTime localTime36 = localTime31.plusHours(454454);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 632L + "'", long26 == 632L);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 632 + "'", int32 == 632);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test19077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19077");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 14, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.plus(readableDuration25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType20.getField(chronology34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withField(dateTimeFieldType37, 5);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusHours(23);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withWeekyear(632);
        int int49 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plusYears(5443066);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks(37969097);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 0, chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.plus(readableDuration59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int62 = dateTime60.get(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType61.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property64 = localDateTime52.property(dateTimeFieldType61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime66 = localDateTime52.withDayOfWeek(1991);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1991 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 37920000 + "'", int28 == 37920000);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 37920000 + "'", int62 == 37920000);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test19078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19078");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalDateTime localDateTime24 = property22.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = property22.addWrapFieldToCopy(37920197);
        org.joda.time.LocalDateTime localDateTime27 = property22.roundHalfCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        java.lang.String str29 = durationFieldType28.getName();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withFieldAdded(durationFieldType28, 30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.minusMinutes(5629295);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime27.withMillisOfSecond(37969097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37969097 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "years" + "'", str29, "years");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test19079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        java.util.Date date16 = new java.util.Date((long) (byte) -1);
        date16.setTime((long) ' ');
        date16.setYear((int) 'u');
        int int21 = date16.getMonth();
        boolean boolean22 = localDate13.equals((java.lang.Object) int21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.plus(readableDuration32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int35 = dateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDate27.equals((java.lang.Object) dateTime33);
        int int37 = localDate27.getWeekyear();
        boolean boolean38 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate localDate40 = localDate27.withYear((int) ' ');
        int int41 = localDate40.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        boolean boolean45 = dateTimeField44.isLenient();
        long long47 = dateTimeField44.roundCeiling((long) 5);
        java.lang.String str49 = dateTimeField44.getAsShortText((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField44.getType();
        boolean boolean51 = localDate40.isSupported(dateTimeFieldType50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone53);
        org.joda.time.LocalDate.Property property55 = localDate54.weekOfWeekyear();
        org.joda.time.LocalDate localDate56 = property55.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 0, chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime59.toMutableDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime59.minus((long) '#');
        org.joda.time.DateTime dateTime65 = dateTime59.withDayOfWeek(4);
        org.joda.time.LocalDate localDate66 = dateTime59.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate68 = localDate66.plus(readablePeriod67);
        org.joda.time.LocalDate.Property property69 = localDate68.weekyear();
        org.joda.time.LocalDate localDate70 = localDate56.withFields((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) 0, chronology75);
        org.joda.time.DateTime.Property property77 = dateTime76.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTime dateTime79 = dateTime76.plus(readableDuration78);
        org.joda.time.DateTime dateTime81 = dateTime76.withWeekOfWeekyear((int) (short) 10);
        int int82 = dateTimeZone73.getOffset((org.joda.time.ReadableInstant) dateTime81);
        long long84 = dateTimeZone73.nextTransition((long) '#');
        org.joda.time.DateTime dateTime85 = localDate70.toDateTimeAtMidnight(dateTimeZone73);
        long long87 = dateTimeZone73.nextTransition((long) 24);
        org.joda.time.DateTime dateTime88 = localDate40.toDateTimeAtStartOfDay(dateTimeZone73);
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate(dateTimeZone73);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 01 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37920000 + "'", int35 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 5L + "'", long47 == 5L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "37920100" + "'", str49, "37920100");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 37920000 + "'", int82 == 37920000);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 35L + "'", long84 == 35L);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 24L + "'", long87 == 24L);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test19080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19080");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.getDifferenceAsLong((long) (short) 10, (long) ' ');
        long long7 = dateTimeField2.roundHalfCeiling((long) '4');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime10.minus((long) '#');
        org.joda.time.DateTime dateTime16 = dateTime10.withDayOfWeek(4);
        org.joda.time.LocalDate localDate17 = dateTime10.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate17.plus(readablePeriod18);
        org.joda.time.LocalDate.Property property20 = localDate19.weekyear();
        org.joda.time.LocalDate localDate21 = property20.roundFloorCopy();
        org.joda.time.LocalDate localDate22 = property20.withMaximumValue();
        int int23 = localDate22.getWeekyear();
        int int24 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        int int25 = localDate22.getWeekOfWeekyear();
        java.lang.String str27 = localDate22.toString("-292275054");
        org.joda.time.DateTime dateTime28 = localDate22.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-22L) + "'", long5 == (-22L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 292278993 + "'", int23 == 292278993);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 86399999 + "'", int24 == 86399999);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-292275054" + "'", str27, "-292275054");
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test19081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime();
        org.joda.time.Instant instant8 = new org.joda.time.Instant((java.lang.Object) dateTime2);
        org.joda.time.Instant instant10 = instant8.plus(1705847601609L);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test19082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19082");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime8);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths((-292275054));
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMillis(332);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks(5708428);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test19083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19083");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalDate localDate6 = localDate2.withWeekOfWeekyear(3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime.Property property11 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMillis(4);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra(22);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime15.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate6.toDateTimeAtStartOfDay(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone18);
        int int22 = localDate21.size();
        int int23 = localDate21.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
    }

    @Test
    public void test19084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.withMonthOfYear(5);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTimeISO();
        int int12 = mutableDateTime11.getSecondOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime15.toMutableDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime15.minus((long) '#');
        org.joda.time.DateTime.Property property20 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime21 = property20.roundHalfCeilingCopy();
        boolean boolean22 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight27 = localDate25.toDateMidnight();
        int int28 = localDate25.getDayOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology30);
        int int32 = dateTime31.getSecondOfMinute();
        org.joda.time.DateTime dateTime34 = dateTime31.withYear(10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime37.toMutableDateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime37.minus((long) '#');
        org.joda.time.DateTime dateTime43 = dateTime37.withDayOfWeek(4);
        boolean boolean45 = dateTime37.equals((java.lang.Object) "eras");
        boolean boolean46 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime37);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("");
        java.lang.String str49 = locale48.getScript();
        java.util.Calendar calendar50 = dateTime37.toCalendar(locale48);
        java.util.TimeZone timeZone51 = calendar50.getTimeZone();
        java.time.ZoneId zoneId52 = timeZone51.toZoneId();
        timeZone51.setRawOffset(14);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        int int57 = dateTimeZone55.getStandardOffset(100L);
        org.joda.time.DateMidnight dateMidnight58 = localDate25.toDateMidnight(dateTimeZone55);
        org.joda.time.DateTime dateTime59 = dateTime21.toDateTime(dateTimeZone55);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920 + "'", int12 == 37920);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=14,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(zoneId52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 37920000 + "'", int57 == 37920000);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test19085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime5.withYear(11);
        org.joda.time.DateTime dateTime12 = dateTime5.minus((long) 5415578);
        org.joda.time.DateTime dateTime14 = dateTime5.withWeekyear(0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology16);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTime dateTime20 = dateTime17.withYear(10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime23.toMutableDateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime23.minus((long) '#');
        org.joda.time.DateTime dateTime29 = dateTime23.withDayOfWeek(4);
        boolean boolean31 = dateTime23.equals((java.lang.Object) "eras");
        boolean boolean32 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime23);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("");
        java.lang.String str35 = locale34.getScript();
        java.util.Calendar calendar36 = dateTime23.toCalendar(locale34);
        java.util.TimeZone timeZone37 = calendar36.getTimeZone();
        java.time.ZoneId zoneId38 = timeZone37.toZoneId();
        timeZone37.setRawOffset(14);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        int int43 = dateTimeZone41.getStandardOffset(100L);
        org.joda.time.DateTime dateTime44 = dateTime5.withZoneRetainFields(dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.plus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int55 = dateTime53.get(dateTimeFieldType54);
        org.joda.time.DateTime dateTime56 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime60 = dateTime53.toDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType47.getField(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.weekyear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.centuryOfEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 0, chronology66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime67.toMutableDateTime(chronology68);
        org.joda.time.DateTime dateTime71 = dateTime67.minus((long) '#');
        org.joda.time.DateTime dateTime73 = dateTime67.withDayOfWeek(4);
        org.joda.time.LocalDate localDate74 = dateTime67.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDate localDate76 = localDate74.plus(readablePeriod75);
        org.joda.time.LocalDate.Property property77 = localDate76.weekyear();
        org.joda.time.LocalDate localDate78 = property77.withMinimumValue();
        org.joda.time.LocalDate.Property property79 = localDate78.yearOfEra();
        long long81 = chronology61.set((org.joda.time.ReadablePartial) localDate78, (long) 11);
        org.joda.time.DurationField durationField82 = chronology61.months();
        org.joda.time.DateTimeField dateTimeField83 = chronology61.year();
        java.lang.String str84 = chronology61.toString();
        org.joda.time.DurationField durationField85 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField86 = chronology61.year();
        org.joda.time.DateTimeField dateTimeField87 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField88 = chronology61.minuteOfHour();
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate((java.lang.Object) dateTime46, chronology61);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = chronology61.getDateTimeMillis(1645455722553L, 449, 309545, (int) ' ', 37618825);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 449 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37920000 + "'", int7 == 37920000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=14,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(zoneId38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 37920000 + "'", int43 == 37920000);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 37920000 + "'", int55 == 37920000);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-9223372016611199989L) + "'", long81 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ISOChronology[+10:32]" + "'", str84, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test19086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19086");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.year();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.centuryOfEra();
        int int20 = dateTimeField19.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readableDuration26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime30 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType21.getField(chronology35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int41 = dateTimeZone39.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime42 = localDateTime37.toDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime.Property property43 = localDateTime37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        org.joda.time.LocalDateTime localDateTime45 = property43.getLocalDateTime();
        int int46 = property43.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime47 = property43.withMinimumValue();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 0, chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime51.toMutableDateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime51.minus((long) '#');
        org.joda.time.DateTime dateTime57 = dateTime51.withDayOfWeek(4);
        org.joda.time.DateTime.Property property58 = dateTime51.weekyear();
        org.joda.time.DateTime dateTime60 = property58.addToCopy(5416138);
        boolean boolean61 = property58.isLeap();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("");
        java.lang.String str67 = locale66.getScript();
        java.lang.String str68 = locale63.getDisplayLanguage(locale66);
        java.lang.String str69 = locale66.getVariant();
        int int70 = property58.getMaximumTextLength(locale66);
        java.lang.String str71 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime47, 5427565, locale66);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime47.plusMinutes(44940);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 37920000 + "'", int29 == 37920000);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "5427565" + "'", str71, "5427565");
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test19087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19087");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        int int18 = dateTime2.getSecondOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        org.joda.time.DateTime dateTime24 = property22.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime24.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime24.toYearMonthDay();
        boolean boolean30 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime33.toMutableDateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime33.minus((long) '#');
        int int38 = dateTime37.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int40 = dateTime37.get(dateTimeFieldType39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.plus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int48 = dateTime46.get(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime51 = dateTime46.withYear(11);
        boolean boolean52 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean53 = dateTime24.equals((java.lang.Object) dateTime37);
        org.joda.time.DateTime dateTime55 = dateTime37.withWeekyear(53);
        org.joda.time.DateTime dateTime57 = dateTime55.plusWeeks(37265524);
        org.joda.time.DateTime.Property property58 = dateTime55.hourOfDay();
        org.joda.time.DateTime dateTime59 = property58.roundCeilingCopy();
        int int60 = dateTime59.getYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37920 + "'", int18 == 37920);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 70 + "'", int40 == 70);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 37920000 + "'", int48 == 37920000);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 53 + "'", int60 == 53);
    }

    @Test
    public void test19088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19088");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        int int13 = localDate11.size();
        org.joda.time.LocalDate localDate15 = localDate11.minusYears(37214189);
        org.joda.time.LocalDate localDate17 = localDate15.plusYears((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime24.withWeekOfWeekyear((int) (short) 10);
        int int30 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.minus((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.plus(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime39.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType33.getField(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.halfdayOfDay();
        org.joda.time.DurationField durationField51 = chronology47.hours();
        org.joda.time.DateTime dateTime52 = dateTime29.toDateTime(chronology47);
        org.joda.time.DurationField durationField53 = chronology47.weekyears();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology55 = chronology47.withZone(dateTimeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone54);
        org.joda.time.LocalDate.Property property57 = localDate56.yearOfCentury();
        boolean boolean58 = localDate17.isEqual((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.LocalDate localDate60 = localDate17.minusWeeks(81);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 0, chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfCentury();
        org.joda.time.DateTime dateTime66 = dateTime63.withMillisOfDay(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType67.getRangeDurationType();
        int int69 = dateTime63.get(dateTimeFieldType67);
        java.lang.String str70 = dateTimeFieldType67.toString();
        boolean boolean71 = localDate17.isSupported(dateTimeFieldType67);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone73);
        org.joda.time.LocalDate.Property property75 = localDate74.weekOfWeekyear();
        java.lang.String str76 = localDate74.toString();
        org.joda.time.LocalDate localDate78 = localDate74.withWeekOfWeekyear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = localDate78.getFieldType((int) (byte) 0);
        int int81 = localDate78.getWeekyear();
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.weeks();
        boolean boolean83 = localDate78.isSupported(durationFieldType82);
        org.joda.time.LocalDate localDate85 = localDate78.plusMonths(5416138);
        org.joda.time.LocalDate localDate87 = localDate78.plusWeeks((int) (byte) 0);
        org.joda.time.LocalDate localDate89 = localDate87.minusYears((int) (byte) 1);
        org.joda.time.LocalDate localDate91 = localDate87.minusWeeks(37920006);
        boolean boolean92 = localDate17.equals((java.lang.Object) localDate91);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 37920000 + "'", int30 == 37920000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 37920000 + "'", int41 == 37920000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "monthOfYear" + "'", str70, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01" + "'", str76, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test19089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19089");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        int int22 = localDateTime21.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(11);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minus(readableDuration25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readablePeriod27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusYears(31);
        java.lang.String str31 = localDateTime28.toString();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.minus(readableDuration32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime28.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = localDateTime28.toString("21 Feb 2022 15:00:19 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-21T01:05:16.973" + "'", str31, "2022-02-21T01:05:16.973");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test19090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19090");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusMillis(44940);
        org.joda.time.LocalTime localTime5 = localTime3.plusSeconds(0);
        java.lang.String str7 = localTime3.toString("\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)" + "'", str7, "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
    }

    @Test
    public void test19091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19091");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate13 = property11.setCopy(7);
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate16 = localDate13.plusDays(0);
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.plus(readableDuration23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int26 = dateTime24.get(dateTimeFieldType25);
        org.joda.time.DateTime dateTime27 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime24.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.centuryOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime38.toMutableDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime38.minus((long) '#');
        org.joda.time.DateTime dateTime44 = dateTime38.withDayOfWeek(4);
        org.joda.time.LocalDate localDate45 = dateTime38.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate47 = localDate45.plus(readablePeriod46);
        org.joda.time.LocalDate.Property property48 = localDate47.weekyear();
        org.joda.time.LocalDate localDate49 = property48.withMinimumValue();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfEra();
        long long52 = chronology32.set((org.joda.time.ReadablePartial) localDate49, (long) 11);
        org.joda.time.DurationField durationField53 = chronology32.months();
        org.joda.time.DateTimeField dateTimeField54 = chronology32.year();
        java.lang.String str55 = chronology32.toString();
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(chronology32);
        org.joda.time.DurationField durationField57 = chronology32.centuries();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long62 = dateTimeZone59.adjustOffset((long) 9, true);
        java.lang.String str63 = dateTimeZone59.getID();
        org.joda.time.Chronology chronology64 = chronology32.withZone(dateTimeZone59);
        org.joda.time.DurationField durationField65 = chronology32.years();
        org.joda.time.DateTime dateTime66 = dateTime17.toDateTime(chronology32);
        org.joda.time.DateTime.Property property67 = dateTime17.millisOfDay();
        int int68 = dateTime17.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 37920000 + "'", int26 == 37920000);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-9223372016611199989L) + "'", long52 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[+10:32]" + "'", str55, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 9L + "'", long62 == 9L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.100" + "'", str63, "+00:00:00.100");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test19092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.plusWeeks(0);
        org.joda.time.Interval interval12 = localDate9.toInterval();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime dateTime21 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTime(dateTimeZone24);
        int int27 = dateTimeZone24.getStandardOffset((long) 9);
        long long29 = dateTimeZone24.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime32.toMutableDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime32.minus((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime32.withDayOfWeek(4);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime38.withCenturyOfEra(1);
        int int42 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime38);
        long long45 = dateTimeZone24.adjustOffset((long) (byte) 0, false);
        org.joda.time.DateTime dateTime46 = localDate9.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.LocalDate.Property property47 = localDate9.centuryOfEra();
        org.joda.time.LocalDate localDate48 = property47.withMaximumValue();
        org.joda.time.LocalDate localDate49 = property47.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate51 = property47.addToCopy(331699);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 37920000 + "'", int20 == 37920000);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37920000 + "'", int27 == 37920000);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 37920100L + "'", long29 == 37920100L);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 37920000 + "'", int42 == 37920000);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test19093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19093");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("South Korea");
        int int2 = timeZone1.getRawOffset();
        timeZone1.setRawOffset(10);
        int int5 = timeZone1.getRawOffset();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId8 = timeZone1.toZoneId();
        java.time.ZoneId zoneId9 = timeZone1.toZoneId();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone(zoneId9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId9);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test19094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19094");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.LocalDate localDate27 = dateTime20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfEra();
        long long34 = chronology14.set((org.joda.time.ReadablePartial) localDate31, (long) 11);
        org.joda.time.LocalDate.Property property35 = localDate31.era();
        java.lang.String str37 = localDate31.toString("1970-01-01");
        org.joda.time.LocalDate localDate39 = localDate31.plusYears(19);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property42 = localTime41.secondOfMinute();
        org.joda.time.LocalTime localTime44 = localTime41.plusMinutes((int) (short) 100);
        java.lang.String str45 = localTime44.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime49.plus(readableDuration51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int54 = dateTime52.get(dateTimeFieldType53);
        org.joda.time.DateTime dateTime55 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTime(dateTimeZone58);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType46.getField(chronology60);
        boolean boolean62 = localTime44.isSupported(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate64 = localDate39.withField(dateTimeFieldType46, 3929993);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9223372016611199989L) + "'", long34 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "12:12:00.097" + "'", str45, "12:12:00.097");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 37920000 + "'", int54 == 37920000);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test19095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19095");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime5.toMutableDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.hourOfHalfday();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.LocalDate.Property property33 = localDate32.weekyear();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        int int38 = property33.getMaximumShortTextLength(locale35);
        java.lang.String str39 = locale35.getDisplayVariant();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37920000 + "'", int19 == 37920000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test19096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19096");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("South Korea");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1);
        java.util.Date date4 = new java.util.Date();
        long long5 = date4.getTime();
        long long6 = date4.getTime();
        int int7 = date4.getDay();
        int int8 = date4.getMinutes();
        calendar3.setTime(date4);
        calendar3.setLenient(false);
        int int13 = calendar3.getMaximum(12);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar3.getGreatestMinimum(18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 18");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456037083,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=17,MILLISECOND=83,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:07:17 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645456037083L + "'", long5 == 1645456037083L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645456037083L + "'", long6 == 1645456037083L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
    }

    @Test
    public void test19097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19097");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = property24.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime29.getFields();
        int int31 = localDateTime29.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test19098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19098");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.set((long) 6, "1");
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property8 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime10 = property8.setCopy(31);
        org.joda.time.LocalTime localTime12 = property8.addWrapFieldToCopy(37920000);
        int int13 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime localTime15 = localTime12.minusHours(889);
        java.lang.String str17 = localTime15.toString("1970-1-1 10:32:00");
        java.lang.String str18 = localTime15.toString();
        java.lang.String str19 = localTime15.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-37919999L) + "'", long5 == (-37919999L));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 86399999 + "'", int13 == 86399999);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-1-1 10:32:00" + "'", str17, "1970-1-1 10:32:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "09:32:00.097" + "'", str18, "09:32:00.097");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "09:32:00.097" + "'", str19, "09:32:00.097");
    }

    @Test
    public void test19099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime6 = property3.roundFloorCopy();
        boolean boolean8 = dateTime6.isEqual((long) 1);
        int int9 = dateTime6.getWeekOfWeekyear();
        boolean boolean11 = dateTime6.isBefore(9600960099L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone13);
        int int15 = localDate14.getDayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime18.minus((long) '#');
        org.joda.time.DateTime dateTime24 = dateTime18.withDayOfWeek(4);
        boolean boolean26 = dateTime18.equals((java.lang.Object) "eras");
        int int27 = dateTime18.getWeekyear();
        org.joda.time.DateTime dateTime28 = localDate14.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes((int) 'u');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime33.withYear(10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime39.toMutableDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime39.minus((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime39.withDayOfWeek(4);
        boolean boolean47 = dateTime39.equals((java.lang.Object) "eras");
        boolean boolean48 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime39);
        int int49 = dateTime33.getSecondOfDay();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.yearOfCentury();
        org.joda.time.DateTime dateTime55 = property53.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime59 = dateTime55.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay60 = dateTime55.toYearMonthDay();
        boolean boolean61 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime63 = dateTime33.withWeekOfWeekyear((int) ' ');
        int int64 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getDurationType();
        boolean boolean67 = dateTime28.isSupported(dateTimeFieldType65);
        int int68 = dateTime6.get(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType65.getRangeDurationType();
        java.lang.String str70 = durationFieldType69.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 37920 + "'", int49 == 37920);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "days" + "'", str70, "days");
    }

    @Test
    public void test19100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19100");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        int int24 = property22.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField26 = property22.getField();
        org.joda.time.LocalDateTime localDateTime27 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours((-292275054));
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusHours(5436181);
        java.util.Date date33 = new java.util.Date(197L);
        boolean boolean34 = localDateTime31.equals((java.lang.Object) date33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalDateTime localDateTime38 = property35.addWrapFieldToCopy(37544127);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals(date33.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test19101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19101");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.withMinimumValue();
        org.joda.time.LocalDate localDate13 = property11.getLocalDate();
        org.joda.time.LocalDate localDate14 = property11.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.plus(readablePeriod15);
        int int17 = localDate14.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test19102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19102");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType3.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DurationField durationField22 = chronology17.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withChronology(chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 889);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withPivotYear((java.lang.Integer) 874);
        boolean boolean31 = dateTimeFormatter30.isParser();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test19103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19103");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime5.toMutableDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.hourOfHalfday();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.LocalDate.Property property33 = localDate32.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        java.lang.String str36 = durationFieldType35.toString();
        boolean boolean37 = localDate32.isSupported(durationFieldType35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.plus(readableDuration43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int46 = dateTime44.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime47 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime51 = dateTime44.toDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType38.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.centuryOfEra();
        org.joda.time.DurationField durationField56 = durationFieldType35.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.weekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37920000 + "'", int19 == 37920000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "days" + "'", str36, "days");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 37920000 + "'", int46 == 37920000);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test19104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19104");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.setCopy(31);
        org.joda.time.LocalTime localTime6 = property2.addWrapFieldToCopy(37920000);
        org.joda.time.LocalTime localTime8 = property2.addWrapFieldToCopy(1969);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime10 = localTime8.minus(readablePeriod9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean12 = localTime10.isSupported(dateTimeFieldType11);
        java.lang.String str13 = dateTimeFieldType11.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "clockhourOfHalfday" + "'", str13, "clockhourOfHalfday");
    }

    @Test
    public void test19105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19105");
        java.util.Date date5 = new java.util.Date(1969, 5415578, 15, 49, 5472308);
        java.util.Date date12 = new java.util.Date(12, 11, 1, (int) (byte) 10, (int) 'u', 0);
        date12.setSeconds(50);
        java.util.Date date16 = new java.util.Date((long) (byte) -1);
        date16.setTime((long) ' ');
        boolean boolean19 = date12.before(date16);
        int int20 = date12.getMonth();
        date12.setMinutes(50);
        int int23 = date12.getDate();
        boolean boolean24 = date5.after(date12);
        long long25 = date12.getTime();
        java.lang.String str26 = date12.toString();
        org.junit.Assert.assertEquals(date5.toString(), "Thu Aug 11 06:08:00 GMT 455177");
        org.junit.Assert.assertEquals(date12.toString(), "Sun Dec 01 11:50:50 GMT 1912");
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1801397350010L) + "'", long25 == (-1801397350010L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Sun Dec 01 11:50:50 GMT 1912" + "'", str26, "Sun Dec 01 11:50:50 GMT 1912");
    }

    @Test
    public void test19106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19106");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.plus(readableDuration9);
        org.joda.time.DateTime dateTime12 = dateTime7.withWeekOfWeekyear((int) (short) 10);
        int int13 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime15 = dateTime12.minus((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int24 = dateTime22.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType16.getField(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.halfdayOfDay();
        org.joda.time.DurationField durationField34 = chronology30.hours();
        org.joda.time.DateTime dateTime35 = dateTime12.toDateTime(chronology30);
        org.joda.time.DurationField durationField36 = chronology30.weekyears();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology38 = chronology30.withZone(dateTimeZone37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (byte) 1, dateTimeZone37);
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleKeys();
        strSet42.clear();
        boolean boolean44 = dateTimeZone37.equals((java.lang.Object) strSet42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 4533, dateTimeZone37);
        int int46 = localDate45.size();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 37920000 + "'", int13 == 37920000);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37920000 + "'", int24 == 37920000);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
    }

    @Test
    public void test19107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19107");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("South Korea");
        timeZone4.setID("South Korea");
        calendar0.setTimeZone(timeZone4);
        calendar0.set((int) (byte) 0, (int) (byte) 100, (int) (short) 10, 2, 2, 292278993);
        calendar0.setLenient(true);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder21 = builder17.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder25 = builder17.setDate(20, (int) 'u', 37920197);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.util.Calendar.Builder builder27 = builder25.setLocale(locale26);
        java.util.Calendar.Builder builder31 = builder27.setWeekDate(52, 5, 11);
        java.util.Calendar.Builder builder35 = builder27.setDate(327735, (int) (byte) 100, 728);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("South Korea");
        int int38 = timeZone37.getRawOffset();
        timeZone37.setRawOffset(10);
        int int41 = timeZone37.getRawOffset();
        java.util.TimeZone.setDefault(timeZone37);
        java.util.TimeZone.setDefault(timeZone37);
        java.time.ZoneId zoneId44 = timeZone37.toZoneId();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone37);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("South Korea");
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        timeZone47.setID("-1");
        timeZone47.setID("Thu");
        boolean boolean53 = timeZone37.hasSameRules(timeZone47);
        timeZone37.setRawOffset(5429188);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone37);
        java.util.Calendar.Builder builder57 = builder35.setTimeZone(timeZone37);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        int int60 = calendar58.getMaximum(11);
        java.lang.Object obj61 = null;
        boolean boolean62 = calendar58.before(obj61);
        java.time.Instant instant63 = calendar58.toInstant();
        calendar58.set(10, 32, 70, 10, (int) (byte) -1);
        java.util.TimeZone timeZone70 = calendar58.getTimeZone();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 0, chronology72);
        int int74 = dateTime73.getSecondOfMinute();
        org.joda.time.DateTime dateTime76 = dateTime73.withYear(10);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) 0, chronology78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime79.toMutableDateTime(chronology80);
        org.joda.time.DateTime dateTime83 = dateTime79.minus((long) '#');
        org.joda.time.DateTime dateTime85 = dateTime79.withDayOfWeek(4);
        boolean boolean87 = dateTime79.equals((java.lang.Object) "eras");
        boolean boolean88 = dateTime73.isEqual((org.joda.time.ReadableInstant) dateTime79);
        java.util.Locale locale90 = java.util.Locale.forLanguageTag("");
        java.lang.String str91 = locale90.getScript();
        java.util.Calendar calendar92 = dateTime79.toCalendar(locale90);
        java.util.TimeZone timeZone93 = calendar92.getTimeZone();
        java.lang.String str94 = timeZone93.getID();
        java.util.TimeZone.setDefault(timeZone93);
        boolean boolean96 = timeZone70.hasSameRules(timeZone93);
        java.util.Calendar.Builder builder97 = builder35.setTimeZone(timeZone70);
        calendar0.setTimeZone(timeZone70);
        java.util.Date date99 = calendar0.getTime();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61611418315910,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=5429188,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=38,SECOND=33,MILLISECOND=278,ZONE_OFFSET=5429188,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645456037268,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=5429188,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=17,MILLISECOND=278,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645456037268,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=5429188,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=37,SECOND=46,MILLISECOND=456,ZONE_OFFSET=5429188,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=5429188,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=32,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=70,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=10,MINUTE=-1,SECOND=46,MILLISECOND=456,ZONE_OFFSET=5429188,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 23 + "'", int60 == 23);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(calendar92);
        org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone93);
        org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "GMT+10:32" + "'", str94, "GMT+10:32");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(date99);
// flaky:         org.junit.Assert.assertEquals(date99.toString(), "Sat Aug 14 07:40:04 GMT+10:32 17");
    }

    @Test
    public void test19108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19108");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder8 = builder0.setDate(37920000, (-1), 37920);
        java.util.Calendar.Builder builder12 = builder8.setDate(37273589, 86399999, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.plus(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime19.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType13.getField(chronology27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withField(dateTimeFieldType30, 5);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.monthOfYear();
        org.joda.time.LocalDateTime localDateTime35 = property33.addWrapFieldToCopy((int) 'u');
        org.joda.time.LocalDateTime localDateTime37 = property33.addToCopy(101L);
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("");
        java.lang.String str42 = locale39.getDisplayLanguage(locale41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale41);
        java.lang.String str44 = property33.getAsText(locale41);
        java.lang.String str45 = locale41.getScript();
        java.lang.String str46 = locale41.getISO3Language();
        java.util.Calendar.Builder builder47 = builder8.setLocale(locale41);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37920000 + "'", int21 == 37920000);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645456037301,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=17,MILLISECOND=301,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "February" + "'", str44, "February");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test19109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19109");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.withMinimumValue();
        org.joda.time.LocalDate localDate13 = property11.roundHalfFloorCopy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.plus(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime19.toDateTime(dateTimeZone25);
        int int28 = dateTimeZone25.getStandardOffset((long) 9);
        long long30 = dateTimeZone25.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime33.toMutableDateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime33.minus((long) '#');
        org.joda.time.DateTime dateTime39 = dateTime33.withDayOfWeek(4);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime39.withCenturyOfEra(1);
        int int43 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime39);
        java.lang.String str44 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime45 = localDate13.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.LocalDate.Property property46 = localDate13.era();
        java.lang.String str47 = property46.getAsText();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37920000 + "'", int21 == 37920000);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 37920000 + "'", int28 == 37920000);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 37920100L + "'", long30 == 37920100L);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 37920000 + "'", int43 == 37920000);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:32" + "'", str44, "+10:32");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "AD" + "'", str47, "AD");
    }

    @Test
    public void test19110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(0);
        org.joda.time.LocalDate.Property property14 = localDate13.era();
        org.joda.time.LocalDate localDate15 = property14.roundHalfFloorCopy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime18.minus((long) '#');
        org.joda.time.DateTime dateTime24 = dateTime18.withDayOfWeek(4);
        org.joda.time.LocalDate localDate25 = dateTime18.toLocalDate();
        boolean boolean27 = localDate25.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate29 = localDate25.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone31);
        org.joda.time.LocalDate.Property property33 = localDate32.weekOfWeekyear();
        org.joda.time.LocalDate localDate34 = property33.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 0, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime37.toMutableDateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime37.minus((long) '#');
        org.joda.time.DateTime dateTime43 = dateTime37.withDayOfWeek(4);
        org.joda.time.LocalDate localDate44 = dateTime37.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate46 = localDate44.plus(readablePeriod45);
        org.joda.time.LocalDate.Property property47 = localDate46.weekyear();
        org.joda.time.LocalDate localDate48 = localDate34.withFields((org.joda.time.ReadablePartial) localDate46);
        int int49 = localDate29.compareTo((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate51 = localDate48.minus(readablePeriod50);
        org.joda.time.LocalDate localDate53 = localDate48.plusMonths(323);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 0, chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime56.toMutableDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime56.minus((long) '#');
        org.joda.time.DateTime dateTime62 = dateTime56.withDayOfWeek(4);
        org.joda.time.LocalDate localDate63 = dateTime56.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDate localDate65 = localDate63.plus(readablePeriod64);
        org.joda.time.LocalDate.Property property66 = localDate65.weekyear();
        org.joda.time.LocalDate localDate67 = property66.roundFloorCopy();
        org.joda.time.DurationField durationField68 = property66.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property66.getFieldType();
        boolean boolean70 = localDate48.isSupported(dateTimeFieldType69);
        boolean boolean71 = localDate15.isSupported(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test19111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19111");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate14 = localDate9.withFieldAdded(durationFieldType12, 6);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate17 = localDate9.withFieldAdded(durationFieldType15, (int) (short) 0);
        int int18 = localDate9.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) ' ');
        int int21 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property22 = dateTime20.monthOfYear();
        org.joda.time.DateTime dateTime23 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate.Property property24 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate25 = property24.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37920 + "'", int21 == 37920);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test19112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19112");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        calendar0.setWeekDate((-1), 3, 4);
        int int8 = calendar0.getLeastMaximum(3);
        long long9 = calendar0.getTimeInMillis();
        int int10 = calendar0.getWeeksInWeekYear();
        java.util.Date date12 = new java.util.Date((long) ' ');
        calendar0.setTime(date12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        boolean boolean18 = dateTimeField16.isLeap((long) 9);
        boolean boolean19 = dateTimeField16.isSupported();
        boolean boolean20 = calendar0.before((java.lang.Object) dateTimeField16);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) calendar0);
        long long22 = calendar0.getTimeInMillis();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=32,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=32,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-62197750362609L) + "'", long9 == (-62197750362609L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 10:32:00 GMT+10:32 1970");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
    }

    @Test
    public void test19113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19113");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfMonth(6);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, 332);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test19114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime8);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMillis((int) 'u');
        int int25 = localDateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMonths(58);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime30 = property28.getLocalDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test19115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfCentury();
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        int int6 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime2.getZone();
        org.joda.time.DateTime dateTime9 = dateTime2.plusDays(37395057);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime12.toMutableDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime12.minus((long) '#');
        org.joda.time.DateTime dateTime18 = dateTime12.withDayOfWeek(4);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime12.plus(readablePeriod19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime20.withMillis(1645417705475L);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.plus(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType24.getField(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.centuryOfEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime44.toMutableDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime44.minus((long) '#');
        org.joda.time.DateTime dateTime50 = dateTime44.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime54 = dateTime50.withZone(dateTimeZone53);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone53);
        org.joda.time.LocalDate.Property property56 = localDate55.dayOfWeek();
        org.joda.time.LocalDate localDate58 = property56.setCopy((int) (short) 1);
        long long60 = chronology38.set((org.joda.time.ReadablePartial) localDate58, 23L);
        org.joda.time.DateTime dateTime61 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateTime.Property property62 = dateTime23.weekyear();
        boolean boolean63 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 37920000 + "'", int32 == 37920000);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645401600023L + "'", long60 == 1645401600023L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test19116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19116");
        java.util.Date date3 = new java.util.Date(93, 5513416, 5587332);
        date3.setSeconds(5847151);
        int int6 = date3.getHours();
        org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 09 16:12:31 GMT+10:32 476742");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
    }

    @Test
    public void test19117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19117");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        int int24 = property22.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        int int26 = localDateTime25.getEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusMonths(21);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minus(readableDuration29);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test19118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19118");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(5767);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.halfdayOfDay();
        org.joda.time.DurationField durationField29 = chronology25.hours();
        org.joda.time.DurationField durationField30 = chronology25.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter10.withChronology(chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter7.withChronology(chronology25);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.plus(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime39.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType33.getField(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfMonth();
        org.joda.time.DurationField durationField51 = chronology47.months();
        long long55 = chronology47.add(99L, 1645455551991L, 31);
        org.joda.time.DurationField durationField56 = chronology47.hours();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter7.withChronology(chronology47);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone59);
        int int61 = localDate60.getDayOfMonth();
        int int62 = localDate60.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField64 = localDate60.getField(0);
        org.joda.time.DateTime dateTime65 = localDate60.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property66 = localDate60.weekyear();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 0, chronology68);
        org.joda.time.DateTime.Property property70 = dateTime69.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime69.plus(readableDuration71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int74 = dateTime72.get(dateTimeFieldType73);
        org.joda.time.DateTime dateTime75 = dateTime72.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime77 = dateTime72.withYear(11);
        org.joda.time.DateTime.Property property78 = dateTime77.monthOfYear();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) 0, chronology80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime81.toMutableDateTime(chronology82);
        org.joda.time.DateTime dateTime85 = dateTime81.minus((long) '#');
        int int86 = dateTime85.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int88 = dateTime85.get(dateTimeFieldType87);
        int int89 = dateTime77.get(dateTimeFieldType87);
        int int90 = localDate60.get(dateTimeFieldType87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = dateTimeFormatter57.print((org.joda.time.ReadablePartial) localDate60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37920000 + "'", int19 == 37920000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 37920000 + "'", int41 == 37920000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 51009122111820L + "'", long55 == 51009122111820L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 19 + "'", int62 == 19);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 37920000 + "'", int74 == 37920000);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 70 + "'", int88 == 70);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 11 + "'", int89 == 11);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 70 + "'", int90 == 70);
    }

    @Test
    public void test19119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19119");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        boolean boolean10 = dateTimeZone9.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(30719, 889, 37920100, (int) (byte) 1, 0, 334181, 30719, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 334181 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test19120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19120");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate14 = localDate9.withFieldAdded(durationFieldType12, 6);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate17 = localDate9.withFieldAdded(durationFieldType15, (int) (short) 0);
        int int18 = localDate9.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) ' ');
        int int21 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime.Property property22 = dateTime20.monthOfYear();
        org.joda.time.DateTime dateTime23 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDate.Property property24 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate26 = localDate9.withWeekOfWeekyear(10);
        org.joda.time.LocalDate localDate28 = localDate26.withYearOfEra(54);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate28.withPeriodAdded(readablePeriod29, (-700232));
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37920 + "'", int21 == 37920);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test19121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19121");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        java.util.Date date16 = new java.util.Date((long) (byte) -1);
        date16.setTime((long) ' ');
        date16.setYear((int) 'u');
        int int21 = date16.getMonth();
        boolean boolean22 = localDate13.equals((java.lang.Object) int21);
        org.joda.time.LocalDate localDate24 = localDate13.plusYears(3);
        org.joda.time.LocalDate.Property property25 = localDate13.era();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = localDate13.toInterval(dateTimeZone26);
        org.joda.time.LocalDate.Property property28 = localDate13.yearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 01 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test19122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19122");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology15.hours();
        org.joda.time.DurationField durationField20 = chronology15.weeks();
        org.joda.time.DurationField durationField21 = chronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology15.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1965, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test19123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19123");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withDurationAdded(readableDuration27, 5436181);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology31);
        int int33 = dateTime32.getSecondOfMinute();
        org.joda.time.DateTime dateTime35 = dateTime32.withYear(10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime38.toMutableDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime38.minus((long) '#');
        org.joda.time.DateTime dateTime44 = dateTime38.withDayOfWeek(4);
        boolean boolean46 = dateTime38.equals((java.lang.Object) "eras");
        boolean boolean47 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime38);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("");
        java.lang.String str50 = locale49.getScript();
        java.util.Calendar calendar51 = dateTime38.toCalendar(locale49);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime38);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMonths((-292275054));
        int int55 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime29.minusMinutes(7);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.dayOfMonth();
        int int59 = localDateTime57.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
    }

    @Test
    public void test19124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19124");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        java.lang.String str19 = durationFieldType18.getName();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.plus(readableDuration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int27 = dateTime25.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime28 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfDay();
        boolean boolean35 = durationFieldType18.isSupported(chronology33);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime16.toMutableDateTime(chronology33);
        org.joda.time.Chronology chronology37 = dateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        boolean boolean39 = dateTimeZone38.isFixed();
        long long43 = dateTimeZone38.convertLocalToUTC((long) 48, true, 1645455840836L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "years" + "'", str19, "years");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37920000 + "'", int27 == 37920000);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-37919952L) + "'", long43 == (-37919952L));
    }

    @Test
    public void test19125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19125");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.millisOfSecond();
        int int23 = localDateTime16.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfCeilingCopy();
        java.lang.String str26 = property24.getName();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withSecondOfMinute((-632));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -632 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 17 + "'", int23 == 17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "year" + "'", str26, "year");
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test19126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19126");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("South Korea");
        boolean boolean2 = timeZone1.observesDaylightTime();
        timeZone1.setID("centuries");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = timeZone1.getDisplayName(false, 667);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 667");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test19127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19127");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("weeks");
    }

    @Test
    public void test19128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19128");
        java.util.Date date1 = new java.util.Date(1645455604750L);
        java.lang.String str2 = date1.toString();
        org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 01:32:04 GMT+10:32 2022");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Tue Feb 22 01:32:04 GMT+10:32 2022" + "'", str2, "Tue Feb 22 01:32:04 GMT+10:32 2022");
    }

    @Test
    public void test19129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19129");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        java.lang.Object obj3 = null;
        boolean boolean4 = calendar0.before(obj3);
        java.lang.String str5 = calendar0.getCalendarType();
        calendar0.set(4, 14);
        int int9 = calendar0.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1651504037616,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=123,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=17,MILLISECOND=616,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gregory" + "'", str5, "gregory");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test19130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19130");
        java.util.Date date6 = new java.util.Date(8, 31, 0, 37919999, 99, 0);
        java.util.Date date8 = new java.util.Date((long) (byte) -1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) date8, chronology9);
        date8.setMonth((int) (byte) -1);
        date8.setMinutes(9);
        date8.setTime((long) 332);
        int int17 = date6.compareTo(date8);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 21 00:39:00 GMT+10:32 6236");
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 10:32:00 GMT+10:32 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test19131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19131");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder8 = builder0.setDate(20, (int) 'u', 37920197);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Calendar.Builder builder10 = builder8.setLocale(locale9);
        java.util.Calendar.Builder builder14 = builder10.setDate(37919999, 1, (int) (byte) 0);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("South Korea");
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        timeZone16.setID("-1");
        timeZone16.setID("Thu");
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("South Korea");
        int int24 = timeZone23.getRawOffset();
        timeZone23.setRawOffset(10);
        int int27 = timeZone23.getRawOffset();
        java.util.TimeZone.setDefault(timeZone23);
        boolean boolean29 = timeZone16.hasSameRules(timeZone23);
        java.util.Calendar.Builder builder30 = builder10.setTimeZone(timeZone23);
        java.util.Calendar.Builder builder32 = builder30.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder34 = builder32.setInstant((long) 34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test19132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19132");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        int int7 = dateTime2.getCenturyOfEra();
        org.joda.time.DateTime dateTime9 = dateTime2.plusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime2.plusMillis((int) (byte) 100);
        org.joda.time.DateTime.Property property12 = dateTime2.secondOfMinute();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = property12.withMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test19133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19133");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(173, 678, 835, 0, 37542795, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37542795 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19134");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(453314);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test19135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19135");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((-37919888L), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.era();
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test19136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime();
        int int8 = dateTime2.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime2.plus((long) 1970);
        org.joda.time.DateTime dateTime12 = dateTime2.withYearOfEra(4);
        java.util.GregorianCalendar gregorianCalendar13 = dateTime2.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.clear(2911);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
    }

    @Test
    public void test19137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19137");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.ReadablePartial readablePartial3 = null;
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("");
        java.lang.String str7 = dateTimeField2.getAsShortText(readablePartial3, (int) (byte) 1, locale6);
        java.lang.String str8 = locale6.getDisplayVariant();
        java.lang.String str9 = locale6.toLanguageTag();
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet11 = locale6.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = strSet11.add("36");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1" + "'", str7, "1");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test19138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19138");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getMinimalDaysInFirstWeek();
        calendar1.set(23, 11, 37919999, 15, 6, 632);
        calendar1.set(26, (-632), (-9), 3, 5416138);
        java.util.Date date16 = calendar1.getTime();
        calendar1.set(5423123, 983, 0, 37920, 16);
        java.time.Instant instant23 = calendar1.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = calendar1.getMaximum(5767);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5767");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-171200160747807290,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=5423037,MONTH=2,WEEK_OF_YEAR=13,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=88,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=16,SECOND=32,MILLISECOND=720,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Aug 08 08:08:32 GMT 18");
        org.junit.Assert.assertNotNull(instant23);
    }

    @Test
    public void test19139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19139");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(1917, (int) (short) 1, 51);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime11.minuteOfHour();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime19.withWeekOfWeekyear((int) (short) 10);
        long long25 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean29 = dateTimeField28.isLenient();
        long long31 = dateTimeField28.roundCeiling((long) 5);
        java.lang.String str33 = dateTimeField28.getAsText(32L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime36.toMutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime36.withDayOfWeek(4);
        org.joda.time.LocalDate localDate43 = dateTime36.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate45 = localDate43.plus(readablePeriod44);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        int int47 = localDate45.size();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale51 = java.util.Locale.UK;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDate45, 53, locale50);
        java.lang.String str54 = property16.getAsShortText(locale50);
        java.lang.String str56 = locale50.getExtension('u');
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale50);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 0, chronology59);
        int int61 = dateTime60.getSecondOfMinute();
        org.joda.time.DateTime dateTime63 = dateTime60.withYear(10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 0, chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime66.toMutableDateTime(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime66.minus((long) '#');
        org.joda.time.DateTime dateTime72 = dateTime66.withDayOfWeek(4);
        boolean boolean74 = dateTime66.equals((java.lang.Object) "eras");
        boolean boolean75 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime66);
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("");
        java.lang.String str78 = locale77.getScript();
        java.util.Calendar calendar79 = dateTime66.toCalendar(locale77);
        java.util.TimeZone timeZone80 = calendar79.getTimeZone();
        java.lang.String str81 = timeZone80.getID();
        java.util.TimeZone.setDefault(timeZone80);
        java.lang.String str83 = timeZone80.getID();
        calendar57.setTimeZone(timeZone80);
        java.util.TimeZone timeZone86 = java.util.TimeZone.getTimeZone("14:58:47.164");
        boolean boolean87 = timeZone80.hasSameRules(timeZone86);
        java.util.Calendar.Builder builder88 = builder8.setTimeZone(timeZone80);
        java.util.Calendar calendar89 = java.util.Calendar.getInstance();
        int int91 = calendar89.getMinimum(0);
        calendar89.roll(1, (int) ' ');
        org.joda.time.LocalDate localDate95 = org.joda.time.LocalDate.fromCalendarFields(calendar89);
        int[] intArray96 = localDate95.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder97 = builder8.setFields(intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5L + "'", long31 == 5L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "37920032" + "'", str33, "37920032");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "53" + "'", str53, "53");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "32" + "'", str54, "32");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645456037718,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=17,MILLISECOND=728,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(calendar79);
        org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "GMT+10:32" + "'", str81, "GMT+10:32");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "GMT+10:32" + "'", str83, "GMT+10:32");
        org.junit.Assert.assertNotNull(timeZone86);
        org.junit.Assert.assertEquals(timeZone86.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(calendar89);
// flaky:         org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=2655299237718,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2054,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=17,MILLISECOND=718,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(localDate95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[2054, 2, 22]");
    }

    @Test
    public void test19140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19140");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.plus(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localDate4.equals((java.lang.Object) dateTime10);
        int int14 = localDate4.getWeekyear();
        org.joda.time.Chronology chronology15 = localDate4.getChronology();
        java.lang.String str16 = localDate4.toString();
        org.joda.time.LocalDate.Property property17 = localDate4.yearOfCentury();
        java.util.Date date18 = localDate4.toDate();
        int int19 = date18.getYear();
        int int20 = date18.getTimezoneOffset();
        int int21 = date18.getHours();
        int int22 = date18.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920000 + "'", int12 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1969-12-29" + "'", str16, "1969-12-29");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Dec 29 00:00:00 GMT+10:32 1969");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 69 + "'", int19 == 69);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-632) + "'", int20 == (-632));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 69 + "'", int22 == 69);
    }

    @Test
    public void test19141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19141");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withZoneUTC();
        java.lang.StringBuffer stringBuffer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer7, 1645455755087L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test19142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19142");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays(2022);
        int int20 = dateTime16.getMonthOfYear();
        boolean boolean21 = dateTime16.isBeforeNow();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test19143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19143");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime4.minus((long) '#');
        org.joda.time.DateTime dateTime10 = dateTime4.withDayOfWeek(4);
        org.joda.time.DateTime.Property property11 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime13 = property11.addToCopy(5416138);
        boolean boolean14 = property11.isLeap();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.lang.String str21 = locale16.getDisplayLanguage(locale19);
        java.lang.String str22 = locale19.getVariant();
        int int23 = property11.getMaximumTextLength(locale19);
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale25 = java.util.Locale.getDefault(category0);
        java.util.Locale locale26 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "37920001");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
    }

    @Test
    public void test19144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19144");
        java.util.Date date6 = new java.util.Date(2022, (int) (short) 1, 5432960, 86399999, (int) (short) 1, 365);
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getHours();
        org.junit.Assert.assertEquals(date6.toString(), "Sun Jun 26 23:07:05 GMT+10:32 28653");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-632) + "'", int7 == (-632));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
    }

    @Test
    public void test19145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate.Property property12 = localDate9.monthOfYear();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.LocalDate localDate15 = property12.addWrapFieldToCopy(37920000);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test19146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean10 = dateTime8.isSupported(dateTimeFieldType9);
        java.lang.String str11 = dateTimeFieldType9.toString();
        java.lang.String str12 = dateTimeFieldType9.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37920000 + "'", int7 == 37920000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfWeek" + "'", str11, "dayOfWeek");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfWeek" + "'", str12, "dayOfWeek");
    }

    @Test
    public void test19147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19147");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str2 = locale0.getExtension('a');
        java.lang.String str3 = locale0.getDisplayCountry();
        java.lang.String str4 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
    }

    @Test
    public void test19148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19148");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1645455670980L);
        int int2 = localDate1.getDayOfMonth();
        int int3 = localDate1.getEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test19149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime5.toMutableDateTime();
        org.joda.time.DateTime.Property property11 = dateTime5.era();
        org.joda.time.DateTime dateTime13 = dateTime5.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.DateTime dateTime16 = property14.roundFloorCopy();
        java.util.Locale locale17 = null;
        int int18 = property14.getMaximumShortTextLength(locale17);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test19150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        boolean boolean8 = dateTime5.isEqual(1645455491851L);
        org.joda.time.DateTime dateTime9 = dateTime5.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime5.withMillis((long) 292278993);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(1970);
        int int14 = dateTime11.getYearOfEra();
        int int15 = dateTime11.getSecondOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70998 + "'", int15 == 70998);
    }

    @Test
    public void test19151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        org.joda.time.DateTime.Property property22 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime24 = property22.setCopy((int) (byte) 1);
        boolean boolean25 = dateTime24.isEqualNow();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.Chronology chronology29 = dateTimeFormatter28.getChronology();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale31.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter28.withLocale(locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter28.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter28.withPivotYear((java.lang.Integer) 37296071);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withDefaultYear(2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withPivotYear((java.lang.Integer) 44939);
        boolean boolean43 = dateTime24.equals((java.lang.Object) dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(chronology29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test19152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19152");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes((int) 'u');
        org.joda.time.DateTime dateTime21 = dateTime18.withDurationAdded(62197664487862L, 37);
        org.joda.time.LocalDate localDate22 = dateTime18.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((-43766));
        org.joda.time.Interval interval25 = localDate22.toInterval(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test19153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19153");
        java.util.Locale locale3 = new java.util.Locale("", "South Korea", "1970-01-01");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime8 = localTime5.withFields((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(dateTimeZone9);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime13 = localTime10.withFields((org.joda.time.ReadablePartial) localTime12);
        int int14 = localTime7.compareTo((org.joda.time.ReadablePartial) localTime10);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = localTime7.toString("1", locale16);
        java.lang.String str18 = locale3.getDisplayScript(locale16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        org.joda.time.DateTime dateTime24 = property22.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime24.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfMonth(2);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Calendar calendar32 = dateTime28.toCalendar(locale31);
        java.lang.String str33 = locale3.getDisplayLanguage(locale31);
        java.util.Set<java.lang.Character> charSet34 = locale3.getExtensionKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "_SOUTH KOREA_1970-01-01");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(charSet34);
    }

    @Test
    public void test19154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19154");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.LocalDate localDate27 = dateTime20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfEra();
        long long34 = chronology14.set((org.joda.time.ReadablePartial) localDate31, (long) 11);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime37 = dateTime35.minus(7008289057000L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone39);
        int int41 = localDate40.getDayOfMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime44.toMutableDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime44.minus((long) '#');
        org.joda.time.DateTime dateTime50 = dateTime44.withDayOfWeek(4);
        boolean boolean52 = dateTime44.equals((java.lang.Object) "eras");
        int int53 = dateTime44.getWeekyear();
        org.joda.time.DateTime dateTime54 = localDate40.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime.Property property56 = dateTime54.year();
        org.joda.time.DateTime dateTime57 = property56.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfCentury();
        boolean boolean59 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 0, chronology61);
        org.joda.time.DateTime.Property property63 = dateTime62.yearOfCentury();
        int int64 = dateTime62.getMillisOfSecond();
        org.joda.time.DateTime dateTime66 = dateTime62.plusYears(6);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime69 = dateTime62.withFieldAdded(durationFieldType67, (int) ' ');
        org.joda.time.DateTime dateTime71 = dateTime69.plusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 0, chronology73);
        org.joda.time.DateTime.Property property75 = dateTime74.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTime dateTime77 = dateTime74.plus(readableDuration76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int79 = dateTime77.get(dateTimeFieldType78);
        org.joda.time.DateTime dateTime80 = dateTime77.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime82 = dateTime77.withYear(11);
        org.joda.time.DateTime dateTime84 = dateTime77.minus((long) 5415578);
        org.joda.time.DateTime dateTime86 = dateTime84.minusDays(24);
        boolean boolean87 = dateTime71.isAfter((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean88 = dateTime57.equals((java.lang.Object) boolean87);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9223372016611199989L) + "'", long34 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 37920000 + "'", int79 == 37920000);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test19155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19155");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType3.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DurationField durationField22 = chronology17.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withChronology(chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 121);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter31.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTimeFormatter32.parseDateTime("1970-01-01T00:00:00.142+00:00:00.100");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test19156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19156");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(timeZone0);
        calendar1.setLenient(true);
        boolean boolean5 = calendar1.before((java.lang.Object) 5637242);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645456038039,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=18,MILLISECOND=39,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test19157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property4.roundFloorCopy();
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str12 = nameProvider6.getName(locale8, "+00:00:00.100", "53");
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str16 = nameProvider6.getName(locale13, "53", "1 janv. 1970 00:00:00");
        java.util.Locale locale20 = new java.util.Locale("", "South Korea", "1970-01-01");
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime25 = localTime22.withFields((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime30 = localTime27.withFields((org.joda.time.ReadablePartial) localTime29);
        int int31 = localTime24.compareTo((org.joda.time.ReadablePartial) localTime27);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = localTime24.toString("1", locale33);
        java.lang.String str35 = locale20.getDisplayScript(locale33);
        java.lang.String str36 = locale20.getDisplayCountry();
        java.lang.String str39 = nameProvider6.getShortName(locale20, "zh_CN", "32");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider6);
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("10");
        java.lang.String str45 = nameProvider6.getName(locale42, "2022-02-21t01:05:23.500", "Property[dayOfYear]");
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale46);
        java.lang.String str48 = locale42.getDisplayCountry(locale46);
        boolean boolean49 = dateTime5.equals((java.lang.Object) locale46);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime5.plus(readablePeriod50);
        org.joda.time.DateTime.Property property52 = dateTime51.secondOfMinute();
        org.joda.time.DateTime dateTime53 = property52.withMinimumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(locale20.toString(), "_SOUTH KOREA_1970-01-01");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "SOUTH KOREA" + "'", str36, "SOUTH KOREA");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645456038046,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=18,MILLISECOND=46,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test19158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19158");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.DateTime dateTime13 = dateTime10.withYear(10);
        org.joda.time.DateTime dateTime15 = dateTime10.withWeekyear((int) (byte) 10);
        org.joda.time.DateTime.Property property16 = dateTime10.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int18 = dateTime10.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.property(dateTimeFieldType17);
        org.joda.time.LocalDateTime.Property property20 = localDateTime6.era();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusHours(0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.monthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test19159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19159");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        long long1 = instant0.getMillis();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        org.junit.Assert.assertNotNull(instant0);
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645456038078L + "'", long1 == 1645456038078L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test19160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19160");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime9.withWeekOfWeekyear((int) (short) 10);
        int int15 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.minus((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.plus(readableDuration23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int26 = dateTime24.get(dateTimeFieldType25);
        org.joda.time.DateTime dateTime27 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime24.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.centuryOfEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime38.toMutableDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime38.minus((long) '#');
        org.joda.time.DateTime dateTime44 = dateTime38.withDayOfWeek(4);
        org.joda.time.LocalDate localDate45 = dateTime38.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate47 = localDate45.plus(readablePeriod46);
        org.joda.time.LocalDate.Property property48 = localDate47.weekyear();
        org.joda.time.LocalDate localDate49 = property48.withMinimumValue();
        org.joda.time.LocalDate.Property property50 = localDate49.yearOfEra();
        long long52 = chronology32.set((org.joda.time.ReadablePartial) localDate49, (long) 11);
        org.joda.time.DateTime dateTime53 = dateTime17.toDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField54 = chronology32.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((-19047), 5416138, 292168092, 343900, chronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19047 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 37920000 + "'", int15 == 37920000);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 37920000 + "'", int26 == 37920000);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-9223372016611199989L) + "'", long52 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test19161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19161");
        java.util.Date date5 = new java.util.Date(37920000, 752, 37618825, 0, 5435390);
        date5.setMinutes(5483583);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Apr 07 14:03:00 GMT+10:32 38024980");
    }

    @Test
    public void test19162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19162");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(64);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.plus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime21.withWeekOfWeekyear((int) (short) 10);
        int int27 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.DateTime dateTime29 = dateTime12.withZoneRetainFields(dateTimeZone18);
        long long33 = dateTimeZone18.convertLocalToUTC((long) 889, false, 1645455706285L);
        long long35 = dateTimeZone6.getMillisKeepLocal(dateTimeZone18, (-62197664404358L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(1978, 5908680, 63, 532, 122, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 532 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37920000 + "'", int14 == 37920000);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37920000 + "'", int27 == 37920000);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-37919111L) + "'", long33 == (-37919111L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-62197471924358L) + "'", long35 == (-62197471924358L));
    }

    @Test
    public void test19163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19163");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType6.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.centuryOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime26.minus((long) '#');
        org.joda.time.DateTime dateTime32 = dateTime26.withDayOfWeek(4);
        org.joda.time.LocalDate localDate33 = dateTime26.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate35 = localDate33.plus(readablePeriod34);
        org.joda.time.LocalDate.Property property36 = localDate35.weekyear();
        org.joda.time.LocalDate localDate37 = property36.withMinimumValue();
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfEra();
        long long40 = chronology20.set((org.joda.time.ReadablePartial) localDate37, (long) 11);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField42 = chronology20.dayOfMonth();
        org.joda.time.DateTime dateTime43 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTime.Property property44 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime45 = property44.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37920000 + "'", int14 == 37920000);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-9223372016611199989L) + "'", long40 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test19164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19164");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime2.minusMillis(100);
        int int10 = dateTime9.getCenturyOfEra();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears(5808391);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test19165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19165");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime3.toMutableDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((long) '#');
        org.joda.time.DateTime dateTime9 = dateTime3.withDayOfWeek(4);
        org.joda.time.Chronology chronology10 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField13 = chronology10.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfMonth();
        long long16 = dateTimeField14.roundFloor((long) 10);
        boolean boolean18 = dateTimeField14.isLeap(272237400L);
        int int19 = dateTimeField14.getMaximumValue();
        long long21 = dateTimeField14.remainder((long) 25);
        int int23 = dateTimeField14.getLeapAmount((-253783862L));
        boolean boolean24 = dateTimeField14.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-37920000L) + "'", long16 == (-37920000L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 37920025L + "'", long21 == 37920025L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test19166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19166");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withField(dateTimeFieldType18, 5);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours(23);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withYear(37920000);
        int int29 = localDateTime28.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.plus(readableDuration37);
        org.joda.time.DateTime dateTime40 = dateTime35.withWeekOfWeekyear((int) (short) 10);
        int int41 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime40.minus((long) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 0, chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime49.plus(readableDuration51);
        org.joda.time.DateTime dateTime54 = dateTime49.withWeekOfWeekyear((int) (short) 10);
        int int55 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime57 = dateTime43.withZone(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone46);
        boolean boolean59 = dateTimeZone46.isFixed();
        org.joda.time.DateTime dateTime60 = localDateTime28.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 4871, dateTimeZone46);
        org.joda.time.DateTime.Property property62 = dateTime61.secondOfMinute();
        org.joda.time.DateTime.Property property63 = dateTime61.minuteOfDay();
        org.joda.time.DateTime dateTime64 = property63.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = dateTime64.withMillisOfSecond(457069);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457069 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 37920000 + "'", int41 == 37920000);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 37920000 + "'", int55 == 37920000);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test19167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19167");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        int int4 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime2.plusYears(6);
        org.joda.time.DateTime.Property property7 = dateTime2.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test19168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19168");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        int int20 = localDateTime16.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.minusSeconds(5509835);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withDurationAdded(readableDuration23, 24358224);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readableDuration26);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5958182 + "'", int20 == 5958182);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test19169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19169");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("South Korea");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1);
        java.lang.String str4 = timeZone1.getID();
        java.lang.String str5 = timeZone1.getID();
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder10 = builder6.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder14 = builder6.setDate(20, (int) 'u', 37920197);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.util.Calendar.Builder builder16 = builder14.setLocale(locale15);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder21 = builder17.setWeekDate(16, (-292275054), 8);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("South Korea");
        int int24 = timeZone23.getRawOffset();
        timeZone23.setRawOffset(10);
        java.lang.String str27 = timeZone23.getID();
        java.util.Calendar.Builder builder28 = builder21.setTimeZone(timeZone23);
        java.util.Calendar.Builder builder29 = builder14.setTimeZone(timeZone23);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfCentury();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime39 = dateTime35.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfMonth(2);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Calendar calendar43 = dateTime39.toCalendar(locale42);
        java.util.TimeZone timeZone44 = calendar43.getTimeZone();
        java.util.Calendar.Builder builder45 = builder29.setTimeZone(timeZone44);
        java.util.TimeZone.setDefault(timeZone44);
        boolean boolean47 = timeZone44.observesDaylightTime();
        boolean boolean48 = timeZone1.hasSameRules(timeZone44);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance();
        int int51 = calendar49.getMaximum(11);
        calendar49.setWeekDate((-1), 3, 4);
        calendar49.set(16, 37920000, (int) (byte) 1, (int) (byte) -1, 0, (-1));
        calendar49.set((int) 'u', 0, 0);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getTimeZone("South Korea");
        boolean boolean69 = timeZone68.observesDaylightTime();
        calendar49.setTimeZone(timeZone68);
        boolean boolean71 = timeZone44.hasSameRules(timeZone68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = timeZone68.getDisplayName(true, 15152);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 15152");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456038192,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=18,MILLISECOND=192,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GMT" + "'", str27, "GMT");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=117,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=0,DAY_OF_YEAR=15,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=1,HOUR_OF_DAY=-1,MINUTE=0,SECOND=-1,MILLISECOND=192,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 23 + "'", int51 == 23);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test19170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19170");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("ISOChronology[+10:32]");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("java.util.GregorianCalendar[time=1645493520100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"South Korea\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=32,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("Italian");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNull(dateTimeZone10);
    }

    @Test
    public void test19171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19171");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        int int18 = dateTime2.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long23 = dateTimeZone20.adjustOffset((long) 9, true);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2, dateTimeZone20);
        int int25 = localDateTime24.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusDays((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plus(readableDuration28);
        org.joda.time.Chronology chronology30 = localDateTime24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        org.joda.time.DurationField durationField32 = chronology30.hours();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = chronology30.add(readablePeriod33, (long) (-724734), 37920059);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(chronology30);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37920 + "'", int18 == 37920);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9L + "'", long23 == 9L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-724734L) + "'", long36 == (-724734L));
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test19172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19172");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime9.minus((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime9.withDayOfWeek(4);
        org.joda.time.LocalDate localDate16 = dateTime9.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate16.plus(readablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone20);
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.joda.time.LocalDate localDate23 = property22.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.plus(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int31 = dateTime29.get(dateTimeFieldType30);
        boolean boolean32 = localDate23.equals((java.lang.Object) dateTime29);
        org.joda.time.DateTime dateTime33 = localDate23.toDateTimeAtCurrentTime();
        int int34 = localDate18.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.Chronology chronology35 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.minuteOfHour();
        org.joda.time.Chronology chronology37 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(901, 5488539, 5783871, 7, 3955121, 53892482, 27, chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3955121 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 37920000 + "'", int31 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test19173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19173");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("ISOChronology[+10:32]");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet10 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet11 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet12 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone14 = provider0.getZone("2022-02-21T15:01:58.014Z");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(dateTimeZone14);
    }

    @Test
    public void test19174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19174");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) 8);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withZone(dateTimeZone6);
        boolean boolean11 = dateTimeFormatter10.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withOffsetParsed();
        java.io.Writer writer13 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = property18.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 44940);
        int int24 = dateTime20.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(writer13, (org.joda.time.ReadableInstant) dateTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test19175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19175");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime8);
        org.joda.time.DateTime dateTime24 = dateTime8.withHourOfDay((int) (short) 10);
        long long25 = dateTime8.getMillis();
        org.joda.time.DateTime.Property property26 = dateTime8.hourOfDay();
        org.joda.time.DateTime dateTime27 = property26.withMinimumValue();
        org.joda.time.DurationField durationField28 = property26.getDurationField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test19176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19176");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        java.util.Date date16 = new java.util.Date((long) (byte) -1);
        date16.setTime((long) ' ');
        date16.setYear((int) 'u');
        int int21 = date16.getMonth();
        boolean boolean22 = localDate13.equals((java.lang.Object) int21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.plus(readableDuration32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int35 = dateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDate27.equals((java.lang.Object) dateTime33);
        int int37 = localDate27.getWeekyear();
        boolean boolean38 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate40 = localDate27.withDayOfWeek(5483583);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5483583 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 01 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37920000 + "'", int35 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test19177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19177");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.Date date23 = new java.util.Date();
        long long24 = date23.getTime();
        long long25 = date23.getTime();
        int int26 = date23.getDay();
        int int27 = date23.getDate();
        calendar21.setTime(date23);
        boolean boolean29 = calendar21.isWeekDateSupported();
        calendar21.setLenient(true);
        boolean boolean32 = calendar21.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = calendar21.getActualMaximum(409);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 409");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645456038362,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=18,MILLISECOND=362,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:32");
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Feb 22 01:39:18 GMT+10:32 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645456038362L + "'", long24 == 1645456038362L);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645456038362L + "'", long25 == 1645456038362L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test19178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19178");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(4);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime12 = dateTime8.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfMonth(2);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime dateTime17 = dateTime14.plusHours(19);
        boolean boolean18 = localDateTime2.equals((java.lang.Object) dateTime14);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.withFieldAdded(durationFieldType19, 43);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfYear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test19179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19179");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        int int22 = localDateTime21.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(2);
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone24);
        java.lang.String str27 = dateTimeZone24.getNameKey((long) 6);
        java.lang.String str28 = dateTimeZone24.getID();
        long long31 = dateTimeZone24.convertLocalToUTC((long) 58, false);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.plus(readableDuration36);
        org.joda.time.DateTime dateTime39 = dateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime34.minusMillis(100);
        int int42 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime44 = dateTime41.plusHours(5897775);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.002" + "'", str28, "+00:00:00.002");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 56L + "'", long31 == 56L);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test19180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19180");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.millisOfSecond();
        int int23 = localDateTime16.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(34);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfCentury();
        int int29 = localDateTime27.getEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 18 + "'", int23 == 18);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test19181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19181");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone6);
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int17 = dateTime15.get(dateTimeFieldType16);
        boolean boolean18 = localDate9.equals((java.lang.Object) dateTime15);
        int int19 = localDate9.getWeekyear();
        org.joda.time.Chronology chronology20 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology20.getZone();
        long long24 = dateTimeZone21.adjustOffset(946646880000L, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology26 = dateTimeFormatter25.getChronolgy();
        boolean boolean27 = dateTimeFormatter25.isParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone32);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.Chronology chronology35 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.yearOfCentury();
        java.lang.String str37 = chronology34.toString();
        org.joda.time.Chronology chronology38 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.hourOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(104L, chronology34);
        org.joda.time.DurationField durationField41 = durationFieldType29.getField(chronology34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter25.withChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField43 = chronology34.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = dateTimeField43.set((long) 5869108, 37214189);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37214189 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37920000 + "'", int17 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 946646880000L + "'", long24 == 946646880000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test19182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19182");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.DateTime.Property property9 = dateTime2.year();
        org.joda.time.DateTime.Property property10 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime12 = property10.setCopy(5429188);
        org.joda.time.DateTime dateTime15 = dateTime12.withDurationAdded((long) (short) -1, 5427565);
        boolean boolean16 = dateTime15.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.era();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test19183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19183");
        java.util.Date date1 = new java.util.Date((long) (byte) -1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) date1, chronology2);
        long long4 = date1.getTime();
        java.lang.String str5 = date1.toLocaleString();
        java.util.Date date7 = new java.util.Date((long) (byte) -1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((java.lang.Object) date7, chronology8);
        long long10 = date7.getTime();
        java.util.Date date12 = new java.util.Date((long) (byte) -1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) date12, chronology13);
        date12.setSeconds(2);
        boolean boolean17 = date7.before(date12);
        boolean boolean18 = date1.after(date7);
        int int19 = date1.getMinutes();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 10:31:59 GMT+10:32 1970");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Jan 1, 1970 10:31:59 AM" + "'", str5, "Jan 1, 1970 10:31:59 AM");
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 10:31:59 GMT+10:32 1970");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 10:31:02 GMT+10:32 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
    }

    @Test
    public void test19184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19184");
        java.util.Date date6 = new java.util.Date(5555873, 5415578, 334583, 3909, 99, 42);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Aug 30 22:39:42 GMT+10:32 6009987");
    }

    @Test
    public void test19185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19185");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.minuteOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.clockhourOfHalfday();
        int int22 = dateTimeField20.getMinimumValue(35L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test19186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19186");
        java.util.Locale locale2 = new java.util.Locale("", "21 Feb 2022 14:59:47 GMT");
        java.lang.String str3 = locale2.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "_21 FEB 2022 14:59:47 GMT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "21 FEB 2022 14:59:47 GMT" + "'", str3, "21 FEB 2022 14:59:47 GMT");
    }

    @Test
    public void test19187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19187");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime2.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 11);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.parse("1970-01-01");
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.centuryOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime35.toMutableDateTime(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime35.minus((long) '#');
        org.joda.time.DateTime dateTime41 = dateTime35.withDayOfWeek(4);
        org.joda.time.LocalDate localDate42 = dateTime35.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate44 = localDate42.plus(readablePeriod43);
        org.joda.time.LocalDate.Property property45 = localDate44.weekyear();
        org.joda.time.LocalDate localDate46 = property45.withMinimumValue();
        org.joda.time.LocalDate.Property property47 = localDate46.yearOfEra();
        long long49 = chronology29.set((org.joda.time.ReadablePartial) localDate46, (long) 11);
        org.joda.time.DateTime dateTime50 = dateTime14.withChronology(chronology29);
        org.joda.time.DateTime.Property property51 = dateTime50.minuteOfHour();
        boolean boolean52 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property53 = dateTime50.yearOfCentury();
        org.joda.time.DateTime dateTime55 = property53.addToCopy(686);
        org.joda.time.DateTime dateTime57 = property53.addToCopy(658);
        org.joda.time.DateMidnight dateMidnight58 = dateTime57.toDateMidnight();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 37920000 + "'", int23 == 37920000);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-9223372016611199989L) + "'", long49 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight58);
    }

    @Test
    public void test19188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19188");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        calendar0.setWeekDate((-1), 3, 4);
        int int8 = calendar0.getLeastMaximum(3);
        long long9 = calendar0.getTimeInMillis();
        calendar0.set(1, 330);
        int int14 = calendar0.getMinimum(4);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=330,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=15,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=18,MILLISECOND=538,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-62197750361462L) + "'", long9 == (-62197750361462L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test19189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19189");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime1.property(dateTimeFieldType8);
        java.lang.String str11 = property10.getName();
        org.joda.time.DurationField durationField12 = property10.getRangeDurationField();
        org.joda.time.LocalTime localTime13 = property10.getLocalTime();
        org.joda.time.LocalTime localTime14 = property10.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property10.setCopy((int) 'x');
        int int17 = property10.get();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfDay" + "'", str11, "millisOfDay");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37920001 + "'", int17 == 37920001);
    }

    @Test
    public void test19190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19190");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMinimum(0);
        calendar0.setFirstDayOfWeek((int) (short) 0);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.setMinimalDaysInFirstWeek(44940);
        java.lang.String str8 = calendar0.getCalendarType();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        java.lang.String str10 = localTime9.toString();
        org.joda.time.LocalTime.Property property11 = localTime9.secondOfMinute();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456038553,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=44940,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=18,MILLISECOND=553,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "01:39:18.553" + "'", str10, "01:39:18.553");
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test19191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19191");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        int int22 = localDateTime21.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(11);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusHours(16864);
        int int29 = localDateTime28.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withMillisOfDay(1404);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 562 + "'", int29 == 562);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test19192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19192");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder8 = builder0.setDate(37920000, (-1), 37920);
        java.util.Calendar.Builder builder10 = builder8.setLenient(true);
        java.util.Calendar.Builder builder12 = builder8.setLenient(false);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder18 = builder12.setWeekDate(5510877, (int) (byte) 10, 1404);
        java.util.Calendar.Builder builder22 = builder12.setDate(965, (int) (byte) 1, 728);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar23 = builder22.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DAY_OF_MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test19193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19193");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        org.joda.time.DateTime.Property property22 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime24 = property22.addToCopy(1);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfCentury();
        org.joda.time.DateTime dateTime31 = property29.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime35 = dateTime31.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime31.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.plus(readableDuration42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int45 = dateTime43.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime46 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType37.getField(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyear();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime31.toMutableDateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.millisOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology51.dayOfWeek();
        org.joda.time.DurationField durationField58 = durationFieldType25.getField(chronology51);
        org.joda.time.DateTimeZone dateTimeZone59 = chronology51.getZone();
        org.joda.time.DateTime dateTime60 = dateTime24.withZone(dateTimeZone59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTime dateTime62 = dateTime24.plus(readableDuration61);
        int int63 = dateTime24.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 37920000 + "'", int45 == 37920000);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 32 + "'", int63 == 32);
    }

    @Test
    public void test19194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19194");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        calendar0.setWeekDate((-1), 3, 4);
        calendar0.set(16, 37920000, (int) (byte) 1, (int) (byte) -1, 0, (-1));
        calendar0.set((int) 'u', 0, 0);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("");
        java.lang.String str26 = locale25.getScript();
        java.lang.String str27 = locale22.getDisplayLanguage(locale25);
        java.util.Set<java.lang.String> strSet28 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, strMap30);
        java.lang.String[] strArray40 = new java.lang.String[] { "1970-01-01", "millisOfDay", "", "minuteOfDay", "South Korea", "1970-01-01", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("");
        java.lang.String str51 = locale50.getScript();
        java.lang.String str52 = locale47.getDisplayLanguage(locale50);
        java.util.Set<java.lang.String> strSet53 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strSet53);
        boolean boolean55 = strSet41.removeAll((java.util.Collection<java.lang.String>) strSet53);
        java.lang.String[] strArray59 = new java.lang.String[] { "1", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        boolean boolean62 = strSet60.isEmpty();
        boolean boolean63 = strSet53.retainAll((java.util.Collection<java.lang.String>) strSet60);
        java.lang.String str64 = java.util.Locale.lookupTag(languageRangeList31, (java.util.Collection<java.lang.String>) strSet53);
        boolean boolean65 = calendar0.before((java.lang.Object) languageRangeList31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList67, strMap68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList69, strMap70);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=117,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=0,DAY_OF_YEAR=15,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=1,HOUR_OF_DAY=-1,MINUTE=0,SECOND=-1,MILLISECOND=606,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(languageRangeList71);
    }

    @Test
    public void test19195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19195");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(43);
        org.joda.time.LocalDate.Property property16 = localDate13.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate13.withPeriodAdded(readablePeriod17, 48);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate13.minus(readablePeriod20);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra(5687961);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test19196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone15);
        org.joda.time.LocalDate.Property property17 = localDate16.weekOfWeekyear();
        org.joda.time.LocalDate localDate18 = property17.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime21.withDayOfWeek(4);
        org.joda.time.LocalDate localDate28 = dateTime21.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate28.plus(readablePeriod29);
        org.joda.time.LocalDate.Property property31 = localDate30.weekyear();
        org.joda.time.LocalDate localDate32 = localDate18.withFields((org.joda.time.ReadablePartial) localDate30);
        int int33 = localDate13.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate.Property property34 = localDate13.weekyear();
        org.joda.time.LocalDate localDate35 = property34.roundHalfCeilingCopy();
        int int36 = localDate35.getCenturyOfEra();
        org.joda.time.LocalDate.Property property37 = localDate35.monthOfYear();
        org.joda.time.LocalDate localDate38 = property37.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test19197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19197");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.withWeekOfWeekyear((int) (short) 10);
        int int12 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(99L, dateTimeZone3);
        long long16 = dateTimeZone3.previousTransition(60000L);
        boolean boolean18 = dateTimeZone3.isStandardOffset(1645455671222L);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(5458218);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) boolean18, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920000 + "'", int12 == 37920000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 60000L + "'", long16 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test19198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19198");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.halfdayOfDay();
        org.joda.time.DurationField durationField18 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.minuteOfHour();
        org.joda.time.DurationField durationField20 = chronology14.hours();
        org.joda.time.Chronology chronology21 = chronology14.withUTC();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test19199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19199");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        int int24 = property22.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField26 = property22.getField();
        org.joda.time.LocalDateTime localDateTime27 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours((-292275054));
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusHours(5436181);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readableDuration46);
        org.joda.time.DateTime dateTime49 = dateTime44.withWeekOfWeekyear((int) (short) 10);
        int int50 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(9, 12, 23, 4, 5, 14, 23, dateTimeZone41);
        boolean boolean52 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone41);
        int int55 = dateTimeZone41.getOffset(32L);
        org.joda.time.DateTime dateTime56 = localDateTime27.toDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime.Property property57 = localDateTime27.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 37920000 + "'", int50 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 37920000 + "'", int55 == 37920000);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test19200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19200");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType2.getField(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.year();
        org.joda.time.DurationField durationField21 = durationFieldType0.getField(chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.halfdayOfDay();
        long long24 = dateTimeField22.roundHalfFloor((long) 3949);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField22.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField22.getType();
        int int29 = dateTimeField22.getDifference(1645455916384L, (long) 1999);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eras" + "'", str1, "eras");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 37920000 + "'", int10 == 37920000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5280000L + "'", long24 == 5280000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 38089 + "'", int29 == 38089);
    }

    @Test
    public void test19201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19201");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withDefaultYear((-632));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(2922789);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 377708);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withDefaultYear(95);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withOffsetParsed();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test19202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19202");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        int int12 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime10);
        org.joda.time.LocalTime localTime14 = localTime10.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property15 = localTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime19.toMutableDateTime(chronology20);
        int int22 = mutableDateTime21.getDayOfWeek();
        org.joda.time.Chronology chronology23 = mutableDateTime21.getChronology();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime5.toMutableDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology23.add(readablePeriod26, (long) 37920, 631);
        org.joda.time.DurationField durationField30 = chronology23.minutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property36 = localTime35.secondOfMinute();
        int int37 = dateTimeField33.getMinimumValue((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.LocalTime.Property property38 = localTime35.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime35.minus(readablePeriod39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property46 = localTime45.secondOfMinute();
        int int47 = dateTimeField43.getMinimumValue((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.LocalTime.Property property48 = localTime45.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalTime localTime50 = localTime45.minus(readablePeriod49);
        int int51 = localTime40.compareTo((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.LocalTime.Property property52 = localTime40.secondOfMinute();
        int[] intArray54 = chronology23.get((org.joda.time.ReadablePartial) localTime40, 35L);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalTime localTime57 = localTime40.withPeriodAdded(readablePeriod55, 517);
        org.joda.time.LocalTime.Property property58 = localTime40.minuteOfHour();
        java.lang.String str59 = property58.getAsShortText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 37920L + "'", long29 == 37920L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 32, 0, 35]");
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "32" + "'", str59, "32");
    }

    @Test
    public void test19203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19203");
        java.util.Date date0 = new java.util.Date();
        long long1 = date0.getTime();
        long long2 = date0.getTime();
        int int3 = date0.getDay();
        int int4 = date0.getMinutes();
        java.util.Date date6 = new java.util.Date((long) (short) 100);
        java.lang.String str7 = date6.toLocaleString();
        long long8 = date6.getTime();
        boolean boolean9 = date0.before(date6);
        int int10 = date6.getDate();
        java.util.Date date16 = new java.util.Date(14, 23, 5, (int) (short) 0, 32);
        boolean boolean17 = date6.before(date16);
        int int18 = date16.getMonth();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 22 01:39:18 GMT+10:32 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645456038728L + "'", long1 == 1645456038728L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645456038728L + "'", long2 == 1645456038728L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 39 + "'", int4 == 39);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 10:32:00 GMT+10:32 1970");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Jan 1, 1970 10:32:00 AM" + "'", str7, "Jan 1, 1970 10:32:00 AM");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Dec 05 00:32:00 GMT+10:32 1915");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
    }

    @Test
    public void test19204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19204");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property4.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) 37920000, dateTimeZone8);
        long long11 = dateTimeZone8.convertUTCToLocal(2L);
        int int13 = dateTimeZone8.getOffset(1645455512921L);
        org.joda.time.DateTime dateTime14 = dateTime5.withZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(60364805820000L, dateTimeZone8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime21.withTimeAtStartOfDay();
        boolean boolean25 = dateTimeZone8.equals((java.lang.Object) dateTime21);
        long long27 = dateTimeZone8.nextTransition(117L);
        java.lang.String str28 = dateTimeZone8.getID();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 102L + "'", long11 == 102L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 37920000 + "'", int23 == 37920000);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 117L + "'", long27 == 117L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.100" + "'", str28, "+00:00:00.100");
    }

    @Test
    public void test19205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19205");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime5.toDateTime(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset((long) 9);
        long long16 = dateTimeZone11.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime19.toMutableDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime19.minus((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.withCenturyOfEra(1);
        int int29 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfCentury();
        org.joda.time.DateTime dateTime36 = property34.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime37 = property34.roundFloorCopy();
        org.joda.time.DateTime dateTime39 = property34.addWrapFieldToCopy(17);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMillis(36);
        org.joda.time.DateMidnight dateMidnight42 = dateTime39.toDateMidnight();
        boolean boolean43 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateTime.Property property44 = dateTime30.secondOfMinute();
        int int45 = dateTime30.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37920000 + "'", int7 == 37920000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37920000 + "'", int14 == 37920000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 37920100L + "'", long16 == 37920100L);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 37920000 + "'", int29 == 37920000);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
    }

    @Test
    public void test19206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19206");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime9 = dateTime2.withMonthOfYear((int) (byte) 1);
        int int10 = dateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime14.toMutableDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime14.minus((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime14.withDayOfWeek(4);
        org.joda.time.Chronology chronology21 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType11.getField(chronology21);
        int int23 = dateTime2.get(dateTimeField22);
        org.joda.time.DateTime dateTime25 = dateTime2.minusYears(51);
        org.joda.time.DateTime dateTime27 = dateTime2.plusMillis(67);
        org.joda.time.DateTime.Property property28 = dateTime2.year();
        org.joda.time.DateTime.Property property29 = dateTime2.era();
        org.joda.time.DateTime.Property property30 = dateTime2.dayOfWeek();
        org.joda.time.DateTime dateTime31 = property30.withMaximumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test19207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19207");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.clockhourOfDay();
        int int18 = dateTimeField17.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property24 = localTime23.secondOfMinute();
        int int25 = dateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.LocalTime localTime27 = localTime23.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property28 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime30 = property28.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime31 = property28.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.plus(readableDuration36);
        org.joda.time.DateTime dateTime39 = dateTime34.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime34.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime43 = dateTime34.minus(readablePeriod42);
        long long44 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime43);
        java.lang.String str45 = property28.getAsShortText();
        org.joda.time.LocalTime localTime46 = property28.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property52 = localTime51.secondOfMinute();
        int int53 = dateTimeField49.getMinimumValue((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.LocalTime localTime55 = localTime51.plusMinutes((int) (short) 10);
        org.joda.time.DateTimeField dateTimeField57 = localTime51.getField((int) (short) 0);
        int int59 = dateTimeField57.getMinimumValue((long) 9);
        org.joda.time.ReadablePartial readablePartial60 = null;
        int[] intArray66 = new int[] { 32770, 9, 23, (byte) 10, 16 };
        int int67 = dateTimeField57.getMinimumValue(readablePartial60, intArray66);
        int int68 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localTime46, intArray66);
        java.util.Locale locale69 = null;
        int int70 = dateTimeField17.getMaximumShortTextLength(locale69);
        boolean boolean71 = dateTimeField17.isLenient();
        int int73 = dateTimeField17.get(1645455498785L);
        long long76 = dateTimeField17.getDifferenceAsLong((long) 5483583, (long) 5521327);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 24 + "'", int18 == 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 632L + "'", long44 == 632L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "32" + "'", str45, "32");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32770, 9, 23, 10, 16]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test19208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19208");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T01:05:04.253");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test19209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19209");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        int int4 = localDate2.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField6 = localDate2.getField(0);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType8.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.centuryOfEra();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime28.minus((long) '#');
        org.joda.time.DateTime dateTime34 = dateTime28.withDayOfWeek(4);
        org.joda.time.LocalDate localDate35 = dateTime28.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate37 = localDate35.plus(readablePeriod36);
        org.joda.time.LocalDate.Property property38 = localDate37.weekyear();
        org.joda.time.LocalDate localDate39 = property38.withMinimumValue();
        org.joda.time.LocalDate.Property property40 = localDate39.yearOfEra();
        long long42 = chronology22.set((org.joda.time.ReadablePartial) localDate39, (long) 11);
        org.joda.time.DurationField durationField43 = chronology22.months();
        org.joda.time.DateTimeField dateTimeField44 = chronology22.year();
        java.lang.String str45 = chronology22.toString();
        org.joda.time.DurationField durationField46 = chronology22.days();
        org.joda.time.DateTime dateTime47 = dateTime7.withChronology(chronology22);
        java.lang.String str48 = dateTime47.toString();
        int int49 = dateTime47.getWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 37920000 + "'", int16 == 37920000);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-9223372016611199989L) + "'", long42 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[+10:32]" + "'", str45, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T01:39:18.808+10:32" + "'", str48, "1970-01-01T01:39:18.808+10:32");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
    }

    @Test
    public void test19210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19210");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        int int6 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.LocalTime localTime8 = localTime4.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property9.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime15.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime15.minus(readablePeriod23);
        long long25 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DurationField durationField26 = property9.getLeapDurationField();
        org.joda.time.LocalTime localTime27 = property9.getLocalTime();
        org.joda.time.LocalTime localTime28 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime29 = property9.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime31 = property9.setCopy("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?????\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 632L + "'", long25 == 632L);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test19211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime9.plus(1645455512187L);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(29);
        org.joda.time.DateTime.Property property16 = dateTime13.millisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test19212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19212");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(10);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate13.withPeriodAdded(readablePeriod16, (-9));
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology19.getDateTimeMillis(19236, 0, 0, 920, 37407073, 321937, 40440005);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 920 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test19213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19213");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        int int4 = localDate2.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField6 = localDate2.getField(0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(288925455587091L);
        boolean boolean9 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test19214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19214");
        java.lang.StringBuffer stringBuffer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.FormatUtils.appendPaddedInteger(stringBuffer0, 38, 488);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19215");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime1.property(dateTimeFieldType8);
        java.lang.String str11 = property10.getName();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = property10.getAsShortText(locale12);
        org.joda.time.LocalTime localTime14 = property10.getLocalTime();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        int int17 = calendar15.getMaximum(11);
        java.lang.Object obj18 = null;
        boolean boolean19 = calendar15.before(obj18);
        java.lang.String str20 = calendar15.getCalendarType();
        int int22 = calendar15.getGreatestMinimum(0);
        calendar15.set(365, 0, 0, 1970, (int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfCentury();
        org.joda.time.DateTime dateTime34 = property32.addWrapFieldToCopy((int) (byte) -1);
        boolean boolean35 = calendar15.after((java.lang.Object) property32);
        int int36 = property32.get();
        org.joda.time.DateTime dateTime37 = property32.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property32.getFieldType();
        int int39 = localTime14.indexOf(dateTimeFieldType38);
        int int40 = localTime14.getHourOfDay();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfDay" + "'", str11, "millisOfDay");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "37920001" + "'", str13, "37920001");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=365,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1970,MINUTE=10,SECOND=18,MILLISECOND=880,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 70 + "'", int36 == 70);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test19216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19216");
        java.util.Date date1 = new java.util.Date((long) (byte) -1);
        date1.setTime((long) ' ');
        date1.setYear((int) 'u');
        int int6 = date1.getTimezoneOffset();
        int int7 = date1.getMonth();
        int int8 = date1.getSeconds();
        date1.setDate(99);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromDateFields(date1);
        org.junit.Assert.assertEquals(date1.toString(), "Sun Apr 09 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-632) + "'", int6 == (-632));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test19217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19217");
        java.util.Date date1 = new java.util.Date((long) (byte) -1);
        date1.setTime((long) ' ');
        date1.setYear((int) 'u');
        int int6 = date1.getTimezoneOffset();
        java.util.Date date8 = new java.util.Date((long) (byte) -1);
        date8.setTime((long) ' ');
        java.util.Date date12 = new java.util.Date((long) (byte) -1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) date12, chronology13);
        date12.setMonth((int) (byte) -1);
        boolean boolean17 = date8.after(date12);
        boolean boolean18 = date1.after(date12);
        java.util.Date date20 = new java.util.Date((long) (byte) -1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) date20, chronology21);
        date20.setMonth((int) (byte) -1);
        date20.setHours(1);
        boolean boolean27 = date12.after(date20);
        java.time.Instant instant28 = date12.toInstant();
        java.util.Date date34 = new java.util.Date(37920000, 50, 778, 152, 34);
        java.lang.String str35 = date34.toLocaleString();
        int int36 = date34.getYear();
        java.time.Instant instant37 = date34.toInstant();
        java.util.Date date38 = java.util.Date.from(instant37);
        boolean boolean39 = date12.before(date38);
        org.junit.Assert.assertEquals(date1.toString(), "Sun Jan 01 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-632) + "'", int6 == (-632));
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 10:32:00 GMT+10:32 1970");
        org.junit.Assert.assertEquals(date12.toString(), "Mon Dec 01 10:31:59 GMT+10:32 1969");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(date20.toString(), "Mon Dec 01 01:31:59 GMT+10:32 1969");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertEquals(date34.toString(), "Mon Apr 23 08:34:00 GMT+10:32 37921906");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Apr 23, 37921906 8:34:00 AM" + "'", str35, "Apr 23, 37921906 8:34:00 AM");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 37920006 + "'", int36 == 37920006);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Apr 23 08:34:00 GMT+10:32 37921906");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test19218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19218");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale5);
        boolean boolean9 = dateTimeFormatter2.isOffsetParsed();
        java.lang.Integer int10 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear(37376026);
        int int13 = dateTimeFormatter12.getDefaultYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        int int17 = dateTime16.getSecondOfMinute();
        org.joda.time.DateTime dateTime19 = dateTime16.withYear(10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime22.toMutableDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((long) '#');
        org.joda.time.DateTime dateTime28 = dateTime22.withDayOfWeek(4);
        boolean boolean30 = dateTime22.equals((java.lang.Object) "eras");
        boolean boolean31 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime22);
        int int32 = dateTime16.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long37 = dateTimeZone34.adjustOffset((long) 9, true);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime16, dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.plus(readableDuration44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int47 = dateTime45.get(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime52 = dateTime45.toDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType39.getField(chronology53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withField(dateTimeFieldType56, 5);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusHours(23);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.dayOfYear();
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime();
        boolean boolean65 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) 0, chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime68.toMutableDateTime(chronology69);
        int int71 = mutableDateTime70.getDayOfWeek();
        org.joda.time.Chronology chronology72 = mutableDateTime70.getChronology();
        int int73 = dateTime16.compareTo((org.joda.time.ReadableInstant) mutableDateTime70);
        int int74 = mutableDateTime70.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int77 = dateTimeFormatter12.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime70, "16003922", 5472308);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 37376026 + "'", int13 == 37376026);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 37920 + "'", int32 == 37920);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 9L + "'", long37 == 9L);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 37920000 + "'", int47 == 37920000);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test19219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19219");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("days");
        java.util.Locale locale6 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = builder8.build();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.LocalTime.Property property21 = localTime12.property(dateTimeFieldType19);
        java.lang.String str22 = property21.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        boolean boolean28 = dateTimeField26.isLeap((long) 9);
        boolean boolean29 = dateTimeField26.isSupported();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getDisplayScript();
        int int32 = dateTimeField26.getMaximumShortTextLength(locale30);
        org.joda.time.LocalTime localTime33 = property21.setCopy("53", locale30);
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale34.getDisplayCountry();
        java.lang.String str37 = locale30.getDisplayScript(locale34);
        java.util.Locale.Builder builder38 = builder8.setLocale(locale30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder38.removeUnicodeLocaleAttribute("2022-2-21 16:33:46");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-2-21 16:33:46 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 37920000 + "'", int20 == 37920000);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millisOfDay" + "'", str22, "millisOfDay");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Taiwan" + "'", str36, "Taiwan");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test19220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19220");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfWeek();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = property25.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test19221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19221");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5419344, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test19222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19222");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime9 = property7.addWrapFieldToCopy(12);
        org.joda.time.DateTime dateTime10 = property7.roundFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = property11.addWrapFieldToCopy(18);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withPeriodAdded(readablePeriod14, 5645036);
        org.joda.time.DateTime.Property property17 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime19 = dateTime16.minusYears(633);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test19223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        org.joda.time.LocalDate localDate15 = property12.addToCopy(32);
        org.joda.time.LocalDate localDate16 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate17 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusSeconds(2070);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test19224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19224");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        int int24 = property22.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField26 = property22.getField();
        org.joda.time.LocalDateTime localDateTime27 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours((-292275054));
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.plusMinutes(2068);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths(9);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test19225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19225");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(43);
        org.joda.time.LocalDate.Property property16 = localDate13.yearOfEra();
        org.joda.time.LocalDate.Property property17 = localDate13.yearOfEra();
        org.joda.time.DurationField durationField18 = property17.getRangeDurationField();
        int int19 = property17.getMinimumValue();
        org.joda.time.LocalDate localDate20 = property17.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test19226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19226");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.setCopy(31);
        org.joda.time.LocalTime localTime6 = property2.addWrapFieldToCopy(37920000);
        boolean boolean7 = property2.isLeap();
        org.joda.time.LocalTime localTime8 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = property2.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test19227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19227");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfMonth(2);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Calendar calendar13 = dateTime9.toCalendar(locale12);
        org.joda.time.LocalDateTime localDateTime14 = dateTime9.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundCeilingCopy();
        java.lang.String str21 = localDateTime19.toString("01:39:09.565");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "01:39:09.565" + "'", str21, "01:39:09.565");
    }

    @Test
    public void test19228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19228");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime12 = dateTime8.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.plus(readableDuration19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime27 = dateTime20.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType14.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime8.toMutableDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.dayOfWeek();
        org.joda.time.DurationField durationField35 = chronology28.eras();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone38);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField41.getType();
        java.util.Locale locale44 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str45 = dateTimeField41.getAsText(86399999, locale44);
        java.lang.String str46 = locale44.getDisplayCountry();
        int int47 = dateTimeField36.getMaximumTextLength(locale44);
        java.util.Locale.Builder builder48 = builder0.setLocale(locale44);
        java.util.Locale.Builder builder49 = builder0.clearExtensions();
        java.util.Locale locale50 = builder0.build();
        java.util.Locale.Builder builder51 = builder0.clearExtensions();
        java.util.Locale locale52 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder54 = builder0.setScript("2022-02-22T00:05:54.688");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-22T00:05:54.688 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37920000 + "'", int22 == 37920000);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "86399999" + "'", str45, "86399999");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Canada" + "'", str46, "Canada");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
    }

    @Test
    public void test19229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19229");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale5);
        java.util.Locale locale9 = dateTimeFormatter8.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withOffsetParsed();
        java.lang.Appendable appendable11 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime dateTime21 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType12.getField(chronology26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withField(dateTimeFieldType29, 5);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours(23);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.yearOfEra();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.plusDays(86399999);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withDayOfWeek(1);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readableDuration42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.monthOfYear();
        int int45 = localDateTime41.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable11, (org.joda.time.ReadablePartial) localDateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 37920000 + "'", int20 == 37920000);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test19230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19230");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime5.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.seconds();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime17.minus((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime17.withDayOfWeek(4);
        org.joda.time.LocalDate localDate24 = dateTime17.toLocalDate();
        boolean boolean26 = localDate24.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone30);
        org.joda.time.LocalDate.Property property32 = localDate31.weekOfWeekyear();
        org.joda.time.LocalDate localDate33 = property32.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime36.toMutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime36.withDayOfWeek(4);
        org.joda.time.LocalDate localDate43 = dateTime36.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate45 = localDate43.plus(readablePeriod44);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate47 = localDate33.withFields((org.joda.time.ReadablePartial) localDate45);
        int int48 = localDate28.compareTo((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate50 = localDate28.minusWeeks(19);
        long long52 = chronology13.set((org.joda.time.ReadablePartial) localDate28, 32L);
        org.joda.time.Interval interval53 = localDate28.toInterval();
        org.joda.time.LocalDate localDate55 = localDate28.minusWeeks((int) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime58.plus(readableDuration60);
        org.joda.time.DateTime dateTime63 = dateTime58.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime65 = dateTime58.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.DateTime dateTime67 = dateTime58.minus(readablePeriod66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 0, chronology69);
        org.joda.time.DateTime.Property property71 = dateTime70.yearOfCentury();
        org.joda.time.DateTime.Property property72 = dateTime70.yearOfCentury();
        org.joda.time.DateTime dateTime73 = property72.roundFloorCopy();
        boolean boolean74 = dateTime67.isBefore((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 0, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime77.toMutableDateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime77.minus((long) '#');
        org.joda.time.DateTime dateTime83 = dateTime77.withDayOfWeek(4);
        org.joda.time.DateTime.Property property84 = dateTime77.weekyear();
        org.joda.time.DateTime dateTime86 = dateTime77.withYear((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int88 = dateTime86.get(dateTimeFieldType87);
        boolean boolean89 = dateTime73.isSupported(dateTimeFieldType87);
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int93 = dateTimeZone91.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime94 = dateTime73.withZoneRetainFields(dateTimeZone91);
        org.joda.time.DateTime dateTime95 = localDate28.toDateTimeAtCurrentTime(dateTimeZone91);
        org.joda.time.LocalDate.Property property96 = localDate28.dayOfMonth();
        org.joda.time.LocalDate localDate97 = property96.roundFloorCopy();
        org.joda.time.DateTime dateTime98 = localDate97.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37920000 + "'", int7 == 37920000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 32L + "'", long52 == 32L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(localDate97);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test19231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19231");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale2 = locale0.stripExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType3.getField(chronology4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.lang.String str10 = dateTimeField5.getAsShortText(readablePartial6, (int) (byte) 1, locale9);
        java.util.Locale locale14 = new java.util.Locale("Greenwich Mean Time", "ISOChronology[+10:32]", "en_CA");
        java.lang.String str15 = locale9.getDisplayLanguage(locale14);
        java.lang.String str16 = locale0.getDisplayCountry(locale14);
        java.lang.String str17 = locale14.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "South Korea" + "'", str1, "South Korea");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals(locale14.toString(), "greenwich mean time_ISOCHRONOLOGY[+10:32]_en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "South Korea" + "'", str16, "South Korea");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "greenwich mean time" + "'", str17, "greenwich mean time");
    }

    @Test
    public void test19232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19232");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone15);
        org.joda.time.LocalDate.Property property17 = localDate16.weekOfWeekyear();
        org.joda.time.LocalDate localDate18 = property17.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime21.withDayOfWeek(4);
        org.joda.time.LocalDate localDate28 = dateTime21.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate28.plus(readablePeriod29);
        org.joda.time.LocalDate.Property property31 = localDate30.weekyear();
        org.joda.time.LocalDate localDate32 = localDate18.withFields((org.joda.time.ReadablePartial) localDate30);
        int int33 = localDate13.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate localDate35 = localDate13.minusWeeks(19);
        org.joda.time.LocalDate.Property property36 = localDate13.era();
        org.joda.time.LocalDate localDate37 = property36.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate39 = localDate37.plus(readablePeriod38);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test19233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19233");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.millisOfSecond();
        int int23 = localDateTime16.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withYear((int) (short) -1);
        int int26 = localDateTime25.getHourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime25.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusMinutes(49197);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test19234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19234");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 3919);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMinuteOfHour((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withEra(7200177);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7200177 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test19235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19235");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(dateTimeZone9);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime13 = localTime10.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime19.withWeekOfWeekyear((int) (short) 10);
        int int25 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) localTime12, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTime dateTime29 = localTime26.toDateTimeToday(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal((long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withZone(dateTimeZone28);
        java.util.Locale locale33 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter34.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter34.withPivotYear(5536167);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withDefaultYear(0);
        org.joda.time.Chronology chronology40 = dateTimeFormatter39.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = dateTimeFormatter39.parseLocalDateTime("en_ca");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37920000 + "'", int25 == 37920000);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test19236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19236");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        java.lang.Object obj3 = null;
        boolean boolean4 = calendar0.before(obj3);
        java.lang.String str5 = calendar0.getCalendarType();
        int int7 = calendar0.getGreatestMinimum(0);
        java.util.Date date9 = new java.util.Date((long) (byte) -1);
        int int10 = date9.getDate();
        boolean boolean11 = calendar0.after((java.lang.Object) int10);
        java.time.Instant instant12 = calendar0.toInstant();
        int int13 = calendar0.getWeeksInWeekYear();
        int int14 = calendar0.getMinimalDaysInFirstWeek();
        java.time.Instant instant15 = calendar0.toInstant();
        int int16 = calendar0.getWeeksInWeekYear();
        java.util.Date date18 = new java.util.Date((long) (byte) -1);
        java.util.Date date20 = new java.util.Date((long) (byte) -1);
        date20.setTime((long) ' ');
        boolean boolean23 = date18.after(date20);
        date20.setMinutes(2022);
        date20.setDate(5415578);
        calendar0.setTime(date20);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear(5472202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=467905972200032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=16797,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=128,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=42,SECOND=0,MILLISECOND=32,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gregory" + "'", str5, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 10:31:59 GMT+10:32 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 10:31:59 GMT+10:32 1970");
        org.junit.Assert.assertEquals(date20.toString(), "Thu May 08 19:42:00 GMT+10:32 16797");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test19237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19237");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        int int6 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.LocalTime localTime8 = localTime4.plusMillis((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime10 = localTime8.minus(readablePeriod9);
        org.joda.time.LocalTime localTime12 = localTime8.withMillisOfDay(5782138);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test19238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        java.util.Date date16 = new java.util.Date((long) (byte) -1);
        date16.setTime((long) ' ');
        date16.setYear((int) 'u');
        int int21 = date16.getMonth();
        boolean boolean22 = localDate13.equals((java.lang.Object) int21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.plus(readableDuration32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int35 = dateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDate27.equals((java.lang.Object) dateTime33);
        int int37 = localDate27.getWeekyear();
        boolean boolean38 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate27);
        int int39 = localDate27.getMonthOfYear();
        org.joda.time.LocalDate localDate41 = localDate27.minusYears(155);
        org.joda.time.LocalDate localDate43 = localDate41.plusDays((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate45 = localDate41.withEra(37240617);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37240617 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 01 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37920000 + "'", int35 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 12 + "'", int39 == 12);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test19239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19239");
        java.lang.StringBuffer stringBuffer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.FormatUtils.appendUnpaddedInteger(stringBuffer0, 5666733);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19240");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.plus(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localDate4.equals((java.lang.Object) dateTime10);
        int int14 = localDate4.getWeekyear();
        org.joda.time.Chronology chronology15 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField19 = chronology15.millis();
        org.joda.time.DurationField durationField20 = chronology15.hours();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920000 + "'", int12 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test19241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19241");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime9 = localTime6.withFields((org.joda.time.ReadablePartial) localTime8);
        int int10 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime3.minus(readablePeriod11);
        org.joda.time.LocalTime localTime14 = localTime12.minusSeconds(7);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime17 = localTime14.withPeriodAdded(readablePeriod15, 5416138);
        org.joda.time.LocalTime.Property property18 = localTime14.millisOfDay();
        org.joda.time.LocalTime localTime19 = property18.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime20 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test19242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19242");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime9 = localTime6.withFields((org.joda.time.ReadablePartial) localTime8);
        int int10 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime6);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = localTime3.toString("1", locale12);
        int int14 = localTime3.size();
        int int15 = localTime3.getHourOfDay();
        org.joda.time.LocalTime localTime17 = localTime3.plusMillis(100);
        org.joda.time.LocalTime localTime19 = localTime17.minusMillis(43920097);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime24 = localTime21.withFields((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(dateTimeZone25);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime29 = localTime26.withFields((org.joda.time.ReadablePartial) localTime28);
        int int30 = localTime23.compareTo((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime32 = localTime23.minus(readablePeriod31);
        org.joda.time.LocalTime localTime34 = localTime32.minusSeconds(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType35.getDurationType();
        boolean boolean38 = localTime32.isSupported(durationFieldType37);
        java.lang.String str39 = durationFieldType37.getName();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 0, chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime42.toMutableDateTime(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime42.minus((long) '#');
        org.joda.time.DateTime.Property property47 = dateTime42.minuteOfHour();
        org.joda.time.DateTime dateTime48 = property47.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime48.withZoneRetainFields(dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime48.minus(readableDuration53);
        org.joda.time.Chronology chronology55 = dateTime48.getChronology();
        int int56 = dateTime48.getDayOfWeek();
        org.joda.time.Chronology chronology57 = dateTime48.getChronology();
        org.joda.time.DurationField durationField58 = durationFieldType37.getField(chronology57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime60 = localTime17.withFieldAdded(durationFieldType37, 5908680);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'days' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "days" + "'", str39, "days");
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test19243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19243");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        java.lang.Integer int6 = dateTimeFormatter5.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.parse("\u4e0a\u5348", dateTimeFormatter5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test19244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19244");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.millisOfDay();
        org.joda.time.DateTime dateTime27 = localDateTime21.toDateTime();
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.millisOfDay();
        org.joda.time.Chronology chronology29 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime21.year();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.plus(readableDuration37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int40 = dateTime38.get(dateTimeFieldType39);
        org.joda.time.DateTime dateTime41 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType32.getField(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.weekyear();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.halfdayOfDay();
        org.joda.time.DurationField durationField50 = chronology46.hours();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.minuteOfHour();
        org.joda.time.DurationField durationField52 = durationFieldType31.getField(chronology46);
        boolean boolean53 = localDateTime21.isSupported(durationFieldType31);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime21.minusMillis(32);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime21.minusYears(5415578);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime21.withCenturyOfEra(2024);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusMillis(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 37920000 + "'", int40 == 37920000);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test19245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19245");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("millisofsecond_11:14:00.005");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19246");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        java.lang.Object obj3 = null;
        boolean boolean4 = calendar0.before(obj3);
        java.lang.String str5 = calendar0.getCalendarType();
        int int7 = calendar0.getGreatestMinimum(0);
        java.util.Date date9 = new java.util.Date((long) (byte) -1);
        int int10 = date9.getDate();
        boolean boolean11 = calendar0.after((java.lang.Object) int10);
        java.time.Instant instant12 = calendar0.toInstant();
        int int13 = calendar0.getWeeksInWeekYear();
        int int14 = calendar0.getMinimalDaysInFirstWeek();
        java.time.Instant instant15 = calendar0.toInstant();
        boolean boolean16 = calendar0.isWeekDateSupported();
        boolean boolean17 = calendar0.isWeekDateSupported();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456039514,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=19,MILLISECOND=514,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gregory" + "'", str5, "gregory");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 10:31:59 GMT+10:32 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test19247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19247");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime3.toMutableDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((long) '#');
        org.joda.time.DateTime dateTime9 = dateTime3.withDayOfWeek(4);
        org.joda.time.Chronology chronology10 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField13 = chronology10.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfMonth();
        boolean boolean15 = dateTimeField14.isLenient();
        long long17 = dateTimeField14.roundCeiling(1645363680000L);
        long long19 = dateTimeField14.roundHalfFloor((long) 632);
        long long21 = dateTimeField14.remainder((long) 540);
        java.lang.String str23 = dateTimeField14.getAsText(1645455722553L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645363680000L + "'", long17 == 1645363680000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-37920000L) + "'", long19 == (-37920000L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 37920540L + "'", long21 == 37920540L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "22" + "'", str23, "22");
    }

    @Test
    public void test19248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19248");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.plusMinutes((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime9 = localTime6.withFields((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime14 = localTime11.withFields((org.joda.time.ReadablePartial) localTime13);
        int int15 = localTime8.compareTo((org.joda.time.ReadablePartial) localTime11);
        boolean boolean16 = localTime1.isAfter((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.LocalTime.Property property17 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime18 = property17.getLocalTime();
        org.joda.time.LocalTime localTime20 = property17.addCopy((-62197750361462L));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test19249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19249");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfHour();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.plus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime10.withWeekOfWeekyear((int) (short) 10);
        long long16 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime18 = dateTime10.plusMinutes(197);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekyear(952);
        org.joda.time.DateTime.Property property21 = dateTime18.minuteOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test19250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19250");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime5.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime5.toYearMonthDay();
        int int12 = dateTime5.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime18.withWeekOfWeekyear((int) (short) 10);
        int int24 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.minus((long) 100);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readableDuration27);
        org.joda.time.DateTime dateTime30 = dateTime26.minusHours(1970);
        int int31 = dateTime30.getMonthOfYear();
        org.joda.time.DateTime dateTime33 = dateTime30.plusDays(678);
        org.joda.time.DateTime.Property property34 = dateTime30.centuryOfEra();
        org.joda.time.DateTime dateTime35 = property34.roundHalfFloorCopy();
        boolean boolean36 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37920000 + "'", int24 == 37920000);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test19251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19251");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime3.toMutableDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((long) '#');
        org.joda.time.DateTime dateTime9 = dateTime3.withDayOfWeek(4);
        org.joda.time.Chronology chronology10 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfDay();
        org.joda.time.DurationField durationField13 = chronology10.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology10.add(readablePeriod15, 2054L, 5420956);
        org.joda.time.DurationField durationField19 = chronology10.days();
        org.joda.time.DurationField durationField20 = chronology10.months();
        org.joda.time.DurationField durationField21 = chronology10.seconds();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2054L + "'", long18 == 2054L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test19252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19252");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean10 = dateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone13);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = property15.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int24 = dateTime22.get(dateTimeFieldType23);
        boolean boolean25 = localDate16.equals((java.lang.Object) dateTime22);
        int int26 = localDate16.getWeekyear();
        org.joda.time.Chronology chronology27 = localDate16.getChronology();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DurationField durationField29 = durationFieldType11.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.weekyearOfCentury();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.parse("10");
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate36 = localDate34.plus(readablePeriod35);
        long long38 = chronology27.set((org.joda.time.ReadablePartial) localDate34, 14717031L);
        org.joda.time.DateTimeField dateTimeField39 = chronology27.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37920000 + "'", int7 == 37920000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37920000 + "'", int24 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-61851585282969L) + "'", long38 == (-61851585282969L));
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test19253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19253");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.setCopy(31);
        org.joda.time.LocalTime localTime6 = property2.addWrapFieldToCopy(37920000);
        boolean boolean7 = property2.isLeap();
        org.joda.time.LocalTime localTime8 = property2.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField9 = property2.getField();
        org.joda.time.LocalTime localTime10 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime12 = localTime10.withHourOfDay(16);
        org.joda.time.LocalTime localTime14 = localTime12.minusHours(5494243);
        org.joda.time.LocalTime localTime16 = localTime14.minusMinutes(31619);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test19254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19254");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.year();
        org.joda.time.DateTime.Property property19 = dateTime16.yearOfCentury();
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = dateTime16.isEqual(readableInstant20);
        org.joda.time.DateTime.Property property22 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime24 = property22.roundHalfEvenCopy();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("GMT+00:00");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = property22.setCopy("53965191", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"53965191\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
    }

    @Test
    public void test19255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19255");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test19256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19256");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate.Property property12 = localDate9.monthOfYear();
        org.joda.time.LocalDate localDate13 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property12.withMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test19257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19257");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("ISOChronology[+10:32]");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        java.lang.String[] strArray17 = new java.lang.String[] { "1970-01-01", "millisOfDay", "", "minuteOfDay", "South Korea", "1970-01-01", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("");
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale24.getDisplayLanguage(locale27);
        java.util.Set<java.lang.String> strSet30 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet30);
        boolean boolean32 = strSet18.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("");
        java.lang.String str38 = locale37.getScript();
        java.lang.String str39 = locale34.getDisplayLanguage(locale37);
        java.util.Set<java.lang.String> strSet40 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        boolean boolean44 = strSet40.addAll((java.util.Collection<java.lang.String>) strSet43);
        boolean boolean45 = strSet30.removeAll((java.util.Collection<java.lang.String>) strSet40);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance();
        int int48 = calendar46.getMaximum(11);
        calendar46.setWeekDate((-1), 3, 4);
        calendar46.set(16, 37920000, (int) (byte) 1, (int) (byte) -1, 0, (-1));
        calendar46.set((int) 'u', 0, 0);
        java.util.Set<java.lang.String> strSet64 = java.util.Calendar.getAvailableCalendarTypes();
        boolean boolean65 = calendar46.before((java.lang.Object) strSet64);
        boolean boolean66 = strSet30.retainAll((java.util.Collection<java.lang.String>) strSet64);
        boolean boolean67 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet64);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 0, chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime70.toMutableDateTime(chronology71);
        org.joda.time.DateTime dateTime74 = dateTime70.minus((long) '#');
        org.joda.time.DateTime dateTime76 = dateTime70.withDayOfWeek(4);
        org.joda.time.LocalDate localDate77 = dateTime70.toLocalDate();
        int int78 = localDate77.getYearOfEra();
        org.joda.time.LocalDate.Property property79 = localDate77.dayOfYear();
        org.joda.time.LocalDate localDate81 = property79.setCopy(7);
        org.joda.time.LocalDate localDate83 = property79.addToCopy(0);
        org.joda.time.LocalDate.Property property84 = localDate83.dayOfYear();
        org.joda.time.DateTime dateTime85 = localDate83.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate87 = localDate83.withYearOfEra(37447468);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = strSet8.contains((java.lang.Object) localDate87);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=117,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=0,DAY_OF_YEAR=15,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=1,HOUR_OF_DAY=-1,MINUTE=0,SECOND=-1,MILLISECOND=658,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 23 + "'", int48 == 23);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1970 + "'", int78 == 1970);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(localDate87);
    }

    @Test
    public void test19258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks((int) 'x');
        org.joda.time.DateTime dateTime9 = dateTime5.minusWeeks(23);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) dateTime5);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test19259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19259");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.plus(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localDate4.equals((java.lang.Object) dateTime10);
        int int14 = localDate4.getWeekyear();
        org.joda.time.Chronology chronology15 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology15.getZone();
        long long20 = dateTimeZone17.adjustOffset((long) 50, true);
        long long23 = dateTimeZone17.adjustOffset(21051192765850L, false);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 0, chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.plus(readableDuration30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime34 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType25.getField(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.centuryOfEra();
        org.joda.time.DurationField durationField43 = chronology39.years();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.yearOfCentury();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(632L, chronology39);
        org.joda.time.LocalDate localDate47 = localDate45.withDayOfWeek(1);
        boolean boolean48 = dateTimeZone17.equals((java.lang.Object) localDate47);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920000 + "'", int12 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 50L + "'", long20 == 50L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 21051192765850L + "'", long23 == 21051192765850L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 37920000 + "'", int33 == 37920000);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test19260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime5.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology13);
        int int15 = localDate14.getYear();
        java.lang.String str16 = localDate14.toString();
        org.joda.time.LocalDate localDate18 = localDate14.withYear(37265524);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate14.withYearOfCentury(37265524);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37265524 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37920000 + "'", int7 == 37920000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22" + "'", str16, "2022-02-22");
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test19261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19261");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        int int4 = calendar0.getActualMinimum(3);
        boolean boolean5 = calendar0.isWeekDateSupported();
        int int6 = calendar0.getWeeksInWeekYear();
        int int8 = calendar0.getActualMaximum(6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        calendar0.setTimeInMillis((long) 37920097);
        int int12 = calendar0.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(5581099, (-46800000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=37920097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=4,SECOND=0,MILLISECOND=97,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 365 + "'", int8 == 365);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test19262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19262");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.DurationField durationField14 = property12.getDurationField();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        org.joda.time.LocalDate localDate17 = property12.addWrapFieldToCopy(631);
        org.joda.time.LocalDate localDate19 = property12.addToCopy(12);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(32770);
        java.lang.String str22 = localDate19.toString();
        org.joda.time.LocalDate localDate24 = localDate19.plusWeeks(5432960);
        org.joda.time.LocalDate.Property property25 = localDate19.dayOfYear();
        org.joda.time.LocalDate localDate26 = property25.roundCeilingCopy();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1982-01-07" + "'", str22, "1982-01-07");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test19263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19263");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime5.toMutableDateTime();
        org.joda.time.DateTime.Property property11 = dateTime5.era();
        org.joda.time.DateTime dateTime13 = dateTime5.withMinuteOfHour(0);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = dateTime13.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(53958682);
        java.lang.String str19 = localDateTime15.toString("\u4e0b\u5348 11:59:59");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e0b\u5348 11:59:59" + "'", str19, "\u4e0b\u5348 11:59:59");
    }

    @Test
    public void test19264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19264");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder4 = builder0.setLenient(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test19265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19265");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        long long23 = calendar21.getTimeInMillis();
        java.time.Instant instant24 = calendar21.toInstant();
        java.util.TimeZone timeZone25 = calendar21.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645456039762,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=19,MILLISECOND=762,ZONE_OFFSET=37920000,DST_OFFSET=0]");
    }

    @Test
    public void test19266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime5.toMutableDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.dayOfWeek();
        org.joda.time.DurationField durationField32 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.halfdayOfDay();
        org.joda.time.DurationField durationField35 = chronology25.eras();
        java.lang.String str36 = chronology25.toString();
        org.joda.time.DurationField durationField37 = chronology25.eras();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology25.getZone();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37920000 + "'", int19 == 37920000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+10:32]" + "'", str36, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
    }

    @Test
    public void test19267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19267");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime12.withWeekOfWeekyear((int) (short) 10);
        int int18 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(9, 12, 23, 4, 5, 14, 23, dateTimeZone9);
        boolean boolean20 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone9);
        int int22 = dateTime21.getMinuteOfHour();
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology23.add(readablePeriod25, 1705847595009L, 659);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37920000 + "'", int18 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 39 + "'", int22 == 39);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1705847595009L + "'", long28 == 1705847595009L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test19268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19268");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long4 = dateTimeZone1.adjustOffset((long) 9, true);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes((int) (short) 100);
        java.lang.String str12 = localTime11.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime18.withWeekOfWeekyear((int) (short) 10);
        int int24 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC((long) 23, false);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((java.lang.Object) str12, dateTimeZone15);
        int int30 = localTime6.compareTo((org.joda.time.ReadablePartial) localTime29);
        int int31 = localTime29.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localTime29.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9L + "'", long4 == 9L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.100" + "'", str5, "+00:00:00.100");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "12:12:00.097" + "'", str12, "12:12:00.097");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37920000 + "'", int24 == 37920000);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-37919977L) + "'", long28 == (-37919977L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
    }

    @Test
    public void test19269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19269");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(dateTimeZone9);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime13 = localTime10.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime19.withWeekOfWeekyear((int) (short) 10);
        int int25 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) localTime12, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTime dateTime29 = localTime26.toDateTimeToday(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal((long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withZone(dateTimeZone28);
        java.util.Locale locale33 = dateTimeFormatter32.getLocale();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime36.toMutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime36.withDayOfWeek(4);
        org.joda.time.Chronology chronology43 = dateTime36.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.centuries();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter32.withChronology(chronology43);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeFormatter47.getZone();
        java.lang.StringBuffer stringBuffer49 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology51);
        int int53 = dateTime52.getSecondOfMinute();
        org.joda.time.DateTime dateTime55 = dateTime52.withYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property61 = localTime60.secondOfMinute();
        int int62 = dateTimeField58.getMinimumValue((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.LocalTime localTime64 = localTime60.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property65 = localTime64.minuteOfHour();
        org.joda.time.DateTime dateTime66 = dateTime55.withFields((org.joda.time.ReadablePartial) localTime64);
        boolean boolean68 = dateTime66.isEqual((long) 1);
        org.joda.time.DateTime dateTime70 = dateTime66.plus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime66.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter47.printTo(stringBuffer49, (org.joda.time.ReadableInstant) mutableDateTime71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37920000 + "'", int25 == 37920000);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
    }

    @Test
    public void test19270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19270");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        int int4 = calendar0.getActualMinimum(3);
        boolean boolean5 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        long long7 = calendar0.getTimeInMillis();
        int int8 = calendar0.getWeekYear();
        int int9 = calendar0.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456039832,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=19,MILLISECOND=832,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645456039832L + "'", long7 == 1645456039832L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test19271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19271");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusDays(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property13 = localDate11.property(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.yearOfCentury();
        org.joda.time.LocalDate.Property property15 = localDate11.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        org.joda.time.LocalDate localDate17 = property15.withMaximumValue();
        org.joda.time.LocalDate localDate19 = localDate17.minusDays(48);
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.DateTime dateTime25 = dateTime20.withFieldAdded(durationFieldType23, 6);
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime();
        org.joda.time.DateTime.Property property27 = dateTime20.yearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test19272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19272");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale5);
        boolean boolean9 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear((-724734));
        org.joda.time.Chronology chronology12 = dateTimeFormatter2.getChronolgy();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(chronology12);
    }

    @Test
    public void test19273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19273");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("2022-02-21T01:05:29.455");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19274");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate.Property property12 = localDate9.monthOfYear();
        org.joda.time.LocalDate.Property property13 = localDate9.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDate9.isSupported(durationFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate9.yearOfCentury();
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test19275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19275");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime3.toMutableDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((long) '#');
        org.joda.time.DateTime dateTime9 = dateTime3.withDayOfWeek(4);
        org.joda.time.LocalDate localDate10 = dateTime3.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate10.plus(readablePeriod11);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        org.joda.time.LocalDate localDate14 = property13.roundFloorCopy();
        org.joda.time.DurationField durationField15 = property13.getDurationField();
        org.joda.time.LocalDate localDate16 = property13.withMaximumValue();
        org.joda.time.LocalDate localDate17 = property13.roundHalfEvenCopy();
        java.lang.String str18 = property13.getAsString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime22.toMutableDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((long) '#');
        org.joda.time.DateTime.Property property27 = dateTime22.minuteOfHour();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.plus(readableDuration32);
        org.joda.time.DateTime dateTime35 = dateTime30.withWeekOfWeekyear((int) (short) 10);
        long long36 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        boolean boolean40 = dateTimeField39.isLenient();
        long long42 = dateTimeField39.roundCeiling((long) 5);
        java.lang.String str44 = dateTimeField39.getAsText(32L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 0, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime47.toMutableDateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime47.minus((long) '#');
        org.joda.time.DateTime dateTime53 = dateTime47.withDayOfWeek(4);
        org.joda.time.LocalDate localDate54 = dateTime47.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate56 = localDate54.plus(readablePeriod55);
        org.joda.time.LocalDate.Property property57 = localDate56.weekyear();
        int int58 = localDate56.size();
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale62 = java.util.Locale.UK;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDate56, 53, locale61);
        java.lang.String str65 = property27.getAsShortText(locale61);
        org.joda.time.LocalDate localDate66 = property13.setCopy("1", locale61);
        java.util.Locale.setDefault(locale61);
        java.lang.String str68 = locale0.getDisplayScript(locale61);
        java.lang.String str69 = locale0.getISO3Language();
        java.util.Locale locale70 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet71 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 5L + "'", long42 == 5L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "37920032" + "'", str44, "37920032");
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "53" + "'", str64, "53");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "32" + "'", str65, "32");
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "fra" + "'", str69, "fra");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet71);
    }

    @Test
    public void test19276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19276");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        java.util.Date date16 = new java.util.Date((long) (byte) -1);
        date16.setTime((long) ' ');
        date16.setYear((int) 'u');
        int int21 = date16.getMonth();
        boolean boolean22 = localDate13.equals((java.lang.Object) int21);
        java.lang.String str23 = localDate13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.plus(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime37 = dateTime30.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType24.getField(chronology38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withField(dateTimeFieldType41, 5);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusHours(23);
        int int46 = localDateTime45.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withYearOfEra(11);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundFloorCopy();
        int int51 = localDateTime50.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localDate13.compareTo((org.joda.time.ReadablePartial) localDateTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 01 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-292275054-01-06" + "'", str23, "-292275054-01-06");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 37920000 + "'", int32 == 37920000);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
    }

    @Test
    public void test19277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19277");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        org.joda.time.LocalTime localTime7 = property5.addCopy((int) '4');
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime7.minus(readablePeriod8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime12 = localTime9.withPeriodAdded(readablePeriod10, 10);
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test19278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19278");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        int int6 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.LocalTime localTime8 = localTime4.plusMillis((int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField10 = localTime8.getField(1);
        org.joda.time.LocalTime localTime12 = localTime8.withMinuteOfHour(50);
        org.joda.time.LocalTime.Property property13 = localTime12.hourOfDay();
        org.joda.time.LocalTime localTime14 = property13.withMinimumValue();
        java.lang.String str15 = property13.toString();
        org.joda.time.LocalTime localTime17 = property13.addWrapFieldToCopy(778);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.DateTime.Property property22 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime23 = property22.roundFloorCopy();
        org.joda.time.DateTime dateTime24 = property22.roundFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMillis(4);
        org.joda.time.DateTime dateTime28 = dateTime24.minus((long) 37920000);
        org.joda.time.DateTime.Property property29 = dateTime24.monthOfYear();
        java.util.Locale locale30 = java.util.Locale.CANADA_FRENCH;
        int int31 = property29.getMaximumTextLength(locale30);
        int int32 = property13.getMaximumShortTextLength(locale30);
        org.joda.time.LocalTime localTime34 = property13.addWrapFieldToCopy(5549888);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalTime localTime36 = localTime34.plus(readablePeriod35);
        org.joda.time.LocalTime localTime38 = localTime34.plusSeconds(5955205);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[hourOfDay]" + "'", str15, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
    }

    @Test
    public void test19279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19279");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType3.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DurationField durationField22 = chronology17.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withChronology(chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 121);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withZoneUTC();
        boolean boolean29 = dateTimeFormatter2.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = dateTimeFormatter2.parseLocalDateTime("69");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test19280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19280");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        int int20 = localDateTime19.getEra();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        int int22 = localDateTime19.getYearOfEra();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = localDateTime19.toString("70", locale26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime19.minus(readablePeriod29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime19.toDateTime(readableInstant31);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "70" + "'", str28, "70");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test19281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19281");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long4 = dateTimeZone1.adjustOffset((long) 9, true);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone1);
        long long8 = dateTimeZone1.convertUTCToLocal((long) (short) 1);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds(409);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9L + "'", long4 == 9L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.100" + "'", str5, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 101L + "'", long8 == 101L);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test19282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19282");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property4.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime10 = dateTime6.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime6.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime dateTime21 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType12.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime6.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology26.dayOfWeek();
        org.joda.time.DurationField durationField33 = durationFieldType0.getField(chronology26);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology26.getZone();
        org.joda.time.DateTimeField dateTimeField35 = chronology26.dayOfWeek();
        int int36 = dateTimeField35.getMaximumValue();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 37920000 + "'", int20 == 37920000);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 7 + "'", int36 == 7);
    }

    @Test
    public void test19283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19283");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.year();
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.monthOfYear();
        org.joda.time.Instant instant28 = org.joda.time.Instant.parse("2022-02-21T01:05:10.241");
        org.joda.time.Instant instant30 = instant28.minus(1645455491851L);
        org.joda.time.MutableDateTime mutableDateTime31 = instant30.toMutableDateTime();
        org.joda.time.DateTime dateTime32 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) instant30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = localDateTime23.toString("Cor\351e du Sud");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test19284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19284");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.millisOfSecond();
        int int23 = localDateTime16.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property24 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear(34);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withYearOfEra(37920000);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime29.getFields();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYear(5545465);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test19285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19285");
        java.util.Date date3 = new java.util.Date(13, 1972, 37364482);
        date3.setTime((long) 37330536);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 20:54:10 GMT+10:32 1970");
    }

    @Test
    public void test19286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19286");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        int int12 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime10);
        boolean boolean13 = dateTimeField8.isSupported();
        long long16 = dateTimeField8.add((long) 631, 1645455491851L);
        java.util.Locale locale21 = new java.util.Locale("Greenwich Mean Time", "ISOChronology[+10:32]", "en_CA");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property27 = localTime26.secondOfMinute();
        int int28 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localTime26);
        boolean boolean29 = dateTimeField24.isSupported();
        long long32 = dateTimeField24.add((long) 631, 1645455491851L);
        java.util.Locale locale34 = new java.util.Locale("37920001");
        int int35 = dateTimeField24.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale21.getDisplayLanguage(locale34);
        java.lang.String str37 = dateTimeField8.getAsText((int) (short) 10, locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter5.withLocale(locale34);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withZone(dateTimeZone39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) dateTimeFormatter38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645455492482L + "'", long16 == 1645455492482L);
        org.junit.Assert.assertEquals(locale21.toString(), "greenwich mean time_ISOCHRONOLOGY[+10:32]_en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645455492482L + "'", long32 == 1645455492482L);
        org.junit.Assert.assertEquals(locale34.toString(), "37920001");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "greenwich mean time" + "'", str36, "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "10" + "'", str37, "10");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
    }

    @Test
    public void test19287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19287");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 14, chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekOfWeekyear();
        int int22 = dateTimeField20.getLeapAmount((long) 49);
        int int24 = dateTimeField20.getMaximumValue((-37918099L));
        long long26 = dateTimeField20.roundHalfCeiling((long) 5601051);
        long long28 = dateTimeField20.roundHalfCeiling(100357056038400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 307680000L + "'", long26 == 307680000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100357055875680000L + "'", long28 == 100357055875680000L);
    }

    @Test
    public void test19288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19288");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.clockhourOfDay();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear(5862488);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test19289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19289");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.DateTime.Property property10 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime2.withYearOfEra(5435390);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.plus(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime19.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType13.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.centuryOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime33.toMutableDateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime33.minus((long) '#');
        org.joda.time.DateTime dateTime39 = dateTime33.withDayOfWeek(4);
        org.joda.time.LocalDate localDate40 = dateTime33.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate42 = localDate40.plus(readablePeriod41);
        org.joda.time.LocalDate.Property property43 = localDate42.weekyear();
        org.joda.time.LocalDate localDate44 = property43.withMinimumValue();
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfEra();
        long long47 = chronology27.set((org.joda.time.ReadablePartial) localDate44, (long) 11);
        org.joda.time.DurationField durationField48 = chronology27.months();
        org.joda.time.DateTimeField dateTimeField49 = chronology27.year();
        java.lang.String str50 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology27.era();
        org.joda.time.DateTimeField dateTimeField53 = chronology27.yearOfEra();
        org.joda.time.DateTime dateTime54 = dateTime2.toDateTime(chronology27);
        java.lang.String str55 = chronology27.toString();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37920000 + "'", int21 == 37920000);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-9223372016611199989L) + "'", long47 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[+10:32]" + "'", str50, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[+10:32]" + "'", str55, "ISOChronology[+10:32]");
    }

    @Test
    public void test19290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19290");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.withMinimumValue();
        org.joda.time.LocalDate localDate13 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate14 = property11.roundCeilingCopy();
        org.joda.time.LocalDate localDate16 = property11.addToCopy(73);
        int int17 = localDate16.getYearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 70 + "'", int17 == 70);
    }

    @Test
    public void test19291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19291");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        int int5 = property3.getMinimumValue();
        org.joda.time.LocalDate localDate6 = property3.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test19292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19292");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) 100);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readableDuration14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, 37920);
        org.joda.time.DateTime dateTime21 = dateTime18.withDurationAdded((-9223372016611199989L), (-1));
        org.joda.time.DateTime dateTime23 = dateTime21.minus((long) '#');
        int int24 = dateTime21.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded(readableDuration25, 0);
        org.joda.time.DateTime.Property property28 = dateTime21.centuryOfEra();
        org.joda.time.DateTime dateTime30 = property28.addToCopy((-52L));
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withDurationAdded(readableDuration31, 55);
        org.joda.time.DateTime dateTime35 = dateTime30.minus((long) 37534682);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        int int38 = dateTimeZone36.getStandardOffset(9223182662682351606L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime30.toDateTime(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test19293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19293");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime1.property(dateTimeFieldType8);
        java.lang.String str11 = property10.getName();
        org.joda.time.DurationField durationField12 = property10.getRangeDurationField();
        org.joda.time.LocalTime localTime13 = property10.getLocalTime();
        org.joda.time.LocalTime localTime15 = property10.addCopy(15);
        org.joda.time.LocalTime localTime17 = property10.addWrapFieldToCopy(409);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfDay" + "'", str11, "millisOfDay");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test19294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19294");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.plus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime10.withWeekOfWeekyear((int) (short) 10);
        int int16 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((java.lang.Object) localTime3, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTime dateTime20 = localTime17.toDateTimeToday(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime20.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 37920000 + "'", int16 == 37920000);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test19295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19295");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.LocalDate localDate18 = localDate2.withYearOfEra(53);
        org.joda.time.LocalDate localDate20 = localDate2.plusMonths((int) 'a');
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DurationField durationField23 = durationFieldType21.getField(chronology22);
        org.joda.time.LocalDate localDate25 = localDate20.withFieldAdded(durationFieldType21, 659);
        int int26 = localDate20.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1978 + "'", int26 == 1978);
    }

    @Test
    public void test19296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19296");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime5.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyear();
        org.joda.time.DurationField durationField17 = chronology13.months();
        long long21 = chronology13.add((long) 44940, (long) (-9), 305070);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37920000 + "'", int7 == 37920000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-2700690L) + "'", long21 == (-2700690L));
    }

    @Test
    public void test19297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19297");
        java.lang.StringBuffer stringBuffer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.FormatUtils.appendPaddedInteger(stringBuffer0, 720, 37289415);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19298");
        java.io.Writer writer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.FormatUtils.writeUnpaddedInteger(writer0, 638);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        int int4 = localDate2.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField6 = localDate2.getField(0);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property8 = localDate2.weekyear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime14.withYear(11);
        org.joda.time.DateTime.Property property20 = dateTime19.monthOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime23.toMutableDateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime23.minus((long) '#');
        int int28 = dateTime27.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int30 = dateTime27.get(dateTimeFieldType29);
        int int31 = dateTime19.get(dateTimeFieldType29);
        int int32 = localDate2.get(dateTimeFieldType29);
        org.joda.time.LocalDate.Property property33 = localDate2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone35);
        int int37 = localDate36.getDayOfMonth();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime40.toMutableDateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime40.minus((long) '#');
        org.joda.time.DateTime dateTime46 = dateTime40.withDayOfWeek(4);
        boolean boolean48 = dateTime40.equals((java.lang.Object) "eras");
        int int49 = dateTime40.getWeekyear();
        org.joda.time.DateTime dateTime50 = localDate36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        long long51 = dateTime50.getMillis();
        org.joda.time.DateTime.Property property52 = dateTime50.year();
        org.joda.time.DateTime dateTime53 = property52.roundHalfCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime53.toMutableDateTime();
        org.joda.time.DateTime dateTime55 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Instant instant56 = dateTime55.toInstant();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 37920000 + "'", int16 == 37920000);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 70 + "'", int30 == 70);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 70 + "'", int32 == 70);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(instant56);
    }

    @Test
    public void test19300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19300");
        java.util.Date date0 = new java.util.Date();
        long long1 = date0.getTime();
        date0.setHours(16);
        date0.setTime(5440839L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfCentury();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMillis(4);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra(22);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = dateTime14.withZoneRetainFields(dateTimeZone17);
        java.util.Date date19 = dateTime14.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone21);
        int int23 = localDate22.getDayOfMonth();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime26.minus((long) '#');
        org.joda.time.DateTime dateTime32 = dateTime26.withDayOfWeek(4);
        boolean boolean34 = dateTime26.equals((java.lang.Object) "eras");
        int int35 = dateTime26.getWeekyear();
        org.joda.time.DateTime dateTime36 = localDate22.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDate localDate38 = localDate22.withYearOfEra(53);
        org.joda.time.LocalDate localDate40 = localDate22.plusYears(10);
        java.util.Date date41 = localDate40.toDate();
        java.util.Date date43 = new java.util.Date((long) (byte) -1);
        java.util.Date date45 = new java.util.Date((long) (byte) -1);
        date45.setTime((long) ' ');
        boolean boolean48 = date43.after(date45);
        long long49 = date45.getTime();
        java.lang.String str50 = date45.toLocaleString();
        date45.setMinutes(632);
        boolean boolean53 = date41.after(date45);
        boolean boolean54 = date19.before(date41);
        boolean boolean55 = date0.before(date41);
        int int56 = date41.getTimezoneOffset();
        org.junit.Assert.assertEquals(date0.toString(), "Thu Jan 01 12:02:40 GMT+10:32 1970");
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645456040249L + "'", long1 == 1645456040249L);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 GMT+10:32 1970");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jan 01 00:00:00 GMT+10:32 1980");
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 10:31:59 GMT+10:32 1970");
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 20:32:00 GMT+10:32 1970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32L + "'", long49 == 32L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Jan 1, 1970 10:32:00 AM" + "'", str50, "Jan 1, 1970 10:32:00 AM");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-632) + "'", int56 == (-632));
    }

    @Test
    public void test19301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19301");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 9);
        int int6 = dateTimeField2.getMaximumValue((long) 4);
        long long8 = dateTimeField2.roundHalfFloor((long) 1999);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType9.getField(chronology23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withField(dateTimeFieldType26, 5);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusHours(23);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = property31.getLocalDateTime();
        int int33 = property31.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime34 = property31.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField35 = property31.getField();
        org.joda.time.LocalDateTime localDateTime36 = property31.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean38 = localDateTime36.isSupported(dateTimeFieldType37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusSeconds(5501598);
        int int41 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withPeriodAdded(readablePeriod42, 290);
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1999L + "'", long8 == 1999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37920000 + "'", int17 == 37920000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test19302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19302");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.setCopy(31);
        org.joda.time.LocalTime localTime6 = property2.addWrapFieldToCopy(37920000);
        boolean boolean7 = property2.isLeap();
        org.joda.time.Interval interval8 = property2.toInterval();
        org.joda.time.LocalTime localTime10 = property2.addCopy((long) 5663094);
        int int11 = property2.getMaximumValue();
        org.joda.time.LocalTime localTime12 = property2.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test19303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19303");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime3.toMutableDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((long) '#');
        org.joda.time.DateTime dateTime9 = dateTime3.withDayOfWeek(4);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy(70);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.monthOfYear();
        java.lang.String str15 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (byte) 0, chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.dayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+10:32]" + "'", str15, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test19304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19304");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale9 = new java.util.Locale("", "South Korea", "1970-01-01");
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime14 = localTime11.withFields((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime19 = localTime16.withFields((org.joda.time.ReadablePartial) localTime18);
        int int20 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime16);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = localTime13.toString("1", locale22);
        java.lang.String str24 = locale9.getDisplayScript(locale22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.DateTime dateTime30 = property28.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime34 = dateTime30.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfMonth(2);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Calendar calendar38 = dateTime34.toCalendar(locale37);
        java.lang.String str39 = locale9.getDisplayLanguage(locale37);
        java.lang.String str40 = locale37.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withLocale(locale37);
        java.util.Locale locale42 = dateTimeFormatter41.getLocale();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals(locale9.toString(), "_SOUTH KOREA_1970-01-01");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fra" + "'", str40, "fra");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
    }

    @Test
    public void test19305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19305");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(5767);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType8.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withField(dateTimeFieldType25, 5);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours(23);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime.Property property35 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfEra(5);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.era();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 0, chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.plus(readableDuration46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int49 = dateTime47.get(dateTimeFieldType48);
        org.joda.time.DateTime dateTime50 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime54 = dateTime47.toDateTime(dateTimeZone53);
        long long57 = dateTimeZone53.convertLocalToUTC((long) 8, false);
        java.util.Calendar.Builder builder59 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder63 = builder59.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder67 = builder59.setDate(20, (int) 'u', 37920197);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.util.Calendar.Builder builder69 = builder67.setLocale(locale68);
        java.lang.String str70 = dateTimeZone53.getName((-37919999L), locale68);
        java.lang.String str71 = dateTimeField40.getAsShortText(31498080000L, locale68);
        java.lang.String str72 = locale68.getISO3Country();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter2.withLocale(locale68);
        java.util.Locale locale74 = dateTimeFormatter2.getLocale();
        boolean boolean75 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology76 = dateTimeFormatter2.getChronolgy();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 37920000 + "'", int16 == 37920000);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 37920000 + "'", int49 == 37920000);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-37919992L) + "'", long57 == (-37919992L));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+10:32" + "'", str70, "+10:32");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "AD" + "'", str71, "AD");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(chronology76);
    }

    @Test
    public void test19306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19306");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withDurationAdded(readableDuration27, 5545166);
        int int30 = localDateTime29.getEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test19307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19307");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 2021);
        org.joda.time.DateTime dateTime3 = dateTime1.plusDays((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readableDuration4);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.plus(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime16 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime20 = dateTime13.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withField(dateTimeFieldType24, 5);
        int int27 = localDateTime23.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.minusYears(6);
        org.joda.time.LocalDateTime.Property property30 = localDateTime23.dayOfWeek();
        org.joda.time.DateTime dateTime31 = localDateTime23.toDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime23.plusDays(33);
        org.joda.time.LocalDateTime.Property property34 = localDateTime23.year();
        org.joda.time.LocalDateTime localDateTime35 = property34.withMaximumValue();
        boolean boolean36 = dateTime6.equals((java.lang.Object) localDateTime35);
        int int37 = localDateTime35.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 37920000 + "'", int15 == 37920000);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5960370 + "'", int27 == 5960370);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test19308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19308");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 50400000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = dateTimeFormatter7.parseLocalTime("yearOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test19309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19309");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.LocalDate localDate27 = dateTime20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfEra();
        long long34 = chronology14.set((org.joda.time.ReadablePartial) localDate31, (long) 11);
        org.joda.time.DurationField durationField35 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField36 = chronology14.year();
        java.lang.String str37 = chronology14.toString();
        org.joda.time.DateTimeField dateTimeField38 = chronology14.minuteOfHour();
        int int40 = dateTimeField38.getMinimumValue((long) 5423123);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9223372016611199989L) + "'", long34 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+10:32]" + "'", str37, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test19310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19310");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.String str8 = locale7.getScript();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Set<java.lang.String> strSet10 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet10);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        boolean boolean16 = strSet14.equals((java.lang.Object) "gregory");
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Set<java.lang.String> strSet18 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean19 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet18);
        java.util.stream.Stream<java.lang.String> strStream20 = strSet18.stream();
        org.joda.time.tz.Provider provider21 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider21);
        org.joda.time.DateTimeZone dateTimeZone24 = provider21.getZone("ISOChronology[+10:32]");
        org.joda.time.DateTimeZone.setProvider(provider21);
        org.joda.time.DateTimeZone.setProvider(provider21);
        java.util.Set<java.lang.String> strSet27 = provider21.getAvailableIDs();
        java.lang.Object[] objArray28 = strSet27.toArray();
        java.util.Locale locale30 = new java.util.Locale("37920001");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.String[] strArray42 = new java.lang.String[] { "37920032", "eras", "12:12:00.097", "10:32:00.097", "-1", "9", "hi!", "java.util.GregorianCalendar[time=1645455484256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=4,MILLISECOND=256,ZONE_OFFSET=0,DST_OFFSET=0]", "millisOfDay", "-1" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        boolean boolean45 = strSet31.retainAll((java.util.Collection<java.lang.String>) strList43);
        java.lang.Object[] objArray46 = strSet31.toArray();
        org.joda.time.tz.Provider provider47 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider47);
        boolean boolean49 = strSet31.contains((java.lang.Object) provider47);
        java.util.stream.Stream<java.lang.String> strStream50 = strSet31.stream();
        java.util.stream.Stream<java.lang.String> strStream51 = strSet31.parallelStream();
        strSet31.clear();
        boolean boolean53 = strSet27.removeAll((java.util.Collection<java.lang.String>) strSet31);
        boolean boolean54 = strSet18.retainAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean56 = strSet27.add("0007-12-13T01:05:56.072");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(provider21);
        org.junit.Assert.assertNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(locale30.toString(), "37920001");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(provider47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test19311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19311");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("chinois");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"chinois\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19312");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusDays(4);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withWeekyear(631);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plus(readableDuration33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        org.joda.time.LocalTime localTime41 = localTime36.withField(dateTimeFieldType37, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localTime41);
    }

    @Test
    public void test19313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19313");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder8 = builder0.setDate(20, (int) 'u', 37920197);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Calendar.Builder builder10 = builder8.setLocale(locale9);
        java.util.Calendar.Builder builder14 = builder10.setDate(37919999, 1, (int) (byte) 0);
        java.util.Calendar.Builder builder16 = builder14.setLenient(true);
        java.util.Calendar.Builder builder18 = builder14.setLenient(false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test19314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19314");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear(9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.parse("37920097", dateTimeFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test19315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19315");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekyearOfCentury();
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField21 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.weekyearOfCentury();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test19316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19316");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 631);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withSecondOfMinute((int) '#');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYearOfEra(37920059);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusYears(42767216);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test19317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19317");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.plus(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localDate4.equals((java.lang.Object) dateTime10);
        int int14 = localDate4.getWeekyear();
        org.joda.time.LocalDate localDate16 = localDate4.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime17 = localDate4.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate19 = localDate4.minusMonths(5463427);
        org.joda.time.DateTime dateTime20 = localDate4.toDateTimeAtStartOfDay();
        java.util.Date date21 = localDate4.toDate();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920000 + "'", int12 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Dec 29 00:00:00 GMT+10:32 1969");
    }

    @Test
    public void test19318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19318");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(dateTimeZone9);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime13 = localTime10.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime19.withWeekOfWeekyear((int) (short) 10);
        int int25 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) localTime12, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTime dateTime29 = localTime26.toDateTimeToday(dateTimeZone28);
        int int31 = dateTimeZone28.getOffsetFromLocal((long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withZone(dateTimeZone28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter32.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter32.withOffsetParsed();
        java.util.Locale locale36 = dateTimeFormatter32.getLocale();
        org.joda.time.Chronology chronology37 = dateTimeFormatter32.getChronolgy();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37920000 + "'", int25 == 37920000);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(dateTimePrinter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNull(chronology37);
    }

    @Test
    public void test19319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19319");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(4);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) 'a');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays(342729);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(678);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusHours(482880);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test19320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19320");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime();
        int int26 = localDateTime23.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minusYears((-1));
        int int29 = localDateTime23.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DurationField durationField32 = durationFieldType30.getField(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime23.withFieldAdded(durationFieldType30, 377708);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = localDateTime23.getValue((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 117");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test19321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19321");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Thu May 28 00:00:00 GMT+10:32 37212220");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test19322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19322");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        calendar0.setWeekDate((-1), 3, 4);
        boolean boolean7 = calendar0.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(983, 2080);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-62197750359385,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=15,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=20,MILLISECOND=615,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test19323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19323");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTime(dateTimeZone18);
        long long22 = dateTimeZone18.convertLocalToUTC((long) 8, false);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(5921019, 5614780, 5890892, 68364, 37618825, 5501598, 5847277, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68364 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37920000 + "'", int14 == 37920000);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-37919992L) + "'", long22 == (-37919992L));
    }

    @Test
    public void test19324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19324");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DurationField durationField18 = chronology14.years();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology14.add(readablePeriod19, (long) 32769, 292278993);
        org.joda.time.DateTimeField dateTimeField23 = chronology14.centuryOfEra();
        boolean boolean24 = dateTimeField23.isSupported();
        long long26 = dateTimeField23.roundHalfFloor(1645455579919L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32769L + "'", long22 == 32769L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 946646880000L + "'", long26 == 946646880000L);
    }

    @Test
    public void test19325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19325");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale5);
        java.util.Locale locale9 = dateTimeFormatter8.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter8.withZone(dateTimeZone12);
        java.util.TimeZone timeZone15 = dateTimeZone12.toTimeZone();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+32:00" + "'", str13, "+32:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test19326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19326");
        java.util.Date date5 = new java.util.Date(668, 5883694, 5438242, (-1154166335), 5629295);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Apr 07 06:35:00 GMT+10:32 376109");
    }

    @Test
    public void test19327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19327");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean17 = dateTime16.isEqualNow();
        int int18 = dateTime16.getYear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.minus(readablePeriod19);
        int int21 = dateTime20.getEra();
        boolean boolean22 = dateTime20.isEqualNow();
        org.joda.time.DateTime dateTime23 = dateTime20.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(37919900);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test19328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19328");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.setCopy(31);
        org.joda.time.LocalTime localTime6 = property2.addWrapFieldToCopy(37920000);
        boolean boolean7 = property2.isLeap();
        org.joda.time.LocalTime localTime8 = property2.withMinimumValue();
        org.joda.time.LocalTime localTime9 = property2.getLocalTime();
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("en-CA");
        java.lang.String str14 = localTime9.toString("\u52a0\u62ff\u5927", locale13);
        java.lang.String str15 = locale13.getDisplayScript();
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u52a0\u62ff\u5927" + "'", str14, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test19329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19329");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum(11);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("South Korea");
        timeZone4.setID("South Korea");
        calendar0.setTimeZone(timeZone4);
        calendar0.set((int) (byte) 0, (int) (byte) 100, (int) (short) 10, 2, 2, 292278993);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        int int16 = localDate15.size();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61611412886300,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"South Korea\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=7,WEEK_OF_YEAR=33,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=225,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=38,SECOND=33,MILLISECOND=700,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test19330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19330");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        int int18 = dateTime2.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long23 = dateTimeZone20.adjustOffset((long) 9, true);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2, dateTimeZone20);
        int int25 = localDateTime24.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusDays((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(6);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.year();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.withWeekyear(32769);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.parse("53");
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays(50);
        int int39 = localDateTime38.getMillisOfSecond();
        boolean boolean40 = localDateTime27.equals((java.lang.Object) localDateTime38);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37920 + "'", int18 == 37920);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 9L + "'", long23 == 9L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test19331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19331");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(37265524);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test19332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19332");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        long long1 = calendar0.getTimeInMillis();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456040754,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=20,MILLISECOND=754,ZONE_OFFSET=37920000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645456040754L + "'", long1 == 1645456040754L);
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test19333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19333");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.plus(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        int int25 = localDate9.get(dateTimeFieldType23);
        int int26 = localDate9.getDayOfMonth();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime29.toMutableDateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime29.minus((long) '#');
        org.joda.time.DateTime dateTime35 = dateTime29.withDayOfWeek(4);
        org.joda.time.LocalDate localDate36 = dateTime29.toLocalDate();
        int int37 = localDate36.getYearOfEra();
        org.joda.time.LocalDate.Property property38 = localDate36.dayOfYear();
        org.joda.time.LocalDate localDate40 = property38.setCopy(7);
        org.joda.time.LocalDate.Property property41 = localDate40.centuryOfEra();
        org.joda.time.LocalDate localDate42 = property41.roundHalfCeilingCopy();
        int int43 = localDate9.compareTo((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate45 = localDate42.minus(readablePeriod44);
        org.joda.time.DateTime dateTime46 = localDate45.toDateTimeAtCurrentTime();
        int int47 = localDate45.getMonthOfYear();
        int int48 = localDate45.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37920000 + "'", int21 == 37920000);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
    }

    @Test
    public void test19334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19334");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 23);
        int int2 = dateTime1.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime5.toMutableDateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime5.minus((long) '#');
        org.joda.time.DateTime dateTime11 = dateTime5.withDayOfWeek(4);
        org.joda.time.DateTime.Property property12 = dateTime5.year();
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime5.minusWeeks(0);
        boolean boolean17 = dateTime15.isAfter(1645455538516L);
        boolean boolean18 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test19335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19335");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime9 = localTime6.withFields((org.joda.time.ReadablePartial) localTime8);
        int int10 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime6);
        int int11 = localTime6.getHourOfDay();
        org.joda.time.LocalTime localTime13 = localTime6.plusMinutes(1970);
        org.joda.time.DateTime dateTime14 = localTime6.toDateTimeToday();
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        int int16 = dateTime14.getYear();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
    }

    @Test
    public void test19336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19336");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime9 = localTime6.withFields((org.joda.time.ReadablePartial) localTime8);
        int int10 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime3.minus(readablePeriod11);
        org.joda.time.LocalTime localTime14 = localTime12.minusSeconds(7);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime17 = localTime14.withPeriodAdded(readablePeriod15, 5416138);
        int int18 = localTime17.getHourOfDay();
        int int19 = localTime17.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test19337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19337");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime12.withWeekOfWeekyear((int) (short) 10);
        int int18 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(9, 12, 23, 4, 5, 14, 23, dateTimeZone9);
        boolean boolean20 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone9);
        int int22 = dateTime21.getMinuteOfHour();
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.hourOfHalfday();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime30.toMutableDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime30.minus((long) '#');
        org.joda.time.DateTime.Property property35 = dateTime30.minuteOfHour();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime38.withWeekOfWeekyear((int) (short) 10);
        long long44 = property35.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        boolean boolean48 = dateTimeField47.isLenient();
        long long50 = dateTimeField47.roundCeiling((long) 5);
        java.lang.String str52 = dateTimeField47.getAsText(32L);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 0, chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime55.toMutableDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime55.minus((long) '#');
        org.joda.time.DateTime dateTime61 = dateTime55.withDayOfWeek(4);
        org.joda.time.LocalDate localDate62 = dateTime55.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDate localDate64 = localDate62.plus(readablePeriod63);
        org.joda.time.LocalDate.Property property65 = localDate64.weekyear();
        int int66 = localDate64.size();
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale70 = java.util.Locale.UK;
        java.lang.String str71 = locale69.getDisplayName(locale70);
        java.lang.String str72 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDate64, 53, locale69);
        java.lang.String str73 = property35.getAsShortText(locale69);
        java.lang.String str75 = locale69.getExtension('u');
        java.util.Locale locale76 = java.util.Locale.CHINA;
        java.lang.String str78 = locale76.getExtension('a');
        java.lang.String str79 = locale76.getDisplayScript();
        java.util.Locale.setDefault(locale76);
        java.lang.String str81 = locale69.getDisplayScript(locale76);
        boolean boolean82 = locale76.hasExtensions();
        java.lang.String str83 = locale76.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            long long84 = dateTimeField25.set((long) 37586461, "1970-01-01T10:32:00.010Z", locale76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T10:32:00.010Z\" for hourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37920000 + "'", int18 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 39 + "'", int22 == 39);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 5L + "'", long50 == 5L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "37920032" + "'", str52, "37920032");
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "53" + "'", str72, "53");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "32" + "'", str73, "32");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "CN" + "'", str83, "CN");
    }

    @Test
    public void test19338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19338");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.Chronology chronology4 = chronology3.withUTC();
        org.joda.time.DurationField durationField5 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.centuryOfEra();
        org.joda.time.DurationField durationField8 = chronology4.centuries();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test19339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19339");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.lang.String str6 = locale4.getExtension('a');
        java.lang.String str7 = locale4.getDisplayScript();
        java.lang.String str8 = locale4.getDisplayName();
        java.lang.String str9 = locale1.getDisplayVariant(locale4);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str8, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test19340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19340");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(10467945681269000L, chronology15);
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfEra();
        org.joda.time.LocalDate localDate22 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate24 = property21.setCopy(5759650);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test19341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19341");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime9 = localTime6.withFields((org.joda.time.ReadablePartial) localTime8);
        int int10 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.LocalTime.Property property11 = localTime6.millisOfDay();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        java.lang.String str13 = property11.getAsShortText();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "5960865" + "'", str13, "5960865");
    }

    @Test
    public void test19342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19342");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(5482514, 5793039, 12, 38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5482514 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19343");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra(59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime28.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusMillis(5419344);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType32.getDurationType();
        boolean boolean35 = localDateTime31.isSupported(durationFieldType34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.minusSeconds(86399999);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime31.minusHours((-52));
        org.joda.time.LocalDateTime.Property property40 = localDateTime31.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test19344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19344");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = property20.addWrapFieldToCopy((int) 'u');
        org.joda.time.LocalDateTime localDateTime24 = property20.addToCopy(9);
        org.joda.time.LocalDateTime localDateTime26 = property20.addWrapFieldToCopy(48);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMinuteOfHour(27);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test19345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19345");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getMinimalDaysInFirstWeek();
        calendar1.set(23, 11, 37919999, 15, 6, 632);
        long long10 = calendar1.getTimeInMillis();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) calendar1);
        calendar1.set(323, 47, 887, 5415578, (-724734), 1999);
        int int19 = calendar1.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=323,MONTH=47,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=887,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=5415578,MINUTE=-724734,SECOND=1999,MILLISECOND=910,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3214875156272910L + "'", long10 == 3214875156272910L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test19346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19346");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        org.joda.time.LocalTime localTime7 = localTime4.withMillisOfDay(5532548);
        org.joda.time.LocalTime.Property property8 = localTime7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test19347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19347");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(0);
        org.joda.time.LocalDate.Property property14 = localDate9.weekyear();
        org.joda.time.LocalDate.Property property15 = localDate9.yearOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.DateTime dateTime21 = dateTime18.withYear(10);
        long long22 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDate localDate23 = property15.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test19348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19348");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        int int20 = localDateTime16.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.era();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withYearOfEra(292278993);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withMonthOfYear(5);
        int int26 = localDateTime25.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusMonths(1999);
        int int30 = localDateTime25.getMillisOfSecond();
        int int31 = localDateTime25.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5960937 + "'", int20 == 5960937);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 937 + "'", int30 == 937);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
    }

    @Test
    public void test19349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19349");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes((int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime16.minusSeconds(14);
        org.joda.time.DateTime dateTime22 = dateTime16.withCenturyOfEra(69);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone24);
        int int26 = localDate25.getDayOfMonth();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime29.toMutableDateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime29.minus((long) '#');
        org.joda.time.DateTime dateTime35 = dateTime29.withDayOfWeek(4);
        boolean boolean37 = dateTime29.equals((java.lang.Object) "eras");
        int int38 = dateTime29.getWeekyear();
        org.joda.time.DateTime dateTime39 = localDate25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMinutes((int) 'u');
        int int42 = dateTime41.getWeekyear();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfDay(36);
        int int45 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTimeISO();
        org.joda.time.Instant instant47 = org.joda.time.Instant.now();
        long long48 = instant47.getMillis();
        org.joda.time.DateTime dateTime49 = instant47.toDateTime();
        int int50 = dateTime49.getMonthOfYear();
        int int51 = dateTime49.getMonthOfYear();
        boolean boolean52 = dateTime44.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645456040950L + "'", long48 == 1645456040950L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test19350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19350");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder8 = builder0.setDate(20, (int) 'u', 37920197);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Calendar.Builder builder10 = builder8.setLocale(locale9);
        java.util.Calendar.Builder builder14 = builder10.setDate(37919999, 1, (int) (byte) 0);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("South Korea");
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        timeZone16.setID("-1");
        timeZone16.setID("Thu");
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("South Korea");
        int int24 = timeZone23.getRawOffset();
        timeZone23.setRawOffset(10);
        int int27 = timeZone23.getRawOffset();
        java.util.TimeZone.setDefault(timeZone23);
        boolean boolean29 = timeZone16.hasSameRules(timeZone23);
        java.util.Calendar.Builder builder30 = builder10.setTimeZone(timeZone23);
        java.util.Calendar.Builder builder32 = builder30.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime38.plus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime38.withWeekOfWeekyear((int) (short) 10);
        int int44 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime46 = dateTime43.minus((long) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 0, chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime55 = dateTime52.plus(readableDuration54);
        org.joda.time.DateTime dateTime57 = dateTime52.withWeekOfWeekyear((int) (short) 10);
        int int58 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone49);
        org.joda.time.DateTime dateTime60 = dateTime46.withZone(dateTimeZone49);
        org.joda.time.DateTime.Property property61 = dateTime46.yearOfEra();
        java.lang.String str62 = property61.getAsString();
        java.util.Locale locale66 = new java.util.Locale("0032-10-01T10:32:00.000+10:32", "37920000-02-21T01:05:24.104", "zh_CN");
        java.lang.String str67 = locale66.getDisplayScript();
        java.lang.String str68 = property61.getAsShortText(locale66);
        java.util.Calendar.Builder builder69 = builder32.setLocale(locale66);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 37920000 + "'", int44 == 37920000);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 37920000 + "'", int58 == 37920000);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
        org.junit.Assert.assertEquals(locale66.toString(), "0032-10-01t10:32:00.000+10:32_37920000-02-21T01:05:24.104_zh_CN");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970" + "'", str68, "1970");
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test19351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19351");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("weekOfWeekyear");
        timeZone1.setRawOffset((int) (byte) 10);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        calendar4.setTimeInMillis(1645455629208L);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 0, chronology8);
        int int10 = dateTime9.getSecondOfMinute();
        org.joda.time.DateTime dateTime12 = dateTime9.withYear(10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime15.toMutableDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime15.minus((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime15.withDayOfWeek(4);
        boolean boolean23 = dateTime15.equals((java.lang.Object) "eras");
        boolean boolean24 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime15);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("");
        java.lang.String str27 = locale26.getScript();
        java.util.Calendar calendar28 = dateTime15.toCalendar(locale26);
        java.util.TimeZone timeZone29 = calendar28.getTimeZone();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone29);
        int int31 = timeZone29.getRawOffset();
        calendar4.setTimeZone(timeZone29);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = calendar4.getMaximum(24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455629208,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=0,SECOND=29,MILLISECOND=218,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645456040999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=20,MILLISECOND=999,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 37920000 + "'", int31 == 37920000);
    }

    @Test
    public void test19352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19352");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        java.lang.String str27 = localDateTime25.toString();
        int int28 = localDateTime25.getHourOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfCentury();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfCentury();
        org.joda.time.DateTime dateTime34 = property33.roundFloorCopy();
        org.joda.time.DateTime dateTime35 = property33.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.withPeriodAdded(readablePeriod36, 44940);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology40);
        int int42 = dateTime41.getSecondOfMinute();
        org.joda.time.DateTime.Property property43 = dateTime41.dayOfWeek();
        org.joda.time.DateTime.Property property44 = dateTime41.minuteOfDay();
        org.joda.time.DateTime dateTime46 = dateTime41.withCenturyOfEra((int) (short) 1);
        boolean boolean47 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfCentury();
        org.joda.time.DateTime dateTime53 = dateTime50.withMillisOfDay(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 0, chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.plus(readableDuration59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int62 = dateTime60.get(dateTimeFieldType61);
        org.joda.time.DateTime dateTime63 = dateTime60.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime67 = dateTime60.toDateTime(dateTimeZone66);
        org.joda.time.Chronology chronology68 = dateTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType54.getField(chronology68);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withField(dateTimeFieldType71, 5);
        int int74 = dateTime53.get(dateTimeFieldType71);
        org.joda.time.DateTime.Property property75 = dateTime41.property(dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property76 = localDateTime25.property(dateTimeFieldType71);
        int int77 = property76.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2024-01-22T01:05:21.026" + "'", str27, "2024-01-22T01:05:21.026");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 37920000 + "'", int62 == 37920000);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test19353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19353");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (short) 1);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        int int19 = gregorianCalendar18.getWeekYear();
        int int20 = gregorianCalendar18.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar18.add(5427565, 7170);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1901 + "'", int19 == 1901);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test19354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19354");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        int int4 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime2.plusYears(6);
        boolean boolean7 = dateTime6.isAfterNow();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfSecond(40);
        org.joda.time.DateTime.Property property11 = dateTime8.millisOfSecond();
        boolean boolean12 = property11.isLeap();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test19355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19355");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        long long5 = dateTimeField2.set((long) 6, "1");
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property8 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime10 = property8.setCopy(31);
        org.joda.time.LocalTime localTime12 = property8.addWrapFieldToCopy(37920000);
        int int13 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime localTime15 = localTime12.minusHours(889);
        org.joda.time.LocalTime localTime17 = localTime12.plusMillis(101834);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-37919999L) + "'", long5 == (-37919999L));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 86399999 + "'", int13 == 86399999);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test19356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19356");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.plus((long) (short) 1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant2.plus(readableDuration3);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(9);
        boolean boolean13 = instant2.equals((java.lang.Object) dateTimeFormatter12);
        boolean boolean14 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter12.getPrinter();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(dateTimePrinter15);
    }

    @Test
    public void test19357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19357");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology24);
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(10);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTime.Property property31 = dateTime25.millisOfSecond();
        org.joda.time.DateTime dateTime33 = dateTime25.plusMillis((int) (byte) 10);
        boolean boolean34 = calendar21.before((java.lang.Object) dateTime33);
        int int35 = dateTime33.getSecondOfDay();
        java.util.GregorianCalendar gregorianCalendar36 = dateTime33.toGregorianCalendar();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37920 + "'", int35 == 37920);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
    }

    @Test
    public void test19358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19358");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology24);
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(10);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTime.Property property31 = dateTime25.millisOfSecond();
        org.joda.time.DateTime dateTime33 = dateTime25.plusMillis((int) (byte) 10);
        boolean boolean34 = calendar21.before((java.lang.Object) dateTime33);
        calendar21.setLenient(true);
        int int38 = calendar21.getMaximum(15);
        int int39 = calendar21.getWeeksInWeekYear();
        calendar21.setTimeInMillis(10368000000L);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = calendar21.get((-2720));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=10368000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=121,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50400000 + "'", int38 == 50400000);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
    }

    @Test
    public void test19359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19359");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfMinute();
        boolean boolean20 = property19.isLeap();
        org.joda.time.DateTime dateTime22 = property19.addWrapFieldToCopy((-1154166335));
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(readableDuration23, 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test19360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19360");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("South Korea");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1);
        int int4 = timeZone1.getRawOffset();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone1);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("South Korea");
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        java.lang.String str10 = timeZone8.getID();
        java.util.TimeZone.setDefault(timeZone8);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456041173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=21,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456041173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=21,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645456041173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=21,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT" + "'", str10, "GMT");
    }

    @Test
    public void test19361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19361");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("February");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "february" + "'", str2, "february");
    }

    @Test
    public void test19362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19362");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime5.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime5.toYearMonthDay();
        long long12 = dateTime5.getMillis();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-31536000000L) + "'", long12 == (-31536000000L));
    }

    @Test
    public void test19363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19363");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusDays(4);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withWeekyear(631);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withYear((-292275054));
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime39 = property37.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusMonths((int) 'x');
        int int42 = localDateTime41.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 211 + "'", int42 == 211);
    }

    @Test
    public void test19364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19364");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        int int4 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime2.plusYears(6);
        boolean boolean7 = dateTime6.isAfterNow();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.withWeekyear(49);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        org.joda.time.DateTime dateTime12 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = property11.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = property11.addToCopy(3906600L);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property22 = localTime21.secondOfMinute();
        int int23 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localTime21);
        boolean boolean24 = dateTimeField19.isSupported();
        long long27 = dateTimeField19.add((long) 631, 1645455491851L);
        java.util.Locale locale32 = new java.util.Locale("Greenwich Mean Time", "ISOChronology[+10:32]", "en_CA");
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property38 = localTime37.secondOfMinute();
        int int39 = dateTimeField35.getMinimumValue((org.joda.time.ReadablePartial) localTime37);
        boolean boolean40 = dateTimeField35.isSupported();
        long long43 = dateTimeField35.add((long) 631, 1645455491851L);
        java.util.Locale locale45 = new java.util.Locale("37920001");
        int int46 = dateTimeField35.getMaximumShortTextLength(locale45);
        java.lang.String str47 = locale32.getDisplayLanguage(locale45);
        java.lang.String str48 = dateTimeField19.getAsText((int) (short) 10, locale45);
        boolean boolean49 = locale45.hasExtensions();
        java.util.Set<java.lang.String> strSet50 = locale45.getUnicodeLocaleKeys();
        java.lang.String str51 = locale45.getDisplayVariant();
        java.util.Locale locale52 = null;
        java.lang.String str53 = locale45.getDisplayCountry(locale52);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale54.getISO3Country();
        java.lang.String str56 = locale45.getDisplayVariant(locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = dateTime15.toString("5767-02-22T00:05:31.912", locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645455492482L + "'", long27 == 1645455492482L);
        org.junit.Assert.assertEquals(locale32.toString(), "greenwich mean time_ISOCHRONOLOGY[+10:32]_en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645455492482L + "'", long43 == 1645455492482L);
        org.junit.Assert.assertEquals(locale45.toString(), "37920001");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "greenwich mean time" + "'", str47, "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "10" + "'", str48, "10");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CHN" + "'", str55, "CHN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test19365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19365");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long4 = dateTimeZone1.adjustOffset((long) 9, true);
        java.lang.String str5 = dateTimeZone1.getID();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) (short) -1);
        java.lang.String str10 = dateTimeZone1.toString();
        int int12 = dateTimeZone1.getOffset(0L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime15.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime15.minus(readablePeriod23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfCentury();
        org.joda.time.DateTime dateTime30 = property29.roundFloorCopy();
        boolean boolean31 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime34.toMutableDateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime34.minus((long) '#');
        org.joda.time.DateTime dateTime40 = dateTime34.withDayOfWeek(4);
        org.joda.time.DateTime.Property property41 = dateTime34.weekyear();
        org.joda.time.DateTime dateTime43 = dateTime34.withYear((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int45 = dateTime43.get(dateTimeFieldType44);
        boolean boolean46 = dateTime30.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int50 = dateTimeZone48.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime51 = dateTime30.withZoneRetainFields(dateTimeZone48);
        int int52 = dateTime30.getCenturyOfEra();
        int int53 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime30.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9L + "'", long4 == 9L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.100" + "'", str5, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-37919901L) + "'", long9 == (-37919901L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.100" + "'", str10, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 19 + "'", int52 == 19);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(mutableDateTime54);
    }

    @Test
    public void test19366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        int int7 = dateTime2.getCenturyOfEra();
        org.joda.time.DateTime.Property property8 = dateTime2.dayOfMonth();
        org.joda.time.DateTime.Property property9 = dateTime2.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime15.withYear(11);
        org.joda.time.DateTime dateTime22 = dateTime15.minus((long) 5415578);
        org.joda.time.DateTime dateTime24 = dateTime15.withWeekyear(0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.DateTime dateTime30 = dateTime27.withYear(10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime33.toMutableDateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime33.minus((long) '#');
        org.joda.time.DateTime dateTime39 = dateTime33.withDayOfWeek(4);
        boolean boolean41 = dateTime33.equals((java.lang.Object) "eras");
        boolean boolean42 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.lang.String str45 = locale44.getScript();
        java.util.Calendar calendar46 = dateTime33.toCalendar(locale44);
        java.util.TimeZone timeZone47 = calendar46.getTimeZone();
        java.time.ZoneId zoneId48 = timeZone47.toZoneId();
        timeZone47.setRawOffset(14);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        int int53 = dateTimeZone51.getStandardOffset(100L);
        org.joda.time.DateTime dateTime54 = dateTime15.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime58.plus(readableDuration60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int63 = dateTime61.get(dateTimeFieldType62);
        org.joda.time.DateTime dateTime64 = dateTime61.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime68 = dateTime61.toDateTime(dateTimeZone67);
        org.joda.time.Chronology chronology69 = dateTime68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType55.getField(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekyear();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology69.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology69.hourOfDay();
        org.joda.time.DurationField durationField75 = chronology69.seconds();
        org.joda.time.DateTime dateTime76 = dateTime15.toDateTime(chronology69);
        boolean boolean77 = dateTime15.isAfterNow();
        long long78 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.TimeOfDay timeOfDay79 = dateTime15.toTimeOfDay();
        org.joda.time.DateTime dateTime80 = dateTime15.withLaterOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay81 = dateTime80.toTimeOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37920000 + "'", int17 == 37920000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=14,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(zoneId48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 37920000 + "'", int53 == 37920000);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 37920000 + "'", int63 == 37920000);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(timeOfDay81);
    }

    @Test
    public void test19367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19367");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.clockhourOfDay();
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        int int22 = dateTimeField17.getMaximumTextLength(locale20);
        long long25 = dateTimeField17.set(22934016000007L, (int) (byte) 10);
        org.joda.time.DurationField durationField26 = dateTimeField17.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u570b" + "'", str21, "\u4e2d\u570b");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 22934016000007L + "'", long25 == 22934016000007L);
        org.junit.Assert.assertNull(durationField26);
    }

    @Test
    public void test19368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19368");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.hourOfDay();
        long long21 = chronology14.add(0L, (long) 50, 5429188);
        org.joda.time.DurationField durationField22 = chronology14.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology14.weekyear();
        long long26 = dateTimeField23.add((long) 93, 365);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 271459400L + "'", long21 == 271459400L);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 11518416000093L + "'", long26 == 11518416000093L);
    }

    @Test
    public void test19369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19369");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTime dateTime7 = dateTime2.minusMonths(327735);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(37919999);
        int int10 = dateTime7.getYearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 25343 + "'", int10 == 25343);
    }

    @Test
    public void test19370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19370");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long4 = dateTimeZone1.adjustOffset((long) 9, true);
        java.lang.String str5 = dateTimeZone1.getID();
        java.lang.String str7 = dateTimeZone1.getNameKey(1645455495846L);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone1);
        long long11 = dateTimeZone1.adjustOffset(1645455682340L, false);
        long long13 = dateTimeZone1.convertUTCToLocal((long) 50400000);
        long long16 = dateTimeZone1.convertLocalToUTC((long) 69, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9L + "'", long4 == 9L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.100" + "'", str5, "+00:00:00.100");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455682340L + "'", long11 == 1645455682340L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 50400100L + "'", long13 == 50400100L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-31L) + "'", long16 == (-31L));
    }

    @Test
    public void test19371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19371");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.LocalDate localDate27 = dateTime20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfEra();
        long long34 = chronology14.set((org.joda.time.ReadablePartial) localDate31, (long) 11);
        org.joda.time.DurationField durationField35 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField36 = chronology14.year();
        java.lang.String str37 = chronology14.toString();
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.DateTimeField dateTimeField39 = chronology14.secondOfDay();
        org.joda.time.DurationField durationField40 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField41 = chronology14.dayOfMonth();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.LocalDate.Property property43 = localDate42.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9223372016611199989L) + "'", long34 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+10:32]" + "'", str37, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test19372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19372");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.secondOfMinute();
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 0, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime26.minus((long) '#');
        org.joda.time.DateTime dateTime32 = dateTime26.withDayOfWeek(4);
        org.joda.time.LocalDate localDate33 = dateTime26.toLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.plusYears(100);
        org.joda.time.LocalDate.Property property36 = localDate35.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        boolean boolean41 = dateTimeField39.isLeap((long) 9);
        boolean boolean42 = dateTimeField39.isSupported();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale43.getDisplayScript();
        int int45 = dateTimeField39.getMaximumShortTextLength(locale43);
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Set<java.lang.Character> charSet47 = locale43.getExtensionKeys();
        int int48 = property36.getMaximumTextLength(locale43);
        java.util.Locale.setDefault(category23, locale43);
        long long50 = dateTimeField20.set(1645455512187L, "6", locale43);
        java.lang.String str51 = locale43.getVariant();
        java.lang.String str52 = locale43.getDisplayCountry();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale43);
        int int54 = calendar53.getWeekYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zho" + "'", str46, "zho");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645455486187L + "'", long50 == 1645455486187L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u53f0\u7063" + "'", str52, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645456041410,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=21,MILLISECOND=410,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
    }

    @Test
    public void test19373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19373");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.DurationField durationField14 = property12.getDurationField();
        org.joda.time.LocalDate localDate15 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate16 = property12.roundHalfEvenCopy();
        java.lang.String str17 = property12.getAsString();
        org.joda.time.DateTimeField dateTimeField18 = property12.getField();
        boolean boolean20 = dateTimeField18.isLeap((long) 9867);
        int int21 = dateTimeField18.getMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
    }

    @Test
    public void test19374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19374");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.DateTime.Property property9 = dateTime2.weekyear();
        org.joda.time.DateTime dateTime11 = dateTime2.withYear((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType12.getRangeDurationType();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(durationFieldType14);
    }

    @Test
    public void test19375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19375");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        int int6 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.LocalTime localTime8 = localTime4.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property9.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime15.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime15.minus(readablePeriod23);
        long long25 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        java.lang.String str26 = property9.getAsShortText();
        org.joda.time.LocalTime localTime27 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfSecond();
        java.lang.String str29 = property28.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 632L + "'", long25 == 632L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
    }

    @Test
    public void test19376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19376");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone15);
        org.joda.time.LocalDate.Property property17 = localDate16.weekOfWeekyear();
        org.joda.time.LocalDate localDate18 = property17.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime21.withDayOfWeek(4);
        org.joda.time.LocalDate localDate28 = dateTime21.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate28.plus(readablePeriod29);
        org.joda.time.LocalDate.Property property31 = localDate30.weekyear();
        org.joda.time.LocalDate localDate32 = localDate18.withFields((org.joda.time.ReadablePartial) localDate30);
        int int33 = localDate13.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate13.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfCentury();
        org.joda.time.DateTime dateTime41 = property39.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime45 = dateTime41.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime41.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 0, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int55 = dateTime53.get(dateTimeFieldType54);
        org.joda.time.DateTime dateTime56 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime60 = dateTime53.toDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType47.getField(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.weekyear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime41.toMutableDateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField66 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology61.dayOfWeek();
        org.joda.time.DurationField durationField68 = chronology61.eras();
        org.joda.time.DateTimeField dateTimeField69 = chronology61.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime35.toMutableDateTime(chronology61);
        org.joda.time.format.DateTimePrinter dateTimePrinter71 = null;
        org.joda.time.format.DateTimeParser dateTimeParser72 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter71, dateTimeParser72);
        org.joda.time.Chronology chronology74 = dateTimeFormatter73.getChronology();
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        java.lang.String str78 = locale76.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter73.withLocale(locale76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter73.withPivotYear((int) (short) -1);
        java.util.Locale locale82 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter73.withLocale(locale82);
        java.util.Locale locale84 = java.util.Locale.PRC;
        java.util.Locale locale85 = locale84.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter73.withLocale(locale84);
        java.util.Calendar calendar87 = mutableDateTime70.toCalendar(locale84);
        java.lang.String str88 = locale84.getISO3Country();
        java.util.Set<java.lang.String> strSet89 = locale84.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 37920000 + "'", int55 == 37920000);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNull(chronology74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=-31958510,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=21,MILLISECOND=490,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "CHN" + "'", str88, "CHN");
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test19377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19377");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.LocalTime.Property property8 = localTime6.secondOfMinute();
        org.joda.time.LocalTime localTime10 = property8.addCopy((long) 5565850);
        int int11 = localTime10.size();
        java.lang.String str12 = localTime10.toString();
        org.joda.time.LocalTime localTime14 = localTime10.plusMinutes(5886677);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "20:16:10.097" + "'", str12, "20:16:10.097");
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test19378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19378");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 5680634);
    }

    @Test
    public void test19379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19379");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime.Property property4 = dateTime2.dayOfWeek();
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime2.plusHours(5501598);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone11);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = property13.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.plus(readableDuration19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int22 = dateTime20.get(dateTimeFieldType21);
        boolean boolean23 = localDate14.equals((java.lang.Object) dateTime20);
        int int24 = localDate14.getWeekyear();
        org.joda.time.Chronology chronology25 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        long long29 = dateTimeZone26.adjustOffset(946646880000L, false);
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(dateTimeZone26);
        long long31 = dateTime30.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37920000 + "'", int22 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 946646880000L + "'", long29 == 946646880000L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test19380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19380");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime5.toDateTime(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset((long) 9);
        long long16 = dateTimeZone11.convertUTCToLocal(100L);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime19.toMutableDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime19.minus((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime19.withDayOfWeek(4);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime25.withCenturyOfEra(1);
        int int29 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime25);
        long long31 = dateTimeZone11.convertUTCToLocal((long) (byte) 100);
        long long34 = dateTimeZone11.convertLocalToUTC(23247165850L, true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37920000 + "'", int7 == 37920000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37920000 + "'", int14 == 37920000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 37920100L + "'", long16 == 37920100L);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 37920000 + "'", int29 == 37920000);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 37920100L + "'", long31 == 37920100L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 23209245850L + "'", long34 == 23209245850L);
    }

    @Test
    public void test19381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19381");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.dayOfMonth();
        int int20 = dateTimeField18.get((-259200000L));
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("");
        java.lang.String str27 = locale26.getScript();
        java.lang.String str28 = locale23.getDisplayLanguage(locale26);
        java.lang.String str29 = locale23.getScript();
        java.util.Locale locale30 = null;
        java.lang.String str31 = locale23.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale32.getDisplayCountry();
        java.lang.String str34 = locale23.getDisplayVariant(locale32);
        java.lang.String str35 = dateTimeField18.getAsText((long) (-724734), locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.plus(readableDuration41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int44 = dateTime42.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime45 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime49 = dateTime42.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType36.getField(chronology50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withField(dateTimeFieldType53, 5);
        int int56 = localDateTime52.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.minusYears(6);
        org.joda.time.LocalDateTime.Property property59 = localDateTime52.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMinimumValue();
        int int61 = localDateTime60.getCenturyOfEra();
        java.lang.String str62 = localDateTime60.toString();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.plusHours(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) 0, chronology67);
        org.joda.time.DateTime.Property property69 = dateTime68.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.DateTime dateTime71 = dateTime68.plus(readableDuration70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int73 = dateTime71.get(dateTimeFieldType72);
        org.joda.time.DateTime dateTime74 = dateTime71.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime78 = dateTime71.toDateTime(dateTimeZone77);
        org.joda.time.Chronology chronology79 = dateTime78.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType65.getField(chronology79);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.withField(dateTimeFieldType82, 5);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusHours(23);
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.weekyear();
        org.joda.time.LocalDateTime localDateTime88 = property87.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.yearOfEra();
        org.joda.time.LocalDateTime.Property property90 = localDateTime88.millisOfDay();
        int[] intArray91 = localDateTime88.getValues();
        int int92 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime64, intArray91);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 29 + "'", int20 == 29);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u5357\u97d3" + "'", str33, "\u5357\u97d3");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 37920000 + "'", int44 == 37920000);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5961593 + "'", int56 == 5961593);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20 + "'", int61 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-21T01:39:21.593" + "'", str62, "2022-02-21T01:39:21.593");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 37920000 + "'", int73 == 37920000);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[2022, 1, 3, 0]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 31 + "'", int92 == 31);
    }

    @Test
    public void test19382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19382");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withYear(37920000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = localDateTime27.toString(dateTimeFormatter28);
        int int30 = localDateTime27.getEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localDateTime27.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.plus(readableDuration37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int40 = dateTime38.get(dateTimeFieldType39);
        org.joda.time.DateTime dateTime41 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType32.getField(chronology46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withField(dateTimeFieldType49, 5);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusHours(23);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYearOfEra(59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 0, chronology62);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.plus(readableDuration65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int68 = dateTime66.get(dateTimeFieldType67);
        org.joda.time.DateTime dateTime69 = dateTime66.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean71 = dateTime69.isSupported(dateTimeFieldType70);
        boolean boolean72 = localDateTime60.isSupported(dateTimeFieldType70);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType70.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property74 = localDateTime27.property(dateTimeFieldType70);
        org.joda.time.LocalDateTime localDateTime75 = property74.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime76 = property74.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "37920000-02-21T01:05:21.650" + "'", str29, "37920000-02-21T01:05:21.650");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 37920000 + "'", int40 == 37920000);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 37920000 + "'", int68 == 37920000);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
    }

    @Test
    public void test19383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19383");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        int int15 = dateTimeZone12.getStandardOffset((long) 9);
        long long17 = dateTimeZone12.convertUTCToLocal(100L);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(52L, dateTimeZone12);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfWeek();
        org.joda.time.LocalDate localDate21 = localDate18.minusWeeks(32772);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate21.minus(readablePeriod22);
        int int24 = localDate23.getDayOfMonth();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 37920000 + "'", int15 == 37920000);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 37920100L + "'", long17 == 37920100L);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 30 + "'", int24 == 30);
    }

    @Test
    public void test19384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19384");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime9 = localTime6.withFields((org.joda.time.ReadablePartial) localTime8);
        int int10 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime6);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = localTime3.toString("1", locale12);
        int int14 = localTime3.size();
        int int15 = localTime3.size();
        org.joda.time.LocalTime.Property property16 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime18 = property16.setCopy(3956959);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test19385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19385");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime7 = property6.withMaximumValue();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test19386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19386");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.plus(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localDate4.equals((java.lang.Object) dateTime10);
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 0, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime19.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime19.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime19.minus(readablePeriod27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfCentury();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfCentury();
        org.joda.time.DateTime dateTime34 = property33.roundFloorCopy();
        boolean boolean35 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime38.toMutableDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime38.minus((long) '#');
        org.joda.time.DateTime dateTime44 = dateTime38.withDayOfWeek(4);
        org.joda.time.DateTime.Property property45 = dateTime38.weekyear();
        org.joda.time.DateTime dateTime47 = dateTime38.withYear((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int49 = dateTime47.get(dateTimeFieldType48);
        boolean boolean50 = dateTime34.isSupported(dateTimeFieldType48);
        boolean boolean51 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime53 = dateTime34.minusDays(5847151);
        org.joda.time.DateTime dateTime55 = dateTime34.minusMillis(951);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920000 + "'", int12 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test19387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19387");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear(7);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        org.joda.time.LocalDateTime localDateTime33 = property31.addToCopy((-37918099L));
        int int34 = localDateTime33.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test19388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19388");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(5767);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property19 = localTime18.secondOfMinute();
        int int20 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localTime18);
        boolean boolean21 = dateTimeField16.isSupported();
        long long24 = dateTimeField16.add((long) 631, 1645455491851L);
        java.util.Locale locale29 = new java.util.Locale("Greenwich Mean Time", "ISOChronology[+10:32]", "en_CA");
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property35 = localTime34.secondOfMinute();
        int int36 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) localTime34);
        boolean boolean37 = dateTimeField32.isSupported();
        long long40 = dateTimeField32.add((long) 631, 1645455491851L);
        java.util.Locale locale42 = new java.util.Locale("37920001");
        int int43 = dateTimeField32.getMaximumShortTextLength(locale42);
        java.lang.String str44 = locale29.getDisplayLanguage(locale42);
        java.lang.String str45 = dateTimeField16.getAsText((int) (short) 10, locale42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter13.withLocale(locale42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter46.withPivotYear((java.lang.Integer) 43);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeFormatter48.getZone();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str56 = nameProvider50.getName(locale52, "+00:00:00.100", "53");
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str60 = nameProvider50.getName(locale57, "53", "1 janv. 1970 00:00:00");
        java.util.Set<java.lang.String> strSet61 = locale57.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor62 = strSet61.iterator();
        boolean boolean63 = dateTimeZone49.equals((java.lang.Object) strItor62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter7.withZone(dateTimeZone49);
        org.joda.time.Chronology chronology65 = dateTimeFormatter7.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime67 = dateTimeFormatter7.parseMutableDateTime("\u671d\u9c9c\u6587\u97e9\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455492482L + "'", long24 == 1645455492482L);
        org.junit.Assert.assertEquals(locale29.toString(), "greenwich mean time_ISOCHRONOLOGY[+10:32]_en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645455492482L + "'", long40 == 1645455492482L);
        org.junit.Assert.assertEquals(locale42.toString(), "37920001");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "greenwich mean time" + "'", str44, "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "10" + "'", str45, "10");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNull(chronology65);
    }

    @Test
    public void test19389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19389");
        java.util.Date date6 = new java.util.Date(5886677, 668, 5624663, 625, (-1154166335), 541);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 04 15:34:01 GMT 5901838");
    }

    @Test
    public void test19390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19390");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfCentury();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra(5415578);
        java.util.Date date21 = dateTime18.toDate();
        org.joda.time.DateTime dateTime23 = dateTime18.minusYears(5);
        org.joda.time.DateTime dateTime25 = dateTime18.minusMinutes(14);
        org.joda.time.Chronology chronology26 = dateTime18.getChronology();
        boolean boolean27 = dateTimeZone2.equals((java.lang.Object) chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Wed Dec 31 13:28:00 GMT 1969");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test19391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19391");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType8.getField(chronology22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withField(dateTimeFieldType25, 5);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusHours(23);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = property30.getLocalDateTime();
        int int32 = property30.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField34 = property30.getField();
        org.joda.time.LocalDateTime localDateTime35 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusHours((-292275054));
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusHours(5436181);
        java.util.Date date41 = new java.util.Date(197L);
        boolean boolean42 = localDateTime39.equals((java.lang.Object) date41);
        org.joda.time.Chronology chronology43 = localDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter5.withChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.clockhourOfHalfday();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 37920000 + "'", int16 == 37920000);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test19392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19392");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("37920100");
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str13 = nameProvider7.getName(locale9, "+00:00:00.100", "53");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime23 = dateTime19.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfMonth(2);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Calendar calendar27 = dateTime23.toCalendar(locale26);
        java.lang.String str30 = nameProvider7.getShortName(locale26, "DateTimeField[hourOfDay]", "DateTimeField[millisOfDay]");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime33.withYear(10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime39.toMutableDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime39.minus((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime39.withDayOfWeek(4);
        boolean boolean47 = dateTime39.equals((java.lang.Object) "eras");
        boolean boolean48 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("");
        java.lang.String str51 = locale50.getScript();
        java.util.Calendar calendar52 = dateTime39.toCalendar(locale50);
        java.lang.String str55 = nameProvider7.getShortName(locale50, "SOUTH KOREA (1970-01-01)", "Chinese (China)");
        java.util.Locale.Builder builder56 = builder4.setLocale(locale50);
        java.util.Locale.Builder builder57 = builder56.clear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 0, chronology59);
        int int61 = dateTime60.getSecondOfMinute();
        org.joda.time.DateTime dateTime63 = dateTime60.withYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType64.getField(chronology65);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property69 = localTime68.secondOfMinute();
        int int70 = dateTimeField66.getMinimumValue((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.LocalTime localTime72 = localTime68.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property73 = localTime72.minuteOfHour();
        org.joda.time.DateTime dateTime74 = dateTime63.withFields((org.joda.time.ReadablePartial) localTime72);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 0, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime77.toMutableDateTime(chronology78);
        int int80 = mutableDateTime79.getDayOfWeek();
        org.joda.time.Chronology chronology81 = mutableDateTime79.getChronology();
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime63.toMutableDateTime(chronology81);
        org.joda.time.DateTimeField dateTimeField83 = chronology81.weekOfWeekyear();
        java.lang.String str84 = dateTimeField83.getName();
        java.util.Locale locale87 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet88 = locale87.getUnicodeLocaleAttributes();
        java.util.Locale locale90 = java.util.Locale.forLanguageTag("");
        java.lang.String str91 = locale90.getScript();
        java.lang.String str92 = locale87.getDisplayLanguage(locale90);
        java.lang.String str93 = locale90.getVariant();
        java.lang.String str94 = dateTimeField83.getAsShortText((int) (short) 1, locale90);
        java.lang.String str95 = locale90.getCountry();
        java.util.Locale.Builder builder96 = builder56.setLocale(locale90);
        java.util.Locale locale97 = builder96.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "weekOfWeekyear" + "'", str84, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1" + "'", str94, "1");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(locale97);
        org.junit.Assert.assertEquals(locale97.toString(), "");
    }

    @Test
    public void test19393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19393");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("37920100");
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str13 = nameProvider7.getName(locale9, "+00:00:00.100", "53");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime23 = dateTime19.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfMonth(2);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Calendar calendar27 = dateTime23.toCalendar(locale26);
        java.lang.String str30 = nameProvider7.getShortName(locale26, "DateTimeField[hourOfDay]", "DateTimeField[millisOfDay]");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime33.withYear(10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime39.toMutableDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime39.minus((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime39.withDayOfWeek(4);
        boolean boolean47 = dateTime39.equals((java.lang.Object) "eras");
        boolean boolean48 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("");
        java.lang.String str51 = locale50.getScript();
        java.util.Calendar calendar52 = dateTime39.toCalendar(locale50);
        java.lang.String str55 = nameProvider7.getShortName(locale50, "SOUTH KOREA (1970-01-01)", "Chinese (China)");
        java.util.Locale.Builder builder56 = builder4.setLocale(locale50);
        java.util.Locale.Builder builder57 = builder56.clear();
        java.util.Locale.Builder builder59 = builder56.removeUnicodeLocaleAttribute("37920001");
        java.util.Locale.Builder builder60 = builder59.clearExtensions();
        java.util.Locale.Builder builder61 = builder59.clear();
        java.util.Locale.Builder builder62 = builder61.clearExtensions();
        java.util.Locale.Builder builder63 = builder61.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder65 = builder63.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test19394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19394");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T01:05:09.354");
        java.util.Date date7 = new java.util.Date(36, 6, 34, 43, 34);
        boolean boolean8 = timeZone1.inDaylightTime(date7);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals(date7.toString(), "Tue Aug 04 19:34:00 GMT 1936");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test19395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19395");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.LocalDate localDate27 = dateTime20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfEra();
        long long34 = chronology14.set((org.joda.time.ReadablePartial) localDate31, (long) 11);
        org.joda.time.LocalDate.Property property35 = localDate31.era();
        java.lang.String str37 = localDate31.toString("1970-01-01");
        org.joda.time.LocalDate localDate39 = localDate31.plusYears((int) (short) 10);
        org.joda.time.LocalDate localDate41 = localDate39.plusDays(6);
        org.joda.time.LocalDate.Property property42 = localDate39.dayOfMonth();
        org.joda.time.LocalDate localDate44 = property42.addToCopy(365);
        org.joda.time.LocalDate localDate45 = property42.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate47 = localDate45.plusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate49 = localDate47.withDayOfMonth(105);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 105 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9223372016611199989L) + "'", long34 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test19396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19396");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate13 = property11.setCopy(7);
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property14.withMinimumValue();
        org.joda.time.LocalDate localDate17 = property14.setCopy(2024);
        org.joda.time.LocalDate localDate19 = property14.addToCopy(46);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 2021);
        org.joda.time.DateTime dateTime25 = dateTime23.plusDays((int) (byte) 10);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime25, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate19.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.LocalDate.Property property31 = localDate19.dayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test19397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19397");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(16, (-292275054), 8);
        java.util.Calendar.Builder builder8 = builder0.setDate(20, (int) 'u', 37920197);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Calendar.Builder builder10 = builder8.setLocale(locale9);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(52, 5, 11);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        int int17 = calendar15.getMaximum(11);
        java.lang.Object obj18 = null;
        boolean boolean19 = calendar15.before(obj18);
        java.time.Instant instant20 = calendar15.toInstant();
        calendar15.set(10, 32, 70, 10, (int) (byte) -1);
        java.util.TimeZone timeZone27 = calendar15.getTimeZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.DateTime dateTime33 = dateTime30.withYear(10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime36.toMutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime36.withDayOfWeek(4);
        boolean boolean44 = dateTime36.equals((java.lang.Object) "eras");
        boolean boolean45 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime36);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("");
        java.lang.String str48 = locale47.getScript();
        java.util.Calendar calendar49 = dateTime36.toCalendar(locale47);
        java.util.TimeZone timeZone50 = calendar49.getTimeZone();
        java.lang.String str51 = timeZone50.getID();
        java.util.TimeZone.setDefault(timeZone50);
        boolean boolean53 = timeZone27.hasSameRules(timeZone50);
        java.util.Calendar.Builder builder54 = builder10.setTimeZone(timeZone50);
        java.util.Calendar.Builder builder58 = builder54.setWeekDate(37919999, 47, 101834);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=32,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=70,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=10,MINUTE=-1,SECOND=21,MILLISECOND=964,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GMT+10:32" + "'", str51, "GMT+10:32");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test19398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19398");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(889);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = dateTime4.withYear(10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 0, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime10.minus((long) '#');
        org.joda.time.DateTime dateTime16 = dateTime10.withDayOfWeek(4);
        boolean boolean18 = dateTime10.equals((java.lang.Object) "eras");
        boolean boolean19 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime10);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("");
        java.lang.String str22 = locale21.getScript();
        java.util.Calendar calendar23 = dateTime10.toCalendar(locale21);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMonths((-292275054));
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusMillis(332);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 0, chronology31);
        org.joda.time.DateTime.Property property33 = dateTime32.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.plus(readableDuration34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int37 = dateTime35.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime42 = dateTime35.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType29.getField(chronology43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withField(dateTimeFieldType46, 5);
        int int49 = localDateTime48.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusMonths(44940);
        boolean boolean52 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime24.withYear((int) 'a');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusYears(0);
        boolean boolean57 = dateTimeZone1.isLocalDateTimeGap(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 37920000 + "'", int37 == 37920000);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test19399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19399");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        int int24 = localDateTime23.getDayOfYear();
        java.util.Date date30 = new java.util.Date(14, 23, 5, (int) (short) 0, 32);
        boolean boolean31 = localDateTime23.equals((java.lang.Object) 5);
        java.lang.String str33 = localDateTime23.toString("69");
        org.joda.time.LocalDateTime localDateTime35 = localDateTime23.withYearOfEra(901);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertEquals(date30.toString(), "Sun Dec 05 00:32:00 GMT+10:32 1915");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "69" + "'", str33, "69");
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test19400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19400");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.plusMillis(4);
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra(22);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = dateTime8.withZoneRetainFields(dateTimeZone11);
        int int14 = dateTimeZone11.getOffsetFromLocal((long) 5420956);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int35 = dateTimeZone33.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime36 = localDateTime31.toDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime31.millisOfSecond();
        int int38 = localDateTime31.getSecondOfMinute();
        boolean boolean39 = dateTimeZone11.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType40.getRangeDurationType();
        boolean boolean43 = localDateTime31.isSupported(durationFieldType42);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = localDateTime31.getFields();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 37920000 + "'", int23 == 37920000);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 22 + "'", int38 == 22);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
    }

    @Test
    public void test19401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19401");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime1.property(dateTimeFieldType8);
        java.lang.String str11 = property10.getName();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = property10.getAsShortText(locale12);
        org.joda.time.LocalTime localTime14 = property10.getLocalTime();
        int int15 = property10.getMinimumValueOverall();
        org.joda.time.LocalTime localTime17 = property10.addWrapFieldToCopy(5427565);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        int int19 = localTime17.getHourOfDay();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfDay" + "'", str11, "millisOfDay");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "37920001" + "'", str13, "37920001");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
    }

    @Test
    public void test19402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19402");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withSecondOfMinute((int) (byte) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekOfWeekyear(37920010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37920010 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test19403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19403");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusDays(4);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readableDuration29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minus(readableDuration31);
        java.lang.String str33 = localDateTime28.toString();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withWeekOfWeekyear(1);
        int int36 = localDateTime35.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusMinutes(999);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minusSeconds(901);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime42 = property41.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2024-01-26T01:05:22.125" + "'", str33, "2024-01-26T01:05:22.125");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 24 + "'", int36 == 24);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test19404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19404");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("37920100");
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str13 = nameProvider7.getName(locale9, "+00:00:00.100", "53");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime23 = dateTime19.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfMonth(2);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Calendar calendar27 = dateTime23.toCalendar(locale26);
        java.lang.String str30 = nameProvider7.getShortName(locale26, "DateTimeField[hourOfDay]", "DateTimeField[millisOfDay]");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime33.withYear(10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime39.toMutableDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime39.minus((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime39.withDayOfWeek(4);
        boolean boolean47 = dateTime39.equals((java.lang.Object) "eras");
        boolean boolean48 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("");
        java.lang.String str51 = locale50.getScript();
        java.util.Calendar calendar52 = dateTime39.toCalendar(locale50);
        java.lang.String str55 = nameProvider7.getShortName(locale50, "SOUTH KOREA (1970-01-01)", "Chinese (China)");
        java.util.Locale.Builder builder56 = builder4.setLocale(locale50);
        java.util.Locale.Builder builder58 = builder4.removeUnicodeLocaleAttribute("February");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder58.setVariant("2024-01-26T01:05:00.186");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2024-01-26T01:05:00.186 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test19405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19405");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.withWeekOfWeekyear((int) (short) 10);
        int int12 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.minus((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.halfdayOfDay();
        org.joda.time.DurationField durationField33 = chronology29.hours();
        org.joda.time.DateTime dateTime34 = dateTime11.toDateTime(chronology29);
        org.joda.time.DurationField durationField35 = chronology29.weekyears();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology37 = chronology29.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology29.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((-61851600000000L), chronology29);
        int int40 = localDateTime39.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920000 + "'", int12 == 37920000);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 37920000 + "'", int23 == 37920000);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 37920000 + "'", int40 == 37920000);
    }

    @Test
    public void test19406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19406");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-22T00:05:16.177");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test19407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19407");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime2.plus(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime5.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.seconds();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime17.minus((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime17.withDayOfWeek(4);
        org.joda.time.LocalDate localDate24 = dateTime17.toLocalDate();
        boolean boolean26 = localDate24.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate28 = localDate24.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone30);
        org.joda.time.LocalDate.Property property32 = localDate31.weekOfWeekyear();
        org.joda.time.LocalDate localDate33 = property32.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime36.toMutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime36.withDayOfWeek(4);
        org.joda.time.LocalDate localDate43 = dateTime36.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate45 = localDate43.plus(readablePeriod44);
        org.joda.time.LocalDate.Property property46 = localDate45.weekyear();
        org.joda.time.LocalDate localDate47 = localDate33.withFields((org.joda.time.ReadablePartial) localDate45);
        int int48 = localDate28.compareTo((org.joda.time.ReadablePartial) localDate47);
        org.joda.time.LocalDate localDate50 = localDate28.minusWeeks(19);
        long long52 = chronology13.set((org.joda.time.ReadablePartial) localDate28, 32L);
        org.joda.time.Interval interval53 = localDate28.toInterval();
        org.joda.time.LocalDate localDate55 = localDate28.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate57 = localDate28.minusMonths((int) ' ');
        org.joda.time.LocalDate.Property property58 = localDate57.yearOfCentury();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37920000 + "'", int7 == 37920000);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 32L + "'", long52 == 32L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test19408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19408");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.LocalDate localDate27 = dateTime20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfEra();
        long long34 = chronology14.set((org.joda.time.ReadablePartial) localDate31, (long) 11);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField36 = chronology14.centuryOfEra();
        long long40 = chronology14.add((long) 5419344, 1645455501905L, 20);
        org.joda.time.DateTimeField dateTimeField41 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology14.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9223372016611199989L) + "'", long34 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32909115457444L + "'", long40 == 32909115457444L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test19409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19409");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.withWeekOfWeekyear((int) (short) 10);
        int int12 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        long long16 = dateTimeZone3.convertLocalToUTC((long) 23, false);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone3);
        java.lang.String str19 = dateTimeZone3.getNameKey((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 5584460, dateTimeZone3);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920000 + "'", int12 == 37920000);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-37919977L) + "'", long16 == (-37919977L));
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test19410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19410");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear(7);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.monthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test19411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19411");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.LocalDate localDate27 = dateTime20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfEra();
        long long34 = chronology14.set((org.joda.time.ReadablePartial) localDate31, (long) 11);
        org.joda.time.DurationField durationField35 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField36 = chronology14.year();
        java.lang.String str37 = chronology14.toString();
        org.joda.time.DurationField durationField38 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology14.year();
        org.joda.time.DateTimeField dateTimeField40 = chronology14.millisOfSecond();
        org.joda.time.DurationField durationField41 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField42 = chronology14.millisOfSecond();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9223372016611199989L) + "'", long34 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+10:32]" + "'", str37, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test19412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19412");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        int int6 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.LocalTime.Property property7 = localTime4.hourOfDay();
        long long8 = property7.remainder();
        org.joda.time.LocalTime localTime9 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(2024);
        org.joda.time.LocalTime localTime13 = localTime11.minusSeconds(1917);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = localTime13.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1920097L + "'", long8 == 1920097L);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test19413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19413");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        int int11 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minus((long) 100);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test19414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19414");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.LocalDate localDate18 = localDate2.withYearOfEra(53);
        org.joda.time.LocalDate localDate20 = localDate2.plusYears(10);
        java.util.Date date21 = localDate20.toDate();
        java.util.Date date23 = new java.util.Date((long) (byte) -1);
        java.util.Date date25 = new java.util.Date((long) (byte) -1);
        date25.setTime((long) ' ');
        boolean boolean28 = date23.after(date25);
        long long29 = date25.getTime();
        java.lang.String str30 = date25.toLocaleString();
        date25.setMinutes(632);
        boolean boolean33 = date21.after(date25);
        date25.setYear(5509835);
        int int36 = date25.getMinutes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 01 00:00:00 GMT+10:32 1980");
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 10:31:59 GMT+10:32 1970");
        org.junit.Assert.assertEquals(date25.toString(), "Sat Jan 01 20:32:00 GMT+10:32 5511735");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-1-1 10:32:00" + "'", str30, "1970-1-1 10:32:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
    }

    @Test
    public void test19415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19415");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        int int6 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.LocalTime.Property property7 = localTime4.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime4.minus(readablePeriod8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        int int16 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime.Property property17 = localTime14.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalTime localTime19 = localTime14.minus(readablePeriod18);
        int int20 = localTime9.compareTo((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.DateTime dateTime26 = dateTime23.withYear(10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime29.toMutableDateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime29.minus((long) '#');
        org.joda.time.DateTime dateTime35 = dateTime29.withDayOfWeek(4);
        boolean boolean37 = dateTime29.equals((java.lang.Object) "eras");
        boolean boolean38 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime29);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("");
        java.lang.String str41 = locale40.getScript();
        java.util.Calendar calendar42 = dateTime29.toCalendar(locale40);
        java.util.TimeZone timeZone43 = calendar42.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int46 = dateTimeZone44.getOffset(1645455526592L);
        boolean boolean47 = dateTimeZone44.isFixed();
        org.joda.time.DateTime dateTime48 = localTime9.toDateTimeToday(dateTimeZone44);
        java.lang.String str49 = dateTimeZone44.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 37920000 + "'", int46 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+10:32" + "'", str49, "+10:32");
    }

    @Test
    public void test19416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19416");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology9 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.withDurationAdded(1645455491077L, 51);
        org.joda.time.TimeOfDay timeOfDay13 = dateTime12.toTimeOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusHours(5421637);
        int int16 = dateTime15.getSecondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds(5586404);
        org.joda.time.DateTime dateTime20 = dateTime15.withYearOfEra(321937);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 68364 + "'", int16 == 68364);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test19417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19417");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("");
        java.lang.String str7 = locale4.getDisplayLanguage(locale6);
        java.lang.String str8 = locale4.getDisplayScript();
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale10.getDisplayScript();
        java.lang.String str12 = locale4.getDisplayScript(locale10);
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
    }

    @Test
    public void test19418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19418");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        int int17 = localDateTime16.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMinuteOfHour(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = localDateTime19.getFields();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.yearOfCentury();
        boolean boolean22 = property21.isLeap();
        org.joda.time.LocalDateTime localDateTime23 = property21.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = property21.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfYear(96);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test19419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19419");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.monthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMillis(86399999);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean24 = localDateTime19.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusHours(22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.plusMillis(197);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMillis((-292275054));
        int int31 = localDateTime30.getYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
    }

    @Test
    public void test19420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19420");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime8.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime18.withWeekOfWeekyear((int) (short) 10);
        int int24 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime23.minus((long) 100);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.plus(readableDuration27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.withPeriodAdded(readablePeriod29, 37920);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.plus(readableDuration36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int39 = dateTime37.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime40 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime44 = dateTime37.toDateTime(dateTimeZone43);
        int int46 = dateTimeZone43.getStandardOffset((long) 9);
        long long48 = dateTimeZone43.convertUTCToLocal(100L);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = null;
        org.joda.time.format.DateTimeParser dateTimeParser50 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter49, dateTimeParser50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 0, chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.plus(readableDuration57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int60 = dateTime58.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime61 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime65 = dateTime58.toDateTime(dateTimeZone64);
        org.joda.time.Chronology chronology66 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType52.getField(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyear();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.halfdayOfDay();
        org.joda.time.DurationField durationField70 = chronology66.hours();
        org.joda.time.DurationField durationField71 = chronology66.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter51.withChronology(chronology66);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter51.withChronology(chronology73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter51.withPivotYear(121);
        boolean boolean77 = dateTimeFormatter76.isParser();
        boolean boolean78 = dateTimeZone43.equals((java.lang.Object) boolean77);
        org.joda.time.DateTime dateTime79 = dateTime31.toDateTime(dateTimeZone43);
        long long81 = dateTimeZone11.getMillisKeepLocal(dateTimeZone43, 12L);
        org.joda.time.LocalDate localDate82 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37920000 + "'", int24 == 37920000);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 37920000 + "'", int39 == 37920000);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 37920000 + "'", int46 == 37920000);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 37920100L + "'", long48 == 37920100L);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 37920000 + "'", int60 == 37920000);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-37919888L) + "'", long81 == (-37919888L));
        org.junit.Assert.assertNotNull(localDate82);
    }

    @Test
    public void test19421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19421");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime9 = localTime6.withFields((org.joda.time.ReadablePartial) localTime8);
        int int10 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime6);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = localTime3.toString("1", locale12);
        org.joda.time.LocalTime localTime15 = localTime3.plusMinutes(1);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        org.joda.time.LocalTime localTime17 = property16.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalTime localTime20 = localTime17.withPeriodAdded(readablePeriod18, (int) '#');
        int int21 = localTime17.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 0, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.plus(readableDuration29);
        org.joda.time.DateTime dateTime32 = dateTime27.withWeekOfWeekyear((int) (short) 10);
        int int33 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.plus(readableDuration41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int44 = dateTime42.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime45 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime49 = dateTime42.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType36.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekyear();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.dayOfMonth();
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.lang.String str57 = locale56.getDisplayCountry();
        java.lang.String str58 = dateTimeField54.getAsText((-71L), locale56);
        java.lang.String str59 = dateTimeZone24.getShortName(3214875194192552L, locale56);
        org.joda.time.DateTime dateTime60 = localTime17.toDateTimeToday(dateTimeZone24);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 37920000 + "'", int33 == 37920000);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 37920000 + "'", int44 == 37920000);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u5357\u97d3" + "'", str57, "\u5357\u97d3");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+10:32" + "'", str59, "+10:32");
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test19422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19422");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = timeZone0.getDisplayName(locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645456042448,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=22,MILLISECOND=448,ZONE_OFFSET=37920000,DST_OFFSET=0]");
    }

    @Test
    public void test19423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19423");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withEra(778);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 778 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test19424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19424");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime5.toMutableDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.dayOfWeek();
        org.joda.time.DurationField durationField32 = chronology25.millis();
        org.joda.time.DurationField durationField33 = chronology25.days();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37920000 + "'", int19 == 37920000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test19425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19425");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.clockhourOfDay();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DurationField durationField22 = chronology14.minutes();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test19426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19426");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("37920100");
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str13 = nameProvider7.getName(locale9, "+00:00:00.100", "53");
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 0, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime23 = dateTime19.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfMonth(2);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Calendar calendar27 = dateTime23.toCalendar(locale26);
        java.lang.String str30 = nameProvider7.getShortName(locale26, "DateTimeField[hourOfDay]", "DateTimeField[millisOfDay]");
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 0, chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.DateTime dateTime36 = dateTime33.withYear(10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 0, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime39.toMutableDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime39.minus((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime39.withDayOfWeek(4);
        boolean boolean47 = dateTime39.equals((java.lang.Object) "eras");
        boolean boolean48 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("");
        java.lang.String str51 = locale50.getScript();
        java.util.Calendar calendar52 = dateTime39.toCalendar(locale50);
        java.lang.String str55 = nameProvider7.getShortName(locale50, "SOUTH KOREA (1970-01-01)", "Chinese (China)");
        java.util.Locale.Builder builder56 = builder4.setLocale(locale50);
        java.util.Locale.Builder builder57 = builder4.clear();
        java.util.Locale.Builder builder58 = builder4.clear();
        java.util.Locale.Builder builder59 = builder4.clear();
        java.util.Locale.Builder builder60 = builder4.clearExtensions();
        java.util.Locale.Builder builder62 = builder60.addUnicodeLocaleAttribute("Italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder64 = builder60.setScript("20 Jun 6236 14:07:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 20 Jun 6236 14:07:00 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test19427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19427");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime.Property property7 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime8.withZoneRetainFields(dateTimeZone11);
        int int13 = dateTime8.getDayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime16 = dateTime8.plusMonths(5624663);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test19428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19428");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime9 = dateTime5.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime5.toMutableDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.hourOfHalfday();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37920000 + "'", int19 == 37920000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test19429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19429");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        int int22 = localDateTime21.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra(11);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minus(readableDuration25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readablePeriod27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusYears(31);
        java.lang.String str31 = localDateTime28.toString();
        java.util.Date date32 = localDateTime28.toDate();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusYears(69);
        org.joda.time.LocalDateTime.Property property35 = localDateTime28.millisOfDay();
        int int36 = property35.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime38 = property35.addToCopy(1705847580357L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-21T01:05:22.539" + "'", str31, "2022-02-21T01:05:22.539");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Mon Feb 21 01:05:22 GMT+10:32 2022");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 86399999 + "'", int36 == 86399999);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test19430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19430");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime6.toMutableDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime6.minus((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime6.withDayOfWeek(4);
        boolean boolean14 = dateTime6.equals((java.lang.Object) "eras");
        int int15 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime16 = localDate2.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes((int) 'u');
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 0, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.plus(readableDuration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int27 = dateTime25.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime28 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 0, chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.plus(readableDuration36);
        org.joda.time.DateTime dateTime39 = dateTime34.withWeekOfWeekyear((int) (short) 10);
        int int40 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateTime dateTime42 = dateTime25.withZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTime.Property property43 = dateTime25.yearOfEra();
        int int44 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = dateTime25.withDate(37395057, 590733, 3938617);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 590733 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37920000 + "'", int27 == 37920000);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 37920000 + "'", int40 == 37920000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test19431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19431");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 0, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType2.getField(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        boolean boolean20 = durationFieldType1.isSupported(chronology16);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology16.add(readablePeriod21, 0L, (int) (short) 0);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(chronology16);
        int int26 = localTime25.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 37920000 + "'", int10 == 37920000);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test19432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19432");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T01:36:05.454+10:32");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
    }

    @Test
    public void test19433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19433");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        java.util.Date date25 = localDateTime23.toDate();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime23.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusMillis(37296071);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime23.plus(readablePeriod31);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Jan 03 00:00:00 GMT+10:32 2022");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test19434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19434");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(366);
        boolean boolean3 = dateTimeZone1.isStandardOffset(1645455918582L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test19435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19435");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        int int24 = property22.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField26 = property22.getField();
        org.joda.time.LocalDateTime localDateTime27 = property22.roundCeilingCopy();
        org.joda.time.Chronology chronology28 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test19436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19436");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType9.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.centuryOfEra();
        boolean boolean27 = durationFieldType8.isSupported(chronology23);
        org.joda.time.LocalTime localTime29 = localTime4.withFieldAdded(durationFieldType8, 8);
        java.lang.String str30 = durationFieldType8.toString();
        java.lang.String str31 = durationFieldType8.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37920000 + "'", int17 == 37920000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "halfdays" + "'", str30, "halfdays");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "halfdays" + "'", str31, "halfdays");
    }

    @Test
    public void test19437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19437");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        int int4 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime2.plusYears(6);
        boolean boolean7 = dateTime6.isAfterNow();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.withWeekyear(49);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(305282);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test19438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19438");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfMonth(6);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime29 = property27.addWrapFieldToCopy(4871);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test19439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19439");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime3.toMutableDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((long) '#');
        int int8 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTime dateTime10 = dateTime3.plusWeeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.plus(readableDuration25);
        org.joda.time.DateTime dateTime28 = dateTime23.withWeekOfWeekyear((int) (short) 10);
        int int29 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(9, 12, 23, 4, 5, 14, 23, dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime10.withZone(dateTimeZone20);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(obj0, dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 37920000 + "'", int29 == 37920000);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test19440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19440");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        int int12 = localDate11.getDayOfMonth();
        java.lang.String str13 = localDate11.toString();
        int int14 = localDate11.getDayOfWeek();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = localDate11.withFieldAdded(durationFieldType15, 5901180);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test19441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19441");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.LocalDate localDate27 = dateTime20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate.Property property30 = localDate29.weekyear();
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.yearOfEra();
        long long34 = chronology14.set((org.joda.time.ReadablePartial) localDate31, (long) 11);
        org.joda.time.DurationField durationField35 = chronology14.months();
        org.joda.time.DateTimeField dateTimeField36 = chronology14.year();
        java.lang.String str37 = chronology14.toString();
        org.joda.time.DurationField durationField38 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology14.year();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 0, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime43.toMutableDateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime43.minus((long) '#');
        org.joda.time.DateTime dateTime49 = dateTime43.withDayOfWeek(4);
        org.joda.time.Chronology chronology50 = dateTime43.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.centuries();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        long long55 = chronology50.add(readablePeriod52, (long) 37919999, 37920097);
        long long59 = chronology50.add(10L, (long) (short) 0, 44940);
        org.joda.time.DateTimeZone dateTimeZone60 = chronology50.getZone();
        java.lang.String str61 = dateTimeZone60.getID();
        org.joda.time.ReadableInstant readableInstant62 = null;
        int int63 = dateTimeZone60.getOffset(readableInstant62);
        org.joda.time.DateTime dateTime64 = dateTime40.withZoneRetainFields(dateTimeZone60);
        int int65 = dateTime64.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9223372016611199989L) + "'", long34 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+10:32]" + "'", str37, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 37919999L + "'", long55 == 37919999L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+10:32" + "'", str61, "+10:32");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 37920000 + "'", int63 == 37920000);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 53 + "'", int65 == 53);
    }

    @Test
    public void test19442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.Chronology chronology9 = dateTime2.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime2.withDurationAdded(1645455491077L, 51);
        org.joda.time.DateTime dateTime14 = dateTime12.minus((long) 32);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.plus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime20.withWeekOfWeekyear((int) (short) 10);
        int int26 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        int int29 = dateTimeZone17.getOffset((long) 19);
        java.lang.String str31 = dateTimeZone17.getName((long) 17);
        org.joda.time.DateTime dateTime32 = dateTime14.withZone(dateTimeZone17);
        int int34 = dateTimeZone17.getOffset(1645455645486L);
        java.lang.String str35 = dateTimeZone17.toString();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 37920000 + "'", int26 == 37920000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 37920000 + "'", int29 == 37920000);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+10:32" + "'", str31, "+10:32");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 37920000 + "'", int34 == 37920000);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+10:32" + "'", str35, "+10:32");
    }

    @Test
    public void test19443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19443");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone15);
        org.joda.time.LocalDate.Property property17 = localDate16.weekOfWeekyear();
        org.joda.time.LocalDate localDate18 = property17.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 0, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime21.withDayOfWeek(4);
        org.joda.time.LocalDate localDate28 = dateTime21.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate28.plus(readablePeriod29);
        org.joda.time.LocalDate.Property property31 = localDate30.weekyear();
        org.joda.time.LocalDate localDate32 = localDate18.withFields((org.joda.time.ReadablePartial) localDate30);
        int int33 = localDate13.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate36 = localDate13.withPeriodAdded(readablePeriod34, 5420956);
        int int37 = localDate36.getCenturyOfEra();
        org.joda.time.LocalDate.Property property38 = localDate36.dayOfWeek();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 0, chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime41.toMutableDateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime41.minus((long) '#');
        org.joda.time.DateTime dateTime47 = dateTime41.withDayOfWeek(4);
        org.joda.time.LocalDate localDate48 = dateTime41.toLocalDate();
        boolean boolean50 = localDate48.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate52 = localDate48.plusYears(0);
        org.joda.time.LocalDate.Property property53 = localDate48.monthOfYear();
        int int54 = property38.compareTo((org.joda.time.ReadablePartial) localDate48);
        java.lang.String str55 = localDate48.toString();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 19 + "'", int37 == 19);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01" + "'", str55, "1970-01-01");
    }

    @Test
    public void test19444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19444");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.plusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (short) 1);
        boolean boolean9 = localTime4.isBefore((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.LocalTime.Property property10 = localTime8.millisOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "37920001" + "'", str11, "37920001");
    }

    @Test
    public void test19445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19445");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        int int3 = localDate2.getDayOfMonth();
        int int4 = localDate2.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField6 = localDate2.getField(0);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate2.plus(readablePeriod7);
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate10 = property9.roundHalfCeilingCopy();
        int int11 = property9.get();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
    }

    @Test
    public void test19446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19446");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withSecondOfMinute((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMinutes((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withPeriodAdded(readablePeriod28, 631);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfEra(54752);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withEra(359);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 359 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test19447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19447");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(10);
        org.joda.time.LocalDate localDate15 = localDate13.withCenturyOfEra(70);
        org.joda.time.Chronology chronology16 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.hourOfHalfday();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test19448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19448");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.millisOfDay();
        org.joda.time.DateTime dateTime27 = localDateTime21.toDateTime();
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.millisOfDay();
        org.joda.time.Chronology chronology29 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime21.year();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 0, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.plus(readableDuration37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int40 = dateTime38.get(dateTimeFieldType39);
        org.joda.time.DateTime dateTime41 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType32.getField(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.weekyear();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.halfdayOfDay();
        org.joda.time.DurationField durationField50 = chronology46.hours();
        org.joda.time.DateTimeField dateTimeField51 = chronology46.minuteOfHour();
        org.joda.time.DurationField durationField52 = durationFieldType31.getField(chronology46);
        boolean boolean53 = localDateTime21.isSupported(durationFieldType31);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime21.withCenturyOfEra(1980);
        org.joda.time.LocalDateTime.Property property56 = localDateTime21.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 37920000 + "'", int40 == 37920000);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test19449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19449");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        int int4 = dateTime2.getMillisOfSecond();
        org.joda.time.DateTime dateTime6 = dateTime2.plusYears(6);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime9 = dateTime2.withFieldAdded(durationFieldType7, (int) ' ');
        org.joda.time.DateTime dateTime11 = dateTime9.plusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.plus(readableDuration19);
        org.joda.time.DateTime dateTime22 = dateTime17.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime24 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime17.minus(readablePeriod25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 0, chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfCentury();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfCentury();
        org.joda.time.DateTime dateTime32 = property31.roundFloorCopy();
        boolean boolean33 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime36.toMutableDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime36.withDayOfWeek(4);
        org.joda.time.DateTime.Property property43 = dateTime36.weekyear();
        org.joda.time.DateTime dateTime45 = dateTime36.withYear((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int47 = dateTime45.get(dateTimeFieldType46);
        boolean boolean48 = dateTime32.isSupported(dateTimeFieldType46);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        int int52 = dateTimeZone50.getOffsetFromLocal((long) 8);
        org.joda.time.DateTime dateTime53 = dateTime32.withZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 16, dateTimeZone50);
        org.joda.time.DateTime dateTime56 = dateTime54.plus(1645455522636L);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 0, chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime63 = dateTime60.plus(readableDuration62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int65 = dateTime63.get(dateTimeFieldType64);
        org.joda.time.DateTime dateTime66 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime70 = dateTime63.toDateTime(dateTimeZone69);
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType57.getField(chronology71);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withField(dateTimeFieldType74, 5);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusHours(23);
        int int79 = localDateTime78.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(2);
        org.joda.time.DateTime dateTime82 = localDateTime78.toDateTime(dateTimeZone81);
        java.lang.String str84 = dateTimeZone81.getNameKey((long) 6);
        java.lang.String str85 = dateTimeZone81.getID();
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime((java.lang.Object) 1645455522636L, dateTimeZone81);
        boolean boolean87 = property12.equals((java.lang.Object) localDateTime86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime86.withWeekyear(5);
        int int90 = localDateTime89.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 100 + "'", int52 == 100);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 37920000 + "'", int65 == 37920000);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 22 + "'", int79 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00:00.002" + "'", str85, "+00:00:00.002");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test19450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19450");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        int int13 = localDate11.size();
        org.joda.time.LocalDate localDate15 = localDate11.minusYears(37214189);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(22);
        int int18 = localDate17.getYearOfCentury();
        org.joda.time.LocalDate.Property property19 = localDate17.yearOfCentury();
        org.joda.time.LocalDate localDate21 = localDate17.plusWeeks(5);
        org.joda.time.LocalDate localDate23 = localDate21.minusDays(94);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = localDate21.withField(dateTimeFieldType24, 5708428);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test19451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19451");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.plus(readableDuration9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localDate4.equals((java.lang.Object) dateTime10);
        int int14 = localDate4.getWeekyear();
        org.joda.time.Chronology chronology15 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime30 = dateTime26.withZone(dateTimeZone29);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(dateTimeZone29);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        int int33 = localDate31.getDayOfMonth();
        org.joda.time.LocalDate localDate35 = localDate31.plusYears(889);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.centuries();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 0, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime40.toMutableDateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime40.minus((long) '#');
        org.joda.time.DateTime dateTime46 = dateTime40.withDayOfWeek(4);
        org.joda.time.LocalDate localDate47 = dateTime40.toLocalDate();
        boolean boolean49 = localDate47.equals((java.lang.Object) 37920000);
        int int50 = localDate47.getEra();
        org.joda.time.LocalDate localDate52 = localDate47.minusWeeks(5416138);
        org.joda.time.DateTime dateTime53 = localDate47.toDateTimeAtCurrentTime();
        int[] intArray55 = chronology36.get((org.joda.time.ReadablePartial) localDate47, 778L);
        int[] intArray57 = chronology15.get((org.joda.time.ReadablePartial) localDate47, (long) 32769);
        org.joda.time.DateTimeField dateTimeField58 = chronology15.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37920000 + "'", int12 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test19452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19452");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int9 = dateTime6.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType8.getField(chronology23);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime30.toMutableDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime30.minus((long) '#');
        org.joda.time.DateTime dateTime36 = dateTime30.withDayOfWeek(4);
        org.joda.time.LocalDate localDate37 = dateTime30.toLocalDate();
        boolean boolean39 = localDate37.equals((java.lang.Object) 37920000);
        org.joda.time.LocalDate localDate41 = localDate37.plusYears(0);
        org.joda.time.LocalDate.Property property42 = localDate41.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.plus(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int51 = dateTime49.get(dateTimeFieldType50);
        org.joda.time.DateTime dateTime52 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime56 = dateTime49.toDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType43.getField(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.centuryOfEra();
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = dateTimeField60.getAsShortText((long) 32, locale62);
        java.lang.String str64 = locale62.getDisplayScript();
        java.lang.String str65 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDate41, locale62);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37920000 + "'", int17 == 37920000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 37920000 + "'", int51 == 37920000);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "19" + "'", str63, "19");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "70" + "'", str65, "70");
    }

    @Test
    public void test19453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19453");
        java.util.Date date3 = new java.util.Date(5438242, 5578402, 5868344);
        int int4 = date3.getMinutes();
        org.junit.Assert.assertEquals(date3.toString(), "Sun Oct 24 00:00:00 GMT+10:32 5921075");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test19454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19454");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        boolean boolean11 = localDate9.equals((java.lang.Object) 37920000);
        int int12 = localDate9.getEra();
        org.joda.time.LocalDate localDate14 = localDate9.minusWeeks(5416138);
        org.joda.time.DateTime dateTime15 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test19455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19455");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.DurationField durationField14 = property12.getDurationField();
        org.joda.time.LocalDate localDate15 = property12.withMaximumValue();
        org.joda.time.LocalDate localDate16 = property12.roundHalfEvenCopy();
        int int17 = property12.getLeapAmount();
        org.joda.time.LocalDate localDate18 = property12.getLocalDate();
        boolean boolean19 = property12.isLeap();
        org.joda.time.LocalDate localDate20 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate20.minus(readablePeriod22);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test19456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19456");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMinimum(0);
        calendar0.setFirstDayOfWeek((int) (short) 0);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localTime5.getFieldTypes();
        int int7 = localTime5.getMinuteOfHour();
        org.joda.time.LocalTime.Property property8 = localTime5.minuteOfHour();
        java.lang.String str9 = localTime5.toString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456042966,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=22,MILLISECOND=966,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 39 + "'", int7 == 39);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "01:39:22.966" + "'", str9, "01:39:22.966");
    }

    @Test
    public void test19457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19457");
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.plus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime13.withWeekOfWeekyear((int) (short) 10);
        int int19 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(9, 12, 23, 4, 5, 14, 23, dateTimeZone10);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = dateTimeZone10.getShortName((long) 37920, locale22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 48, dateTimeZone10);
        org.joda.time.LocalDate localDate26 = localDate24.minusYears(41);
        org.joda.time.LocalDate localDate28 = localDate24.minusWeeks((-19044));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37920000 + "'", int19 == 37920000);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+10:32" + "'", str23, "+10:32");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test19458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19458");
        java.util.Date date6 = new java.util.Date(12, 11, 1, (int) (byte) 10, (int) 'u', 0);
        date6.setSeconds(50);
        java.util.Date date10 = new java.util.Date((long) (byte) -1);
        date10.setTime((long) ' ');
        boolean boolean13 = date6.before(date10);
        int int14 = date6.getSeconds();
        long long15 = date6.getTime();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        int int18 = calendar17.getMinimalDaysInFirstWeek();
        long long19 = calendar17.getTimeInMillis();
        java.util.Date date20 = calendar17.getTime();
        java.time.Instant instant21 = calendar17.toInstant();
        java.util.Date date22 = java.util.Date.from(instant21);
        java.util.Date date23 = java.util.Date.from(instant21);
        int int24 = date23.getYear();
        date23.setHours(5545166);
        int int27 = date6.compareTo(date23);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Dec 01 11:57:50 GMT+10:32 1912");
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 10:32:00 GMT+10:32 1970");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1801434850000L) + "'", long15 == (-1801434850000L));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645456042988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=22,MILLISECOND=988,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645456042988L + "'", long19 == 1645456042988L);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 01:39:22 GMT+10:32 2022");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Feb 22 01:39:22 GMT+10:32 2022");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Mon Sep 25 14:39:22 GMT+10:32 2654");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 122 + "'", int24 == 122);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test19459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19459");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime4.minus((long) '#');
        org.joda.time.DateTime dateTime10 = dateTime4.withDayOfWeek(4);
        org.joda.time.LocalDate localDate11 = dateTime4.toLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusDays(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property15 = localDate13.property(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime18.minus((long) '#');
        org.joda.time.DateTime dateTime24 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime28 = dateTime24.withZone(dateTimeZone27);
        org.joda.time.Interval interval29 = localDate13.toInterval(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(126000005L, dateTimeZone27);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(431173566271000L, dateTimeZone27);
        java.lang.String str34 = dateTimeZone27.getShortName((long) 517);
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str42 = nameProvider36.getName(locale38, "+00:00:00.100", "53");
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 0, chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfCentury();
        org.joda.time.DateTime dateTime48 = property46.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime52 = dateTime48.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfMonth(2);
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.util.Calendar calendar56 = dateTime52.toCalendar(locale55);
        java.lang.String str59 = nameProvider36.getShortName(locale55, "DateTimeField[hourOfDay]", "DateTimeField[millisOfDay]");
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) 0, chronology71);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime75 = dateTime72.plus(readableDuration74);
        org.joda.time.DateTime dateTime77 = dateTime72.withWeekOfWeekyear((int) (short) 10);
        int int78 = dateTimeZone69.getOffset((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(9, 12, 23, 4, 5, 14, 23, dateTimeZone69);
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.lang.String str82 = dateTimeZone69.getShortName((long) 37920, locale81);
        java.lang.String str85 = nameProvider36.getName(locale81, "1970-01-01", "fr_CA");
        java.lang.String str86 = locale81.getDisplayVariant();
        java.lang.String str87 = dateTimeZone27.getShortName((long) 5613873, locale81);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+10:32" + "'", str34, "+10:32");
        org.junit.Assert.assertNotNull(nameProvider36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 37920000 + "'", int78 == 37920000);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+10:32" + "'", str82, "+10:32");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+10:32" + "'", str87, "+10:32");
    }

    @Test
    public void test19460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19460");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(16, (-292275054), 8);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("South Korea");
        int int7 = timeZone6.getRawOffset();
        timeZone6.setRawOffset(10);
        java.lang.String str10 = timeZone6.getID();
        java.util.Calendar.Builder builder11 = builder4.setTimeZone(timeZone6);
        java.util.Calendar.Builder builder16 = builder11.setTimeOfDay(0, 25, 37920059, 105);
        java.util.Calendar.Builder builder18 = builder16.setLenient(false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT" + "'", str10, "GMT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test19461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekyear((int) (byte) 10);
        org.joda.time.DateTime.Property property8 = dateTime2.millisOfSecond();
        org.joda.time.DateTime dateTime10 = dateTime2.plusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 0, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((long) '#');
        org.joda.time.DateTime dateTime19 = dateTime13.withDayOfWeek(4);
        org.joda.time.LocalDate localDate20 = dateTime13.toLocalDate();
        org.joda.time.Instant instant21 = dateTime13.toInstant();
        boolean boolean22 = dateTime10.isEqual((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Instant instant24 = instant21.minus((long) 5539852);
        long long25 = instant21.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test19462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19462");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("53");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusDays(50);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusDays(631);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.hourOfDay();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withDurationAdded(readableDuration7, 37);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test19463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19463");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        int int10 = localDate9.getYearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate13 = property11.setCopy(7);
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate16 = localDate13.plusDays(0);
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks(5432960);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis(42);
        org.joda.time.DateTime dateTime24 = dateTime19.withDurationAdded(40L, 184);
        java.util.GregorianCalendar gregorianCalendar25 = dateTime19.toGregorianCalendar();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
    }

    @Test
    public void test19464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19464");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.plus(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.centuryOfEra();
        org.joda.time.DurationField durationField19 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.yearOfCentury();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(632L, chronology15);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfWeek(1);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.Instant instant26 = instant24.plus((long) (short) 1);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Instant instant28 = instant26.plus(readableDuration27);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = null;
        org.joda.time.format.DateTimeParser dateTimeParser30 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser30);
        org.joda.time.Chronology chronology32 = dateTimeFormatter31.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter31.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter34.withPivotYear(9);
        boolean boolean37 = instant26.equals((java.lang.Object) dateTimeFormatter36);
        org.joda.time.DateTime dateTime38 = localDate23.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Instant instant40 = instant26.plus(readableDuration39);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37920000 + "'", int9 == 37920000);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant40);
    }

    @Test
    public void test19465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19465");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime31.toMutableDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime31.minus((long) '#');
        org.joda.time.DateTime dateTime37 = dateTime31.withDayOfWeek(4);
        org.joda.time.LocalDate localDate38 = dateTime31.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate40 = localDate38.plus(readablePeriod39);
        org.joda.time.LocalDate.Property property41 = localDate40.weekyear();
        org.joda.time.LocalDate localDate42 = property41.withMinimumValue();
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfEra();
        long long45 = chronology25.set((org.joda.time.ReadablePartial) localDate42, (long) 11);
        org.joda.time.DurationField durationField46 = chronology25.months();
        org.joda.time.DateTimeField dateTimeField47 = chronology25.year();
        java.lang.String str48 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology25.weekOfWeekyear();
        org.joda.time.DateTime dateTime50 = dateTime10.toDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField51 = chronology25.weekyear();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 0, chronology64);
        org.joda.time.DateTime.Property property66 = dateTime65.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime68 = dateTime65.plus(readableDuration67);
        org.joda.time.DateTime dateTime70 = dateTime65.withWeekOfWeekyear((int) (short) 10);
        int int71 = dateTimeZone62.getOffset((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(9, 12, 23, 4, 5, 14, 23, dateTimeZone62);
        java.util.Locale locale74 = java.util.Locale.ENGLISH;
        java.lang.String str75 = dateTimeZone62.getShortName((long) 37920, locale74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 48, dateTimeZone62);
        long long80 = dateTimeZone62.convertLocalToUTC((long) 692, true, 1645455545647L);
        int int82 = dateTimeZone62.getOffsetFromLocal(1645455539924L);
        org.joda.time.LocalDate localDate83 = org.joda.time.LocalDate.now(dateTimeZone62);
        org.joda.time.Chronology chronology84 = chronology25.withZone(dateTimeZone62);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37920000 + "'", int19 == 37920000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-9223372016611199989L) + "'", long45 == (-9223372016611199989L));
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[+10:32]" + "'", str48, "ISOChronology[+10:32]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 37920000 + "'", int71 == 37920000);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+10:32" + "'", str75, "+10:32");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-37919308L) + "'", long80 == (-37919308L));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 37920000 + "'", int82 == 37920000);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test19466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19466");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        int int6 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.LocalTime localTime8 = localTime4.plusMillis((int) (byte) 100);
        int int9 = localTime4.getMinuteOfHour();
        org.joda.time.DateTime dateTime10 = localTime4.toDateTimeToday();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.halfdayOfDay();
        org.joda.time.DurationField durationField29 = chronology25.hours();
        org.joda.time.DateTime dateTime30 = dateTime10.withChronology(chronology25);
        int int31 = dateTime30.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37920000 + "'", int19 == 37920000);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 37920097 + "'", int31 == 37920097);
    }

    @Test
    public void test19467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19467");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra(59);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime.Property property31 = localDateTime26.property(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plusHours(5488539);
        int int34 = localDateTime26.getYear();
        int int35 = localDateTime26.getDayOfYear();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime26.minus(readableDuration36);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2021 + "'", int34 == 2021);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 347 + "'", int35 == 347);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test19468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19468");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645455602456L);
    }

    @Test
    public void test19469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19469");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours(23);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        int int24 = property22.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime26 = property22.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withPeriodAdded(readablePeriod28, 330060);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMillis(1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withEra(292275055);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292275055 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test19470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19470");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.DateTime.Property property5 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(4);
        org.joda.time.DateTime dateTime11 = dateTime7.minus((long) 37920000);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime7.getZone();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(0L, dateTimeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test19471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19471");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfCentury();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.minus(1645455491077L);
        int int10 = property3.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeField dateTimeField11 = property3.getField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 0, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime14.toMutableDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime14.minus((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime14.withDayOfWeek(4);
        org.joda.time.DateTime.Property property21 = dateTime14.weekyear();
        org.joda.time.DateTime dateTime23 = property21.addWrapFieldToCopy(2);
        org.joda.time.DateTime dateTime25 = dateTime23.plus(0L);
        long long26 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime28 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime30 = property3.addToCopy(5937788);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-2L) + "'", long26 == (-2L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test19472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19472");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-22T00:05:40.552");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t00:05:40.552");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19473");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.lang.String str5 = locale4.getScript();
        java.lang.String str6 = locale1.getDisplayLanguage(locale4);
        java.util.Set<java.lang.String> strSet7 = locale1.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet7.stream();
        java.lang.String[] strArray17 = new java.lang.String[] { "1970-01-01", "millisOfDay", "", "minuteOfDay", "South Korea", "1970-01-01", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("");
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale24.getDisplayLanguage(locale27);
        java.util.Set<java.lang.String> strSet30 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet30);
        boolean boolean32 = strSet18.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.lang.String[] strArray36 = new java.lang.String[] { "1", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        boolean boolean39 = strSet37.isEmpty();
        boolean boolean40 = strSet30.retainAll((java.util.Collection<java.lang.String>) strSet37);
        java.lang.String[] strArray49 = new java.lang.String[] { "1970-01-01", "millisOfDay", "", "minuteOfDay", "South Korea", "1970-01-01", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("");
        java.lang.String str60 = locale59.getScript();
        java.lang.String str61 = locale56.getDisplayLanguage(locale59);
        java.util.Set<java.lang.String> strSet62 = locale56.getUnicodeLocaleAttributes();
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strSet62);
        boolean boolean64 = strSet50.removeAll((java.util.Collection<java.lang.String>) strSet62);
        boolean boolean65 = strSet30.containsAll((java.util.Collection<java.lang.String>) strSet50);
        java.lang.String[] strArray69 = new java.lang.String[] { "1", "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        boolean boolean72 = strSet70.isEmpty();
        boolean boolean73 = strSet30.removeAll((java.util.Collection<java.lang.String>) strSet70);
        boolean boolean74 = strSet7.removeAll((java.util.Collection<java.lang.String>) strSet30);
        strSet7.clear();
        boolean boolean76 = strSet7.isEmpty();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test19474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19474");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(4);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) 'a');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMinutes(983);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekyear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test19475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19475");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        int int12 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime10);
        boolean boolean13 = dateTimeField8.isSupported();
        long long16 = dateTimeField8.add((long) 631, 1645455491851L);
        java.util.Locale locale21 = new java.util.Locale("Greenwich Mean Time", "ISOChronology[+10:32]", "en_CA");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property27 = localTime26.secondOfMinute();
        int int28 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localTime26);
        boolean boolean29 = dateTimeField24.isSupported();
        long long32 = dateTimeField24.add((long) 631, 1645455491851L);
        java.util.Locale locale34 = new java.util.Locale("37920001");
        int int35 = dateTimeField24.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale21.getDisplayLanguage(locale34);
        java.lang.String str37 = dateTimeField8.getAsText((int) (short) 10, locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter5.withLocale(locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 43);
        boolean boolean41 = dateTimeFormatter40.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter40.getPrinter();
        boolean boolean43 = dateTimeFormatter40.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = dateTimeFormatter40.parseDateTime("2024-01-26T01:05:24.487");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645455492482L + "'", long16 == 1645455492482L);
        org.junit.Assert.assertEquals(locale21.toString(), "greenwich mean time_ISOCHRONOLOGY[+10:32]_en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645455492482L + "'", long32 == 1645455492482L);
        org.junit.Assert.assertEquals(locale34.toString(), "37920001");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "greenwich mean time" + "'", str36, "greenwich mean time");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "10" + "'", str37, "10");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(dateTimePrinter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test19476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19476");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime2.minus((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withDayOfWeek(4);
        org.joda.time.LocalDate localDate9 = dateTime2.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.plus(readablePeriod10);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        org.joda.time.LocalDate localDate13 = property12.withMinimumValue();
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        java.util.Date date16 = new java.util.Date((long) (byte) -1);
        date16.setTime((long) ' ');
        date16.setYear((int) 'u');
        int int21 = date16.getMonth();
        boolean boolean22 = localDate13.equals((java.lang.Object) int21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.plus(readableDuration32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int35 = dateTime33.get(dateTimeFieldType34);
        boolean boolean36 = localDate27.equals((java.lang.Object) dateTime33);
        int int37 = localDate27.getWeekyear();
        boolean boolean38 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate27);
        org.joda.time.LocalDate.Property property39 = localDate13.year();
        org.joda.time.LocalDate localDate41 = property39.setCopy(6);
        org.joda.time.LocalDate localDate42 = property39.roundFloorCopy();
        org.joda.time.LocalDate.Property property43 = localDate42.dayOfMonth();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 0, chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime46.toMutableDateTime(chronology47);
        org.joda.time.DateTime dateTime50 = dateTime46.minus((long) '#');
        org.joda.time.DateTime dateTime52 = dateTime46.withDayOfWeek(4);
        org.joda.time.LocalDate localDate53 = dateTime46.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDate localDate55 = localDate53.plus(readablePeriod54);
        org.joda.time.LocalDate.Property property56 = localDate55.weekyear();
        org.joda.time.LocalDate localDate57 = property56.withMinimumValue();
        org.joda.time.LocalDate.Property property58 = localDate57.yearOfEra();
        java.util.Date date60 = new java.util.Date((long) (byte) -1);
        date60.setTime((long) ' ');
        date60.setYear((int) 'u');
        int int65 = date60.getMonth();
        boolean boolean66 = localDate57.equals((java.lang.Object) int65);
        org.joda.time.DateTime dateTime67 = localDate57.toDateTimeAtStartOfDay();
        long long68 = property43.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 0, chronology70);
        org.joda.time.DateTime.Property property72 = dateTime71.yearOfCentury();
        int int73 = dateTime71.getMillisOfSecond();
        org.joda.time.DateTime dateTime75 = dateTime71.plusYears(6);
        org.joda.time.DateTime dateTime76 = dateTime75.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) 0, chronology78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutableDateTime mutableDateTime81 = dateTime79.toMutableDateTime(chronology80);
        org.joda.time.DateTime dateTime83 = dateTime79.minus((long) '#');
        org.joda.time.DateTime dateTime85 = dateTime79.withDayOfWeek(4);
        boolean boolean87 = dateTime79.equals((java.lang.Object) "eras");
        int int88 = dateTime79.getWeekyear();
        org.joda.time.DateTime dateTime90 = dateTime79.plusYears((int) (byte) 10);
        int int91 = dateTime79.getMinuteOfDay();
        org.joda.time.DateTime dateTime92 = dateTime79.toDateTime();
        boolean boolean93 = dateTime75.isBefore((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime95 = dateTime75.minusDays(778);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = property43.getDifference((org.joda.time.ReadableInstant) dateTime95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -9223372017043200000 - 122083200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 01 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37920000 + "'", int35 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals(date60.toString(), "Sun Jan 01 10:32:00 GMT+10:32 2017");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-4L) + "'", long68 == (-4L));
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 632 + "'", int91 == 632);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test19477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19477");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 0, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime7.minus((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime7.withDayOfWeek(4);
        org.joda.time.LocalDate localDate14 = dateTime7.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.plus(readablePeriod15);
        org.joda.time.LocalDate.Property property17 = localDate16.weekyear();
        org.joda.time.LocalDate localDate18 = localDate4.withFields((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 0, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime24.withWeekOfWeekyear((int) (short) 10);
        int int30 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime29);
        long long32 = dateTimeZone21.nextTransition((long) '#');
        org.joda.time.DateTime dateTime33 = localDate18.toDateTimeAtMidnight(dateTimeZone21);
        long long35 = dateTimeZone21.convertUTCToLocal(1920097L);
        int int37 = dateTimeZone21.getOffset(1645455818841L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 37920000 + "'", int30 == 37920000);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 35L + "'", long32 == 35L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 39840097L + "'", long35 == 39840097L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 37920000 + "'", int37 == 37920000);
    }

    @Test
    public void test19478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19478");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        int int2 = localTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology3 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test19479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19479");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime.Property property4 = dateTime2.dayOfWeek();
        org.joda.time.DateTime.Property property5 = dateTime2.minuteOfDay();
        org.joda.time.DateTime dateTime7 = dateTime2.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTime.Property property8 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test19480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19480");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645455522636L);
        org.joda.time.DateTime.Property property2 = dateTime1.weekyear();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test19481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19481");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime2.toMutableDateTime(chronology3);
        long long5 = mutableDateTime4.getMillis();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 0, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime11.withWeekOfWeekyear((int) (short) 10);
        int int17 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime16);
        long long19 = dateTimeZone8.previousTransition(1L);
        org.joda.time.DateTime dateTime20 = mutableDateTime4.toDateTime(dateTimeZone8);
        java.lang.String str21 = dateTimeZone8.getID();
        long long23 = dateTimeZone8.previousTransition(0L);
        java.util.TimeZone timeZone24 = dateTimeZone8.toTimeZone();
        java.util.Locale locale28 = new java.util.Locale("", "South Korea", "1970-01-01");
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone24, locale28);
        java.lang.String str31 = calendar30.getCalendarType();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37920000 + "'", int17 == 37920000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:32" + "'", str21, "+10:32");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertEquals(locale28.toString(), "_SOUTH KOREA_1970-01-01");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645456043422,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=23,MILLISECOND=422,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "gregory" + "'", str31, "gregory");
    }

    @Test
    public void test19482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19482");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.Chronology chronology3 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = dateTimeField4.getType();
        long long7 = dateTimeField4.roundCeiling((long) 32772);
        long long10 = dateTimeField4.addWrapField(0L, 5494243);
        long long12 = dateTimeField4.roundHalfEven(1645455625375L);
        org.joda.time.DurationField durationField13 = dateTimeField4.getRangeDurationField();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86400000L + "'", long7 == 86400000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 22723200000L + "'", long10 == 22723200000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645488000000L + "'", long12 == 1645488000000L);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test19483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19483");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DurationField durationField18 = chronology14.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.dayOfYear();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("\u53f0\u6e7e\u5730\u533a");
        java.util.Locale locale26 = new java.util.Locale("centuries", "1 janv. 1970 00:00:00", "2022-02-21T14:58:31.533Z");
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 0, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime31.toMutableDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime31.minus((long) '#');
        org.joda.time.DateTime dateTime37 = dateTime31.withDayOfWeek(4);
        org.joda.time.Chronology chronology38 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType28.getField(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.clockhourOfDay();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.lang.String str44 = locale42.getExtension('a');
        java.lang.String str45 = locale42.getDisplayScript();
        java.util.Locale.setDefault(locale42);
        java.lang.String str47 = dateTimeField40.getAsShortText(37919999L, locale42);
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str55 = nameProvider49.getName(locale51, "+00:00:00.100", "53");
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 0, chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.yearOfCentury();
        org.joda.time.DateTime dateTime61 = property59.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime65 = dateTime61.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTime dateTime67 = dateTime65.withDayOfMonth(2);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Calendar calendar69 = dateTime65.toCalendar(locale68);
        java.lang.String str72 = nameProvider49.getShortName(locale68, "DateTimeField[hourOfDay]", "DateTimeField[millisOfDay]");
        java.lang.String str73 = dateTimeField40.getAsText(1645455632491L, locale68);
        java.lang.String str74 = locale26.getDisplayCountry(locale68);
        java.lang.String str75 = dateTimeField19.getAsShortText(5494243, locale68);
        java.util.Locale locale78 = new java.util.Locale("Italian", "eras");
        java.lang.String str79 = locale68.getDisplayScript(locale78);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals(locale26.toString(), "centuries_1 JANV. 1970 00:00:00_2022-02-21T14:58:31.533Z");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645456043453,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=7,SECOND=23,MILLISECOND=453,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "21" + "'", str47, "21");
        org.junit.Assert.assertNotNull(nameProvider49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-61133702400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=32,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=277,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1 JANV. 1970 00:00:00" + "'", str74, "1 JANV. 1970 00:00:00");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "5494243" + "'", str75, "5494243");
        org.junit.Assert.assertEquals(locale78.toString(), "italian_ERAS");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test19484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19484");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.hours();
        java.lang.String str2 = durationFieldType1.getName();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.DateTime dateTime9 = property7.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = dateTime9.withDate((int) ' ', (int) (byte) 10, 1);
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime9.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType15.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime9.toMutableDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField34 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.dayOfWeek();
        org.joda.time.DurationField durationField36 = durationFieldType3.getField(chronology29);
        org.joda.time.DateTimeZone dateTimeZone37 = chronology29.getZone();
        org.joda.time.DurationField durationField38 = durationFieldType1.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField39 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology29.dayOfYear();
        org.joda.time.DurationField durationField41 = chronology29.centuries();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 30, chronology29);
        // The following exception was thrown during execution in test generation
        try {
            long long47 = chronology29.getDateTimeMillis(3907596, 5632724, 5932277, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5632724 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hours" + "'", str2, "hours");
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 37920000 + "'", int23 == 37920000);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test19485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19485");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology24);
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(10);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTime.Property property31 = dateTime25.millisOfSecond();
        org.joda.time.DateTime dateTime33 = dateTime25.plusMillis((int) (byte) 10);
        boolean boolean34 = calendar21.before((java.lang.Object) dateTime33);
        calendar21.setFirstDayOfWeek(14);
        calendar21.set(1980, 1917, 37289415);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.fromCalendarFields(calendar21);
        calendar21.setMinimalDaysInFirstWeek(659);
        boolean boolean44 = calendar21.isWeekDateSupported();
        calendar21.set(115, 898, 5880729, 1999, 70);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=14,minimalDaysInFirstWeek=659,ERA=1,YEAR=115,MONTH=898,WEEK_OF_YEAR=36,WEEK_OF_MONTH=1,DAY_OF_MONTH=5880729,DAY_OF_YEAR=255,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=1999,MINUTE=70,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test19486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19486");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime9 = localTime6.withFields((org.joda.time.ReadablePartial) localTime8);
        int int10 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime6);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = localTime3.toString("1", locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.lang.String str15 = locale12.toLanguageTag();
        java.lang.String str16 = locale12.toLanguageTag();
        java.lang.String str17 = locale12.getISO3Country();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en-CA" + "'", str15, "en-CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en-CA" + "'", str16, "en-CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CAN" + "'", str17, "CAN");
    }

    @Test
    public void test19487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19487");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 0, chronology24);
        int int26 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(10);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekyear((int) (byte) 10);
        org.joda.time.DateTime.Property property31 = dateTime25.millisOfSecond();
        org.joda.time.DateTime dateTime33 = dateTime25.plusMillis((int) (byte) 10);
        boolean boolean34 = calendar21.before((java.lang.Object) dateTime33);
        calendar21.setFirstDayOfWeek(14);
        int int37 = calendar21.getFirstDayOfWeek();
        boolean boolean38 = calendar21.isWeekDateSupported();
        calendar21.clear();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromCalendarFields(calendar21);
        // The following exception was thrown during execution in test generation
        try {
            calendar21.setWeekDate(3951, 37576243, 5590967);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 5590967");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-37920000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=14,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 14 + "'", int37 == 14);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test19488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19488");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 0, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 5);
        int int20 = localDateTime16.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.minusYears(6);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.withWeekyear(332);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localDateTime16.getValue(659);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 659");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37920000 + "'", int8 == 37920000);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5963540 + "'", int20 == 5963540);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test19489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19489");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("37920100");
        java.util.Locale locale7 = builder6.build();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronology();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withLocale(locale13);
        java.lang.String str17 = locale7.getDisplayLanguage(locale13);
        java.lang.String str18 = locale7.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test19490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19490");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 0, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime12.plus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime12.withWeekOfWeekyear((int) (short) 10);
        int int18 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(9, 12, 23, 4, 5, 14, 23, dateTimeZone9);
        boolean boolean20 = dateTimeZone9.isFixed();
        boolean boolean22 = dateTimeZone9.isStandardOffset(1645455499449L);
        java.lang.String str24 = dateTimeZone9.getShortName(1676905199583L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 37920000 + "'", int18 == 37920000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:32" + "'", str24, "+10:32");
    }

    @Test
    public void test19491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19491");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap((long) 9);
        boolean boolean5 = dateTimeField2.isSupported();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.lang.String str7 = locale6.getDisplayScript();
        int int8 = dateTimeField2.getMaximumShortTextLength(locale6);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale6);
        int int11 = calendar9.getActualMinimum(9);
        calendar9.setLenient(false);
        java.util.TimeZone timeZone14 = calendar9.getTimeZone();
        boolean boolean15 = timeZone14.observesDaylightTime();
        java.util.Date date21 = new java.util.Date(341261, 5477216, 1917, 94, 3938617);
        boolean boolean22 = timeZone14.inDaylightTime(date21);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456043570,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=23,MILLISECOND=570,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals(date21.toString(), "Fri May 30 01:37:00 GMT+10:32 799608");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test19492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19492");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.setCopy(31);
        org.joda.time.LocalTime localTime6 = property2.addWrapFieldToCopy(37920000);
        org.joda.time.LocalTime localTime7 = property2.roundFloorCopy();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = property2.getAsText(locale8);
        org.joda.time.LocalTime localTime10 = property2.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime15 = localTime12.withFields((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime localTime17 = localTime12.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalTime localTime19 = localTime17.withMillisOfDay(100);
        org.joda.time.LocalTime localTime20 = localTime10.withFields((org.joda.time.ReadablePartial) localTime19);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test19493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19493");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("");
        java.lang.String str8 = locale7.getScript();
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Set<java.lang.String> strSet10 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        boolean boolean14 = strSet10.addAll((java.util.Collection<java.lang.String>) strSet13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 0, chronology16);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.DateTime dateTime20 = dateTime17.withYear(10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 0, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime23.toMutableDateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime23.minus((long) '#');
        org.joda.time.DateTime dateTime29 = dateTime23.withDayOfWeek(4);
        boolean boolean31 = dateTime23.equals((java.lang.Object) "eras");
        boolean boolean32 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime34 = dateTime23.plusMinutes(2022);
        boolean boolean35 = strSet10.equals((java.lang.Object) 2022);
        boolean boolean36 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet10);
        java.util.Locale locale38 = new java.util.Locale("37920001");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String[] strArray50 = new java.lang.String[] { "37920032", "eras", "12:12:00.097", "10:32:00.097", "-1", "9", "hi!", "java.util.GregorianCalendar[time=1645455484256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=4,MILLISECOND=256,ZONE_OFFSET=0,DST_OFFSET=0]", "millisOfDay", "-1" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        boolean boolean53 = strSet39.retainAll((java.util.Collection<java.lang.String>) strList51);
        java.lang.Object[] objArray54 = strSet39.toArray();
        int int55 = strSet39.size();
        boolean boolean56 = strSet10.removeAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.stream.Stream<java.lang.String> strStream57 = strSet39.parallelStream();
        boolean boolean58 = strSet39.isEmpty();
        java.util.Locale locale59 = java.util.Locale.PRC;
        java.util.Locale locale60 = locale59.stripExtensions();
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleKeys();
        boolean boolean62 = strSet39.retainAll((java.util.Collection<java.lang.String>) strSet61);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = strSet61.add("01:35:11.054");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals(locale38.toString(), "37920001");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test19494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19494");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime4.minus((long) '#');
        org.joda.time.DateTime dateTime10 = dateTime4.withDayOfWeek(4);
        org.joda.time.LocalDate localDate11 = dateTime4.toLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusDays(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property15 = localDate13.property(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 0, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime18.minus((long) '#');
        org.joda.time.DateTime dateTime24 = dateTime18.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime28 = dateTime24.withZone(dateTimeZone27);
        org.joda.time.Interval interval29 = localDate13.toInterval(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(126000005L, dateTimeZone27);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(obj0, dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        int int35 = localDate32.get(dateTimeFieldType33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 0, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime38.toMutableDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime38.minus((long) '#');
        org.joda.time.DateTime dateTime44 = dateTime38.withDayOfWeek(4);
        org.joda.time.LocalDate localDate45 = dateTime38.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate47 = localDate45.plus(readablePeriod46);
        org.joda.time.LocalDate.Property property48 = localDate47.weekyear();
        org.joda.time.LocalDate localDate49 = property48.roundFloorCopy();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths(43);
        org.joda.time.LocalDate.Property property52 = localDate49.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDate localDate54 = localDate49.minus(readablePeriod53);
        boolean boolean55 = localDate32.equals((java.lang.Object) readablePeriod53);
        org.joda.time.DateMidnight dateMidnight56 = localDate32.toDateMidnight();
        java.lang.String str57 = localDate32.toString();
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22" + "'", str57, "2022-02-22");
    }

    @Test
    public void test19495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19495");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 0, chronology1);
        int int3 = dateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime8.minus((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfWeek(4);
        boolean boolean16 = dateTime8.equals((java.lang.Object) "eras");
        boolean boolean17 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime8);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.lang.String str20 = locale19.getScript();
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        long long23 = calendar21.getTimeInMillis();
        java.time.Instant instant24 = calendar21.toInstant();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromCalendarFields(calendar21);
        // The following exception was thrown during execution in test generation
        try {
            calendar21.add(42, 54339888);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:32\",offset=37920000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=32,SECOND=0,MILLISECOND=0,ZONE_OFFSET=37920000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+10:32");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test19496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19496");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType3.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DurationField durationField22 = chronology17.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.Chronology chronology24 = dateTimeFormatter23.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime31 = localTime28.withFields((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(dateTimeZone32);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime localTime36 = localTime33.withFields((org.joda.time.ReadablePartial) localTime35);
        int int37 = localTime30.compareTo((org.joda.time.ReadablePartial) localTime33);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalTime localTime39 = localTime30.minus(readablePeriod38);
        org.joda.time.DateTime dateTime40 = localTime30.toDateTimeToday();
        org.joda.time.LocalTime localTime42 = localTime30.minusMillis(343992);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder44.setScript("");
        java.util.Locale locale47 = builder44.build();
        java.util.Locale.Builder builder49 = builder44.removeUnicodeLocaleAttribute("days");
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale.Builder builder51 = builder44.setLocale(locale50);
        java.lang.String str52 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localTime42, 5483583, locale50);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "5483583" + "'", str52, "5483583");
    }

    @Test
    public void test19497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19497");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 'a');
        org.joda.time.LocalTime.Property property5 = localTime4.secondOfMinute();
        int int6 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.LocalTime localTime8 = localTime4.plusMillis((int) (byte) 100);
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property9.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 0, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime15.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime15.withMonthOfYear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime15.minus(readablePeriod23);
        long long25 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime26 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime27 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime28 = property9.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 632L + "'", long25 == 632L);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test19498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19498");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalTime localTime2 = localTime0.minus(readablePeriod1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime localTime5 = localTime2.minusMinutes(80);
        int int6 = localTime2.getMinuteOfHour();
        org.joda.time.LocalTime.Property property7 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime10 = localTime8.plus(readablePeriod9);
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis(309545);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test19499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19499");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 0, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType3.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DurationField durationField22 = chronology17.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.Chronology chronology24 = dateTimeFormatter23.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withChronology(chronology25);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = dateTimeFormatter23.getPrinter();
        int int28 = dateTimeFormatter23.getDefaultYear();
        java.lang.Integer int29 = dateTimeFormatter23.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 37920000, dateTimeZone32);
        boolean boolean34 = dateTimeZone32.isFixed();
        long long36 = dateTimeZone32.previousTransition((-61851600000000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        boolean boolean42 = dateTimeField40.isLeap((long) 9);
        long long44 = dateTimeField40.roundHalfFloor((-37920000L));
        boolean boolean46 = dateTimeField40.isLeap((long) 5416138);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.getCountry();
        java.lang.String str53 = locale49.toLanguageTag();
        java.lang.String str54 = dateTimeField40.getAsShortText(94661920839L, locale49);
        java.lang.String str55 = dateTimeZone32.getShortName((long) 5584460, locale49);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) int29, dateTimeZone32);
        boolean boolean58 = dateTime56.isAfter(1645455523822L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37920000 + "'", int11 == 37920000);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimePrinter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-61851600000000L) + "'", long36 == (-61851600000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-37920000L) + "'", long44 == (-37920000L));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "und" + "'", str53, "und");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "5440839" + "'", str54, "5440839");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.100" + "'", str55, "+00:00:00.100");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test19500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19500");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 0, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate10 = localDate7.withWeekyear(899);
        org.joda.time.LocalDate localDate12 = localDate7.withCenturyOfEra(305070);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate12.withDayOfWeek(310158);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 310158 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }
}

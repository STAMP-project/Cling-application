import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0501");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str6 = dateTimeZone4.getShortName(52L);
        org.joda.time.DateTime dateTime7 = dateTime1.withZone(dateTimeZone4);
        java.lang.String str9 = dateTimeZone4.getName(1645455321372L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime7", (dateTime1.compareTo(dateTime7) == 0) == dateTime1.equals(dateTime7));
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0502");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (short) 10);
        boolean boolean7 = dateTime5.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getShortName(52L);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) 1645455052362L, dateTimeZone10);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfMinute();
        org.joda.time.DateTime dateTime18 = dateTime15.minusMinutes(892);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime13", (dateTime5.compareTo(dateTime13) == 0) == dateTime5.equals(dateTime13));
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0503");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(1645455046184L, 3);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(32);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long41 = dateTimeZone28.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType43 = periodType42.withMinutesRemoved();
        boolean boolean44 = dateTimeZone28.equals((java.lang.Object) periodType42);
        org.joda.time.DateTime dateTime45 = dateTime17.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime48 = dateTime17.withField(dateTimeFieldType46, 53);
        int int49 = dateTime10.get(dateTimeFieldType46);
        org.joda.time.DateTime.Property property50 = dateTime10.yearOfCentury();
        boolean boolean52 = dateTime10.isEqual(1645455301716L);
        org.joda.time.DateTime.Property property53 = dateTime10.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime45", (dateTime17.compareTo(dateTime45) == 0) == dateTime17.equals(dateTime45));
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0504");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645455034114L);
        java.lang.String str15 = duration1.toString();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.minuteOfDay();
        org.joda.time.DurationField durationField26 = chronology23.halfdays();
        org.joda.time.Period period27 = duration1.toPeriod(periodType16, chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.monthOfYear();
        org.joda.time.DurationField durationField29 = chronology23.centuries();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.minuteOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillisOfDay(14);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str45 = dateTimeZone43.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime46 = dateTime38.withZone(dateTimeZone43);
        org.joda.time.YearMonthDay yearMonthDay47 = dateTime46.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField49 = yearMonthDay47.getField(0);
        boolean boolean50 = dateTimeField49.isLenient();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str62 = dateTimeZone60.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime63 = dateTime55.withZone(dateTimeZone60);
        org.joda.time.YearMonthDay yearMonthDay64 = dateTime63.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField66 = yearMonthDay64.getField(0);
        java.util.Locale locale68 = null;
        java.lang.String str69 = dateTimeField49.getAsText((org.joda.time.ReadablePartial) yearMonthDay64, (int) (short) 10, locale68);
        org.joda.time.DateTime dateTime70 = dateTime33.withFields((org.joda.time.ReadablePartial) yearMonthDay64);
        java.util.TimeZone timeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime.Property property76 = dateTime74.yearOfEra();
        org.joda.time.Interval interval77 = property76.toInterval();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        long long79 = mutableInterval78.toDurationMillis();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval78.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Interval interval83 = interval77.withDurationAfterStart((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Interval interval84 = interval77.toInterval();
        org.joda.time.MutableInterval mutableInterval85 = interval77.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone86);
        java.lang.String str88 = dateTime87.toString();
        org.joda.time.DateTime dateTime90 = dateTime87.minusMillis(7);
        org.joda.time.DateTime.Property property91 = dateTime90.hourOfDay();
        mutableInterval85.setStart((org.joda.time.ReadableInstant) dateTime90);
        int int93 = dateTimeZone72.getOffset((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime94 = dateTime70.withZone(dateTimeZone72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime38 and dateTime46", (dateTime38.compareTo(dateTime46) == 0) == dateTime38.equals(dateTime46));
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0505");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) (short) 0);
        int int10 = dateTime4.getDayOfWeek();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime23 = dateTime14.minusSeconds((int) ' ');
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        boolean boolean43 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property44 = dateTime29.year();
        java.util.Locale locale45 = null;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = null;
        java.lang.String str48 = property44.getAsShortText(locale47);
        java.util.Locale locale49 = null;
        int int50 = property44.getMaximumTextLength(locale49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property44.getFieldType();
        org.joda.time.DateTime.Property property52 = dateTime23.property(dateTimeFieldType51);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1645455028646L, chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.clockhourOfHalfday();
        java.lang.String str64 = chronology60.toString();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        java.lang.String str67 = dateTime66.toString();
        org.joda.time.DateTime dateTime69 = dateTime66.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str74 = dateTimeZone72.getNameKey(1645455028293L);
        int int76 = dateTimeZone72.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime69.toMutableDateTime(dateTimeZone72);
        org.joda.time.Chronology chronology78 = chronology60.withZone(dateTimeZone72);
        org.joda.time.DurationField durationField79 = chronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType51.getField(chronology60);
        boolean boolean81 = dateTime4.isSupported(dateTimeFieldType51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime77", (dateTime4.compareTo(mutableDateTime77) == 0) == dateTime4.equals(mutableDateTime77));
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0506");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str18 = dateTimeZone16.getNameKey(1645455028293L);
        long long20 = dateTimeZone16.convertUTCToLocal(1645455035225L);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(dateTimeZone16);
        long long24 = dateTimeZone16.adjustOffset((long) (-457070), true);
        java.lang.String str26 = dateTimeZone16.getNameKey(1645455102215L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0507");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        long long23 = dateTimeZone15.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) periodType29);
        org.joda.time.DateTime dateTime32 = dateTime4.toDateTime(dateTimeZone15);
        java.util.TimeZone timeZone33 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        long long37 = dateTimeZone34.convertLocalToUTC(1645455284068L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime32", (dateTime4.compareTo(dateTime32) == 0) == dateTime4.equals(dateTime32));
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0508");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1L), 1L, periodType31, chronology32);
        java.lang.String str34 = periodType31.toString();
        java.lang.String str35 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1645455029643L, periodType31);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType31, chronology43);
        org.joda.time.Interval interval45 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTime dateTime50 = dateTime47.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime(chronology51);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int55 = dateTime50.get(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = dateTime60.toString(dateTimeFormatter61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str67 = dateTimeZone65.getNameKey(1645455028293L);
        int int69 = dateTimeZone65.getOffset(1645455028293L);
        java.lang.String str71 = dateTimeZone65.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime72 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime73 = dateTime50.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime75 = dateTime73.withSecondOfMinute(52);
        boolean boolean76 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = dateTime75.withTimeAtStartOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime72", (dateTime50.compareTo(dateTime72) == 0) == dateTime50.equals(dateTime72));
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone20);
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period22.minusSeconds((int) (short) 1);
        org.joda.time.Period period26 = period22.plusWeeks((int) (short) -1);
        org.joda.time.Period period28 = period22.minusMillis(4);
        org.joda.time.Interval interval29 = interval21.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.halfdays();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str36 = dateTimeZone34.getNameKey(1645455028293L);
        java.lang.String str38 = dateTimeZone34.getNameKey(1645455039471L);
        java.lang.String str39 = dateTimeZone34.toString();
        org.joda.time.Chronology chronology40 = chronology30.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime41 = dateTime17.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime41", (dateTime17.compareTo(dateTime41) == 0) == dateTime17.equals(dateTime41));
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0510");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusSeconds((int) (byte) 10);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime.Property property44 = dateTime42.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime49.plusSeconds((int) (byte) 10);
        int int52 = property44.getDifference((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime51.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0511");
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime3 = instant2.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration10 = duration7.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTime dateTime19 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        boolean boolean24 = instant2.equals((java.lang.Object) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        mutableInterval25.setInterval(100000L, 1645455028646L);
        long long33 = mutableInterval25.getStartMillis();
        mutableInterval25.setEndMillis(1645455047752L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1L), 1L, periodType53, chronology54);
        java.lang.String str56 = periodType53.toString();
        java.lang.String str57 = periodType53.getName();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1645455029643L, periodType53);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, readableInstant49, periodType53);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval60.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime dateTime69 = dateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime71 = dateTime69.plusSeconds((int) (byte) 10);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration63, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration73 = duration37.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration76 = duration37.withDurationAdded(1645455036379L, 22);
        mutableInterval25.setDurationAfterStart((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Instant instant79 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration76, 2022);
        org.joda.time.Chronology chronology80 = instant2.getChronology();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(1645455127540L, 1645455212750L, chronology80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime3", (instant2.compareTo(dateTime3) == 0) == instant2.equals(dateTime3));
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0512");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.plus(1651503101605L);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str7 = dateTimeZone5.getNameKey(1645455028293L);
        int int9 = dateTimeZone5.getOffset(1645455028293L);
        long long13 = dateTimeZone5.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str19 = dateTimeZone17.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone17);
        boolean boolean21 = dateTimeZone17.isFixed();
        long long23 = dateTimeZone5.getMillisKeepLocal(dateTimeZone17, 1645455095994L);
        org.joda.time.DateTime dateTime24 = instant2.toDateTime(dateTimeZone5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime20", (instant0.compareTo(dateTime20) == 0) == instant0.equals(dateTime20));
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0513");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str13 = dateTimeZone11.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology14 = chronology6.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        boolean boolean21 = dateTime19.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getShortName(52L);
        org.joda.time.DateTime dateTime27 = dateTime19.toDateTime(dateTimeZone24);
        long long29 = dateTimeZone24.previousTransition(1645455029465L);
        long long31 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, 1645455060354L);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone24.getName(1645455130924L, locale33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime27", (dateTime19.compareTo(dateTime27) == 0) == dateTime19.equals(dateTime27));
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0514");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology12.years();
        mutableInterval0.setChronology(chronology12);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        int int20 = period18.get(durationFieldType19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration44 = duration33.minus(0L);
        org.joda.time.DateTime dateTime46 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime46.withCenturyOfEra(9);
        org.joda.time.DateTime.Property property49 = dateTime46.minuteOfHour();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str62 = dateTimeZone60.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime63 = dateTime55.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime65 = dateTime63.withYearOfEra(32);
        long long66 = property49.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration67 = period18.toDurationFrom((org.joda.time.ReadableInstant) dateTime63);
        int int68 = period18.getDays();
        int int69 = period18.getMonths();
        int[] intArray71 = chronology12.get((org.joda.time.ReadablePeriod) period18, 1645455033142L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime55 and dateTime63", (dateTime55.compareTo(dateTime63) == 0) == dateTime55.equals(dateTime63));
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0515");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int9 = dateTime4.get(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime14.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        int int23 = dateTimeZone19.getOffset(1645455028293L);
        java.lang.String str25 = dateTimeZone19.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = dateTime4.toDateTime(dateTimeZone19);
        java.lang.String str28 = dateTime4.toString();
        org.joda.time.DateTime dateTime30 = dateTime4.withMillis(1645455028941L);
        boolean boolean31 = dateTime30.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime.Property property35 = dateTime33.yearOfEra();
        java.lang.String str36 = property35.getAsString();
        long long37 = property35.remainder();
        org.joda.time.DateTime dateTime39 = property35.addToCopy(53592010);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime44.plusMillis(100);
        long long48 = dateTime47.getMillis();
        int int49 = dateTime47.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.millisOfSecond();
        boolean boolean60 = dateTimeFieldType50.isSupported(chronology57);
        int int61 = dateTime47.get(dateTimeFieldType50);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone64);
        org.joda.time.Period period66 = org.joda.time.Period.ZERO;
        org.joda.time.Period period68 = period66.minusSeconds((int) (short) 1);
        org.joda.time.Period period70 = period66.plusWeeks((int) (short) -1);
        org.joda.time.Period period72 = period66.minusMillis(4);
        org.joda.time.Interval interval73 = interval65.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        java.lang.String str75 = chronology74.toString();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.halfdayOfDay();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology74);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime80 = dateTime47.minusYears(4383442);
        org.joda.time.DateTime dateTime81 = dateTime47.withLaterOffsetAtOverlap();
        org.joda.time.Duration duration82 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = dateTime30.minus((org.joda.time.ReadableDuration) duration82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime26", (dateTime4.compareTo(dateTime26) == 0) == dateTime4.equals(dateTime26));
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0516");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        java.lang.String str17 = duration3.toString();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology25.halfdays();
        org.joda.time.Period period29 = duration3.toPeriod(periodType18, chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.monthOfYear();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(1645455068553L, 1645455069896L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str41 = dateTimeZone39.getNameKey(1645455028293L);
        int int43 = dateTimeZone39.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime36.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTime.Property property45 = dateTime36.yearOfCentury();
        java.util.Date date46 = dateTime36.toDate();
        org.joda.time.LocalDate localDate47 = dateTime36.toLocalDate();
        int[] intArray49 = chronology25.get((org.joda.time.ReadablePartial) localDate47, 0L);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        mutableInterval50.setInterval(100000L, 1645455028646L);
        org.joda.time.Chronology chronology58 = mutableInterval50.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.millisOfSecond();
        boolean boolean69 = dateTimeFieldType59.isSupported(chronology66);
        org.joda.time.DateTimeField dateTimeField70 = chronology66.minuteOfHour();
        int int71 = dateTimeField70.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        long long74 = dateTime73.getMillis();
        org.joda.time.DateTime dateTime76 = dateTime73.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime76.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay78 = dateTime77.toYearMonthDay();
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeField70.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay78, 21, locale80);
        int[] intArray83 = chronology58.get((org.joda.time.ReadablePartial) yearMonthDay78, 7199576L);
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) yearMonthDay78, periodType84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and mutableDateTime44", (dateTime36.compareTo(mutableDateTime44) == 0) == dateTime36.equals(mutableDateTime44));
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0517");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getShortName(52L);
        boolean boolean5 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str10 = dateTimeZone8.getNameKey(1645455028293L);
        long long12 = dateTimeZone8.convertUTCToLocal(1645455035225L);
        long long14 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, 1645455037008L);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays((-4371259));
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime30 = dateTime21.minusSeconds((int) ' ');
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        java.lang.Object obj38 = mutableInterval33.clone();
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1645455028646L, chronology39);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.clockhourOfHalfday();
        java.lang.String str43 = chronology39.toString();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str53 = dateTimeZone51.getNameKey(1645455028293L);
        int int55 = dateTimeZone51.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime48.toMutableDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology57 = chronology39.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime58 = dateTime30.withChronology(chronology57);
        org.joda.time.Period period60 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.MutablePeriod mutablePeriod61 = period60.toMutablePeriod();
        int[] intArray63 = chronology57.get((org.joda.time.ReadablePeriod) period60, 1645455086364L);
        org.joda.time.DateTime dateTime64 = dateTime17.toDateTime(chronology57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime21", (dateTime15.compareTo(dateTime21) == 0) == dateTime15.equals(dateTime21));
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0518");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028646L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        int int23 = dateTimeZone19.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime16.toMutableDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology25 = chronology7.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        int int28 = dateTimeField26.getMinimumValue((long) 2);
        int int29 = dateTimeField26.getMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime24", (dateTime16.compareTo(mutableDateTime24) == 0) == dateTime16.equals(mutableDateTime24));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0519");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfDay();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfDay();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        java.util.Locale locale31 = null;
        int int32 = dateTimeField30.getMaximumTextLength(locale31);
        boolean boolean33 = dateTimeField30.isSupported();
        java.util.Locale locale34 = null;
        int int35 = dateTimeField30.getMaximumTextLength(locale34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusSeconds((int) (byte) 10);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Period period60 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalTime localTime61 = dateTime58.toLocalTime();
        int int62 = dateTimeField30.getMaximumValue((org.joda.time.ReadablePartial) localTime61);
        int[] intArray64 = chronology21.get((org.joda.time.ReadablePartial) localTime61, 1645455035272L);
        long long66 = chronology14.set((org.joda.time.ReadablePartial) localTime61, 1645455060565L);
        java.util.Locale locale68 = null;
        java.lang.String str69 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localTime61, 292278993, locale68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology75);
        org.joda.time.DateTime dateTime77 = dateTime71.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateTime dateTime78 = dateTime71.withEarlierOffsetAtOverlap();
        int int79 = dateTime71.getYearOfCentury();
        org.joda.time.LocalTime localTime80 = dateTime71.toLocalTime();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime61, (org.joda.time.ReadablePartial) localTime80);
        org.joda.time.Instant instant82 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime83 = instant82.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime84 = instant82.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime85 = localTime61.toDateTime((org.joda.time.ReadableInstant) instant82);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone86);
        java.lang.String str88 = dateTime87.toString();
        org.joda.time.DateTime dateTime90 = dateTime87.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone93 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str95 = dateTimeZone93.getNameKey(1645455028293L);
        int int97 = dateTimeZone93.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime98 = dateTime90.toMutableDateTime(dateTimeZone93);
        org.joda.time.DateTime dateTime99 = dateTime85.withZone(dateTimeZone93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime90 and mutableDateTime98", (dateTime90.compareTo(mutableDateTime98) == 0) == dateTime90.equals(mutableDateTime98));
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0520");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1645455060010L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Seconds seconds15 = period14.toStandardSeconds();
        int int16 = period14.getMillis();
        org.joda.time.DurationFieldType durationFieldType18 = period14.getFieldType(0);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period(1645455029672L, (long) 3, periodType22, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfMonth();
        boolean boolean34 = durationFieldType18.isSupported(chronology30);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645455032491L, 1645455038369L, chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.dayOfMonth();
        org.joda.time.Period period38 = duration1.toPeriod(chronology30);
        org.joda.time.Duration duration40 = org.joda.time.Duration.millis(1645455126857L);
        boolean boolean41 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime48 = dateTime46.plusHours(2);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        int int52 = mutablePeriod51.getYears();
        org.joda.time.DateTime dateTime54 = dateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod51, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str59 = dateTimeZone57.getNameKey(1645455028293L);
        int int61 = dateTimeZone57.getOffset(1645455028293L);
        java.lang.String str63 = dateTimeZone57.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime.Property property65 = dateTime64.millisOfSecond();
        int int66 = dateTime64.getWeekOfWeekyear();
        org.joda.time.Duration duration67 = mutablePeriod51.toDurationFrom((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean68 = duration1.isEqual((org.joda.time.ReadableDuration) duration67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and dateTime64", (dateTime43.compareTo(dateTime64) == 0) == dateTime43.equals(dateTime64));
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0521");
        org.joda.time.Period period1 = org.joda.time.Period.years(13);
        org.joda.time.Period period3 = period1.minusSeconds(4480107);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration10 = duration7.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTime dateTime19 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        int int30 = yearMonthDay29.size();
        org.joda.time.DateTime dateTime31 = dateTime19.withFields((org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.Chronology chronology32 = yearMonthDay29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str44 = dateTimeZone42.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime45 = dateTime37.withZone(dateTimeZone42);
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField48 = yearMonthDay46.getField(0);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay29, (org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.Period period51 = org.joda.time.Period.hours(4394);
        org.joda.time.Period period52 = period49.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period53 = period1.withFields((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime(chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = dateTime62.toDateTimeISO();
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes(0);
        boolean boolean72 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime73 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime76 = dateTime73.withField(dateTimeFieldType74, 9);
        org.joda.time.DateTime dateTime77 = dateTime73.toDateTime();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        long long79 = mutableInterval78.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        boolean boolean82 = mutableInterval78.overlaps((org.joda.time.ReadableInterval) mutableInterval80);
        java.lang.Object obj83 = mutableInterval78.clone();
        org.joda.time.Chronology chronology84 = mutableInterval78.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.yearOfEra();
        boolean boolean87 = dateTimeField85.isLeap(1645455027824L);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = dateTimeField85.getType();
        int int89 = dateTime73.get(dateTimeFieldType88);
        org.joda.time.DurationFieldType durationFieldType90 = dateTimeFieldType88.getRangeDurationType();
        int int91 = period53.get(durationFieldType90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime45", (dateTime27.compareTo(dateTime45) == 0) == dateTime27.equals(dateTime45));
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0522");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        java.lang.String str17 = duration3.toString();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology25.halfdays();
        org.joda.time.Period period29 = duration3.toPeriod(periodType18, chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.monthOfYear();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(1645455068553L, 1645455069896L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str41 = dateTimeZone39.getNameKey(1645455028293L);
        int int43 = dateTimeZone39.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime36.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTime.Property property45 = dateTime36.yearOfCentury();
        java.util.Date date46 = dateTime36.toDate();
        org.joda.time.LocalDate localDate47 = dateTime36.toLocalDate();
        int[] intArray49 = chronology25.get((org.joda.time.ReadablePartial) localDate47, 0L);
        org.joda.time.DurationField durationField50 = chronology25.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and mutableDateTime44", (dateTime36.compareTo(mutableDateTime44) == 0) == dateTime36.equals(mutableDateTime44));
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0523");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        mutableInterval26.setInterval(100L, (long) 53429880);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1L), 1L, periodType34, chronology35);
        mutablePeriod36.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(0);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period60 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration62 = duration51.minus(0L);
        org.joda.time.DateTime dateTime64 = dateTime47.withDurationAdded((org.joda.time.ReadableDuration) duration62, (int) (byte) 0);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology72);
        org.joda.time.DateTime dateTime74 = dateTime68.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.Period period75 = duration66.toPeriodFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration77 = duration66.minus(0L);
        boolean boolean78 = duration62.isShorterThan((org.joda.time.ReadableDuration) duration66);
        mutablePeriod36.setPeriod((org.joda.time.ReadableDuration) duration62);
        java.lang.String str80 = duration62.toString();
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration82 = mutableInterval26.toDuration();
        org.joda.time.Duration duration83 = mutableInterval26.toDuration();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(dateTimeZone86);
        long long88 = dateTime87.getMillis();
        org.joda.time.Duration duration89 = new org.joda.time.Duration(readableInstant84, (org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Duration duration92 = duration89.withDurationAdded(1645455094619L, 3);
        org.joda.time.Duration duration93 = duration83.plus((org.joda.time.ReadableDuration) duration92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime87", (dateTime1.compareTo(dateTime87) == 0) == dateTime1.equals(dateTime87));
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0524");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant49 = instant6.toInstant();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime.Property property53 = dateTime51.yearOfEra();
        org.joda.time.Interval interval54 = property53.toInterval();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval55.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Interval interval60 = interval54.withDurationAfterStart((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Interval interval61 = interval54.toInterval();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        boolean boolean66 = mutableInterval62.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        java.lang.Object obj67 = mutableInterval62.clone();
        org.joda.time.Chronology chronology68 = mutableInterval62.getChronology();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        mutableInterval62.setInterval((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.Interval interval75 = interval61.gap((org.joda.time.ReadableInterval) mutableInterval62);
        org.joda.time.Period period76 = interval61.toPeriod();
        org.joda.time.Duration duration77 = interval61.toDuration();
        org.joda.time.Duration duration79 = duration77.withMillis(1645455048666L);
        long long80 = duration79.getMillis();
        org.joda.time.Instant instant81 = instant49.minus((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Duration duration82 = duration79.toDuration();
        org.joda.time.Duration duration84 = duration79.plus(1645455185553L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0525");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        org.joda.time.DateTime.Property property10 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Period period25 = new org.joda.time.Period(1645455029672L, (long) 3, periodType15, chronology23);
        org.joda.time.DurationField durationField26 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant38.toInstant();
        boolean boolean40 = dateTime37.isAfter((org.joda.time.ReadableInstant) instant39);
        org.joda.time.LocalDateTime localDateTime41 = dateTime37.toLocalDateTime();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime41, locale42);
        int int44 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant38", (dateTime1.compareTo(instant38) == 0) == dateTime1.equals(instant38));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0526");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime4.yearOfCentury();
        java.util.Date date14 = dateTime4.toDate();
        org.joda.time.LocalDate localDate15 = dateTime4.toLocalDate();
        org.joda.time.DateTime.Property property16 = dateTime4.hourOfDay();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period17.negated();
        boolean boolean19 = dateTime4.equals((java.lang.Object) period17);
        org.joda.time.Period period21 = period17.minusMillis(4457725);
        org.joda.time.Period period23 = period21.withMinutes(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0527");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        boolean boolean22 = dateTimeField20.isLeap(1645455027824L);
        int int23 = dateTime4.get(dateTimeField20);
        int int24 = dateTime4.getHourOfDay();
        org.joda.time.DateTime dateTime25 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime26 = dateTime4.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and dateTime4", (mutableDateTime12.compareTo(dateTime4) == 0) == mutableDateTime12.equals(dateTime4));
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0528");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        long long23 = dateTimeZone15.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) periodType29);
        org.joda.time.DateTime dateTime32 = dateTime4.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime35 = dateTime4.withField(dateTimeFieldType33, 53);
        org.joda.time.DateTime dateTime37 = dateTime35.plusWeeks(53486469);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime32", (dateTime4.compareTo(dateTime32) == 0) == dateTime4.equals(dateTime32));
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0529");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMillis(100);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        long long30 = dateTimeZone22.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime31 = dateTime16.withZoneRetainFields(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime10.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str44 = dateTimeZone42.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime45 = dateTime37.withZone(dateTimeZone42);
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime(chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.DateTime dateTime62 = dateTime55.toDateTimeISO();
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes(0);
        boolean boolean65 = dateTime51.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime.Property property66 = dateTime51.year();
        org.joda.time.DateTime dateTime68 = dateTime51.withMinuteOfHour(22);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.time();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime68, periodType69);
        org.joda.time.Period period71 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime32, periodType69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime80 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardMinutes(27424252L);
        boolean boolean84 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime45", (dateTime7.compareTo(dateTime45) == 0) == dateTime7.equals(dateTime45));
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0530");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        boolean boolean32 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property33 = dateTime18.year();
        org.joda.time.DateTime dateTime35 = dateTime18.withMinuteOfHour(22);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime35, periodType36);
        org.joda.time.Period period39 = period37.plusMinutes(4397307);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period50 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration52 = duration41.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.DateTime dateTime57 = dateTime54.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTime(chronology58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = duration52.toPeriodTo((org.joda.time.ReadableInstant) dateTime59, periodType60);
        int int62 = dateTime59.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.DateTime dateTime67 = dateTime64.withMillisOfSecond((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime67);
        int int69 = mutablePeriod68.size();
        org.joda.time.Period period70 = period39.plus((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0531");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        boolean boolean32 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property33 = dateTime18.year();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property33.getAsText(locale34);
        java.util.Locale locale36 = null;
        java.lang.String str37 = property33.getAsShortText(locale36);
        java.util.Locale locale38 = null;
        int int39 = property33.getMaximumTextLength(locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property33.getFieldType();
        org.joda.time.DateTime.Property property41 = dateTime12.property(dateTimeFieldType40);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        boolean boolean47 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        java.lang.Object obj48 = mutableInterval43.clone();
        org.joda.time.Chronology chronology49 = mutableInterval43.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645455028646L, chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.clockhourOfHalfday();
        java.lang.String str53 = chronology49.toString();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str63 = dateTimeZone61.getNameKey(1645455028293L);
        int int65 = dateTimeZone61.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime58.toMutableDateTime(dateTimeZone61);
        org.joda.time.Chronology chronology67 = chronology49.withZone(dateTimeZone61);
        org.joda.time.DurationField durationField68 = chronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType40.getField(chronology49);
        org.joda.time.DateTimeField dateTimeField70 = chronology49.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and mutableDateTime66", (dateTime18.compareTo(mutableDateTime66) == 0) == dateTime18.equals(mutableDateTime66));
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0532");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = instant7.toDateTime();
        org.joda.time.DateTime dateTime10 = instant7.toDateTime();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(1645455043186L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(1645455032819L);
        boolean boolean15 = duration12.isEqual((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = duration12.withMillis(1645455060010L);
        org.joda.time.Period period19 = org.joda.time.Period.seconds(1);
        org.joda.time.Period period21 = period19.withDays((int) (byte) 10);
        org.joda.time.Period period23 = period21.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.withMillisOfDay(1);
        org.joda.time.Duration duration34 = period21.toDurationTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration35 = duration34.toDuration();
        org.joda.time.Duration duration36 = duration12.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Instant instant37 = instant7.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        long long44 = duration41.getStandardDays();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        org.joda.time.Interval interval49 = property48.toInterval();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval55 = interval49.withDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval56 = interval49.toInterval();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        java.lang.Object obj62 = mutableInterval57.clone();
        org.joda.time.Chronology chronology63 = mutableInterval57.getChronology();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        boolean boolean68 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) mutableInterval66);
        mutableInterval57.setInterval((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.Interval interval70 = interval56.gap((org.joda.time.ReadableInterval) mutableInterval57);
        boolean boolean72 = interval56.equals((java.lang.Object) 1645455027824L);
        org.joda.time.DateTime dateTime73 = interval56.getEnd();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        boolean boolean85 = mutableInterval81.overlaps((org.joda.time.ReadableInterval) mutableInterval83);
        java.lang.Object obj86 = mutableInterval81.clone();
        org.joda.time.Chronology chronology87 = mutableInterval81.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 8, periodType80, chronology87);
        mutablePeriod76.setPeriod((org.joda.time.ReadableDuration) duration78, chronology87);
        java.lang.Object obj91 = null;
        org.joda.time.PeriodType periodType92 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology93 = null;
        org.joda.time.Period period94 = new org.joda.time.Period(obj91, periodType92, chronology93);
        org.joda.time.Period period95 = duration78.toPeriod(periodType92);
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime73, periodType92);
        org.joda.time.Instant instant98 = instant37.withDurationAdded((org.joda.time.ReadableDuration) duration41, 141);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0533");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.plus(1651503101605L);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        boolean boolean14 = dateTime12.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        boolean boolean33 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean36 = mutableInterval34.contains(1L);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        mutableInterval34.setChronology(chronology43);
        mutablePeriod5.setPeriod(100000L, 1645455034244L, chronology43);
        mutablePeriod5.setMillis((int) (short) 0);
        int int48 = mutablePeriod5.getDays();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant2, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime9", (instant0.compareTo(dateTime9) == 0) == instant0.equals(dateTime9));
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0534");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        java.util.GregorianCalendar gregorianCalendar28 = dateTime20.toGregorianCalendar();
        org.joda.time.Interval interval29 = duration4.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.Interval interval32 = interval29.withStartMillis(1645455076956L);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.PeriodType periodType37 = periodType35.withMillisRemoved();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((-1L), 1L, periodType43, chronology44);
        java.lang.String str46 = periodType43.toString();
        java.lang.String str47 = periodType43.getName();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645455029643L, periodType43);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType43, chronology55);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1645455029375L, periodType35, chronology55);
        org.joda.time.Period period58 = interval32.toPeriod(periodType35);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime60 = instant59.toMutableDateTimeISO();
        org.joda.time.Interval interval61 = interval32.withEnd((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.Interval interval63 = interval32.withStartMillis(7199770L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant59", (dateTime20.compareTo(instant59) == 0) == dateTime20.equals(instant59));
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0535");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime20.yearOfEra();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean25 = dateTime23.isSupported(dateTimeFieldType24);
        org.joda.time.Instant instant26 = dateTime23.toInstant();
        org.joda.time.DateTime dateTime28 = dateTime23.plusYears((int) (byte) 10);
        int int29 = property18.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime30 = property18.getDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant26", (dateTime23.compareTo(instant26) == 0) == dateTime23.equals(instant26));
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0536");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(1645455205186L, 32360662857600000L);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = duration8.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime20 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        boolean boolean25 = instant3.equals((java.lang.Object) dateTime24);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        mutableInterval26.setInterval(100000L, 1645455028646L);
        long long34 = mutableInterval26.getStartMillis();
        mutableInterval26.setEndMillis(1645455047752L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period47 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration49 = duration38.minus(0L);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((-1L), 1L, periodType54, chronology55);
        java.lang.String str57 = periodType54.toString();
        java.lang.String str58 = periodType54.getName();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(1645455029643L, periodType54);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, readableInstant50, periodType54);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval61.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime72 = dateTime70.plusSeconds((int) (byte) 10);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration74 = duration38.minus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration77 = duration38.withDurationAdded(1645455036379L, 22);
        mutableInterval26.setDurationAfterStart((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Instant instant80 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration77, 2022);
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval81.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Duration duration87 = duration84.plus((long) 8);
        org.joda.time.Instant instant89 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration87, 52);
        boolean boolean90 = interval2.isAfter((org.joda.time.ReadableInstant) instant89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0537");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfDay();
        org.joda.time.DurationField durationField12 = chronology8.weekyears();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone15);
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period19 = period17.minusSeconds((int) (short) 1);
        org.joda.time.Period period21 = period17.plusWeeks((int) (short) -1);
        org.joda.time.Period period23 = period17.minusMillis(4);
        org.joda.time.Interval interval24 = interval16.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str32 = dateTimeZone30.getNameKey(1645455028293L);
        int int34 = dateTimeZone30.getOffset(1645455028293L);
        long long38 = dateTimeZone30.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str40 = dateTimeZone30.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.toDateTime(chronology46);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime48.withMillisOfDay(1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant51.toInstant();
        boolean boolean53 = dateTime50.isAfter((org.joda.time.ReadableInstant) instant52);
        org.joda.time.LocalDateTime localDateTime54 = dateTime50.toLocalDateTime();
        boolean boolean55 = dateTimeZone30.isLocalDateTimeGap(localDateTime54);
        int int56 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54);
        long long58 = chronology8.set((org.joda.time.ReadablePartial) localDateTime54, 1645455137725L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and instant51", (dateTime42.compareTo(instant51) == 0) == dateTime42.equals(instant51));
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0538");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis((long) 9);
        org.joda.time.Instant instant21 = instant19.minus(1645455060010L);
        org.joda.time.Instant instant23 = instant19.minus(1645455066597L);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 8, periodType30, chronology37);
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration28, chronology37);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        java.util.GregorianCalendar gregorianCalendar52 = dateTime44.toGregorianCalendar();
        org.joda.time.Interval interval53 = duration28.toIntervalTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.Interval interval56 = interval53.withStartMillis(1645455076956L);
        org.joda.time.Duration duration57 = interval53.toDuration();
        org.joda.time.Duration duration58 = duration57.toDuration();
        org.joda.time.Instant instant59 = instant19.minus((org.joda.time.ReadableDuration) duration58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0539");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.DateTime dateTime51 = instant6.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        mutablePeriod52.addWeeks((int) (byte) -1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration67 = duration56.minus(0L);
        org.joda.time.Chronology chronology68 = null;
        mutablePeriod52.setPeriod((org.joda.time.ReadableDuration) duration56, chronology68);
        long long70 = duration56.getStandardHours();
        org.joda.time.Instant instant72 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration56, 2023);
        org.joda.time.Instant instant75 = instant72.withDurationAdded(0L, (int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime76 = instant72.toMutableDateTime();
        org.joda.time.DateTime dateTime77 = instant72.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0540");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str5 = dateTimeZone3.getNameKey(1645455028293L);
        int int7 = dateTimeZone3.getOffset(1645455028293L);
        long long11 = dateTimeZone3.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str13 = dateTimeZone3.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfDay(1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant24.toInstant();
        boolean boolean26 = dateTime23.isAfter((org.joda.time.ReadableInstant) instant25);
        org.joda.time.LocalDateTime localDateTime27 = dateTime23.toLocalDateTime();
        boolean boolean28 = dateTimeZone3.isLocalDateTimeGap(localDateTime27);
        org.joda.time.Chronology chronology29 = localDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.year();
        org.joda.time.Period period31 = new org.joda.time.Period(1645455090430L, chronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant24", (dateTime15.compareTo(instant24) == 0) == dateTime15.equals(instant24));
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0541");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1L), 1L, periodType31, chronology32);
        java.lang.String str34 = periodType31.toString();
        java.lang.String str35 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1645455029643L, periodType31);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType31, chronology43);
        org.joda.time.Interval interval45 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime.Property property49 = dateTime47.yearOfEra();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval56 = interval50.withDurationAfterStart((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval57 = interval50.toInterval();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        mutableInterval58.setInterval((org.joda.time.ReadableInterval) mutableInterval65);
        org.joda.time.Interval interval71 = interval57.gap((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.Period period72 = interval57.toPeriod();
        org.joda.time.Interval interval73 = interval45.overlap((org.joda.time.ReadableInterval) interval57);
        boolean boolean74 = interval45.containsNow();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        java.lang.String str77 = dateTime76.toString();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology80);
        org.joda.time.DateTime dateTime82 = dateTime76.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.DateTime dateTime85 = dateTime82.withDurationAdded(1645455046184L, 3);
        int int86 = dateTime85.getMonthOfYear();
        org.joda.time.Instant instant87 = dateTime85.toInstant();
        boolean boolean88 = interval45.isBefore((org.joda.time.ReadableInstant) instant87);
        org.joda.time.Interval interval89 = interval45.toInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime85 and instant87", (dateTime85.compareTo(instant87) == 0) == dateTime85.equals(instant87));
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0542");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.clockhourOfDay();
        org.joda.time.DurationField durationField11 = chronology6.eras();
        org.joda.time.Chronology chronology12 = chronology6.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField11", Math.signum(durationField9.compareTo(durationField11)) == -Math.signum(durationField11.compareTo(durationField9)));
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0543");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        int int26 = yearMonthDay25.size();
        org.joda.time.DateTime dateTime27 = dateTime15.withFields((org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(1);
        java.lang.String str38 = dateTime35.toString();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime44.toYearMonthDay();
        org.joda.time.DateTime dateTime46 = dateTime35.withFields((org.joda.time.ReadablePartial) yearMonthDay45);
        org.joda.time.DateTime.Property property47 = dateTime35.yearOfCentury();
        org.joda.time.DateTime dateTime49 = dateTime35.withSecondOfMinute((int) (byte) 10);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType51 = periodType50.withMinutesRemoved();
        org.joda.time.PeriodType periodType52 = periodType50.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime35, periodType52);
        org.joda.time.Chronology chronology54 = dateTime35.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime35.toDateTimeISO();
        org.joda.time.Instant instant56 = dateTime55.toInstant();
        org.joda.time.MutableDateTime mutableDateTime57 = instant56.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int63 = dateTime60.get(dateTimeFieldType62);
        boolean boolean64 = mutableDateTime57.isSupported(dateTimeFieldType62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime60", (dateTime8.compareTo(dateTime60) == 0) == dateTime8.equals(dateTime60));
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0544");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getShortName(52L);
        boolean boolean5 = dateTimeZone2.isFixed();
        long long7 = dateTimeZone2.convertUTCToLocal(1645455038369L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str20 = dateTimeZone10.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfDay(1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant31.toInstant();
        boolean boolean33 = dateTime30.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.LocalDateTime localDateTime34 = dateTime30.toLocalDateTime();
        boolean boolean35 = dateTimeZone10.isLocalDateTimeGap(localDateTime34);
        boolean boolean36 = dateTimeZone2.isLocalDateTimeGap(localDateTime34);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime dateTime42 = dateTime39.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str47 = dateTimeZone45.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime48 = dateTime39.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime37.withZoneRetainFields(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and dateTime39", (instant31.compareTo(dateTime39) == 0) == instant31.equals(dateTime39));
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0545");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        int int14 = instant1.get(dateTimeField13);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardHours(1645455083019L);
        org.joda.time.Instant instant17 = instant1.plus((org.joda.time.ReadableDuration) duration16);
        long long18 = duration16.getMillis();
        long long19 = duration16.getStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0546");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        java.util.GregorianCalendar gregorianCalendar28 = dateTime20.toGregorianCalendar();
        org.joda.time.Interval interval29 = duration4.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.Interval interval32 = interval29.withStartMillis(1645455076956L);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.PeriodType periodType37 = periodType35.withMillisRemoved();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((-1L), 1L, periodType43, chronology44);
        java.lang.String str46 = periodType43.toString();
        java.lang.String str47 = periodType43.getName();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645455029643L, periodType43);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType43, chronology55);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1645455029375L, periodType35, chronology55);
        org.joda.time.Period period58 = interval32.toPeriod(periodType35);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime60 = instant59.toMutableDateTimeISO();
        org.joda.time.Interval interval61 = interval32.withEnd((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime.Property property65 = dateTime63.yearOfEra();
        org.joda.time.DateTime dateTime66 = property65.roundFloorCopy();
        int int67 = property65.getMinimumValue();
        org.joda.time.DateTime dateTime68 = property65.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        java.lang.String str71 = dateTime70.toString();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology74);
        org.joda.time.DateTime dateTime76 = dateTime70.minus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.DateTime dateTime77 = dateTime70.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime79 = dateTime70.minusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property80 = dateTime70.dayOfWeek();
        boolean boolean81 = dateTime68.isBefore((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str86 = dateTimeZone84.getNameKey(1645455028293L);
        int int88 = dateTimeZone84.getOffset(1645455028293L);
        java.lang.String str90 = dateTimeZone84.getShortName(1645455037062L);
        java.lang.String str92 = dateTimeZone84.getName(1645455033926L);
        org.joda.time.DateTime dateTime93 = dateTime68.toDateTime(dateTimeZone84);
        org.joda.time.Interval interval94 = interval32.withEnd((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant59", (dateTime20.compareTo(instant59) == 0) == dateTime20.equals(instant59));
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0547");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1645455029820L, chronology8);
        boolean boolean13 = dateTimeFieldType0.isSupported(chronology8);
        org.joda.time.DurationField durationField14 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.millisOfSecond();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.Period period29 = new org.joda.time.Period(1645455029672L, (long) 3, periodType19, chronology27);
        org.joda.time.DurationField durationField30 = chronology27.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.year();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str36 = dateTimeZone34.getNameKey(1645455028293L);
        int int38 = dateTimeZone34.getOffset(1645455028293L);
        long long42 = dateTimeZone34.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str44 = dateTimeZone34.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTime();
        org.joda.time.DateTime dateTime54 = dateTime52.withMillisOfDay(1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant55.toInstant();
        boolean boolean57 = dateTime54.isAfter((org.joda.time.ReadableInstant) instant56);
        org.joda.time.LocalDateTime localDateTime58 = dateTime54.toLocalDateTime();
        boolean boolean59 = dateTimeZone34.isLocalDateTimeGap(localDateTime58);
        org.joda.time.Chronology chronology60 = localDateTime58.getChronology();
        java.util.Locale locale62 = null;
        java.lang.String str63 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime58, 0, locale62);
        java.util.Locale locale65 = null;
        java.lang.String str66 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime58, 4499190, locale65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField30", Math.signum(durationField14.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField14)));
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0548");
        org.joda.time.Instant instant2 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumTextLength(locale9);
        java.lang.String str11 = property7.getName();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration24 = duration13.minus(0L);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1L), 1L, periodType29, chronology30);
        java.lang.String str32 = periodType29.toString();
        java.lang.String str33 = periodType29.getName();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645455029643L, periodType29);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, readableInstant25, periodType29);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime45.plusSeconds((int) (byte) 10);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration49 = duration13.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean50 = property7.equals((java.lang.Object) duration13);
        org.joda.time.Instant instant51 = instant2.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(1651503060976L, chronology52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime dateTime63 = dateTime60.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime64 = dateTime63.toDateTimeISO();
        org.joda.time.Interval interval65 = duration57.toIntervalFrom((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime.Property property69 = dateTime67.yearOfEra();
        org.joda.time.Interval interval70 = property69.toInterval();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval71.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Interval interval76 = interval70.withDurationAfterStart((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Interval interval77 = interval70.toInterval();
        org.joda.time.Interval interval79 = interval77.withEndMillis(2339679030463L);
        org.joda.time.Interval interval81 = interval77.withEndMillis(1645455068553L);
        org.joda.time.Duration duration82 = org.joda.time.Duration.ZERO;
        org.joda.time.Interval interval83 = interval77.withDurationAfterStart((org.joda.time.ReadableDuration) duration82);
        boolean boolean84 = duration57.isShorterThan((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration85 = duration82.toDuration();
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime3", (instant2.compareTo(mutableDateTime3) == 0) == instant2.equals(mutableDateTime3));
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0549");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Seconds seconds13 = period12.toStandardSeconds();
        int int14 = period12.getMillis();
        org.joda.time.DurationFieldType durationFieldType16 = period12.getFieldType(0);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.Period period30 = new org.joda.time.Period(1645455029672L, (long) 3, periodType20, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfMonth();
        boolean boolean32 = durationFieldType16.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.dayOfYear();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval(1645455051598L, 1645455067969L, chronology28);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Chronology chronology43 = chronology41.withUTC();
        org.joda.time.DurationField durationField44 = chronology41.years();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType48 = periodType47.withYearsRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        boolean boolean54 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        java.lang.Object obj55 = mutableInterval50.clone();
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfEra();
        org.joda.time.Period period58 = new org.joda.time.Period(1645455029672L, (long) 3, periodType48, chronology56);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.PeriodType periodType62 = periodType60.withMillisRemoved();
        org.joda.time.Period period63 = period58.withPeriodType(periodType60);
        long long66 = chronology41.add((org.joda.time.ReadablePeriod) period63, 1645455077125L, 10);
        mutableInterval34.setChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField68 = chronology41.year();
        long long70 = dateTimeField68.roundHalfFloor(1645455270526L);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.DateTime dateTime75 = dateTime72.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.toDateTime(chronology76);
        org.joda.time.DateTime dateTime78 = dateTime75.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime78.withMillisOfDay(1);
        org.joda.time.Instant instant81 = new org.joda.time.Instant();
        org.joda.time.Instant instant82 = instant81.toInstant();
        boolean boolean83 = dateTime80.isAfter((org.joda.time.ReadableInstant) instant82);
        org.joda.time.LocalDateTime localDateTime84 = dateTime80.toLocalDateTime();
        int int85 = dateTimeField68.getMinimumValue((org.joda.time.ReadablePartial) localDateTime84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant81", (dateTime5.compareTo(instant81) == 0) == dateTime5.equals(instant81));
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0550");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        int int4 = dateTime1.getYearOfCentury();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        int int17 = dateTimeZone14.getOffsetFromLocal(1645455050010L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long39 = dateTimeZone14.getMillisKeepLocal(dateTimeZone28, 1687730611190400000L);
        org.joda.time.DateTime dateTime40 = dateTime1.withZone(dateTimeZone28);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        mutableInterval41.setInterval(100000L, 1645455028646L);
        long long49 = mutableInterval41.getStartMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        mutableInterval41.setDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardMinutes(1645455037008L);
        boolean boolean58 = duration53.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTime dateTime59 = dateTime1.plus((org.joda.time.ReadableDuration) duration53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime1", (dateTime19.compareTo(dateTime1) == 0) == dateTime19.equals(dateTime1));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0551");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028646L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        int int23 = dateTimeZone19.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime16.toMutableDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology25 = chronology7.withZone(dateTimeZone19);
        org.joda.time.DurationField durationField26 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = chronology7.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime24", (dateTime16.compareTo(mutableDateTime24) == 0) == dateTime16.equals(mutableDateTime24));
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0552");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime9.getMillisOfDay();
        int int30 = dateTime9.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0553");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean15 = dateTime4.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int17 = dateTime4.get(dateTimeFieldType16);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1L), 1L, periodType20, chronology21);
        mutablePeriod22.setSeconds((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod22.setPeriod((long) 9, 100000L, chronology27);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Period period43 = new org.joda.time.Period(1645455029672L, (long) 3, periodType33, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology41.days();
        mutablePeriod22.add(1645455035891L, chronology41);
        org.joda.time.DateTime dateTime47 = dateTime4.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField49 = dateTimeField48.getRangeDurationField();
        int int51 = dateTimeField48.getMaximumValue(1645455156819L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0554");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        int int17 = mutablePeriod2.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime30 = dateTime22.withZone(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.DateTime.Property property32 = dateTime30.weekyear();
        org.joda.time.DateTime dateTime33 = property32.roundCeilingCopy();
        org.joda.time.Duration duration34 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) dateTime33);
        mutablePeriod2.addYears((int) (byte) 1);
        java.lang.Object obj37 = mutablePeriod2.clone();
        mutablePeriod2.addDays(4557863);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime30", (dateTime22.compareTo(dateTime30) == 0) == dateTime22.equals(dateTime30));
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0555");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        long long23 = dateTimeZone10.convertLocalToUTC(1645455045823L, true, (long) 31);
        long long25 = dateTimeZone10.convertUTCToLocal(1645455037008L);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone10);
        java.lang.String str27 = dateTimeZone10.getID();
        long long31 = dateTimeZone10.convertLocalToUTC(1645455220574L, true, 1645455161025L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime26", (dateTime1.compareTo(dateTime26) == 0) == dateTime1.equals(dateTime26));
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0556");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundFloorCopy();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        int int23 = dateTime17.get(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        boolean boolean25 = dateTime12.isSupported(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        long long39 = dateTimeZone28.previousTransition(1645455049993L);
        org.joda.time.DateTime dateTime40 = dateTime12.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime.Property property41 = dateTime40.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime40", (dateTime4.compareTo(dateTime40) == 0) == dateTime4.equals(dateTime40));
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0557");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime7.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1645455029820L, chronology27);
        boolean boolean32 = dateTimeFieldType19.isSupported(chronology27);
        int int33 = dateTime7.get(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int37 = dateTimeZone35.getOffsetFromLocal(0L);
        org.joda.time.DateTime dateTime38 = dateTime7.toDateTime(dateTimeZone35);
        long long42 = dateTimeZone35.convertLocalToUTC((long) 53263361, false, 0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime38", (dateTime4.compareTo(dateTime38) == 0) == dateTime4.equals(dateTime38));
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0558");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.Instant instant25 = instant22.plus(1645455031834L);
        org.joda.time.Instant instant27 = instant22.minus(1645455037062L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration40 = duration29.minus(0L);
        org.joda.time.Duration duration42 = duration29.withMillis(1645455034114L);
        java.lang.String str43 = duration29.toString();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.minuteOfDay();
        org.joda.time.DurationField durationField54 = chronology51.halfdays();
        org.joda.time.Period period55 = duration29.toPeriod(periodType44, chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime57 = instant22.toMutableDateTime(chronology51);
        org.joda.time.Instant instant58 = instant22.toInstant();
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime60 = instant59.toMutableDateTimeISO();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period71 = duration62.toPeriodFrom((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Duration duration73 = duration62.minus(0L);
        org.joda.time.Duration duration75 = duration62.withMillis(1645455034114L);
        org.joda.time.Instant instant76 = instant59.minus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Instant instant78 = instant59.withMillis((long) 9);
        org.joda.time.Instant instant80 = instant78.minus(1645455060010L);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant58, (org.joda.time.ReadableInstant) instant80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant59", (dateTime1.compareTo(instant59) == 0) == dateTime1.equals(instant59));
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0559");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.Instant instant25 = instant22.plus(1645455031834L);
        org.joda.time.Instant instant27 = instant22.minus(1645455037062L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration40 = duration29.minus(0L);
        org.joda.time.Duration duration42 = duration29.withMillis(1645455034114L);
        java.lang.String str43 = duration29.toString();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.minuteOfDay();
        org.joda.time.DurationField durationField54 = chronology51.halfdays();
        org.joda.time.Period period55 = duration29.toPeriod(periodType44, chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime57 = instant22.toMutableDateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField58 = chronology51.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0560");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        boolean boolean22 = instant0.equals((java.lang.Object) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant25 = instant0.minus((long) 4626382);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withMillisOfSecond((int) (short) 10);
        int int39 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime35);
        int int40 = dateTime30.getMonthOfYear();
        org.joda.time.DateTime dateTime42 = dateTime30.minusMillis(4386659);
        boolean boolean43 = instant0.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType49 = periodType48.withYearsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.Period period59 = new org.joda.time.Period(1645455029672L, (long) 3, periodType49, chronology57);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.dayOfMonth();
        org.joda.time.DurationField durationField61 = chronology57.days();
        org.joda.time.Period period62 = new org.joda.time.Period(1645455034855L, 1645455043876L, chronology57);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime30.toMutableDateTime(chronology57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0561");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.Instant instant17 = dateTime15.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant10", (dateTime1.compareTo(instant10) == 0) == dateTime1.equals(instant10));
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0562");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        int int6 = dateTimeZone2.getOffset(1645455028293L);
        long long10 = dateTimeZone2.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone14);
        boolean boolean18 = dateTimeZone14.isFixed();
        long long20 = dateTimeZone2.getMillisKeepLocal(dateTimeZone14, 1645455095994L);
        int int22 = dateTimeZone14.getOffsetFromLocal((long) 50);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime(chronology28);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        int int36 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime38 = dateTime32.minusMinutes(0);
        org.joda.time.DateTime dateTime40 = dateTime38.minusYears(53482279);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime40.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone44);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.Period period52 = period46.minusMillis(4);
        org.joda.time.Interval interval53 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str61 = dateTimeZone59.getNameKey(1645455028293L);
        int int63 = dateTimeZone59.getOffset(1645455028293L);
        long long67 = dateTimeZone59.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str69 = dateTimeZone59.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.toDateTime(chronology75);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTime dateTime79 = dateTime77.withMillisOfDay(1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant();
        org.joda.time.Instant instant81 = instant80.toInstant();
        boolean boolean82 = dateTime79.isAfter((org.joda.time.ReadableInstant) instant81);
        org.joda.time.LocalDateTime localDateTime83 = dateTime79.toLocalDateTime();
        boolean boolean84 = dateTimeZone59.isLocalDateTimeGap(localDateTime83);
        int int85 = dateTimeField56.getMinimumValue((org.joda.time.ReadablePartial) localDateTime83);
        boolean boolean86 = dateTimeZone41.isLocalDateTimeGap(localDateTime83);
        boolean boolean87 = dateTimeZone14.isLocalDateTimeGap(localDateTime83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant80", (dateTime17.compareTo(instant80) == 0) == dateTime17.equals(instant80));
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0563");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((int) (short) 10, 53429880, (int) (short) 0, 1);
        int int8 = mutablePeriod7.getSeconds();
        org.joda.time.Period period9 = mutablePeriod7.toPeriod();
        int int10 = mutablePeriod7.getMonths();
        org.joda.time.DateTime dateTime11 = dateTime2.plus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getShortName(52L);
        boolean boolean17 = dateTimeZone14.isFixed();
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTime(dateTimeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime2", (instant0.compareTo(dateTime2) == 0) == instant0.equals(dateTime2));
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0564");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration7 = duration4.plus((long) 8);
        org.joda.time.Seconds seconds8 = duration4.toStandardSeconds();
        org.joda.time.Duration duration9 = duration4.toDuration();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period15 = duration13.toPeriod();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        boolean boolean22 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration24 = duration13.minus(1645455031834L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration26.minus(0L);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1L), 1L, periodType42, chronology43);
        java.lang.String str45 = periodType42.toString();
        java.lang.String str46 = periodType42.getName();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1645455029643L, periodType42);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, readableInstant38, periodType42);
        boolean boolean49 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration26);
        boolean boolean50 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        int int56 = dateTime52.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = dateTime58.toDateTimeISO();
        int int66 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime68 = dateTime52.minusMinutes(8);
        org.joda.time.DateTime.Property property69 = dateTime52.dayOfYear();
        int int70 = dateTime52.getYear();
        boolean boolean72 = dateTime52.equals((java.lang.Object) "2022-02-22T01:12:48.207+10:22");
        org.joda.time.Instant instant73 = dateTime52.toInstant();
        org.joda.time.Instant instant75 = instant73.plus(1645455124875L);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType77 = periodType76.withSecondsRemoved();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) instant73, periodType77);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        boolean boolean85 = mutableInterval81.overlaps((org.joda.time.ReadableInterval) mutableInterval83);
        java.lang.Object obj86 = mutableInterval81.clone();
        org.joda.time.Chronology chronology87 = mutableInterval81.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.yearOfEra();
        org.joda.time.Chronology chronology89 = chronology87.withUTC();
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str94 = dateTimeZone92.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology95 = chronology87.withZone(dateTimeZone92);
        org.joda.time.DurationField durationField96 = chronology95.minutes();
        org.joda.time.DateTimeField dateTimeField97 = dateTimeFieldType80.getField(chronology95);
        org.joda.time.DateTime dateTime98 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T01:14:04.985+10:22", chronology95);
        org.joda.time.Period period99 = new org.joda.time.Period(1645455275368L, periodType77, chronology95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and instant73", (dateTime28.compareTo(instant73) == 0) == dateTime28.equals(instant73));
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0565");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime.Property property68 = dateTime66.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        java.lang.String str71 = dateTime70.toString();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology74);
        org.joda.time.DateTime dateTime76 = dateTime70.minus((org.joda.time.ReadablePeriod) period75);
        boolean boolean77 = property68.equals((java.lang.Object) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone78);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.plus(readableDuration80);
        int int82 = property68.getDifference((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Period period83 = duration63.toPeriodFrom((org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0566");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology12.years();
        mutableInterval0.setChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded(1645455046184L, 3);
        int int27 = dateTime26.getMonthOfYear();
        org.joda.time.Instant instant28 = dateTime26.toInstant();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(1645455032819L);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime33 = dateTime26.minusSeconds(4499573);
        boolean boolean34 = mutableInterval0.isBefore((org.joda.time.ReadableInstant) dateTime26);
        java.lang.Object obj35 = mutableInterval0.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and instant28", (dateTime26.compareTo(instant28) == 0) == dateTime26.equals(instant28));
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0567");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTime.Property property18 = dateTime1.dayOfYear();
        int int19 = dateTime1.getYear();
        boolean boolean21 = dateTime1.equals((java.lang.Object) "2022-02-22T01:12:48.207+10:22");
        org.joda.time.Instant instant22 = dateTime1.toInstant();
        boolean boolean23 = instant22.isAfterNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        int int29 = mutablePeriod28.getYears();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.yearOfCentury();
        org.joda.time.DurationField durationField42 = chronology38.years();
        long long46 = chronology38.add(1645455034244L, 1645455035827L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField47 = chronology38.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType31.getField(chronology38);
        mutablePeriod28.setPeriod(0L, chronology38);
        org.joda.time.DateTimeField dateTimeField50 = chronology38.dayOfYear();
        org.joda.time.DateTime dateTime51 = instant22.toDateTime(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant22", (dateTime1.compareTo(instant22) == 0) == dateTime1.equals(instant22));
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0568");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = instant22.get(dateTimeFieldType23);
        long long25 = instant22.getMillis();
        org.joda.time.Chronology chronology26 = instant22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0569");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        long long21 = dateTimeZone10.convertUTCToLocal(1645455040347L);
        boolean boolean22 = dateTimeZone10.isFixed();
        java.lang.String str24 = dateTimeZone10.getNameKey(1645455051434L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645455028293L);
        int int31 = dateTimeZone27.getOffset(1645455028293L);
        long long35 = dateTimeZone27.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str37 = dateTimeZone27.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime(chronology43);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTime dateTime47 = dateTime45.withMillisOfDay(1);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant48.toInstant();
        boolean boolean50 = dateTime47.isAfter((org.joda.time.ReadableInstant) instant49);
        org.joda.time.LocalDateTime localDateTime51 = dateTime47.toLocalDateTime();
        boolean boolean52 = dateTimeZone27.isLocalDateTimeGap(localDateTime51);
        boolean boolean53 = dateTimeZone10.isLocalDateTimeGap(localDateTime51);
        java.lang.String str54 = dateTimeZone10.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and instant48", (dateTime39.compareTo(instant48) == 0) == dateTime39.equals(instant48));
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0570");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getShortName(52L);
        boolean boolean5 = dateTimeZone2.isFixed();
        long long7 = dateTimeZone2.convertUTCToLocal(1645455038369L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str20 = dateTimeZone10.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfDay(1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant31.toInstant();
        boolean boolean33 = dateTime30.isAfter((org.joda.time.ReadableInstant) instant32);
        org.joda.time.LocalDateTime localDateTime34 = dateTime30.toLocalDateTime();
        boolean boolean35 = dateTimeZone10.isLocalDateTimeGap(localDateTime34);
        boolean boolean36 = dateTimeZone2.isLocalDateTimeGap(localDateTime34);
        java.lang.String str38 = dateTimeZone2.getNameKey(1645455060000L);
        int int40 = dateTimeZone2.getOffsetFromLocal(1645455108346L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant31", (dateTime22.compareTo(instant31) == 0) == dateTime22.equals(instant31));
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0571");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        boolean boolean22 = instant0.equals((java.lang.Object) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant25 = instant0.withMillis(1645455128531L);
        org.joda.time.Instant instant27 = instant25.minus(1645455287839L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0572");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.Interval interval11 = duration3.toIntervalFrom((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval23 = interval16.toInterval();
        org.joda.time.Interval interval25 = interval23.withEndMillis(2339679030463L);
        org.joda.time.Interval interval27 = interval23.withEndMillis(1645455068553L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.ZERO;
        org.joda.time.Interval interval29 = interval23.withDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime.Property property34 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime35 = property34.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.Instant instant38 = dateTime35.toInstant();
        org.joda.time.DateTime dateTime39 = instant38.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = instant38.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime41 = instant38.toMutableDateTime();
        org.joda.time.Instant instant44 = instant38.withDurationAdded((long) 73, 4493);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period55 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration57 = duration46.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.DateTime dateTime62 = dateTime59.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime(chronology63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = duration57.toPeriodTo((org.joda.time.ReadableInstant) dateTime64, periodType65);
        int int67 = dateTime64.getDayOfMonth();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds(1645455032819L);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.DateTime dateTime75 = dateTime72.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.plusHours(2);
        org.joda.time.DateTime dateTime79 = dateTime75.minusSeconds(37320000);
        org.joda.time.Interval interval80 = duration69.toIntervalTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Interval interval82 = interval80.withChronology(chronology81);
        org.joda.time.Duration duration84 = org.joda.time.Duration.millis(1645455132110L);
        org.joda.time.Interval interval85 = interval80.withDurationAfterStart((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Instant instant86 = instant38.minus((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Duration duration87 = duration28.plus((org.joda.time.ReadableDuration) duration84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant38", (dateTime35.compareTo(instant38) == 0) == dateTime35.equals(instant38));
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0573");
        org.joda.time.Period period1 = new org.joda.time.Period(1645455055762L);
        org.joda.time.Period period3 = period1.withHours(4409200);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime(chronology9);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645455028293L);
        int int18 = dateTimeZone14.getOffset(1645455028293L);
        long long22 = dateTimeZone14.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime23 = dateTime8.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period34 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration36 = duration25.minus(0L);
        org.joda.time.Duration duration38 = duration25.withMillis(1645455034114L);
        java.lang.String str39 = duration25.toString();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.minuteOfDay();
        org.joda.time.DurationField durationField50 = chronology47.halfdays();
        org.joda.time.Period period51 = duration25.toPeriod(periodType40, chronology47);
        org.joda.time.DateTime dateTime52 = dateTime23.withChronology(chronology47);
        org.joda.time.DateTime dateTime54 = dateTime23.plusWeeks(14);
        boolean boolean55 = period3.equals((java.lang.Object) 14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime52", (dateTime23.compareTo(dateTime52) == 0) == dateTime23.equals(dateTime52));
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0574");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime33 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = dateTime14.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime36 = dateTime14.minus(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime34", (dateTime1.compareTo(dateTime34) == 0) == dateTime1.equals(dateTime34));
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0575");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundFloorCopy();
        int int16 = property14.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property14.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime19.minusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property29 = dateTime19.dayOfWeek();
        boolean boolean30 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str35 = dateTimeZone33.getNameKey(1645455028293L);
        int int37 = dateTimeZone33.getOffset(1645455028293L);
        java.lang.String str39 = dateTimeZone33.getShortName(1645455037062L);
        java.lang.String str41 = dateTimeZone33.getName(1645455033926L);
        org.joda.time.DateTime dateTime42 = dateTime17.toDateTime(dateTimeZone33);
        org.joda.time.Period period43 = duration8.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        java.lang.String str44 = duration8.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime42", (dateTime1.compareTo(dateTime42) == 0) == dateTime1.equals(dateTime42));
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0576");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        int int13 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime9);
        int int14 = dateTime4.getMonthOfYear();
        org.joda.time.DateTime dateTime16 = dateTime4.minusMillis(4386659);
        org.joda.time.DateTime dateTime18 = dateTime4.withYearOfCentury(14);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1645455028646L, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.clockhourOfHalfday();
        java.lang.String str32 = chronology28.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.DateTime dateTime37 = dateTime34.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str42 = dateTimeZone40.getNameKey(1645455028293L);
        int int44 = dateTimeZone40.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime37.toMutableDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology46 = chronology28.withZone(dateTimeZone40);
        org.joda.time.DurationField durationField47 = chronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = chronology28.clockhourOfHalfday();
        org.joda.time.DateTime dateTime49 = dateTime20.toDateTime(chronology28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime45", (dateTime4.compareTo(mutableDateTime45) == 0) == dateTime4.equals(mutableDateTime45));
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0577");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        mutableInterval26.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime.Property property56 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime57 = property56.withMinimumValue();
        org.joda.time.DurationField durationField58 = property56.getRangeDurationField();
        org.joda.time.DateTime dateTime59 = property56.withMinimumValue();
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.DateTime dateTime65 = dateTime62.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.toDateTime(chronology66);
        org.joda.time.DateTime dateTime68 = dateTime65.toDateTime();
        org.joda.time.DateTime dateTime70 = dateTime68.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str75 = dateTimeZone73.getNameKey(1645455028293L);
        int int77 = dateTimeZone73.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime78 = dateTime68.toDateTime(dateTimeZone73);
        int int79 = dateTime78.getWeekOfWeekyear();
        boolean boolean80 = dateTime59.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime.Property property81 = dateTime59.dayOfWeek();
        org.joda.time.Interval interval82 = duration28.toIntervalTo((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime78", (dateTime4.compareTo(dateTime78) == 0) == dateTime4.equals(dateTime78));
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0578");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime15 = property14.roundCeilingCopy();
        org.joda.time.DateTime.Property property16 = dateTime15.monthOfYear();
        java.lang.String str17 = property16.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0579");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime4.withWeekOfWeekyear(4);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period15.minusSeconds((int) (short) 1);
        org.joda.time.Period period19 = period15.plusWeeks((int) (short) -1);
        org.joda.time.Period period21 = period15.minusMillis(4);
        org.joda.time.Interval interval22 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone25);
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.Period period31 = period27.plusWeeks((int) (short) -1);
        org.joda.time.Period period33 = period27.minusMillis(4);
        org.joda.time.Interval interval34 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Interval interval35 = interval14.gap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTime dateTime36 = interval14.getEnd();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1L), 1L, periodType42, chronology43);
        java.lang.String str45 = periodType42.toString();
        java.lang.String str46 = periodType42.getName();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1645455029643L, periodType42);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        java.lang.Object obj53 = mutableInterval48.clone();
        org.joda.time.Chronology chronology54 = mutableInterval48.getChronology();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType42, chronology54);
        org.joda.time.Interval interval56 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.DateTime dateTime61 = dateTime58.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime(chronology62);
        org.joda.time.DateTime dateTime64 = dateTime61.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int66 = dateTime61.get(dateTimeFieldType65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.DateTime dateTime71 = dateTime68.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = dateTime71.toString(dateTimeFormatter72);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str78 = dateTimeZone76.getNameKey(1645455028293L);
        int int80 = dateTimeZone76.getOffset(1645455028293L);
        java.lang.String str82 = dateTimeZone76.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime83 = dateTime71.toDateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime84 = dateTime61.toDateTime(dateTimeZone76);
        org.joda.time.DateTime dateTime86 = dateTime84.withSecondOfMinute(52);
        boolean boolean87 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime61 and dateTime83", (dateTime61.compareTo(dateTime83) == 0) == dateTime61.equals(dateTime83));
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0580");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DurationField durationField14 = property12.getRangeDurationField();
        int int15 = property12.getMaximumValue();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = duration25.toPeriod();
        boolean boolean28 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period29 = duration19.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime36 = dateTime34.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime38 = dateTime34.withWeekOfWeekyear(4);
        boolean boolean40 = dateTime38.isAfter(1645455064117L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.toDateTime(chronology46);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int50 = dateTime45.get(dateTimeFieldType49);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType49.getDurationType();
        int int52 = dateTime38.get(dateTimeFieldType49);
        org.joda.time.Interval interval53 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean54 = property12.equals((java.lang.Object) interval53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0581");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str14 = dateTimeZone12.getShortName(52L);
        boolean boolean15 = dateTimeZone12.isFixed();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getName(1645455042879L, locale17);
        org.joda.time.DateTime dateTime19 = dateTime9.withZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        int int26 = dateTime22.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime28.toDateTimeISO();
        int int36 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime22.minusMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTimeISO();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight46 = dateTime44.toDateMidnight();
        org.joda.time.DateTime dateTime48 = dateTime44.plus(1645455035670L);
        int int49 = dateTime48.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str54 = dateTimeZone52.getShortName(52L);
        boolean boolean55 = dateTimeZone52.isFixed();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str60 = dateTimeZone58.getNameKey(1645455028293L);
        long long62 = dateTimeZone58.convertUTCToLocal(1645455035225L);
        long long64 = dateTimeZone52.getMillisKeepLocal(dateTimeZone58, 1645455037008L);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((java.lang.Object) dateTime48, dateTimeZone58);
        org.joda.time.DateTime dateTime67 = dateTime48.minusDays(53440972);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        long long69 = mutableInterval68.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        boolean boolean72 = mutableInterval68.overlaps((org.joda.time.ReadableInterval) mutableInterval70);
        java.lang.Object obj73 = mutableInterval68.clone();
        org.joda.time.Chronology chronology74 = mutableInterval68.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.yearOfEra();
        boolean boolean77 = dateTimeField75.isLeap(1645455027824L);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = dateTimeField75.getType();
        boolean boolean79 = dateTime48.isSupported(dateTimeFieldType78);
        int int80 = dateTime20.get(dateTimeFieldType78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and dateTime65", (dateTime48.compareTo(dateTime65) == 0) == dateTime48.equals(dateTime65));
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0582");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone5);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.Period period11 = period7.plusWeeks((int) (short) -1);
        org.joda.time.Period period13 = period7.minusMillis(4);
        org.joda.time.Interval interval14 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        mutablePeriod0.setPeriod(1645455033926L, 1645455028941L, chronology15);
        org.joda.time.DurationField durationField17 = chronology15.eras();
        org.joda.time.DurationField durationField18 = chronology15.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField18, and durationField17", !(durationField17.compareTo(durationField18) == 0) || (Math.signum(durationField17.compareTo(durationField17)) == Math.signum(durationField18.compareTo(durationField17))));
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0583");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(1645455046184L, 3);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(32);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long41 = dateTimeZone28.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType43 = periodType42.withMinutesRemoved();
        boolean boolean44 = dateTimeZone28.equals((java.lang.Object) periodType42);
        org.joda.time.DateTime dateTime45 = dateTime17.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime48 = dateTime17.withField(dateTimeFieldType46, 53);
        int int49 = dateTime10.get(dateTimeFieldType46);
        org.joda.time.DateTime.Property property50 = dateTime10.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property50.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime45", (dateTime17.compareTo(dateTime45) == 0) == dateTime17.equals(dateTime45));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0584");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1L), 1L, periodType31, chronology32);
        java.lang.String str34 = periodType31.toString();
        java.lang.String str35 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1645455029643L, periodType31);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType31, chronology43);
        org.joda.time.Interval interval45 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTime dateTime50 = dateTime47.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime(chronology51);
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int55 = dateTime50.get(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = dateTime60.toString(dateTimeFormatter61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str67 = dateTimeZone65.getNameKey(1645455028293L);
        int int69 = dateTimeZone65.getOffset(1645455028293L);
        java.lang.String str71 = dateTimeZone65.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime72 = dateTime60.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime73 = dateTime50.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime75 = dateTime73.withSecondOfMinute(52);
        boolean boolean76 = interval3.isAfter((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime.Property property77 = dateTime75.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime50 and dateTime72", (dateTime50.compareTo(dateTime72) == 0) == dateTime50.equals(dateTime72));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0585");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfMonth();
        java.lang.String str16 = property15.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0586");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period13 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Seconds seconds14 = period13.toStandardSeconds();
        int int15 = period13.getMillis();
        org.joda.time.DurationFieldType durationFieldType17 = period13.getFieldType(0);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType21 = periodType20.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.Period period31 = new org.joda.time.Period(1645455029672L, (long) 3, periodType21, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfMonth();
        boolean boolean33 = durationFieldType17.isSupported(chronology29);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (short) 100, 1645455046455L, chronology29);
        org.joda.time.DateTimeField dateTimeField35 = chronology29.monthOfYear();
        org.joda.time.Period period36 = new org.joda.time.Period(1645455080732L, chronology29);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str44 = dateTimeZone42.getNameKey(1645455028293L);
        int int46 = dateTimeZone42.getOffset(1645455028293L);
        java.lang.String str48 = dateTimeZone42.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone42);
        long long51 = dateTimeZone39.getMillisKeepLocal(dateTimeZone42, 1645455029375L);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        long long54 = dateTimeZone42.getMillisKeepLocal(dateTimeZone52, 1645455043186L);
        java.lang.String str56 = dateTimeZone42.getName(1645455049364L);
        org.joda.time.Chronology chronology57 = chronology29.withZone(dateTimeZone42);
        java.lang.String str58 = chronology57.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime49", (dateTime6.compareTo(dateTime49) == 0) == dateTime6.equals(dateTime49));
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0587");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime17.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField20 = yearMonthDay18.getField(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str32 = dateTimeZone30.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime33 = dateTime25.withZone(dateTimeZone30);
        org.joda.time.YearMonthDay yearMonthDay34 = dateTime33.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField36 = yearMonthDay34.getField(0);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay18, (org.joda.time.ReadablePartial) yearMonthDay34);
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) yearMonthDay34, 53494734, locale39);
        int int42 = dateTimeField11.get(1651503365870L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime33", (dateTime16.compareTo(dateTime33) == 0) == dateTime16.equals(dateTime33));
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0588");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        int int8 = property3.getMinimumValueOverall();
        org.joda.time.DateTime dateTime10 = property3.addToCopy(4581563);
        boolean boolean11 = dateTime10.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone14);
        int int19 = dateTimeZone14.getOffsetFromLocal(1645455058549L);
        long long23 = dateTimeZone14.convertLocalToUTC((long) 2023, false, (-37320000L));
        java.util.TimeZone timeZone24 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime25 = dateTime10.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillis(1645455369491L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime17", (dateTime1.compareTo(dateTime17) == 0) == dateTime1.equals(dateTime17));
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0589");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(4365808);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone14);
        long long18 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime8.withLaterOffsetAtOverlap();
        boolean boolean20 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime22 = dateTime8.plusMinutes(53722152);
        org.joda.time.DateTime dateTime24 = dateTime8.withYearOfEra(4674505);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime17", (dateTime1.compareTo(dateTime17) == 0) == dateTime1.equals(dateTime17));
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0590");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        int int4 = dateTime1.getYearOfCentury();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        int int17 = dateTimeZone14.getOffsetFromLocal(1645455050010L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long39 = dateTimeZone14.getMillisKeepLocal(dateTimeZone28, 1687730611190400000L);
        org.joda.time.DateTime dateTime40 = dateTime1.withZone(dateTimeZone28);
        org.joda.time.Chronology chronology41 = dateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime43.yearOfEra();
        org.joda.time.DateTime dateTime46 = property45.withMinimumValue();
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(4499190);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime71 = dateTime62.minus((org.joda.time.ReadablePeriod) period69);
        int int72 = dateTime62.getWeekOfWeekyear();
        boolean boolean73 = mutableInterval49.contains((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime76 = dateTime62.withDurationAdded(1645455079413L, 4386659);
        org.joda.time.DateTime.Property property77 = dateTime62.era();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone78);
        long long80 = dateTime79.getMillis();
        org.joda.time.DateTime dateTime82 = dateTime79.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime83 = dateTime82.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay84 = dateTime83.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField86 = yearMonthDay84.getField(0);
        org.joda.time.DateTime dateTime87 = dateTime62.withFields((org.joda.time.ReadablePartial) yearMonthDay84);
        org.joda.time.DateTime dateTime88 = dateTime48.withFields((org.joda.time.ReadablePartial) yearMonthDay84);
        org.joda.time.DateTime dateTime89 = dateTime1.withFields((org.joda.time.ReadablePartial) yearMonthDay84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime40", (dateTime19.compareTo(dateTime40) == 0) == dateTime19.equals(dateTime40));
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0591");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int5 = dateTime1.get(dateTimeFieldType4);
        org.joda.time.DateTime.Property property6 = dateTime1.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfSecond();
        boolean boolean17 = dateTimeFieldType7.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.clockhourOfHalfday();
        org.joda.time.DateTime dateTime20 = dateTime1.withChronology(chronology14);
        org.joda.time.Duration duration23 = new org.joda.time.Duration(1645455092819L, 1645455102215L);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(65453583064881L);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.Period period30 = period26.plusMinutes((int) (byte) 10);
        org.joda.time.Period period32 = period30.withHours((-1));
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime37.plusMillis(100);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str54 = dateTimeZone52.getNameKey(1645455028293L);
        int int56 = dateTimeZone52.getOffset(1645455028293L);
        long long60 = dateTimeZone52.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime61 = dateTime46.withZoneRetainFields(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime40.toMutableDateTime(dateTimeZone52);
        org.joda.time.Duration duration63 = period30.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.Instant instant65 = instant25.withDurationAdded((org.joda.time.ReadableDuration) duration63, 929);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration63, readableInstant66);
        boolean boolean68 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and mutableDateTime62", (dateTime40.compareTo(mutableDateTime62) == 0) == dateTime40.equals(mutableDateTime62));
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0592");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        int int13 = dateTimeZone9.getOffset(1645455028293L);
        java.lang.String str15 = dateTimeZone9.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean19 = dateTimeZone9.equals((java.lang.Object) 1645455087658L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime17", (dateTime1.compareTo(dateTime17) == 0) == dateTime1.equals(dateTime17));
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0593");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        boolean boolean32 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property33 = dateTime18.year();
        org.joda.time.DateTime dateTime35 = dateTime18.withMinuteOfHour(22);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime35, periodType36);
        org.joda.time.DateTime dateTime39 = dateTime35.minusWeeks(73);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Instant instant41 = dateTime39.toInstant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime43.yearOfEra();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Interval interval52 = interval46.withDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Interval interval53 = interval46.toInterval();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        mutableInterval54.setInterval((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.Interval interval67 = interval53.gap((org.joda.time.ReadableInterval) mutableInterval54);
        boolean boolean69 = interval53.equals((java.lang.Object) 1645455027824L);
        org.joda.time.DateTime dateTime70 = interval53.getEnd();
        org.joda.time.DateTime dateTime72 = dateTime70.plus(1645455071909L);
        boolean boolean73 = instant41.isBefore((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0594");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = duration11.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withZoneRetainFields(dateTimeZone25);
        boolean boolean27 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str40 = dateTimeZone38.getNameKey(1645455028293L);
        int int42 = dateTimeZone38.getOffset(1645455028293L);
        long long46 = dateTimeZone38.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime47 = dateTime32.withZoneRetainFields(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime6.toMutableDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) 1645455063488L, dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime.Property property53 = dateTime51.yearOfEra();
        org.joda.time.DateTime dateTime55 = dateTime51.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property59.roundFloorCopy();
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period61.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean65 = period63.equals((java.lang.Object) dateTimeFieldType64);
        int int66 = dateTime60.get(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType64.getDurationType();
        org.joda.time.DateTime dateTime69 = dateTime51.withField(dateTimeFieldType64, 1);
        org.joda.time.DateTime dateTime71 = dateTime51.minusMonths(4501667);
        int int72 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime48", (dateTime5.compareTo(mutableDateTime48) == 0) == dateTime5.equals(mutableDateTime48));
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0595");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(1645455046184L, 3);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(32);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long41 = dateTimeZone28.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType43 = periodType42.withMinutesRemoved();
        boolean boolean44 = dateTimeZone28.equals((java.lang.Object) periodType42);
        org.joda.time.DateTime dateTime45 = dateTime17.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime48 = dateTime17.withField(dateTimeFieldType46, 53);
        int int49 = dateTime10.get(dateTimeFieldType46);
        org.joda.time.DateTime dateTime51 = dateTime10.minusMonths(2022);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime45", (dateTime17.compareTo(dateTime45) == 0) == dateTime17.equals(dateTime45));
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0596");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime6 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(4381721);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str18 = dateTimeZone16.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime19 = dateTime10.toDateTime(dateTimeZone16);
        long long20 = dateTime10.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int22 = dateTime10.get(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        boolean boolean29 = dateTime27.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        boolean boolean48 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean51 = mutableInterval49.contains(1L);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        mutableInterval49.setChronology(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType21.getField(chronology58);
        org.joda.time.DateTime.Property property63 = dateTime6.property(dateTimeFieldType21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0597");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getShortName(52L);
        org.joda.time.DateTime dateTime12 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime4.plusSeconds(2022);
        org.joda.time.DateTime dateTime16 = dateTime4.plusWeeks(22);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        java.lang.String str18 = property17.getAsShortText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0598");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        java.util.GregorianCalendar gregorianCalendar28 = dateTime20.toGregorianCalendar();
        org.joda.time.Interval interval29 = duration4.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        boolean boolean37 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime(chronology43);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str50 = dateTimeZone48.getNameKey(1645455028293L);
        int int52 = dateTimeZone48.getOffset(1645455028293L);
        long long56 = dateTimeZone48.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime57 = dateTime42.withZoneRetainFields(dateTimeZone48);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology65);
        org.joda.time.DateTime dateTime67 = dateTime61.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Period period68 = duration59.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration70 = duration59.minus(0L);
        org.joda.time.Duration duration72 = duration59.withMillis(1645455034114L);
        java.lang.String str73 = duration59.toString();
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        long long76 = mutableInterval75.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        boolean boolean79 = mutableInterval75.overlaps((org.joda.time.ReadableInterval) mutableInterval77);
        java.lang.Object obj80 = mutableInterval75.clone();
        org.joda.time.Chronology chronology81 = mutableInterval75.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.yearOfEra();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.minuteOfDay();
        org.joda.time.DurationField durationField84 = chronology81.halfdays();
        org.joda.time.Period period85 = duration59.toPeriod(periodType74, chronology81);
        org.joda.time.DateTime dateTime86 = dateTime57.withChronology(chronology81);
        org.joda.time.DateTime dateTime87 = dateTime86.withEarlierOffsetAtOverlap();
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime57 and dateTime86", (dateTime57.compareTo(dateTime86) == 0) == dateTime57.equals(dateTime86));
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0599");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = duration11.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withZoneRetainFields(dateTimeZone25);
        boolean boolean27 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str40 = dateTimeZone38.getNameKey(1645455028293L);
        int int42 = dateTimeZone38.getOffset(1645455028293L);
        long long46 = dateTimeZone38.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime47 = dateTime32.withZoneRetainFields(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime6.toMutableDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) 1645455063488L, dateTimeZone38);
        long long51 = dateTimeZone38.previousTransition(1645455084482L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime48", (dateTime5.compareTo(mutableDateTime48) == 0) == dateTime5.equals(mutableDateTime48));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0600");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str5 = dateTimeZone3.getShortName(52L);
        boolean boolean6 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        long long13 = dateTimeZone9.convertUTCToLocal(1645455035225L);
        long long15 = dateTimeZone3.getMillisKeepLocal(dateTimeZone9, 1645455037008L);
        int int17 = dateTimeZone9.getStandardOffset(1645455055418L);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(1645455119806L, dateTimeZone9);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime30 = dateTime21.toDateTime(dateTimeZone27);
        long long31 = dateTime21.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int33 = dateTime21.get(dateTimeFieldType32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withMillisOfSecond((int) (short) 10);
        boolean boolean40 = dateTime38.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.toDateTime(chronology46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime dateTime56 = dateTime49.toDateTimeISO();
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes(0);
        boolean boolean59 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean62 = mutableInterval60.contains(1L);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        boolean boolean67 = mutableInterval63.overlaps((org.joda.time.ReadableInterval) mutableInterval65);
        java.lang.Object obj68 = mutableInterval63.clone();
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        mutableInterval60.setChronology(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType32.getField(chronology69);
        org.joda.time.DateTime.Property property74 = dateTime18.property(dateTimeFieldType32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and dateTime30", (dateTime21.compareTo(dateTime30) == 0) == dateTime21.equals(dateTime30));
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0601");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T01:12:48.406+10:22");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T01:12:48.406+10:22");
        org.joda.time.DateTimeZone dateTimeZone3 = dateTime2.getZone();
        long long7 = dateTimeZone3.convertLocalToUTC(1645455350223L, false, 1645455045950L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime2", (dateTime1.compareTo(dateTime2) == 0) == dateTime1.equals(dateTime2));
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0602");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 1, 40, 4);
        mutablePeriod4.addMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1645455046184L, 3);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod4, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isBefore(1645455122692L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.DateTime dateTime26 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime27 = property24.roundCeilingCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear(4381721);
        org.joda.time.DateTime.Property property30 = dateTime27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime.Property property34 = dateTime32.yearOfEra();
        org.joda.time.DateTime dateTime35 = property34.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType36.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone41);
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period43.minusSeconds((int) (short) 1);
        org.joda.time.Period period47 = period43.plusWeeks((int) (short) -1);
        org.joda.time.Period period49 = period43.minusMillis(4);
        org.joda.time.Interval interval50 = interval42.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.halfdays();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.era();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType36.getField(chronology51);
        boolean boolean55 = dateTime27.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime.Property property56 = dateTime27.minuteOfDay();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1645455028646L, chronology64);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str72 = dateTimeZone70.getShortName(52L);
        boolean boolean73 = dateTimeZone70.isFixed();
        java.util.TimeZone timeZone74 = dateTimeZone70.toTimeZone();
        org.joda.time.Chronology chronology75 = chronology64.withZone(dateTimeZone70);
        org.joda.time.DateTime dateTime76 = dateTime27.withChronology(chronology75);
        boolean boolean77 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration78 = interval18.toDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime76", (dateTime27.compareTo(dateTime76) == 0) == dateTime27.equals(dateTime76));
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0603");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusSeconds((int) (byte) 10);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime37);
        long long41 = duration40.getMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = duration45.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withZoneRetainFields(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTime dateTime65 = dateTime62.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime66 = dateTime65.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay67 = dateTime66.toYearMonthDay();
        int int68 = yearMonthDay67.size();
        org.joda.time.DateTime dateTime69 = dateTime57.withFields((org.joda.time.ReadablePartial) yearMonthDay67);
        org.joda.time.DateTime dateTime71 = dateTime57.withMonthOfYear((int) (byte) 1);
        org.joda.time.Period period72 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period73 = period72.toPeriod();
        org.joda.time.Period period75 = period72.multipliedBy(4493595);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0604");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        java.lang.String str17 = property16.getName();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillis((long) 36000000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant10", (dateTime1.compareTo(instant10) == 0) == dateTime1.equals(instant10));
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0605");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology11.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField16, and durationField14", !(durationField14.compareTo(durationField16) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField16.compareTo(durationField14))));
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0606");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = instant22.get(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0607");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        int int30 = yearMonthDay29.size();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.DurationField durationField39 = dateTimeField38.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        int int47 = yearMonthDay46.size();
        int[] intArray52 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int53 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay46, intArray52);
        int int54 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay29, intArray52);
        int int55 = dateTimeField7.getMinimumValue();
        java.lang.String str57 = dateTimeField7.getAsShortText(1645455050897L);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str62 = dateTimeZone60.getNameKey(1645455028293L);
        int int64 = dateTimeZone60.getOffset(1645455028293L);
        long long68 = dateTimeZone60.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str70 = dateTimeZone60.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.DateTime dateTime75 = dateTime72.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = dateTime75.toDateTime(chronology76);
        org.joda.time.DateTime dateTime78 = dateTime75.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime78.withMillisOfDay(1);
        org.joda.time.Instant instant81 = new org.joda.time.Instant();
        org.joda.time.Instant instant82 = instant81.toInstant();
        boolean boolean83 = dateTime80.isAfter((org.joda.time.ReadableInstant) instant82);
        org.joda.time.LocalDateTime localDateTime84 = dateTime80.toLocalDateTime();
        boolean boolean85 = dateTimeZone60.isLocalDateTimeGap(localDateTime84);
        org.joda.time.Chronology chronology86 = localDateTime84.getChronology();
        int[] intArray87 = null;
        int int88 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime84, intArray87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant81", (dateTime10.compareTo(instant81) == 0) == dateTime10.equals(instant81));
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0608");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime9 = property8.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        java.lang.String str12 = dateTimeFieldType10.getName();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 8, periodType19, chronology26);
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration17, chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.minuteOfHour();
        boolean boolean31 = dateTimeFieldType10.isSupported(chronology26);
        org.joda.time.Period period32 = new org.joda.time.Period((long) 31, (long) 3, periodType4, chronology26);
        org.joda.time.PeriodType periodType33 = periodType4.withMonthsRemoved();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration46 = duration35.minus(0L);
        org.joda.time.Duration duration48 = duration35.withMillis(1645455034114L);
        java.lang.String str49 = duration35.toString();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.DurationField durationField60 = chronology57.halfdays();
        org.joda.time.Period period61 = duration35.toPeriod(periodType50, chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.monthOfYear();
        org.joda.time.DurationField durationField63 = chronology57.centuries();
        org.joda.time.DateTimeField dateTimeField64 = chronology57.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1645455065056L, 1645455090430L, periodType4, chronology57);
        org.joda.time.DurationField durationField66 = chronology57.weeks();
        org.joda.time.DurationField durationField67 = chronology57.weekyears();
        org.joda.time.DurationField durationField68 = chronology57.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField68, durationField60, and durationField63", !(durationField68.compareTo(durationField60) == 0) || (Math.signum(durationField68.compareTo(durationField63)) == Math.signum(durationField60.compareTo(durationField63))));
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0609");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType13 = periodType12.withYearsRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Period period23 = new org.joda.time.Period(1645455029672L, (long) 3, periodType13, chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTime dateTime25 = dateTime3.toDateTime(chronology21);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval(1645455038843L, 1645455042554L, chronology21);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((-1L), 1L, periodType29, chronology30);
        long long34 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod31, 1645455045823L, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField35 = chronology21.year();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.Chronology chronology44 = chronology42.withUTC();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology44.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        int int48 = dateTimeZone45.getOffset((long) 7);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration52.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateTime dateTime64 = dateTime57.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = dateTime64.withZoneRetainFields(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = dateTime67.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime.Property property72 = dateTime70.yearOfEra();
        org.joda.time.DateTime dateTime73 = property72.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean75 = dateTime73.isSupported(dateTimeFieldType74);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((-1L), 1L, periodType79, chronology80);
        java.lang.String str82 = periodType79.toString();
        java.lang.String str83 = periodType79.getName();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(1645455029643L, periodType79);
        org.joda.time.PeriodType periodType85 = periodType79.withWeeksRemoved();
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime73, periodType79);
        org.joda.time.DateTime dateTime88 = dateTime68.minusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime89 = dateTime88.toLocalDateTime();
        boolean boolean90 = dateTimeZone45.isLocalDateTimeGap(localDateTime89);
        boolean boolean92 = localDateTime89.equals((java.lang.Object) "2022-02-21T14:53:24.520Z");
        int[] intArray94 = chronology21.get((org.joda.time.ReadablePartial) localDateTime89, 1645455178260L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime57", (dateTime3.compareTo(dateTime57) == 0) == dateTime3.equals(dateTime57));
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0610");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.DateTime dateTime13 = dateTime8.withYearOfEra(9);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str18 = dateTimeZone16.getNameKey(1645455028293L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getShortName(52L);
        boolean boolean24 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645455028293L);
        long long31 = dateTimeZone27.convertUTCToLocal(1645455035225L);
        long long33 = dateTimeZone21.getMillisKeepLocal(dateTimeZone27, 1645455037008L);
        long long35 = dateTimeZone16.getMillisKeepLocal(dateTimeZone27, 1645455044510L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        int int41 = dateTime37.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        int int51 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime8.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime55 = dateTime53.plusWeeks(99);
        org.joda.time.DateTime.Property property56 = dateTime53.dayOfMonth();
        java.lang.String str57 = property56.toString();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property56.getAsText(locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime53", (dateTime1.compareTo(dateTime53) == 0) == dateTime1.equals(dateTime53));
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0611");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        int int9 = dateTime1.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration33 = duration22.minus(0L);
        org.joda.time.DateTime dateTime35 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        boolean boolean49 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration37);
        long long50 = duration37.getStandardMinutes();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration54.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTime dateTime66 = dateTime59.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime66.withZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTime dateTime74 = dateTime71.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime75 = dateTime74.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay76 = dateTime75.toYearMonthDay();
        int int77 = yearMonthDay76.size();
        org.joda.time.DateTime dateTime78 = dateTime66.withFields((org.joda.time.ReadablePartial) yearMonthDay76);
        org.joda.time.Chronology chronology79 = yearMonthDay76.getChronology();
        org.joda.time.Period period80 = new org.joda.time.Period((java.lang.Object) duration37, chronology79);
        org.joda.time.DurationField durationField81 = chronology79.years();
        org.joda.time.DateTime dateTime82 = dateTime1.withChronology(chronology79);
        org.joda.time.DateTimeField dateTimeField83 = chronology79.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime82", (dateTime1.compareTo(dateTime82) == 0) == dateTime1.equals(dateTime82));
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0612");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        int int4 = dateTime1.getYearOfCentury();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        int int17 = dateTimeZone14.getOffsetFromLocal(1645455050010L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long39 = dateTimeZone14.getMillisKeepLocal(dateTimeZone28, 1687730611190400000L);
        org.joda.time.DateTime dateTime40 = dateTime1.withZone(dateTimeZone28);
        int int42 = dateTimeZone28.getOffsetFromLocal(1645455224589L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0613");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1645455263805L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone4);
        long long6 = interval5.getEndMillis();
        org.joda.time.Duration duration7 = interval5.toDuration();
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime21 = dateTime13.withZone(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.DateTime.Property property23 = dateTime21.weekyear();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period34 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusSeconds((int) (byte) 10);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period48 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = duration7.equals((java.lang.Object) dateTime21);
        boolean boolean51 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0614");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645455028646L, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime25 = dateTime13.withChronology(chronology21);
        org.joda.time.DurationField durationField26 = chronology21.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0615");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property23.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean26 = dateTime24.isSupported(dateTimeFieldType25);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1L), 1L, periodType30, chronology31);
        java.lang.String str33 = periodType30.toString();
        java.lang.String str34 = periodType30.getName();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645455029643L, periodType30);
        org.joda.time.PeriodType periodType36 = periodType30.withWeeksRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime24, periodType30);
        org.joda.time.DateTime dateTime39 = dateTime19.minusHours((int) '4');
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration43.plus((long) 8);
        org.joda.time.Seconds seconds47 = duration43.toStandardSeconds();
        org.joda.time.Duration duration48 = duration43.toDuration();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.parse("2022-02-22T01:12:48.406+10:22");
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T01:12:48.406+10:22");
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime65 = dateTime56.minusSeconds((int) ' ');
        org.joda.time.DateTime dateTime66 = dateTime65.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology68 = null;
        boolean boolean69 = dateTimeFieldType67.isSupported(chronology68);
        org.joda.time.DateTime.Property property70 = dateTime65.property(dateTimeFieldType67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime72.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str82 = dateTimeZone80.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime83 = dateTime75.withZone(dateTimeZone80);
        int int84 = dateTime65.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean86 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime51 and dateTime52", (dateTime51.compareTo(dateTime52) == 0) == dateTime51.equals(dateTime52));
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        boolean boolean24 = dateTime1.equals((java.lang.Object) '4');
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime34 = dateTime29.withFieldAdded(durationFieldType32, (int) (short) 0);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.millis();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645455078372L, 31556952000L, chronology46);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1645455071421L, 1645455037008L, periodType37, chronology46);
        boolean boolean50 = durationFieldType32.isSupported(chronology46);
        org.joda.time.DateTime dateTime52 = dateTime1.withFieldAdded(durationFieldType32, 0);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths(4639709);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime52 and dateTime10", (dateTime52.compareTo(dateTime10) == 0) == dateTime52.equals(dateTime10));
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0617");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        int int5 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone20);
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period22.minusSeconds((int) (short) 1);
        org.joda.time.Period period26 = period22.plusWeeks((int) (short) -1);
        org.joda.time.Period period28 = period22.minusMillis(4);
        org.joda.time.Interval interval29 = interval21.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Interval interval30 = interval9.gap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTime dateTime31 = interval9.getEnd();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str36 = dateTimeZone34.getShortName(52L);
        boolean boolean37 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime38 = dateTime31.withZone(dateTimeZone34);
        boolean boolean39 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str44 = dateTimeZone42.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone42);
        int int47 = dateTimeZone42.getOffsetFromLocal(1645455058549L);
        long long51 = dateTimeZone42.convertLocalToUTC((long) 2023, false, (-37320000L));
        java.util.TimeZone timeZone52 = dateTimeZone42.toTimeZone();
        long long54 = dateTimeZone42.previousTransition(4459951164L);
        org.joda.time.DateTime dateTime55 = dateTime4.toDateTime(dateTimeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime45", (dateTime1.compareTo(dateTime45) == 0) == dateTime1.equals(dateTime45));
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0618");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology6.years();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime21 = dateTime16.withFieldAdded(durationFieldType19, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getShortName(52L);
        boolean boolean27 = dateTimeZone24.isFixed();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone24.getName(1645455042879L, locale29);
        org.joda.time.DateTime dateTime31 = dateTime21.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = dateTime11.toDateTime(dateTimeZone24);
        java.lang.String str33 = dateTime11.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime32", (dateTime13.compareTo(dateTime32) == 0) == dateTime13.equals(dateTime32));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0619");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(1);
        org.joda.time.Period period3 = period1.withDays((int) (byte) 10);
        org.joda.time.Period period5 = period3.withHours(72);
        org.joda.time.MutablePeriod mutablePeriod6 = period3.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfEra();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval18 = interval11.toInterval();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Interval interval32 = interval18.gap((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        boolean boolean34 = mutableInterval33.containsNow();
        boolean boolean35 = interval18.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean37 = mutableInterval33.contains(1645455037444L);
        org.joda.time.Duration duration38 = mutableInterval33.toDuration();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.minus(readableDuration39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.toDateTime(chronology46);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime48.withMillisOfDay(1);
        java.lang.String str51 = dateTime48.toString();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime57.toYearMonthDay();
        org.joda.time.DateTime dateTime59 = dateTime48.withFields((org.joda.time.ReadablePartial) yearMonthDay58);
        org.joda.time.DateTime.Property property60 = dateTime48.yearOfCentury();
        org.joda.time.DateTime.Property property61 = dateTime48.dayOfMonth();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType63 = periodType62.withHoursRemoved();
        org.joda.time.Period period64 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime48, periodType63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime dateTime69 = dateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime71 = dateTime69.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str76 = dateTimeZone74.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime77 = dateTime69.withZone(dateTimeZone74);
        org.joda.time.DateTime dateTime79 = dateTime77.withYearOfEra(32);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime77);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval80);
        mutablePeriod6.addDays(4486176);
        mutablePeriod6.setPeriod(898010L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime56 and dateTime77", (dateTime56.compareTo(dateTime77) == 0) == dateTime56.equals(dateTime77));
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0620");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime4.yearOfCentury();
        java.util.Date date14 = dateTime4.toDate();
        org.joda.time.LocalDate localDate15 = dateTime4.toLocalDate();
        org.joda.time.DateTime.Property property16 = dateTime4.hourOfDay();
        java.lang.String str17 = property16.toString();
        org.joda.time.DateTime dateTime18 = property16.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0621");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getDays();
        int int18 = mutablePeriod16.size();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str28 = dateTimeZone26.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime29 = dateTime20.toDateTime(dateTimeZone26);
        int int30 = dateTime29.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property31 = dateTime29.millisOfSecond();
        org.joda.time.DateTime dateTime32 = property31.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str37 = dateTimeZone35.getNameKey(1645455028293L);
        long long39 = dateTimeZone35.convertUTCToLocal(1645455035225L);
        org.joda.time.DateTime dateTime40 = dateTime32.toDateTime(dateTimeZone35);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod16, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.DateTime dateTime67 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) (byte) 0);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology75);
        org.joda.time.DateTime dateTime77 = dateTime71.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period78 = duration69.toPeriodFrom((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration80 = duration69.minus(0L);
        boolean boolean81 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Interval interval82 = interval41.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime29", (dateTime8.compareTo(dateTime29) == 0) == dateTime8.equals(dateTime29));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0622");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis(100);
        long long8 = dateTime7.getMillis();
        int int9 = dateTime7.getDayOfMonth();
        org.joda.time.DateTime.Property property10 = dateTime7.monthOfYear();
        int int11 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean18 = dateTime16.isSupported(dateTimeFieldType17);
        java.lang.String str19 = dateTimeFieldType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 8, periodType26, chronology33);
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration24, chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.minuteOfHour();
        boolean boolean38 = dateTimeFieldType17.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.monthOfYear();
        org.joda.time.DateTime dateTime40 = dateTime7.withChronology(chronology33);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime45.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str52 = dateTimeZone50.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime53 = dateTime45.withZone(dateTimeZone50);
        org.joda.time.YearMonthDay yearMonthDay54 = dateTime53.toYearMonthDay();
        long long56 = chronology33.set((org.joda.time.ReadablePartial) yearMonthDay54, 1645455125606L);
        org.joda.time.DurationField durationField57 = chronology33.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime53", (dateTime4.compareTo(dateTime53) == 0) == dateTime4.equals(dateTime53));
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0623");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        long long23 = dateTimeZone15.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) periodType29);
        org.joda.time.DateTime dateTime32 = dateTime4.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime35 = dateTime4.withField(dateTimeFieldType33, 53);
        org.joda.time.DateTime dateTime36 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime38 = dateTime4.minusHours(958);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime4", (dateTime32.compareTo(dateTime4) == 0) == dateTime32.equals(dateTime4));
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0624");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Interval interval4 = interval3.toInterval();
        boolean boolean5 = interval4.containsNow();
        org.joda.time.Interval interval7 = interval4.withEndMillis(1645455269342L);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration14 = duration11.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime23);
        mutablePeriod24.addMillis((int) '4');
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.seconds();
        int int31 = period29.get(durationFieldType30);
        java.lang.String str32 = durationFieldType30.getName();
        mutablePeriod24.set(durationFieldType30, 26);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.DateTime dateTime39 = dateTime36.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTime(chronology40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        boolean boolean53 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property54 = dateTime39.year();
        org.joda.time.DateTime dateTime56 = dateTime39.minus(1645455041013L);
        org.joda.time.Instant instant57 = dateTime39.toInstant();
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.DurationField durationField59 = durationFieldType30.getField(chronology58);
        org.joda.time.Interval interval60 = interval7.withChronology(chronology58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and instant57", (dateTime39.compareTo(instant57) == 0) == dateTime39.equals(instant57));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0625");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.hourOfDay();
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTimeISO();
        long long21 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant23 = instant19.plus(1645455190844L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and mutableDateTime20", (instant19.compareTo(mutableDateTime20) == 0) == instant19.equals(mutableDateTime20));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0626");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Period period3 = org.joda.time.Period.years((int) (byte) 0);
        int int4 = period3.getWeeks();
        org.joda.time.Duration duration5 = period3.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration5);
        int int7 = mutablePeriod6.getMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0627");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str8 = dateTimeZone6.getNameKey(1645455028293L);
        int int10 = dateTimeZone6.getOffset(1645455028293L);
        long long14 = dateTimeZone6.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str16 = dateTimeZone6.getShortName(1645455052649L);
        long long19 = dateTimeZone6.adjustOffset(1645455035866L, false);
        java.util.TimeZone timeZone20 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTime dateTime23 = dateTime3.toDateTime(dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0628");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        boolean boolean22 = instant0.equals((java.lang.Object) dateTime21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        mutableInterval24.setInterval(100000L, 1645455028646L);
        long long32 = mutableInterval24.getStartMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        mutableInterval24.setDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes(1645455037008L);
        boolean boolean41 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        boolean boolean46 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        boolean boolean52 = mutableInterval42.contains((org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime51.getMillisOfDay();
        org.joda.time.DateTime dateTime55 = dateTime51.plusYears(3);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration57 = duration36.toDuration();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType59 = periodType58.withMinutesRemoved();
        org.joda.time.Period period60 = new org.joda.time.Period(readableInstant23, (org.joda.time.ReadableDuration) duration57, periodType58);
        org.joda.time.Instant instant61 = instant0.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period62 = duration57.toPeriod();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0629");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645455084725L);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0630");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) '4', 30, 4409715, (int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.setPeriod(readableDuration5);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.PeriodType periodType13 = periodType11.withMillisRemoved();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((-1L), 1L, periodType19, chronology20);
        java.lang.String str22 = periodType19.toString();
        java.lang.String str23 = periodType19.getName();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1645455029643L, periodType19);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType19, chronology31);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645455029375L, periodType11, chronology31);
        mutablePeriod4.setPeriod(1645455092881L, 1645455048164L, chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone38);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.minusSeconds((int) (short) 1);
        org.joda.time.Period period44 = period40.plusWeeks((int) (short) -1);
        org.joda.time.Period period46 = period40.minusMillis(4);
        org.joda.time.Interval interval47 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str55 = dateTimeZone53.getNameKey(1645455028293L);
        int int57 = dateTimeZone53.getOffset(1645455028293L);
        long long61 = dateTimeZone53.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str63 = dateTimeZone53.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime(chronology69);
        org.joda.time.DateTime dateTime71 = dateTime68.toDateTime();
        org.joda.time.DateTime dateTime73 = dateTime71.withMillisOfDay(1);
        org.joda.time.Instant instant74 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant74.toInstant();
        boolean boolean76 = dateTime73.isAfter((org.joda.time.ReadableInstant) instant75);
        org.joda.time.LocalDateTime localDateTime77 = dateTime73.toLocalDateTime();
        boolean boolean78 = dateTimeZone53.isLocalDateTimeGap(localDateTime77);
        int int79 = dateTimeField50.getMinimumValue((org.joda.time.ReadablePartial) localDateTime77);
        int int80 = dateTimeField35.getMinimumValue((org.joda.time.ReadablePartial) localDateTime77);
        long long82 = dateTimeField35.roundHalfEven(457069L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime65 and instant74", (dateTime65.compareTo(instant74) == 0) == dateTime65.equals(instant74));
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0631");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime(chronology9);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime8.withMillis((long) 2);
        boolean boolean14 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime8);
        int int15 = dateTime1.getCenturyOfEra();
        org.joda.time.DateTime.Property property16 = dateTime1.yearOfCentury();
        org.joda.time.Instant instant17 = dateTime1.toInstant();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = interval22.withDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime33.withMillis((long) 2);
        org.joda.time.Interval interval39 = duration26.toIntervalTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Instant instant40 = instant17.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType42 = periodType41.withMinutesRemoved();
        org.joda.time.PeriodType periodType43 = periodType41.withDaysRemoved();
        org.joda.time.Period period44 = duration26.toPeriod(periodType43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant17", (dateTime1.compareTo(instant17) == 0) == dateTime1.equals(instant17));
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0632");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        mutableInterval26.setInterval(100000L, 1645455028646L);
        org.joda.time.Interval interval34 = interval25.gap((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long39 = dateTimeZone37.convertUTCToLocal(1645455035827L);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.Period period42 = new org.joda.time.Period(1645455051139L);
        boolean boolean43 = dateTimeZone37.equals((java.lang.Object) period42);
        org.joda.time.PeriodType periodType44 = period42.getPeriodType();
        java.lang.Object obj45 = null;
        boolean boolean46 = periodType44.equals(obj45);
        org.joda.time.Period period47 = new org.joda.time.Period(0L, periodType44);
        mutableInterval26.setPeriodAfterStart((org.joda.time.ReadablePeriod) period47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime40", (dateTime1.compareTo(dateTime40) == 0) == dateTime1.equals(dateTime40));
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0633");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        int int6 = dateTimeZone2.getOffset(1645455028293L);
        java.lang.String str8 = dateTimeZone2.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfSecond();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.Period period26 = new org.joda.time.Period(1645455029672L, (long) 3, periodType16, chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfMonth();
        org.joda.time.DurationField durationField28 = chronology24.days();
        org.joda.time.Period period29 = new org.joda.time.Period(1645455034855L, 1645455043876L, chronology24);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology24.getZone();
        java.lang.String str32 = dateTimeZone30.getName(0L);
        org.joda.time.DateTime dateTime33 = dateTime9.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 1);
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime(dateTimeZone36);
        java.util.TimeZone timeZone38 = dateTimeZone36.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime37", (dateTime33.compareTo(dateTime37) == 0) == dateTime33.equals(dateTime37));
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0634");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 22, 1645455035827L);
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.setDays(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        boolean boolean14 = dateTime12.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        boolean boolean33 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean36 = mutableInterval34.contains(1L);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        mutableInterval34.setChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.clockhourOfDay();
        mutablePeriod3.add(0L, chronology43);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645455028293L, chronology43);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.toDateTime(chronology54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime58 = dateTime53.withFieldAdded(durationFieldType56, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str63 = dateTimeZone61.getShortName(52L);
        boolean boolean64 = dateTimeZone61.isFixed();
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeZone61.getName(1645455042879L, locale66);
        org.joda.time.DateTime dateTime68 = dateTime58.withZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        org.joda.time.Chronology chronology70 = chronology43.withZone(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime72.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone78);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.plus(readableDuration80);
        boolean boolean82 = dateTime75.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone83);
        long long85 = dateTime84.getMillis();
        org.joda.time.DateTime dateTime87 = dateTime84.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime89 = dateTime87.plusHours(4365808);
        org.joda.time.DateTime dateTime91 = dateTime87.plusMillis(2023);
        boolean boolean92 = dateTime75.isEqual((org.joda.time.ReadableInstant) dateTime91);
        int int93 = dateTimeZone61.getOffset((org.joda.time.ReadableInstant) dateTime91);
        java.lang.String str94 = dateTimeZone61.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime72", (dateTime9.compareTo(dateTime72) == 0) == dateTime9.equals(dateTime72));
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0635");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        int int28 = yearMonthDay27.size();
        org.joda.time.DateTime dateTime29 = dateTime17.withFields((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.Chronology chronology30 = yearMonthDay27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.months();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((long) 60814, 1645455228948L, chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime32", (dateTime10.compareTo(dateTime32) == 0) == dateTime10.equals(dateTime32));
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0636");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.DateTime dateTime51 = instant6.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        mutablePeriod52.addWeeks((int) (byte) -1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration67 = duration56.minus(0L);
        org.joda.time.Chronology chronology68 = null;
        mutablePeriod52.setPeriod((org.joda.time.ReadableDuration) duration56, chronology68);
        long long70 = duration56.getStandardHours();
        org.joda.time.Instant instant72 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration56, 2023);
        org.joda.time.Instant instant75 = instant72.withDurationAdded(0L, (int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime76 = instant75.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0637");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        long long21 = dateTimeZone10.convertUTCToLocal(1645455040347L);
        boolean boolean22 = dateTimeZone10.isFixed();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.Chronology chronology31 = chronology29.withUTC();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone32.getShortName(1645455068377L, locale34);
        long long38 = dateTimeZone32.convertLocalToUTC(1645455037307L, false);
        long long40 = dateTimeZone10.getMillisKeepLocal(dateTimeZone32, 10001L);
        int int42 = dateTimeZone32.getOffsetFromLocal(1645455112343L);
        java.lang.String str44 = dateTimeZone32.getNameKey(1645455150802L);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType48 = periodType47.withYearsRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        boolean boolean54 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        java.lang.Object obj55 = mutableInterval50.clone();
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfEra();
        org.joda.time.Period period58 = new org.joda.time.Period(1645455029672L, (long) 3, periodType48, chronology56);
        org.joda.time.DurationField durationField59 = chronology56.eras();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.year();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str65 = dateTimeZone63.getNameKey(1645455028293L);
        int int67 = dateTimeZone63.getOffset(1645455028293L);
        long long71 = dateTimeZone63.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str73 = dateTimeZone63.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        java.lang.String str76 = dateTime75.toString();
        org.joda.time.DateTime dateTime78 = dateTime75.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = dateTime78.toDateTime(chronology79);
        org.joda.time.DateTime dateTime81 = dateTime78.toDateTime();
        org.joda.time.DateTime dateTime83 = dateTime81.withMillisOfDay(1);
        org.joda.time.Instant instant84 = new org.joda.time.Instant();
        org.joda.time.Instant instant85 = instant84.toInstant();
        boolean boolean86 = dateTime83.isAfter((org.joda.time.ReadableInstant) instant85);
        org.joda.time.LocalDateTime localDateTime87 = dateTime83.toLocalDateTime();
        boolean boolean88 = dateTimeZone63.isLocalDateTimeGap(localDateTime87);
        org.joda.time.Chronology chronology89 = localDateTime87.getChronology();
        java.util.Locale locale91 = null;
        java.lang.String str92 = dateTimeField60.getAsShortText((org.joda.time.ReadablePartial) localDateTime87, 0, locale91);
        boolean boolean93 = dateTimeZone32.isLocalDateTimeGap(localDateTime87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant84", (dateTime1.compareTo(instant84) == 0) == dateTime1.equals(instant84));
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0638");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime35 = dateTime30.withFieldAdded(durationFieldType33, (int) (short) 0);
        int int36 = dateTime30.getDayOfWeek();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours(2);
        int int45 = dateTime44.getDayOfWeek();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime44);
        long long47 = duration46.getMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime49.yearOfEra();
        org.joda.time.Interval interval52 = property51.toInterval();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval53.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Interval interval58 = interval52.withDurationAfterStart((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Interval interval59 = interval52.toInterval();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        boolean boolean71 = mutableInterval67.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        mutableInterval60.setInterval((org.joda.time.ReadableInterval) mutableInterval67);
        org.joda.time.Interval interval73 = interval59.gap((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        boolean boolean75 = mutableInterval74.containsNow();
        boolean boolean76 = interval59.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        boolean boolean78 = mutableInterval74.contains(1645455037444L);
        boolean boolean80 = mutableInterval74.isAfter((long) (byte) 0);
        org.joda.time.Instant instant81 = new org.joda.time.Instant();
        org.joda.time.Instant instant82 = instant81.toInstant();
        org.joda.time.DateTime dateTime83 = instant81.toDateTimeISO();
        boolean boolean84 = mutableInterval74.isAfter((org.joda.time.ReadableInstant) instant81);
        org.joda.time.Interval interval85 = duration46.toIntervalTo((org.joda.time.ReadableInstant) instant81);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone86);
        long long88 = dateTime87.getMillis();
        org.joda.time.DateTime.Property property89 = dateTime87.yearOfEra();
        org.joda.time.DateTime dateTime90 = property89.withMinimumValue();
        org.joda.time.DurationField durationField91 = property89.getRangeDurationField();
        org.joda.time.DateTime dateTime92 = property89.withMinimumValue();
        org.joda.time.DateTime.Property property93 = dateTime92.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime94 = dateTime92.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime96 = dateTime92.withYear(37320000);
        org.joda.time.LocalDate localDate97 = dateTime92.toLocalDate();
        org.joda.time.PeriodType periodType98 = null;
        org.joda.time.MutablePeriod mutablePeriod99 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime92, periodType98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant81", (dateTime1.compareTo(instant81) == 0) == dateTime1.equals(instant81));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0639");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0640");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = instant7.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime11 = instant7.toMutableDateTimeISO();
        int int12 = mutableDateTime11.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0641");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.yearOfCentury();
        int int17 = dateTime6.get(dateTimeField16);
        long long18 = dateTime6.getMillis();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(4476);
        org.joda.time.DateTime dateTime21 = dateTime6.toDateTime(dateTimeZone20);
        int int22 = dateTime6.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime21", (dateTime6.compareTo(dateTime21) == 0) == dateTime6.equals(dateTime21));
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0642");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) mutableInterval44);
        mutableInterval44.setDurationAfterStart(1645455033234L);
        boolean boolean52 = mutableInterval26.isBefore((org.joda.time.ReadableInterval) mutableInterval44);
        java.lang.String str53 = mutableInterval26.toString();
        org.joda.time.Duration duration54 = mutableInterval26.toDuration();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardMinutes(1645455151631L);
        org.joda.time.Instant instant58 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.Instant instant60 = instant58.plus(1645488000000L);
        long long61 = instant60.getMillis();
        org.joda.time.Instant instant63 = instant60.minus(1645455028417L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology71);
        org.joda.time.DateTime dateTime73 = dateTime67.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Period period74 = duration65.toPeriodFrom((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration76 = duration65.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(dateTimeZone77);
        java.lang.String str79 = dateTime78.toString();
        org.joda.time.DateTime dateTime81 = dateTime78.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = dateTime81.toDateTime(chronology82);
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.Period period85 = duration76.toPeriodTo((org.joda.time.ReadableInstant) dateTime83, periodType84);
        org.joda.time.Period period87 = period85.withSeconds((int) (short) 100);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant60, (org.joda.time.ReadablePeriod) period87);
        org.joda.time.MutableDateTime mutableDateTime89 = instant60.toMutableDateTimeISO();
        org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) mutableDateTime89);
        boolean boolean91 = duration54.isLongerThan((org.joda.time.ReadableDuration) duration56);
        boolean boolean93 = duration56.equals((java.lang.Object) 1645455398406L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant60 and mutableDateTime89", (instant60.compareTo(mutableDateTime89) == 0) == instant60.equals(mutableDateTime89));
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0643");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        mutablePeriod4.setPeriod((long) 9, 100000L, chronology9);
        mutablePeriod4.add(1645455046500L);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod4.copy();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTimeISO();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration28 = duration17.minus(0L);
        org.joda.time.Duration duration30 = duration17.withMillis(1645455034114L);
        org.joda.time.Instant instant31 = instant14.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime32 = instant14.toDateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod4, (org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone36);
        org.joda.time.Period period38 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period38.minusSeconds((int) (short) 1);
        org.joda.time.Period period42 = period38.plusWeeks((int) (short) -1);
        org.joda.time.Period period44 = period38.minusMillis(4);
        org.joda.time.Interval interval45 = interval37.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period47 = period38.withHours((int) 'a');
        org.joda.time.Minutes minutes48 = period38.toStandardMinutes();
        org.joda.time.Period period50 = period38.minusMillis(53429880);
        boolean boolean52 = period38.equals((java.lang.Object) "2022-02-21T14:50:54.899Z");
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) period38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime15", (instant14.compareTo(mutableDateTime15) == 0) == instant14.equals(mutableDateTime15));
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0644");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfCentury();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        boolean boolean28 = dateTime25.isAfter((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Instant instant30 = instant27.minus(1645455086172L);
        org.joda.time.Instant instant32 = instant27.plus(1645455106596L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period43 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration45 = duration34.minus(0L);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration52 = duration49.plus((long) 8);
        org.joda.time.Duration duration54 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) '4');
        org.joda.time.Duration duration57 = duration52.withDurationAdded(1645455064141L, 4);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableDuration) duration52);
        boolean boolean59 = dateTime15.isAfter((org.joda.time.ReadableInstant) instant32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0645");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        int int22 = dateTime19.getDayOfMonth();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(1645455032819L);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime41 = dateTime34.toDateTimeISO();
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes(0);
        boolean boolean44 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property45 = dateTime30.year();
        org.joda.time.DateTime dateTime47 = dateTime30.minus(1645455041013L);
        org.joda.time.Instant instant48 = dateTime30.toInstant();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType50 = periodType49.withYearsRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withSecondsRemoved();
        org.joda.time.PeriodType periodType52 = periodType50.withMillisRemoved();
        org.joda.time.Period period53 = duration24.toPeriodTo((org.joda.time.ReadableInstant) dateTime30, periodType50);
        org.joda.time.Duration duration54 = duration24.toDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant48", (dateTime17.compareTo(instant48) == 0) == dateTime17.equals(instant48));
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0646");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(7, 0, 72, 30);
        mutablePeriod4.add(53530848, 969, 53504366, 2, 53526253, (int) (byte) -1, 53535215, 4396707);
        int int14 = mutablePeriod4.getMillis();
        java.lang.Object obj15 = mutablePeriod4.clone();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime.Property property19 = dateTime17.yearOfEra();
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean22 = dateTime20.isSupported(dateTimeFieldType21);
        org.joda.time.Instant instant23 = dateTime20.toInstant();
        org.joda.time.DateTime dateTime24 = instant23.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = instant23.toDateTime();
        org.joda.time.DateTime dateTime26 = instant23.toDateTime();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(1645455043186L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(1645455032819L);
        boolean boolean31 = duration28.isEqual((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = duration28.withMillis(1645455060010L);
        org.joda.time.Period period35 = org.joda.time.Period.seconds(1);
        org.joda.time.Period period37 = period35.withDays((int) (byte) 10);
        org.joda.time.Period period39 = period37.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime dateTime49 = dateTime47.withMillisOfDay(1);
        org.joda.time.Duration duration50 = period37.toDurationTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Duration duration51 = duration50.toDuration();
        org.joda.time.Duration duration52 = duration28.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Instant instant53 = instant23.plus((org.joda.time.ReadableDuration) duration52);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant23", (dateTime20.compareTo(instant23) == 0) == dateTime20.equals(instant23));
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0647");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1645455029820L, chronology17);
        boolean boolean22 = dateTimeFieldType9.isSupported(chronology17);
        org.joda.time.DurationField durationField23 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType5.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField25 = chronology17.secondOfMinute();
        org.joda.time.DurationField durationField26 = chronology17.millis();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.Chronology chronology30 = chronology17.withZone(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime29", (dateTime1.compareTo(dateTime29) == 0) == dateTime1.equals(dateTime29));
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0648");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(1645455046184L, 3);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(1645455032819L);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration14);
        int int16 = dateTime10.getMillisOfDay();
        org.joda.time.DateTime dateTime18 = dateTime10.withYearOfEra(892);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(53792486);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant12", (dateTime10.compareTo(instant12) == 0) == dateTime10.equals(instant12));
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0649");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        org.joda.time.Interval interval13 = property3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval24 = interval18.withDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.Interval interval26 = interval24.gap(readableInterval25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType32 = periodType31.withYearsRemoved();
        org.joda.time.PeriodType periodType33 = periodType32.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.Period period42 = new org.joda.time.Period(1645455029672L, (long) 3, periodType32, chronology40);
        mutablePeriod27.add(1645455030370L, chronology40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime.Property property63 = dateTime48.year();
        org.joda.time.Duration duration64 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean65 = interval24.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone68);
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.Duration duration71 = interval69.toDuration();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        boolean boolean77 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj78 = mutableInterval73.clone();
        org.joda.time.Chronology chronology79 = mutableInterval73.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfEra();
        org.joda.time.Chronology chronology81 = chronology79.withUTC();
        org.joda.time.DateTimeZone dateTimeZone82 = chronology81.getZone();
        java.util.Locale locale84 = null;
        java.lang.String str85 = dateTimeZone82.getShortName(1645455068377L, locale84);
        java.util.Locale locale87 = null;
        java.lang.String str88 = dateTimeZone82.getShortName(0L, locale87);
        org.joda.time.DateTime dateTime89 = dateTime48.withZone(dateTimeZone82);
        org.joda.time.DateTime dateTime91 = dateTime48.minus(1645455119785L);
        int int92 = property3.getDifference((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime48 and dateTime89", (dateTime48.compareTo(dateTime89) == 0) == dateTime48.equals(dateTime89));
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0650");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = instant22.get(dateTimeFieldType23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology39 = chronology31.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType23.getField(chronology39);
        int int44 = dateTimeField41.getDifference(1645455298572L, 1645455171743L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0651");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        java.lang.String str17 = property16.getName();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        java.lang.String str19 = property16.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant10", (dateTime1.compareTo(instant10) == 0) == dateTime1.equals(instant10));
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0652");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod16.addMillis((int) '4');
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        int int23 = period21.get(durationFieldType22);
        java.lang.String str24 = durationFieldType22.getName();
        mutablePeriod16.set(durationFieldType22, 26);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime42 = dateTime35.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes(0);
        boolean boolean45 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property46 = dateTime31.year();
        org.joda.time.DateTime dateTime48 = dateTime31.minus(1645455041013L);
        org.joda.time.Instant instant49 = dateTime31.toInstant();
        org.joda.time.Chronology chronology50 = instant49.getChronology();
        org.joda.time.DurationField durationField51 = durationFieldType22.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant49", (dateTime31.compareTo(instant49) == 0) == dateTime31.equals(instant49));
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0653");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Interval interval12 = interval10.gap(readableInterval11);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Period period28 = new org.joda.time.Period(1645455029672L, (long) 3, periodType18, chronology26);
        mutablePeriod13.add(1645455030370L, chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        boolean boolean48 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property49 = dateTime34.year();
        org.joda.time.Duration duration50 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean51 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration57 = interval55.toDuration();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.Chronology chronology67 = chronology65.withUTC();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology67.getZone();
        java.util.Locale locale70 = null;
        java.lang.String str71 = dateTimeZone68.getShortName(1645455068377L, locale70);
        java.util.Locale locale73 = null;
        java.lang.String str74 = dateTimeZone68.getShortName(0L, locale73);
        org.joda.time.DateTime dateTime75 = dateTime34.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime77 = dateTime34.minus(1645455119785L);
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime77.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime75", (dateTime34.compareTo(dateTime75) == 0) == dateTime34.equals(dateTime75));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0654");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.Instant instant52 = instant50.plus(1645455160151L);
        org.joda.time.Instant instant53 = instant52.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0655");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = dateTime6.toCalendar(locale8);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.Period period26 = new org.joda.time.Period(1645455029672L, (long) 3, periodType16, chronology24);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645455028417L, periodType12, chronology24);
        org.joda.time.PeriodType periodType28 = periodType12.withMinutesRemoved();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.DurationField durationField37 = chronology35.centuries();
        org.joda.time.Period period38 = new org.joda.time.Period((java.lang.Object) locale8, periodType12, chronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0656");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1L), 1L, periodType25, chronology26);
        mutablePeriod27.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.DateTime dateTime55 = dateTime38.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 0);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration68 = duration57.minus(0L);
        boolean boolean69 = duration53.isShorterThan((org.joda.time.ReadableDuration) duration57);
        mutablePeriod27.setPeriod((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        boolean boolean75 = mutableInterval71.overlaps((org.joda.time.ReadableInterval) mutableInterval73);
        java.lang.Object obj76 = mutableInterval71.clone();
        org.joda.time.Chronology chronology77 = mutableInterval71.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.yearOfEra();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.yearOfCentury();
        org.joda.time.DurationField durationField81 = chronology77.years();
        org.joda.time.Period period82 = duration53.toPeriod(chronology77);
        org.joda.time.Instant instant84 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration53, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int86 = instant84.get(dateTimeFieldType85);
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant84, readableInstant87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0657");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (byte) 10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfCentury();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        int int15 = dateTime14.getYearOfEra();
        long long16 = dateTime14.getMillis();
        long long17 = dateTime14.getMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str32 = dateTimeZone30.getNameKey(1645455028293L);
        int int34 = dateTimeZone30.getOffset(1645455028293L);
        long long38 = dateTimeZone30.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str40 = dateTimeZone30.getShortName(1645455052649L);
        long long43 = dateTimeZone30.adjustOffset(1645455035866L, false);
        java.util.TimeZone timeZone44 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone45);
        java.lang.String str47 = dateTimeZone45.toString();
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeZone45.getName(1099699200000L, locale49);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime26.toMutableDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime52 = dateTime14.toDateTime(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime46", (dateTime6.compareTo(dateTime46) == 0) == dateTime6.equals(dateTime46));
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0658");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.DateTime.Property property12 = dateTime8.year();
        org.joda.time.DateTime.Property property13 = dateTime8.year();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getNameKey(1645455028293L);
        int int28 = dateTimeZone24.getOffset(1645455028293L);
        long long32 = dateTimeZone24.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime33 = dateTime18.withZoneRetainFields(dateTimeZone24);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration46 = duration35.minus(0L);
        org.joda.time.Duration duration48 = duration35.withMillis(1645455034114L);
        java.lang.String str49 = duration35.toString();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.DurationField durationField60 = chronology57.halfdays();
        org.joda.time.Period period61 = duration35.toPeriod(periodType50, chronology57);
        org.joda.time.DateTime dateTime62 = dateTime33.withChronology(chronology57);
        int int63 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = dateTime62.plusDays(0);
        org.joda.time.DateTime.Property property66 = dateTime65.weekOfWeekyear();
        org.joda.time.DateTime.Property property67 = dateTime65.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime65", (dateTime33.compareTo(dateTime65) == 0) == dateTime33.equals(dateTime65));
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0659");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.Interval interval24 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime26 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration16, 4397211);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime39 = dateTime31.withZone(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        org.joda.time.DateTime.Property property41 = dateTime39.weekyear();
        org.joda.time.DateTime dateTime42 = property41.roundCeilingCopy();
        java.util.Date date43 = dateTime42.toDate();
        org.joda.time.Interval interval44 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime42.minusSeconds(4569178);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime39", (dateTime22.compareTo(dateTime39) == 0) == dateTime22.equals(dateTime39));
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0660");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths(4457725);
        mutablePeriod0.add(52991506, 0, 53526253, 53600851, 39091384, 0, 4496768, (int) ' ');
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        int int17 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime19.toDateTimeISO();
        int int27 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime13.minusMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight dateMidnight37 = dateTime35.toDateMidnight();
        org.joda.time.DateTime dateTime39 = dateTime35.plus(1645455035670L);
        int int40 = dateTime39.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str45 = dateTimeZone43.getShortName(52L);
        boolean boolean46 = dateTimeZone43.isFixed();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str51 = dateTimeZone49.getNameKey(1645455028293L);
        long long53 = dateTimeZone49.convertUTCToLocal(1645455035225L);
        long long55 = dateTimeZone43.getMillisKeepLocal(dateTimeZone49, 1645455037008L);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) dateTime39, dateTimeZone49);
        org.joda.time.DateTime dateTime58 = dateTime39.minusDays(53440972);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        boolean boolean68 = dateTimeField66.isLeap(1645455027824L);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField66.getType();
        boolean boolean70 = dateTime39.isSupported(dateTimeFieldType69);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType69.getDurationType();
        mutablePeriod0.set(durationFieldType71, 4652004);
        java.lang.String str74 = mutablePeriod0.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime39 and dateTime56", (dateTime39.compareTo(dateTime56) == 0) == dateTime39.equals(dateTime56));
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0661");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMillis(100);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        long long30 = dateTimeZone22.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime31 = dateTime16.withZoneRetainFields(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime10.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str44 = dateTimeZone42.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime45 = dateTime37.withZone(dateTimeZone42);
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime(chronology52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.DateTime dateTime62 = dateTime55.toDateTimeISO();
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes(0);
        boolean boolean65 = dateTime51.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime.Property property66 = dateTime51.year();
        org.joda.time.DateTime dateTime68 = dateTime51.withMinuteOfHour(22);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.time();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime68, periodType69);
        org.joda.time.Period period71 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime32, periodType69);
        org.joda.time.PeriodType periodType72 = periodType69.withSecondsRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime32", (dateTime10.compareTo(mutableDateTime32) == 0) == dateTime10.equals(mutableDateTime32));
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0662");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(65453583064881L);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period2.minusSeconds((int) (short) 1);
        org.joda.time.Period period6 = period2.plusMinutes((int) (byte) 10);
        org.joda.time.Period period8 = period6.withHours((-1));
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis(100);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime16.toMutableDateTime(dateTimeZone28);
        org.joda.time.Duration duration39 = period6.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Instant instant41 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration39, 929);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(1645455110782L);
        org.joda.time.Instant instant44 = instant1.minus((org.joda.time.ReadableDuration) duration43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime38", (dateTime16.compareTo(mutableDateTime38) == 0) == dateTime16.equals(mutableDateTime38));
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0663");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval23 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Interval interval25 = interval23.gap(readableInterval24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType31 = periodType30.withYearsRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        java.lang.Object obj38 = mutableInterval33.clone();
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfEra();
        org.joda.time.Period period41 = new org.joda.time.Period(1645455029672L, (long) 3, periodType31, chronology39);
        mutablePeriod26.add(1645455030370L, chronology39);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology55);
        org.joda.time.DateTime dateTime57 = dateTime51.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.DateTime dateTime58 = dateTime51.toDateTimeISO();
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes(0);
        boolean boolean61 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property62 = dateTime47.year();
        org.joda.time.Duration duration63 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean64 = interval23.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone67);
        org.joda.time.Interval interval69 = interval68.toInterval();
        org.joda.time.Duration duration70 = interval68.toDuration();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration70);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property73 = dateTime47.era();
        org.joda.time.DateTime.Property property74 = dateTime47.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0664");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getShortName(52L);
        boolean boolean31 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime32 = dateTime25.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime25.getZone();
        long long36 = dateTimeZone33.adjustOffset(1645455268554L, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime32", (dateTime25.compareTo(dateTime32) == 0) == dateTime25.equals(dateTime32));
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0665");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(4365808);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime17 = dateTime8.toDateTime(dateTimeZone14);
        long long18 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime8.withLaterOffsetAtOverlap();
        boolean boolean20 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone23);
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period25.minusSeconds((int) (short) 1);
        org.joda.time.Period period29 = period25.plusWeeks((int) (short) -1);
        org.joda.time.Period period31 = period25.minusMillis(4);
        org.joda.time.Interval interval32 = interval24.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period34 = period25.withHours((int) 'a');
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period35.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean39 = period37.equals((java.lang.Object) dateTimeFieldType38);
        org.joda.time.Period period41 = period37.minusYears(26);
        org.joda.time.Period period42 = period25.withFields((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period45 = period42.withFieldAdded(durationFieldType43, 40);
        org.joda.time.Period period47 = period45.withHours(2022);
        org.joda.time.Period period48 = period45.toPeriod();
        org.joda.time.DateTime dateTime49 = dateTime6.minus((org.joda.time.ReadablePeriod) period45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime17", (dateTime1.compareTo(dateTime17) == 0) == dateTime1.equals(dateTime17));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0666");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField15 = yearMonthDay13.getField(0);
        long long18 = dateTimeField15.set((long) (-209), 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0667");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime.Property property30 = dateTime9.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0668");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str15 = dateTimeZone13.getNameKey(1645455028293L);
        int int17 = dateTimeZone13.getOffset(1645455028293L);
        java.lang.String str19 = dateTimeZone13.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime22 = dateTime20.withMillis((long) ' ');
        org.joda.time.Interval interval23 = interval10.withEnd((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.plusHours(4527697);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property35 = dateTime27.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay(1);
        java.lang.String str46 = dateTime43.toString();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.DateTime dateTime54 = dateTime43.withFields((org.joda.time.ReadablePartial) yearMonthDay53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        java.lang.Object obj62 = mutableInterval57.clone();
        org.joda.time.Chronology chronology63 = mutableInterval57.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfEra();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(1645455029820L, chronology63);
        boolean boolean68 = dateTimeFieldType55.isSupported(chronology63);
        int int69 = dateTime43.get(dateTimeFieldType55);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType55.getDurationType();
        int int71 = dateTime27.get(dateTimeFieldType55);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime27);
        java.util.GregorianCalendar gregorianCalendar73 = dateTime27.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime20", (dateTime1.compareTo(dateTime20) == 0) == dateTime1.equals(dateTime20));
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0669");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str14 = dateTimeZone12.getShortName(52L);
        boolean boolean15 = dateTimeZone12.isFixed();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getName(1645455042879L, locale17);
        org.joda.time.DateTime dateTime19 = dateTime9.withZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone12);
        boolean boolean22 = dateTimeZone12.equals((java.lang.Object) 1645455096377L);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime20", (dateTime1.compareTo(dateTime20) == 0) == dateTime1.equals(dateTime20));
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0670");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        boolean boolean22 = dateTimeField20.isLeap(1645455027824L);
        int int23 = dateTime4.get(dateTimeField20);
        int int25 = dateTimeField20.getMinimumValue(1645455079096L);
        long long27 = dateTimeField20.remainder((long) 4461);
        long long30 = dateTimeField20.add(1645455300110L, 1320831L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0671");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime17.plusMillis(100);
        long long21 = dateTime20.getMillis();
        int int22 = dateTime20.getDayOfMonth();
        boolean boolean23 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property24 = dateTime4.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight25 = dateTime4.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime17", (dateTime12.compareTo(dateTime17) == 0) == dateTime12.equals(dateTime17));
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0672");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime9.getMillisOfDay();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = dateTime43.minus((org.joda.time.ReadablePeriod) period50);
        int int53 = dateTime43.getWeekOfWeekyear();
        boolean boolean54 = mutableInterval30.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime57 = dateTime43.withDurationAdded(1645455063488L, 4383442);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(4394936);
        org.joda.time.DateTime dateTime61 = dateTime57.withMillisOfSecond(6);
        int int62 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = dateTime9.toString(dateTimeFormatter63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0673");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int9 = dateTime4.get(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime14.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        int int23 = dateTimeZone19.getOffset(1645455028293L);
        java.lang.String str25 = dateTimeZone19.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = dateTime4.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime29 = dateTime27.withSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField38 = yearMonthDay36.getField(0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime44.toYearMonthDay();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay36, (org.joda.time.ReadablePartial) yearMonthDay45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        java.lang.Object obj53 = mutableInterval48.clone();
        org.joda.time.Chronology chronology54 = mutableInterval48.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfEra();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType47.getField(chronology54);
        boolean boolean59 = yearMonthDay36.isSupported(dateTimeFieldType47);
        int int60 = dateTime29.get(dateTimeFieldType47);
        org.joda.time.DateTime.Property property61 = dateTime29.dayOfYear();
        boolean boolean63 = property61.equals((java.lang.Object) 1645455203038L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime26", (dateTime4.compareTo(dateTime26) == 0) == dateTime4.equals(dateTime26));
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0674");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(2);
        int int7 = dateTime6.getDayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime6.minusWeeks(0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        int int24 = period22.getMillis();
        org.joda.time.DurationFieldType durationFieldType26 = period22.getFieldType(0);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType30 = periodType29.withYearsRemoved();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.Period period40 = new org.joda.time.Period(1645455029672L, (long) 3, periodType30, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        boolean boolean42 = durationFieldType26.isSupported(chronology38);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1645455032491L, 1645455038369L, chronology38);
        org.joda.time.DateTime dateTime44 = dateTime6.minus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str51 = dateTimeZone49.getShortName(52L);
        org.joda.time.DateTime dateTime52 = dateTime46.withZone(dateTimeZone49);
        int int53 = dateTime46.getWeekOfWeekyear();
        org.joda.time.ReadableInstant readableInstant54 = null;
        mutablePeriod43.setPeriod((org.joda.time.ReadableInstant) dateTime46, readableInstant54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property59.withMinimumValue();
        org.joda.time.DurationField durationField61 = property59.getRangeDurationField();
        org.joda.time.Interval interval62 = property59.toInterval();
        mutablePeriod43.setPeriod((org.joda.time.ReadableInterval) interval62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime52", (dateTime1.compareTo(dateTime52) == 0) == dateTime1.equals(dateTime52));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0675");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getShortName(52L);
        org.joda.time.DateTime dateTime12 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfDay(2);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis(51);
        boolean boolean17 = dateTime16.isAfterNow();
        org.joda.time.DateTime dateTime19 = dateTime16.minusMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime21 = dateTime16.plusMonths(53454);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0676");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        boolean boolean19 = dateTime16.isAfterNow();
        org.joda.time.DateTime dateTime21 = dateTime16.withYearOfEra(9);
        org.joda.time.DateTime dateTime23 = dateTime16.plus(1645455067662L);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType25 = periodType24.withDaysRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime23, periodType24);
        java.lang.String str27 = periodType24.getName();
        org.joda.time.PeriodType periodType28 = periodType24.withHoursRemoved();
        java.lang.String str29 = periodType28.getName();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfEra();
        org.joda.time.Chronology chronology38 = chronology36.withUTC();
        org.joda.time.DurationField durationField39 = chronology36.years();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        org.joda.time.Period period53 = new org.joda.time.Period(1645455029672L, (long) 3, periodType43, chronology51);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType55 = periodType54.withYearsRemoved();
        org.joda.time.PeriodType periodType56 = periodType55.withSecondsRemoved();
        org.joda.time.PeriodType periodType57 = periodType55.withMillisRemoved();
        org.joda.time.Period period58 = period53.withPeriodType(periodType55);
        long long61 = chronology36.add((org.joda.time.ReadablePeriod) period58, 1645455077125L, 10);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 707, 1645455211739L, periodType28, chronology36);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        java.lang.Object obj75 = mutableInterval70.clone();
        org.joda.time.Chronology chronology76 = mutableInterval70.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 8, periodType69, chronology76);
        mutablePeriod65.setPeriod((org.joda.time.ReadableDuration) duration67, chronology76);
        org.joda.time.DurationField durationField80 = chronology76.weekyears();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(1645455107150L, periodType28, chronology76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField39 and durationField80", (durationField39.compareTo(durationField80) == 0) == durationField39.equals(durationField80));
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0677");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 1, 40, 4);
        mutablePeriod4.addMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1645455046184L, 3);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod4, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.withWeekyear(53498199);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime25.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTime.Property property34 = dateTime25.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean36 = dateTime25.isSupported(dateTimeFieldType35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int38 = dateTime25.get(dateTimeFieldType37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-1L), 1L, periodType41, chronology42);
        mutablePeriod43.setSeconds((int) (short) 0);
        org.joda.time.Chronology chronology48 = null;
        mutablePeriod43.setPeriod((long) 9, 100000L, chronology48);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType54 = periodType53.withYearsRemoved();
        org.joda.time.PeriodType periodType55 = periodType54.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfEra();
        org.joda.time.Period period64 = new org.joda.time.Period(1645455029672L, (long) 3, periodType54, chronology62);
        org.joda.time.DateTimeField dateTimeField65 = chronology62.dayOfMonth();
        org.joda.time.DurationField durationField66 = chronology62.days();
        mutablePeriod43.add(1645455035891L, chronology62);
        org.joda.time.DateTime dateTime68 = dateTime25.withChronology(chronology62);
        org.joda.time.DateTimeField dateTimeField69 = chronology62.yearOfCentury();
        org.joda.time.DateTime dateTime70 = dateTime17.toDateTime(chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and mutableDateTime33", (dateTime25.compareTo(mutableDateTime33) == 0) == dateTime25.equals(mutableDateTime33));
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0678");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period30 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration32 = duration21.minus(0L);
        org.joda.time.Duration duration34 = duration21.withMillis(1645455034114L);
        java.lang.String str35 = duration21.toString();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.DurationField durationField46 = chronology43.halfdays();
        org.joda.time.Period period47 = duration21.toPeriod(periodType36, chronology43);
        org.joda.time.DateTime dateTime48 = dateTime19.withChronology(chronology43);
        org.joda.time.Chronology chronology49 = chronology43.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime48", (dateTime19.compareTo(dateTime48) == 0) == dateTime19.equals(dateTime48));
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0679");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        boolean boolean24 = dateTime1.equals((java.lang.Object) '4');
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime34 = dateTime29.withFieldAdded(durationFieldType32, (int) (short) 0);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.minutes();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.millis();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645455078372L, 31556952000L, chronology46);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1645455071421L, 1645455037008L, periodType37, chronology46);
        boolean boolean50 = durationFieldType32.isSupported(chronology46);
        org.joda.time.DateTime dateTime52 = dateTime1.withFieldAdded(durationFieldType32, 0);
        int int53 = dateTime1.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime1", (dateTime10.compareTo(dateTime1) == 0) == dateTime10.equals(dateTime1));
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0680");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(1645455046184L, 3);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(32);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long41 = dateTimeZone28.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType43 = periodType42.withMinutesRemoved();
        boolean boolean44 = dateTimeZone28.equals((java.lang.Object) periodType42);
        org.joda.time.DateTime dateTime45 = dateTime17.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime48 = dateTime17.withField(dateTimeFieldType46, 53);
        int int49 = dateTime10.get(dateTimeFieldType46);
        org.joda.time.DateTime.Property property50 = dateTime10.yearOfCentury();
        boolean boolean52 = dateTime10.isEqual(1645455301716L);
        org.joda.time.Chronology chronology53 = dateTime10.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime45", (dateTime17.compareTo(dateTime45) == 0) == dateTime17.equals(dateTime45));
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0681");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.DateTime dateTime13 = dateTime8.withYearOfEra(9);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str18 = dateTimeZone16.getNameKey(1645455028293L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getShortName(52L);
        boolean boolean24 = dateTimeZone21.isFixed();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645455028293L);
        long long31 = dateTimeZone27.convertUTCToLocal(1645455035225L);
        long long33 = dateTimeZone21.getMillisKeepLocal(dateTimeZone27, 1645455037008L);
        long long35 = dateTimeZone16.getMillisKeepLocal(dateTimeZone27, 1645455044510L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        int int41 = dateTime37.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.toDateTimeISO();
        int int51 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = dateTime8.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime55 = dateTime8.plusSeconds(4718835);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime53", (dateTime8.compareTo(dateTime53) == 0) == dateTime8.equals(dateTime53));
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0682");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property12.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0683");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime6 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(4381721);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        int int23 = dateTimeZone19.getOffset(1645455028293L);
        long long27 = dateTimeZone19.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime28 = dateTime13.withZoneRetainFields(dateTimeZone19);
        long long30 = dateTimeZone19.convertUTCToLocal(1645455040347L);
        boolean boolean31 = dateTimeZone19.isFixed();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone41.getShortName(1645455068377L, locale43);
        long long47 = dateTimeZone41.convertLocalToUTC(1645455037307L, false);
        long long49 = dateTimeZone19.getMillisKeepLocal(dateTimeZone41, 10001L);
        org.joda.time.DateTime dateTime50 = dateTime6.withZone(dateTimeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime50", (dateTime6.compareTo(dateTime50) == 0) == dateTime6.equals(dateTime50));
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0684");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone5);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.Period period11 = period7.plusWeeks((int) (short) -1);
        org.joda.time.Period period13 = period7.minusMillis(4);
        org.joda.time.Interval interval14 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        mutablePeriod0.setPeriod(1645455033926L, 1645455028941L, chronology15);
        org.joda.time.DurationField durationField17 = chronology15.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfMinute();
        boolean boolean20 = dateTimeField18.isLeap(1645455067473L);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeField18.getAsShortText(1645455043876L, locale22);
        org.joda.time.DurationField durationField24 = dateTimeField18.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField24, and durationField17", !(durationField17.compareTo(durationField24) == 0) || (Math.signum(durationField17.compareTo(durationField17)) == Math.signum(durationField24.compareTo(durationField17))));
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0685");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = instant1.toString(dateTimeFormatter4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime10.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTime24.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = dateTime24.isAfter(readableInstant26);
        boolean boolean28 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.plus(readableDuration38);
        boolean boolean40 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime39.getSecondOfMinute();
        org.joda.time.DateTime dateTime43 = dateTime39.withYearOfCentury((int) '#');
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime10.toMutableDateTime();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.Period period48 = period46.plusSeconds(4397211);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0686");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        mutableInterval3.setInterval(100000L, 1645455028646L);
        long long11 = mutableInterval3.getStartMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period18 = duration15.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType24 = periodType23.withYearsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.Period period34 = new org.joda.time.Period(1645455029672L, (long) 3, periodType24, chronology32);
        mutablePeriod19.add(1645455030370L, chronology32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime(chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime51 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes(0);
        boolean boolean54 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime.Property property55 = dateTime40.year();
        org.joda.time.Duration duration56 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration58 = duration56.minus(1645455029375L);
        boolean boolean59 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration58);
        long long60 = duration15.getStandardMinutes();
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((-1L), 1L, periodType66, chronology67);
        java.lang.String str69 = periodType66.toString();
        java.lang.String str70 = periodType66.getName();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1645455029643L, periodType66);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.Period period79 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType66, chronology78);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone82);
        java.lang.String str84 = dateTime83.toString();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Period period88 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology87);
        org.joda.time.DateTime dateTime89 = dateTime83.minus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.Period period90 = duration81.toPeriodFrom((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Seconds seconds91 = period90.toStandardSeconds();
        int int92 = period90.getMillis();
        org.joda.time.DurationFieldType durationFieldType94 = period90.getFieldType(0);
        int int95 = periodType66.indexOf(durationFieldType94);
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant2, (org.joda.time.ReadableDuration) duration15, periodType66);
        org.joda.time.Duration duration97 = duration15.toDuration();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0687");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds((int) (byte) 10);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = durationFieldType12.isSupported(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime10.withFieldAdded(durationFieldType12, 2);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds((int) (byte) 10);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = period30.toPeriod();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.DateTime dateTime37 = dateTime34.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime(chronology38);
        org.joda.time.DateTime dateTime40 = dateTime37.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime37.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime.Property property49 = dateTime47.yearOfEra();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval56 = interval50.withDurationAfterStart((org.joda.time.ReadableDuration) duration54);
        boolean boolean57 = dateTime37.equals((java.lang.Object) interval50);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        long long65 = dateTime64.getMillis();
        org.joda.time.DateTime dateTime67 = dateTime64.plusWeeks((int) (byte) 10);
        boolean boolean68 = mutableInterval58.contains((org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime67.getMillisOfDay();
        org.joda.time.DateTime dateTime71 = dateTime67.plusYears(3);
        boolean boolean72 = interval50.contains((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Interval interval73 = interval32.withEnd((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime74 = interval73.getEnd();
        org.joda.time.DateTime.Property property75 = dateTime74.centuryOfEra();
        org.joda.time.DateTime dateTime76 = dateTime74.toDateTime();
        org.joda.time.Instant instant77 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime78 = instant77.toMutableDateTimeISO();
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        java.lang.String str83 = dateTime82.toString();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology86);
        org.joda.time.DateTime dateTime88 = dateTime82.minus((org.joda.time.ReadablePeriod) period87);
        org.joda.time.Period period89 = duration80.toPeriodFrom((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration91 = duration80.minus(0L);
        org.joda.time.Duration duration93 = duration80.withMillis(1645455034114L);
        org.joda.time.Instant instant94 = instant77.minus((org.joda.time.ReadableDuration) duration93);
        org.joda.time.PeriodType periodType95 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType96 = periodType95.withMinutesRemoved();
        org.joda.time.PeriodType periodType97 = periodType95.withYearsRemoved();
        org.joda.time.PeriodType periodType98 = periodType97.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod99 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableDuration) duration93, periodType98);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant77 and mutableDateTime78", (instant77.compareTo(mutableDateTime78) == 0) == instant77.equals(mutableDateTime78));
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0688");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Period period3 = org.joda.time.Period.years((int) (byte) 0);
        int int4 = period3.getWeeks();
        org.joda.time.Duration duration5 = period3.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration5);
        mutablePeriod6.addMinutes(53486009);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0689");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone5);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.Period period11 = period7.plusWeeks((int) (short) -1);
        org.joda.time.Period period13 = period7.minusMillis(4);
        org.joda.time.Interval interval14 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        mutablePeriod0.setPeriod(1645455033926L, 1645455028941L, chronology15);
        org.joda.time.DurationField durationField17 = chronology15.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfMinute();
        org.joda.time.DurationField durationField19 = chronology15.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField17, durationField19, and durationField17", !(durationField17.compareTo(durationField19) == 0) || (Math.signum(durationField17.compareTo(durationField17)) == Math.signum(durationField19.compareTo(durationField17))));
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0690");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        int int5 = dateTime4.getWeekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        org.joda.time.DateTime dateTime16 = dateTime4.withZone(dateTimeZone15);
        java.lang.String str18 = dateTimeZone15.getName((long) 4708);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime16", (dateTime4.compareTo(dateTime16) == 0) == dateTime4.equals(dateTime16));
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0691");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime17.plusMillis(100);
        long long21 = dateTime20.getMillis();
        int int22 = dateTime20.getDayOfMonth();
        boolean boolean23 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime20.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0692");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        int int9 = dateTime1.getYearOfCentury();
        org.joda.time.LocalTime localTime10 = dateTime1.toLocalTime();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology25 = chronology17.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyear();
        org.joda.time.Chronology chronology27 = chronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField28.getType();
        java.lang.String str30 = dateTimeFieldType29.toString();
        int int31 = localTime10.get(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int37 = dateTime34.get(dateTimeFieldType36);
        java.lang.String str38 = dateTimeFieldType36.toString();
        int int39 = localTime10.get(dateTimeFieldType36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime34", (dateTime1.compareTo(dateTime34) == 0) == dateTime1.equals(dateTime34));
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0693");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str13 = dateTimeZone11.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology14 = chronology6.withZone(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        boolean boolean21 = dateTime19.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getShortName(52L);
        org.joda.time.DateTime dateTime27 = dateTime19.toDateTime(dateTimeZone24);
        long long29 = dateTimeZone24.previousTransition(1645455029465L);
        long long31 = dateTimeZone11.getMillisKeepLocal(dateTimeZone24, 1645455060354L);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime27", (dateTime19.compareTo(dateTime27) == 0) == dateTime19.equals(dateTime27));
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0694");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime.Property property5 = dateTime3.yearOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval12 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval13 = interval6.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Interval interval27 = interval13.gap((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        boolean boolean29 = mutableInterval28.containsNow();
        boolean boolean30 = interval13.isBefore((org.joda.time.ReadableInterval) mutableInterval28);
        boolean boolean32 = mutableInterval28.contains(1645455037444L);
        boolean boolean34 = mutableInterval28.isAfter((long) (byte) 0);
        boolean boolean35 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        long long36 = mutableInterval0.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.Duration duration42 = new org.joda.time.Duration(readableInstant37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration45 = duration42.withDurationAdded(1645455094619L, 3);
        org.joda.time.Duration duration47 = duration42.withMillis(1645455092278L);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.format.PeriodFormatter periodFormatter49 = null;
        java.lang.String str50 = period48.toString(periodFormatter49);
        org.joda.time.Period period52 = period48.withSeconds(347);
        org.joda.time.Period period54 = period52.plusDays(72);
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Instant instant57 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime58 = instant57.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval59.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration62);
        mutableInterval59.setInterval(100000L, 1645455028646L);
        long long67 = mutableInterval59.getStartMillis();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        long long69 = mutableInterval68.toDurationMillis();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval68.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration71);
        mutableInterval59.setDurationAfterStart((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardMinutes(1645455037008L);
        boolean boolean76 = duration71.isLongerThan((org.joda.time.ReadableDuration) duration75);
        long long77 = duration71.getMillis();
        org.joda.time.Instant instant79 = instant57.withDurationAdded((org.joda.time.ReadableDuration) duration71, 52991506);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime40", (dateTime3.compareTo(dateTime40) == 0) == dateTime3.equals(dateTime40));
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0695");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis((long) 9);
        org.joda.time.Instant instant21 = instant19.minus(1645455060010L);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = duration25.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration39 = duration25.toDuration();
        org.joda.time.Period period41 = org.joda.time.Period.years((int) (byte) 0);
        int int42 = period41.getWeeks();
        org.joda.time.Duration duration43 = period41.toStandardDuration();
        boolean boolean44 = duration25.isEqual((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTime();
        org.joda.time.DateTime dateTime54 = dateTime52.withMillisOfDay(1);
        java.lang.String str55 = dateTime52.toString();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay62 = dateTime61.toYearMonthDay();
        org.joda.time.DateTime dateTime63 = dateTime52.withFields((org.joda.time.ReadablePartial) yearMonthDay62);
        org.joda.time.DateTime.Property property64 = dateTime52.yearOfCentury();
        org.joda.time.DateTime.Property property65 = dateTime52.secondOfMinute();
        org.joda.time.DateTime dateTime67 = property65.addToCopy((long) 1970);
        org.joda.time.DateTime dateTime69 = dateTime67.withMinuteOfHour((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime67);
        boolean boolean71 = instant21.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0696");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1645455043186L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(1645455032819L);
        boolean boolean4 = duration1.isEqual((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Instant instant6 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 1, 40, 4);
        mutablePeriod13.addMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded(1645455046184L, 3);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod13, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property28 = dateTime26.monthOfYear();
        org.joda.time.DateTime.Property property29 = dateTime26.era();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0697");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTime.Property property18 = dateTime1.dayOfYear();
        int int19 = dateTime1.getYear();
        boolean boolean21 = dateTime1.equals((java.lang.Object) "2022-02-22T01:12:48.207+10:22");
        org.joda.time.Instant instant22 = dateTime1.toInstant();
        org.joda.time.Instant instant24 = instant22.withMillis((long) 53675659);
        boolean boolean26 = instant24.isEqual(1645455168518L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant22", (dateTime1.compareTo(instant22) == 0) == dateTime1.equals(instant22));
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0698");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        int int4 = dateTime1.getYearOfCentury();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        int int17 = dateTimeZone14.getOffsetFromLocal(1645455050010L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long39 = dateTimeZone14.getMillisKeepLocal(dateTimeZone28, 1687730611190400000L);
        org.joda.time.DateTime dateTime40 = dateTime1.withZone(dateTimeZone28);
        org.joda.time.Chronology chronology41 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0699");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears((int) '4');
        boolean boolean24 = dateTime1.equals((java.lang.Object) '4');
        org.joda.time.DateTime dateTime26 = dateTime1.plusMonths(812);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime12", (dateTime10.compareTo(dateTime12) == 0) == dateTime10.equals(dateTime12));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0700");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        boolean boolean22 = instant0.equals((java.lang.Object) dateTime21);
        org.joda.time.Chronology chronology23 = instant0.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0701");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        int int6 = dateTimeZone2.getOffset(1645455028293L);
        java.lang.String str8 = dateTimeZone2.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillis((long) ' ');
        org.joda.time.DateTime dateTime13 = dateTime9.withMillisOfDay(53504366);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfDay(39092882);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getShortName(52L);
        boolean boolean22 = dateTimeZone19.isFixed();
        long long24 = dateTimeZone19.convertUTCToLocal(1645455038369L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str29 = dateTimeZone27.getNameKey(1645455028293L);
        int int31 = dateTimeZone27.getOffset(1645455028293L);
        long long35 = dateTimeZone27.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str37 = dateTimeZone27.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime(chronology43);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTime dateTime47 = dateTime45.withMillisOfDay(1);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant48.toInstant();
        boolean boolean50 = dateTime47.isAfter((org.joda.time.ReadableInstant) instant49);
        org.joda.time.LocalDateTime localDateTime51 = dateTime47.toLocalDateTime();
        boolean boolean52 = dateTimeZone27.isLocalDateTimeGap(localDateTime51);
        boolean boolean53 = dateTimeZone19.isLocalDateTimeGap(localDateTime51);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime51.toDateTime(readableInstant54);
        boolean boolean56 = dateTime16.isEqual(readableInstant54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant48", (dateTime9.compareTo(instant48) == 0) == dateTime9.equals(instant48));
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0702");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        boolean boolean39 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.Period period48 = duration27.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadablePeriod) mutablePeriod49);
        boolean boolean52 = mutableInterval50.equals((java.lang.Object) "2022-02-22T01:12:52.069+10:22");
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes(0);
        org.joda.time.DateTime dateTime65 = dateTime63.plusYears((int) '4');
        org.joda.time.Instant instant66 = dateTime63.toInstant();
        mutableInterval50.setEnd((org.joda.time.ReadableInstant) instant66);
        org.joda.time.DateTime dateTime68 = mutableInterval50.getStart();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant66", (dateTime1.compareTo(instant66) == 0) == dateTime1.equals(instant66));
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0703");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str19 = dateTimeZone17.getNameKey(1645455028293L);
        int int21 = dateTimeZone17.getOffset(1645455028293L);
        long long25 = dateTimeZone17.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str27 = dateTimeZone17.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.DateTime dateTime32 = dateTime29.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant38.toInstant();
        boolean boolean40 = dateTime37.isAfter((org.joda.time.ReadableInstant) instant39);
        org.joda.time.LocalDateTime localDateTime41 = dateTime37.toLocalDateTime();
        boolean boolean42 = dateTimeZone17.isLocalDateTimeGap(localDateTime41);
        int int43 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime41);
        long long45 = dateTimeField14.roundHalfEven(1645455185961L);
        java.util.Locale locale46 = null;
        int int47 = dateTimeField14.getMaximumTextLength(locale46);
        long long49 = dateTimeField14.roundHalfCeiling(1645455388603L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and instant38", (dateTime29.compareTo(instant38) == 0) == dateTime29.equals(instant38));
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0704");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDayOfMonth((int) (byte) 1);
        int int10 = dateTime4.getYear();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period13.toPeriod();
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period15.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.Period period19 = period14.normalizedStandard(periodType18);
        org.joda.time.Weeks weeks20 = period14.toStandardWeeks();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period23 = period14.withFieldAdded(durationFieldType21, 4475);
        org.joda.time.DateTime dateTime25 = dateTime4.withFieldAdded(durationFieldType21, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType39 = periodType38.withYearsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.Period period49 = new org.joda.time.Period(1645455029672L, (long) 3, periodType39, chronology47);
        org.joda.time.DurationField durationField50 = chronology47.eras();
        org.joda.time.DateTime dateTime51 = dateTime29.toDateTime(chronology47);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval(1645455038843L, 1645455042554L, chronology47);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((-1L), 1L, periodType55, chronology56);
        long long60 = chronology47.add((org.joda.time.ReadablePeriod) mutablePeriod57, 1645455045823L, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField61 = chronology47.millisOfSecond();
        org.joda.time.Chronology chronology62 = chronology47.withUTC();
        org.joda.time.DurationField durationField63 = durationFieldType21.getField(chronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField50, durationField63, and durationField50", !(durationField50.compareTo(durationField63) == 0) || (Math.signum(durationField50.compareTo(durationField50)) == Math.signum(durationField63.compareTo(durationField50))));
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0705");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant3 = instant0.minus((long) (short) 1);
        org.joda.time.DateTime dateTime4 = instant0.toDateTime();
        boolean boolean5 = dateTime4.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0706");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        int int6 = dateTimeZone2.getOffset(1645455028293L);
        java.lang.String str8 = dateTimeZone2.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfSecond();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.Period period26 = new org.joda.time.Period(1645455029672L, (long) 3, periodType16, chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfMonth();
        org.joda.time.DurationField durationField28 = chronology24.days();
        org.joda.time.Period period29 = new org.joda.time.Period(1645455034855L, 1645455043876L, chronology24);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology24.getZone();
        java.lang.String str32 = dateTimeZone30.getName(0L);
        org.joda.time.DateTime dateTime33 = dateTime9.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 1);
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime33.withMillis(1645455378552L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime33 and dateTime37", (dateTime33.compareTo(dateTime37) == 0) == dateTime33.equals(dateTime37));
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0707");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Interval interval4 = interval3.toInterval();
        org.joda.time.Duration duration5 = interval3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime10.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime20.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval29 = interval23.withDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        boolean boolean30 = dateTime10.equals((java.lang.Object) interval23);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        boolean boolean41 = mutableInterval31.contains((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime40.getMillisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime40.plusYears(3);
        boolean boolean45 = interval23.contains((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology46 = interval23.getChronology();
        org.joda.time.Period period47 = duration5.toPeriod(chronology46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Chronology chronology50 = chronology46.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime51", (dateTime7.compareTo(dateTime51) == 0) == dateTime7.equals(dateTime51));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0708");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getShortName(52L);
        boolean boolean31 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime32 = dateTime25.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime25.getZone();
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime32", (dateTime25.compareTo(dateTime32) == 0) == dateTime25.equals(dateTime32));
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0709");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(4431607, 4470835, (-292275054), 8);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period15 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration17 = duration6.minus(0L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1L), 1L, periodType22, chronology23);
        java.lang.String str25 = periodType22.toString();
        java.lang.String str26 = periodType22.getName();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645455029643L, periodType22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, readableInstant18, periodType22);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusSeconds((int) (byte) 10);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration42 = duration6.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration45 = duration6.withDurationAdded(1645455036379L, 22);
        org.joda.time.Hours hours46 = duration6.toStandardHours();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration59 = duration48.minus(0L);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((-1L), 1L, periodType64, chronology65);
        java.lang.String str67 = periodType64.toString();
        java.lang.String str68 = periodType64.getName();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(1645455029643L, periodType64);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, readableInstant60, periodType64);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval71.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        long long78 = dateTime77.getMillis();
        org.joda.time.DateTime dateTime80 = dateTime77.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime82 = dateTime80.plusSeconds((int) (byte) 10);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration74, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration84 = duration48.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Duration duration87 = duration48.withDurationAdded(1645455036379L, 22);
        org.joda.time.Hours hours88 = duration48.toStandardHours();
        boolean boolean89 = duration6.isEqual((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Instant instant90 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime91 = instant90.toMutableDateTimeISO();
        org.joda.time.Interval interval92 = duration6.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime91);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime35 and instant90", (dateTime35.compareTo(instant90) == 0) == dateTime35.equals(instant90));
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0710");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime4.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = dateTime18.isAfter(readableInstant20);
        boolean boolean22 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime18.toString(dateTimeFormatter23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        boolean boolean31 = dateTime29.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime(chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.toDateTimeISO();
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(0);
        boolean boolean50 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean53 = mutableInterval51.contains(1L);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        mutableInterval51.setChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime18.toDateTime(chronology60);
        org.joda.time.DateTime dateTime65 = dateTime18.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DateTime.Property property66 = dateTime18.weekyear();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.DateTime dateTime71 = dateTime68.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str76 = dateTimeZone74.getNameKey(1645455028293L);
        int int78 = dateTimeZone74.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime71.toMutableDateTime(dateTimeZone74);
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime71.toMutableDateTime();
        long long81 = property66.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime80);
        java.lang.String str82 = property66.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime79", (dateTime4.compareTo(mutableDateTime79) == 0) == dateTime4.equals(mutableDateTime79));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0711");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period61 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration63 = duration52.minus(0L);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.Period period66 = period64.plusYears(21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0712");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getShortName(52L);
        boolean boolean5 = dateTimeZone2.isFixed();
        long long7 = dateTimeZone2.convertUTCToLocal(1645455038369L);
        java.lang.String str9 = dateTimeZone2.getName(1645455046184L);
        long long12 = dateTimeZone2.adjustOffset(1645455088864L, false);
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone2.getName(0L, locale14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str25 = dateTimeZone23.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime26 = dateTime17.toDateTime(dateTimeZone23);
        int int27 = dateTime26.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property28 = dateTime26.millisOfSecond();
        org.joda.time.DateTime dateTime29 = property28.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645455028646L, chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField42 = chronology37.hourOfDay();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology37);
        int int44 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime26", (dateTime17.compareTo(dateTime26) == 0) == dateTime17.equals(dateTime26));
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0713");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645455028293L);
        int int24 = dateTimeZone20.getOffset(1645455028293L);
        long long28 = dateTimeZone20.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime29 = dateTime14.withZoneRetainFields(dateTimeZone20);
        long long33 = dateTimeZone20.convertLocalToUTC(1645455045823L, true, (long) 31);
        long long35 = dateTimeZone20.convertUTCToLocal(1645455037008L);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime37 = dateTime4.withZone(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime36", (dateTime1.compareTo(dateTime36) == 0) == dateTime1.equals(dateTime36));
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0714");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime4.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = dateTime18.isAfter(readableInstant20);
        boolean boolean22 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str32 = dateTimeZone30.getNameKey(1645455028293L);
        int int34 = dateTimeZone30.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime27.toMutableDateTime(dateTimeZone30);
        org.joda.time.DateTime.Property property36 = dateTime27.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean38 = dateTime27.isSupported(dateTimeFieldType37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int40 = dateTime27.get(dateTimeFieldType39);
        int int41 = dateTime18.get(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType39.getDurationType();
        org.joda.time.Chronology chronology43 = null;
        boolean boolean44 = dateTimeFieldType39.isSupported(chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime35", (dateTime4.compareTo(mutableDateTime35) == 0) == dateTime4.equals(mutableDateTime35));
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0715");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Instant instant20 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        boolean boolean29 = dateTime27.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        boolean boolean48 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean51 = mutableInterval49.contains(1L);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        mutableInterval49.setChronology(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.minuteOfHour();
        org.joda.time.Period period61 = new org.joda.time.Period(1645455072357L, chronology58);
        boolean boolean62 = dateTimeFieldType21.isSupported(chronology58);
        org.joda.time.DateTime dateTime64 = dateTime4.withField(dateTimeFieldType21, 142);
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType21.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant20", (dateTime4.compareTo(instant20) == 0) == dateTime4.equals(instant20));
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0716");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, readableInstant9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str15 = dateTimeZone13.getShortName(52L);
        boolean boolean16 = dateTimeZone13.isFixed();
        long long18 = dateTimeZone13.convertUTCToLocal(1645455038369L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645455028293L);
        int int25 = dateTimeZone21.getOffset(1645455028293L);
        long long29 = dateTimeZone21.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str31 = dateTimeZone21.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime(chronology37);
        org.joda.time.DateTime dateTime39 = dateTime36.toDateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.withMillisOfDay(1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant42.toInstant();
        boolean boolean44 = dateTime41.isAfter((org.joda.time.ReadableInstant) instant43);
        org.joda.time.LocalDateTime localDateTime45 = dateTime41.toLocalDateTime();
        boolean boolean46 = dateTimeZone21.isLocalDateTimeGap(localDateTime45);
        boolean boolean47 = dateTimeZone13.isLocalDateTimeGap(localDateTime45);
        boolean boolean49 = dateTimeZone13.isStandardOffset((long) 4492045);
        boolean boolean50 = interval10.equals((java.lang.Object) dateTimeZone13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant42", (dateTime1.compareTo(instant42) == 0) == dateTime1.equals(instant42));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0717");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        boolean boolean22 = instant0.equals((java.lang.Object) dateTime21);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        mutableInterval23.setInterval(100000L, 1645455028646L);
        long long31 = mutableInterval23.getStartMillis();
        mutableInterval23.setEndMillis(1645455047752L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration46 = duration35.minus(0L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1L), 1L, periodType51, chronology52);
        java.lang.String str54 = periodType51.toString();
        java.lang.String str55 = periodType51.getName();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645455029643L, periodType51);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant47, periodType51);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval58.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        long long65 = dateTime64.getMillis();
        org.joda.time.DateTime dateTime67 = dateTime64.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime69 = dateTime67.plusSeconds((int) (byte) 10);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration61, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration71 = duration35.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration74 = duration35.withDurationAdded(1645455036379L, 22);
        mutableInterval23.setDurationAfterStart((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Instant instant77 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration74, 2022);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        long long79 = mutableInterval78.toDurationMillis();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval78.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration84 = duration81.plus((long) 8);
        org.joda.time.Instant instant86 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration84, 52);
        org.joda.time.Chronology chronology87 = instant0.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0718");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTime.Property property18 = dateTime1.dayOfYear();
        int int19 = dateTime1.getYear();
        boolean boolean21 = dateTime1.equals((java.lang.Object) "2022-02-22T01:12:48.207+10:22");
        org.joda.time.Instant instant22 = dateTime1.toInstant();
        org.joda.time.Instant instant23 = instant22.toInstant();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(0);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration36.minus(0L);
        org.joda.time.DateTime dateTime49 = dateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 0);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period60 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration62 = duration51.minus(0L);
        boolean boolean63 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration51);
        long long64 = duration51.getStandardMinutes();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval65.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration68.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime80 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = dateTime80.withZoneRetainFields(dateTimeZone82);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(dateTimeZone84);
        long long86 = dateTime85.getMillis();
        org.joda.time.DateTime dateTime88 = dateTime85.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime89 = dateTime88.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay90 = dateTime89.toYearMonthDay();
        int int91 = yearMonthDay90.size();
        org.joda.time.DateTime dateTime92 = dateTime80.withFields((org.joda.time.ReadablePartial) yearMonthDay90);
        org.joda.time.Chronology chronology93 = yearMonthDay90.getChronology();
        org.joda.time.Period period94 = new org.joda.time.Period((java.lang.Object) duration51, chronology93);
        java.lang.String str95 = duration51.toString();
        org.joda.time.Instant instant97 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration51, 72000000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant22", (dateTime1.compareTo(instant22) == 0) == dateTime1.equals(instant22));
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0719");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours(1645455075869L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Interval interval15 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration17 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration13, 0);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        boolean boolean33 = dateTime31.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(0);
        boolean boolean52 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean55 = mutableInterval53.contains(1L);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        mutableInterval53.setChronology(chronology62);
        mutablePeriod24.setPeriod(100000L, 1645455034244L, chronology62);
        org.joda.time.DurationField durationField65 = chronology62.minutes();
        org.joda.time.DateTime dateTime66 = dateTime20.withChronology(chronology62);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime20.getZone();
        boolean boolean68 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime69 = dateTime2.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime71 = dateTime69.minusYears(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime71", (instant0.compareTo(dateTime71) == 0) == instant0.equals(dateTime71));
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0720");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.Instant instant17 = dateTime14.toInstant();
        org.joda.time.DateTime dateTime18 = instant17.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = instant17.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime20 = instant17.toMutableDateTime();
        org.joda.time.Instant instant23 = instant17.withDurationAdded((long) 73, 4493);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime33 = dateTime28.withFieldAdded(durationFieldType31, (int) (short) 0);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant17, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay(1);
        java.lang.String str46 = dateTime43.toString();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.DateTime dateTime54 = dateTime43.withFields((org.joda.time.ReadablePartial) yearMonthDay53);
        org.joda.time.DateTime.Property property55 = dateTime43.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime61 = dateTime43.minusHours(53455286);
        org.joda.time.DateTime dateTime63 = dateTime43.minusMinutes(27);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 8, periodType71, chronology78);
        mutablePeriod67.setPeriod((org.joda.time.ReadableDuration) duration69, chronology78);
        org.joda.time.Hours hours82 = duration69.toStandardHours();
        org.joda.time.DateTime dateTime83 = dateTime63.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant17", (dateTime14.compareTo(instant17) == 0) == dateTime14.equals(instant17));
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0721");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        long long21 = dateTimeZone10.convertUTCToLocal(1645455040347L);
        boolean boolean22 = dateTimeZone10.isFixed();
        java.lang.String str24 = dateTimeZone10.getNameKey(1645455051434L);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime48.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay50 = dateTime49.toYearMonthDay();
        int int51 = yearMonthDay50.size();
        org.joda.time.DateTime dateTime52 = dateTime40.withFields((org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.DateTime dateTime57 = dateTime54.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = dateTime57.toDateTime(chronology58);
        org.joda.time.DateTime dateTime60 = dateTime57.toDateTime();
        org.joda.time.DateTime dateTime62 = dateTime60.withMillisOfDay(1);
        java.lang.String str63 = dateTime60.toString();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime dateTime68 = dateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime69 = dateTime68.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay70 = dateTime69.toYearMonthDay();
        org.joda.time.DateTime dateTime71 = dateTime60.withFields((org.joda.time.ReadablePartial) yearMonthDay70);
        org.joda.time.DateTime.Property property72 = dateTime60.yearOfCentury();
        org.joda.time.DateTime dateTime74 = dateTime60.withSecondOfMinute((int) (byte) 10);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType76 = periodType75.withMinutesRemoved();
        org.joda.time.PeriodType periodType77 = periodType75.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime60, periodType77);
        org.joda.time.Chronology chronology79 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime80 = dateTime60.toDateTimeISO();
        org.joda.time.Instant instant81 = dateTime80.toInstant();
        int int82 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime80);
        int int83 = dateTime80.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant81", (dateTime4.compareTo(instant81) == 0) == dateTime4.equals(instant81));
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0722");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        boolean boolean22 = instant0.equals((java.lang.Object) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant25 = instant0.withMillis(1645455128531L);
        org.joda.time.Instant instant27 = instant25.plus(1645455263010L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0723");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1L), 1L, periodType31, chronology32);
        java.lang.String str34 = periodType31.toString();
        java.lang.String str35 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1645455029643L, periodType31);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType31, chronology43);
        org.joda.time.Interval interval45 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime.Property property49 = dateTime47.yearOfEra();
        org.joda.time.Interval interval50 = property49.toInterval();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval56 = interval50.withDurationAfterStart((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval57 = interval50.toInterval();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        mutableInterval58.setInterval((org.joda.time.ReadableInterval) mutableInterval65);
        org.joda.time.Interval interval71 = interval57.gap((org.joda.time.ReadableInterval) mutableInterval58);
        org.joda.time.Period period72 = interval57.toPeriod();
        org.joda.time.Interval interval73 = interval45.overlap((org.joda.time.ReadableInterval) interval57);
        boolean boolean74 = interval45.containsNow();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        java.lang.String str77 = dateTime76.toString();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology80);
        org.joda.time.DateTime dateTime82 = dateTime76.minus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.DateTime dateTime85 = dateTime82.withDurationAdded(1645455046184L, 3);
        int int86 = dateTime85.getMonthOfYear();
        org.joda.time.Instant instant87 = dateTime85.toInstant();
        boolean boolean88 = interval45.isBefore((org.joda.time.ReadableInstant) instant87);
        org.joda.time.DateTime dateTime89 = instant87.toDateTime();
        int int90 = dateTime89.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime85 and instant87", (dateTime85.compareTo(instant87) == 0) == dateTime85.equals(instant87));
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0724");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1L), 1L, periodType28, chronology29);
        java.lang.String str31 = periodType28.toString();
        java.lang.String str32 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645455029643L, periodType28);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant24, periodType28);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusSeconds((int) (byte) 10);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration48 = duration12.minus((org.joda.time.ReadableDuration) duration38);
        boolean boolean49 = property6.equals((java.lang.Object) duration12);
        org.joda.time.Instant instant50 = instant1.plus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Instant instant51 = instant50.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0725");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.DateTime dateTime51 = instant6.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        mutablePeriod52.addWeeks((int) (byte) -1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration67 = duration56.minus(0L);
        org.joda.time.Chronology chronology68 = null;
        mutablePeriod52.setPeriod((org.joda.time.ReadableDuration) duration56, chronology68);
        long long70 = duration56.getStandardHours();
        org.joda.time.Instant instant72 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration56, 2023);
        org.joda.time.Instant instant75 = instant72.withDurationAdded(0L, (int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime76 = instant72.toMutableDateTime();
        java.lang.String str77 = instant72.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0726");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = dateTime6.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusYears(62294);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0727");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis((long) 9);
        boolean boolean21 = instant19.isAfter(1645455085726L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0728");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis((long) 9);
        org.joda.time.Instant instant21 = instant19.minus(1645455060010L);
        org.joda.time.Instant instant23 = instant21.plus(1645455068205L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0729");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTimeISO();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration28 = duration17.minus(0L);
        org.joda.time.Duration duration30 = duration17.withMillis(1645455034114L);
        org.joda.time.Instant instant31 = instant14.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Instant instant33 = instant14.withMillis((long) 9);
        org.joda.time.Instant instant35 = instant33.minus(1645455060010L);
        org.joda.time.Instant instant37 = instant33.minus(1645455066597L);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) instant37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant14", (dateTime3.compareTo(instant14) == 0) == dateTime3.equals(instant14));
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0730");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        boolean boolean4 = property3.isLeap();
        org.joda.time.DateTime dateTime6 = property3.setCopy(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(37320000);
        org.joda.time.DateTime dateTime19 = dateTime15.withMillisOfSecond(2);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime32 = dateTime24.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        int int39 = dateTime38.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = dateTime38.isAfter(readableInstant40);
        boolean boolean42 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime38.toString(dateTimeFormatter43);
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime38.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        boolean boolean55 = dateTimeField53.isLeap(1645455027824L);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField53.getType();
        boolean boolean57 = yearMonthDay45.isSupported(dateTimeFieldType56);
        boolean boolean58 = dateTime19.isSupported(dateTimeFieldType56);
        org.joda.time.DateTime.Property property59 = dateTime19.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime19.getZone();
        int int61 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime8", (dateTime2.compareTo(dateTime8) == 0) == dateTime2.equals(dateTime8));
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0731");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField11 = yearMonthDay9.getField(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime17.toYearMonthDay();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay9, (org.joda.time.ReadablePartial) yearMonthDay18);
        org.joda.time.PeriodType periodType20 = period19.getPeriodType();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology27.weekyears();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1640957880000L, 1645455037008L, periodType20, chronology27);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.yearOfCentury();
        org.joda.time.DurationField durationField46 = chronology42.years();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology42);
        org.joda.time.Period period48 = new org.joda.time.Period(1645455111347L, (long) 35, chronology42);
        org.joda.time.DurationField durationField49 = chronology42.centuries();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((-140731284157614775L), chronology42);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645455412120L, periodType20, chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField31 and durationField46", (durationField31.compareTo(durationField46) == 0) == durationField31.equals(durationField46));
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0732");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        int int22 = dateTime19.getDayOfMonth();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(1645455032819L);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours(2);
        org.joda.time.DateTime dateTime34 = dateTime30.minusSeconds(37320000);
        org.joda.time.Interval interval35 = duration24.toIntervalTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = interval35.withChronology(chronology36);
        org.joda.time.Interval interval39 = interval35.withEndMillis(1645492452041L);
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        mutableInterval41.setInterval((org.joda.time.ReadableInterval) mutableInterval48);
        boolean boolean54 = mutableInterval48.containsNow();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone57);
        org.joda.time.Interval interval59 = interval58.toInterval();
        boolean boolean60 = mutableInterval48.isBefore((org.joda.time.ReadableInterval) interval59);
        boolean boolean62 = interval59.equals((java.lang.Object) "2022-02-22T01:12:44.218+10:22");
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval63.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration69 = duration66.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology75);
        org.joda.time.DateTime dateTime77 = dateTime71.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateTime dateTime78 = dateTime71.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration66, (org.joda.time.ReadableInstant) dateTime78);
        mutablePeriod79.addMillis((int) '4');
        int int82 = mutablePeriod79.getWeeks();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Instant instant84 = new org.joda.time.Instant();
        org.joda.time.Instant instant85 = instant84.toInstant();
        mutablePeriod79.setPeriod(readableInstant83, (org.joda.time.ReadableInstant) instant85);
        org.joda.time.Interval interval87 = interval59.withEnd((org.joda.time.ReadableInstant) instant85);
        boolean boolean88 = mutableInterval40.contains((org.joda.time.ReadableInterval) interval59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant84", (dateTime3.compareTo(instant84) == 0) == dateTime3.equals(instant84));
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0733");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime12.withHourOfDay(21);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone19.getName((long) 342, locale23);
        org.joda.time.DateTime dateTime25 = dateTime14.toDateTime(dateTimeZone19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((-1L), 1L, periodType43, chronology44);
        java.lang.String str46 = periodType43.toString();
        java.lang.String str47 = periodType43.getName();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645455029643L, periodType43);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant39, periodType43);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime61 = dateTime59.plusSeconds((int) (byte) 10);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration63 = duration27.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration66 = duration27.withDurationAdded(1645455036379L, 22);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration73 = duration70.plus((long) 8);
        org.joda.time.Seconds seconds74 = duration70.toStandardSeconds();
        org.joda.time.Duration duration75 = duration70.toDuration();
        int int76 = duration27.compareTo((org.joda.time.ReadableDuration) duration75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration75);
        long long78 = duration75.getStandardDays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime25", (dateTime14.compareTo(dateTime25) == 0) == dateTime14.equals(dateTime25));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0734");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType6 = periodType5.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.Period period16 = new org.joda.time.Period(1645455029672L, (long) 3, periodType6, chronology14);
        mutablePeriod1.add(1645455030370L, chronology14);
        org.joda.time.Period period18 = new org.joda.time.Period(1645455035827L, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.halfdays();
        org.joda.time.DurationField durationField20 = chronology14.days();
        org.joda.time.DurationField durationField21 = chronology14.days();
        org.joda.time.DurationField durationField22 = chronology14.seconds();
        long long24 = durationField22.getMillis(4365808);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType28 = periodType27.withYearsRemoved();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfEra();
        org.joda.time.Period period38 = new org.joda.time.Period(1645455029672L, (long) 3, periodType28, chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        int int40 = durationField22.compareTo(durationField39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField39, durationField19, and durationField20", !(durationField39.compareTo(durationField19) == 0) || (Math.signum(durationField39.compareTo(durationField20)) == Math.signum(durationField19.compareTo(durationField20))));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0735");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone2);
        int int7 = dateTimeZone2.getOffsetFromLocal(1645455058549L);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 2023, false, (-37320000L));
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getShortName(52L);
        boolean boolean18 = dateTimeZone15.isFixed();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645455028293L);
        long long25 = dateTimeZone21.convertUTCToLocal(1645455035225L);
        long long27 = dateTimeZone15.getMillisKeepLocal(dateTimeZone21, 1645455037008L);
        long long31 = dateTimeZone21.convertLocalToUTC(1645488000000L, true, 1645455034688L);
        java.lang.String str32 = dateTimeZone21.getID();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period43 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration45 = duration34.minus(0L);
        org.joda.time.Duration duration47 = duration34.withMillis(1645455034114L);
        java.lang.String str48 = duration34.toString();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        boolean boolean54 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        java.lang.Object obj55 = mutableInterval50.clone();
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfEra();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.minuteOfDay();
        org.joda.time.DurationField durationField59 = chronology56.halfdays();
        org.joda.time.Period period60 = duration34.toPeriod(periodType49, chronology56);
        org.joda.time.DateTimeField dateTimeField61 = chronology56.monthOfYear();
        org.joda.time.DurationField durationField62 = chronology56.centuries();
        org.joda.time.DateTimeField dateTimeField63 = chronology56.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str68 = dateTimeZone66.getShortName(52L);
        boolean boolean69 = dateTimeZone66.isFixed();
        long long71 = dateTimeZone66.nextTransition(1645455028058L);
        org.joda.time.Chronology chronology72 = chronology56.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField73 = chronology72.hourOfHalfday();
        boolean boolean74 = dateTimeField73.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = dateTimeField73.getType();
        boolean boolean76 = dateTimeZone21.equals((java.lang.Object) dateTimeFieldType75);
        long long78 = dateTimeZone2.getMillisKeepLocal(dateTimeZone21, (long) 37320099);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime36", (dateTime5.compareTo(dateTime36) == 0) == dateTime5.equals(dateTime36));
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0736");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) mutableInterval44);
        mutableInterval44.setDurationAfterStart(1645455033234L);
        boolean boolean52 = mutableInterval26.isBefore((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod();
        mutablePeriod53.setMonths((int) ' ');
        java.lang.Object obj56 = mutablePeriod53.clone();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone59);
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period61.minusSeconds((int) (short) 1);
        org.joda.time.Period period65 = period61.plusWeeks((int) (short) -1);
        org.joda.time.Period period67 = period61.minusMillis(4);
        org.joda.time.Interval interval68 = interval60.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        mutablePeriod53.add((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Interval interval71 = interval68.withEndMillis(1645455034431L);
        mutableInterval26.setInterval((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = mutableInterval26.getStart();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str78 = dateTimeZone76.getNameKey(1645455028293L);
        java.lang.String str80 = dateTimeZone76.getNameKey(1645455039471L);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(dateTimeZone76);
        mutableInterval26.setEnd((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Chronology chronology83 = mutableInterval26.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime81", (dateTime1.compareTo(dateTime81) == 0) == dateTime1.equals(dateTime81));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0737");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime13", (dateTime1.compareTo(dateTime13) == 0) == dateTime1.equals(dateTime13));
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0738");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Interval interval4 = interval3.toInterval();
        org.joda.time.Duration duration5 = interval3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime10.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime20.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval29 = interval23.withDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        boolean boolean30 = dateTime10.equals((java.lang.Object) interval23);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        boolean boolean41 = mutableInterval31.contains((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime40.getMillisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime40.plusYears(3);
        boolean boolean45 = interval23.contains((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology46 = interval23.getChronology();
        org.joda.time.Period period47 = duration5.toPeriod(chronology46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Chronology chronology50 = chronology46.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime51", (dateTime7.compareTo(dateTime51) == 0) == dateTime7.equals(dateTime51));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0739");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        boolean boolean26 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration23);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval38 = interval32.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval39 = interval32.toInterval();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        mutableInterval40.setInterval((org.joda.time.ReadableInterval) mutableInterval47);
        org.joda.time.Interval interval53 = interval39.gap((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.Period period54 = interval39.toPeriod();
        org.joda.time.Duration duration55 = interval39.toDuration();
        boolean boolean56 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str61 = dateTimeZone59.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone59);
        int int64 = dateTimeZone59.getOffsetFromLocal(1645455058549L);
        long long68 = dateTimeZone59.convertLocalToUTC((long) 2023, false, (-37320000L));
        org.joda.time.DateTime dateTime69 = org.joda.time.DateTime.now(dateTimeZone59);
        org.joda.time.DateTime dateTime70 = dateTime69.toDateTimeISO();
        org.joda.time.Period period71 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime62", (dateTime29.compareTo(dateTime62) == 0) == dateTime29.equals(dateTime62));
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0740");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime9.getMillisOfDay();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = dateTime43.minus((org.joda.time.ReadablePeriod) period50);
        int int53 = dateTime43.getWeekOfWeekyear();
        boolean boolean54 = mutableInterval30.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime57 = dateTime43.withDurationAdded(1645455063488L, 4383442);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(4394936);
        org.joda.time.DateTime dateTime61 = dateTime57.withMillisOfSecond(6);
        int int62 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property63 = dateTime61.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0741");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        int int5 = property3.getMinimumValue();
        org.joda.time.DateTime dateTime7 = property3.setCopy(30);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(4460455);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str27 = dateTimeZone25.getNameKey(1645455028293L);
        int int29 = dateTimeZone25.getOffset(1645455028293L);
        long long33 = dateTimeZone25.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime34 = dateTime19.withZoneRetainFields(dateTimeZone25);
        long long38 = dateTimeZone25.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType40 = periodType39.withMinutesRemoved();
        boolean boolean41 = dateTimeZone25.equals((java.lang.Object) periodType39);
        org.joda.time.DateTime dateTime42 = dateTime14.toDateTime(dateTimeZone25);
        java.util.TimeZone timeZone43 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.lang.String str46 = dateTimeZone44.getShortName(1645492452041L);
        org.joda.time.DateTime dateTime47 = dateTime9.withZone(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime42", (dateTime14.compareTo(dateTime42) == 0) == dateTime14.equals(dateTime42));
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0742");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        boolean boolean32 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property33 = dateTime18.year();
        org.joda.time.DateTime dateTime35 = dateTime18.withMinuteOfHour(22);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime35, periodType36);
        org.joda.time.DateTime dateTime39 = dateTime35.minusWeeks(73);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Instant instant41 = dateTime39.toInstant();
        boolean boolean43 = dateTime39.isAfter(1645455287888L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0743");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        int int8 = property3.get();
        org.joda.time.DateTime dateTime10 = property3.addWrapFieldToCopy(53429880);
        int int11 = dateTime10.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        long long30 = dateTimeZone22.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime31 = dateTime16.withZoneRetainFields(dateTimeZone22);
        long long33 = dateTimeZone22.convertUTCToLocal(1645455040347L);
        boolean boolean34 = dateTimeZone22.isFixed();
        java.lang.String str36 = dateTimeZone22.getNameKey(1645455051434L);
        org.joda.time.DateTime dateTime37 = dateTime10.toDateTime(dateTimeZone22);
        java.lang.String str39 = dateTimeZone22.getNameKey(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime37", (dateTime10.compareTo(dateTime37) == 0) == dateTime10.equals(dateTime37));
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0744");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        boolean boolean14 = dateTime12.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str19 = dateTimeZone17.getShortName(52L);
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(dateTimeZone17);
        boolean boolean21 = dateTime7.equals((java.lang.Object) dateTime12);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod24.setValue((int) (byte) 0, 100);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration40 = duration29.minus(0L);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration47 = duration44.plus((long) 8);
        org.joda.time.Duration duration49 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) '4');
        org.joda.time.Hours hours50 = duration40.toStandardHours();
        mutablePeriod24.add((org.joda.time.ReadablePeriod) hours50);
        mutablePeriod24.setHours(100);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        long long56 = dateTime55.getMillis();
        org.joda.time.DateTime.Property property57 = dateTime55.yearOfEra();
        org.joda.time.DateTime dateTime58 = property57.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean60 = dateTime58.isSupported(dateTimeFieldType59);
        java.lang.String str61 = dateTimeFieldType59.getName();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        java.lang.Object obj74 = mutableInterval69.clone();
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 8, periodType68, chronology75);
        mutablePeriod64.setPeriod((org.joda.time.ReadableDuration) duration66, chronology75);
        org.joda.time.DateTimeField dateTimeField79 = chronology75.minuteOfHour();
        boolean boolean80 = dateTimeFieldType59.isSupported(chronology75);
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType59.getRangeDurationType();
        int int82 = mutablePeriod24.get(durationFieldType81);
        org.joda.time.DateTime dateTime84 = dateTime12.withFieldAdded(durationFieldType81, 2099);
        int int85 = dateTime12.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime20", (dateTime4.compareTo(dateTime20) == 0) == dateTime4.equals(dateTime20));
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0745");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645455028646L, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        java.lang.String str25 = chronology21.toString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str35 = dateTimeZone33.getNameKey(1645455028293L);
        int int37 = dateTimeZone33.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime30.toMutableDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology39 = chronology21.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime40 = dateTime12.withChronology(chronology39);
        org.joda.time.Period period42 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.MutablePeriod mutablePeriod43 = period42.toMutablePeriod();
        int[] intArray45 = chronology39.get((org.joda.time.ReadablePeriod) period42, 1645455086364L);
        org.joda.time.DateTimeField dateTimeField46 = chronology39.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime40", (dateTime12.compareTo(dateTime40) == 0) == dateTime12.equals(dateTime40));
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0746");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        boolean boolean39 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.Period period48 = duration27.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType47);
        org.joda.time.DateTime dateTime50 = dateTime44.minusWeeks(32);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str55 = dateTimeZone53.getNameKey(1645455028293L);
        int int57 = dateTimeZone53.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime44.toMutableDateTime(dateTimeZone53);
        org.joda.time.LocalTime localTime59 = dateTime44.toLocalTime();
        int int60 = dateTime44.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime44 and mutableDateTime58", (dateTime44.compareTo(mutableDateTime58) == 0) == dateTime44.equals(mutableDateTime58));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0747");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        java.lang.String str14 = yearMonthDay13.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0748");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = dateTime9.withYear(53819470);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime27", (dateTime4.compareTo(dateTime27) == 0) == dateTime4.equals(dateTime27));
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0749");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTime dateTime6 = dateTime4.minusDays(4499190);
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime4.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime18 = dateTime9.toDateTime(dateTimeZone15);
        int int19 = dateTime18.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property20 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime21 = property20.roundFloorCopy();
        org.joda.time.DateTime dateTime22 = property20.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime.Property property26 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = property26.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean29 = dateTime27.isSupported(dateTimeFieldType28);
        java.lang.String str30 = dateTimeFieldType28.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 8, periodType37, chronology44);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration35, chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.minuteOfHour();
        boolean boolean49 = dateTimeFieldType28.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField50 = chronology44.monthOfYear();
        org.joda.time.DateTime dateTime51 = dateTime22.withChronology(chronology44);
        int int52 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0750");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        int int22 = property19.get();
        org.joda.time.Interval interval23 = property19.toInterval();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str35 = dateTimeZone33.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime36 = dateTime28.withZone(dateTimeZone33);
        int int37 = dateTime28.getSecondOfMinute();
        boolean boolean38 = interval23.contains((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        org.joda.time.Interval interval43 = property42.toInterval();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Interval interval49 = interval43.withDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime54.plusHours(4365808);
        org.joda.time.Period period57 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean58 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.Chronology chronology67 = chronology65.withUTC();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str72 = dateTimeZone70.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology73 = chronology65.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField74 = chronology73.weekyear();
        org.joda.time.Chronology chronology75 = chronology73.withUTC();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str81 = dateTimeZone79.getShortName(52L);
        boolean boolean82 = dateTimeZone79.isFixed();
        java.util.TimeZone timeZone83 = dateTimeZone79.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone83);
        java.lang.String str86 = dateTimeZone84.getName(1645455135764L);
        org.joda.time.Chronology chronology87 = chronology75.withZone(dateTimeZone84);
        org.joda.time.MutableDateTime mutableDateTime88 = dateTime54.toMutableDateTime(chronology87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and dateTime36", (dateTime28.compareTo(dateTime36) == 0) == dateTime28.equals(dateTime36));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0751");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        java.util.Locale locale23 = null;
        int int24 = dateTimeField22.getMaximumTextLength(locale23);
        boolean boolean25 = dateTimeField22.isSupported();
        java.util.Locale locale26 = null;
        int int27 = dateTimeField22.getMaximumTextLength(locale26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime48.plusSeconds((int) (byte) 10);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period52 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalTime localTime53 = dateTime50.toLocalTime();
        int int54 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localTime53);
        int[] intArray56 = chronology13.get((org.joda.time.ReadablePartial) localTime53, 1645455035272L);
        long long58 = chronology6.set((org.joda.time.ReadablePartial) localTime53, 1645455060565L);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.DateTime dateTime64 = dateTime61.withMillisOfSecond((int) (short) 10);
        boolean boolean66 = dateTime64.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str71 = dateTimeZone69.getShortName(52L);
        org.joda.time.DateTime dateTime72 = dateTime64.toDateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((java.lang.Object) 1645455052362L, dateTimeZone69);
        org.joda.time.DateTime dateTime74 = localTime53.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.TimeOfDay timeOfDay75 = dateTime73.toTimeOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime64 and dateTime72", (dateTime64.compareTo(dateTime72) == 0) == dateTime64.equals(dateTime72));
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0752");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra(32);
        long long15 = dateTime14.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0753");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int9 = dateTime4.get(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime14.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        int int23 = dateTimeZone19.getOffset(1645455028293L);
        java.lang.String str25 = dateTimeZone19.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime27 = dateTime4.toDateTime(dateTimeZone19);
        java.lang.String str28 = dateTime4.toString();
        org.joda.time.DateTime dateTime30 = dateTime4.withYearOfCentury(45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime26", (dateTime4.compareTo(dateTime26) == 0) == dateTime4.equals(dateTime26));
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0754");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str35 = dateTimeZone33.getNameKey(1645455028293L);
        int int37 = dateTimeZone33.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime38 = dateTime28.toDateTime(dateTimeZone33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime42 = dateTime20.minusSeconds(292278993);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime42.toString(dateTimeFormatter43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime38", (dateTime4.compareTo(dateTime38) == 0) == dateTime4.equals(dateTime38));
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0755");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str6 = dateTimeZone4.getShortName(52L);
        org.joda.time.DateTime dateTime7 = dateTime1.withZone(dateTimeZone4);
        long long11 = dateTimeZone4.convertLocalToUTC(1645455218657L, true, 1645455220574L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime7", (dateTime1.compareTo(dateTime7) == 0) == dateTime1.equals(dateTime7));
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0756");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(2);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        int int10 = mutablePeriod9.getYears();
        org.joda.time.DateTime dateTime12 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod9, (int) (short) 1);
        mutablePeriod9.addMillis(37320000);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds(1645455043186L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(1645455032819L);
        boolean boolean19 = duration16.isEqual((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration16.withMillis(1645455060010L);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        mutableInterval22.setInterval(100000L, 1645455028646L);
        long long30 = mutableInterval22.getStartMillis();
        mutableInterval22.setEndMillis(1645455047752L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period43 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration45 = duration34.minus(0L);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((-1L), 1L, periodType50, chronology51);
        java.lang.String str53 = periodType50.toString();
        java.lang.String str54 = periodType50.getName();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1645455029643L, periodType50);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, readableInstant46, periodType50);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval57.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime dateTime66 = dateTime63.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime68 = dateTime66.plusSeconds((int) (byte) 10);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration70 = duration34.minus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration73 = duration34.withDurationAdded(1645455036379L, 22);
        mutableInterval22.setDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Chronology chronology75 = mutableInterval22.getChronology();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration16, chronology75);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(dateTimeZone78);
        org.joda.time.DateTime.Property property80 = dateTime79.year();
        org.joda.time.DateTimeField dateTimeField81 = property80.getField();
        int int82 = property80.getMaximumValueOverall();
        org.joda.time.DateTime dateTime83 = property80.roundFloorCopy();
        org.joda.time.DateTime dateTime84 = dateTime83.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime79", (dateTime1.compareTo(dateTime79) == 0) == dateTime1.equals(dateTime79));
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0757");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(1645455127446L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime8.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime19 = dateTime17.withSecondOfMinute(4);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        int int27 = dateTime26.getDayOfMonth();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime43 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.withZoneRetainFields(dateTimeZone45);
        boolean boolean47 = dateTime26.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str60 = dateTimeZone58.getNameKey(1645455028293L);
        int int62 = dateTimeZone58.getOffset(1645455028293L);
        long long66 = dateTimeZone58.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime67 = dateTime52.withZoneRetainFields(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime26.toMutableDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((java.lang.Object) 1645455063488L, dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime17.toMutableDateTime(dateTimeZone58);
        org.joda.time.Interval interval71 = duration1.toIntervalTo((org.joda.time.ReadableInstant) dateTime17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime68", (dateTime6.compareTo(mutableDateTime68) == 0) == dateTime6.equals(mutableDateTime68));
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0758");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology6.years();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime21 = dateTime16.withFieldAdded(durationFieldType19, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getShortName(52L);
        boolean boolean27 = dateTimeZone24.isFixed();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone24.getName(1645455042879L, locale29);
        org.joda.time.DateTime dateTime31 = dateTime21.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = dateTime11.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTimeISO();
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime41 = dateTime40.toLocalDateTime();
        boolean boolean42 = dateTimeZone24.isLocalDateTimeGap(localDateTime41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime32", (dateTime11.compareTo(dateTime32) == 0) == dateTime11.equals(dateTime32));
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0759");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = property12.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime19 = property18.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean21 = dateTime19.isSupported(dateTimeFieldType20);
        java.lang.String str22 = dateTimeFieldType20.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 8, periodType29, chronology36);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration27, chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.minuteOfHour();
        boolean boolean41 = dateTimeFieldType20.isSupported(chronology36);
        org.joda.time.DateTimeField dateTimeField42 = chronology36.monthOfYear();
        org.joda.time.DateTime dateTime43 = dateTime14.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField44 = chronology36.dayOfWeek();
        org.joda.time.DurationField durationField45 = chronology36.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0760");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology7.years();
        long long15 = chronology7.add(1645455034244L, 1645455035827L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField16 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType0.getField(chronology7);
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField17.getAsText(9, locale19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str33 = dateTimeZone31.getNameKey(1645455028293L);
        int int35 = dateTimeZone31.getOffset(1645455028293L);
        long long39 = dateTimeZone31.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime40 = dateTime25.withZoneRetainFields(dateTimeZone31);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.Duration duration55 = duration42.withMillis(1645455034114L);
        java.lang.String str56 = duration42.toString();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfEra();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.minuteOfDay();
        org.joda.time.DurationField durationField67 = chronology64.halfdays();
        org.joda.time.Period period68 = duration42.toPeriod(periodType57, chronology64);
        org.joda.time.DateTime dateTime69 = dateTime40.withChronology(chronology64);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes(53440972);
        org.joda.time.LocalDate localDate72 = dateTime69.toLocalDate();
        int int73 = dateTimeField17.getMinimumValue((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.Chronology chronology74 = localDate72.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime40 and dateTime69", (dateTime40.compareTo(dateTime69) == 0) == dateTime40.equals(dateTime69));
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0761");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        int int6 = dateTimeZone2.getOffset(1645455028293L);
        java.lang.String str8 = dateTimeZone2.getShortName(1645455037062L);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone2.getName(1645455057010L, locale10);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone2);
        java.lang.String str13 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime18.withDayOfMonth((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 8, periodType30, chronology37);
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration28, chronology37);
        java.lang.Object obj41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(obj41, periodType42, chronology43);
        org.joda.time.Period period45 = duration28.toPeriod(periodType42);
        org.joda.time.DateTime dateTime46 = dateTime18.minus((org.joda.time.ReadableDuration) duration28);
        int int47 = dateTime18.getSecondOfDay();
        boolean boolean48 = dateTimeZone2.equals((java.lang.Object) int47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime15", (dateTime12.compareTo(dateTime15) == 0) == dateTime12.equals(dateTime15));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0762");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, readableInstant8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime.Property property22 = dateTime13.year();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 3, 1645455035827L, dateTimeZone25);
        boolean boolean27 = dateTime13.equals((java.lang.Object) interval26);
        boolean boolean28 = mutableInterval9.contains((org.joda.time.ReadableInterval) interval26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str35 = dateTimeZone33.getShortName(52L);
        org.joda.time.DateTime dateTime36 = dateTime30.withZone(dateTimeZone33);
        org.joda.time.Interval interval37 = interval26.withEnd((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Interval interval38 = interval26.toInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and dateTime36", (dateTime30.compareTo(dateTime36) == 0) == dateTime30.equals(dateTime36));
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0763");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str6 = dateTimeZone4.getShortName(52L);
        org.joda.time.DateTime dateTime7 = dateTime1.withZone(dateTimeZone4);
        long long9 = dateTimeZone4.nextTransition(4460186193L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime7", (dateTime1.compareTo(dateTime7) == 0) == dateTime1.equals(dateTime7));
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0764");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        boolean boolean22 = dateTimeField20.isLeap(1645455027824L);
        int int23 = dateTime4.get(dateTimeField20);
        int int25 = dateTimeField20.getMinimumValue(1645455079096L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        int int33 = yearMonthDay32.size();
        int int34 = dateTimeField20.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay32);
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeField20.getAsShortText(1645455170259L, locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0765");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 0);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType48 = periodType47.withMinutesRemoved();
        org.joda.time.Period period49 = mutableInterval0.toPeriod(periodType48);
        org.joda.time.Duration duration50 = mutableInterval0.toDuration();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.withMillisOfSecond((int) (short) 10);
        boolean boolean57 = dateTime55.isBefore((-1L));
        int int58 = dateTime55.getDayOfWeek();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTime dateTime64 = dateTime61.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime66 = dateTime64.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str71 = dateTimeZone69.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime72 = dateTime64.withZone(dateTimeZone69);
        org.joda.time.DateTime dateTime74 = dateTime72.withYearOfEra(32);
        int int75 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Chronology chronology76 = dateTime72.getChronology();
        org.joda.time.DateTime.Property property77 = dateTime72.weekOfWeekyear();
        org.joda.time.DateTime dateTime78 = property77.getDateTime();
        java.lang.String str79 = property77.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime64 and dateTime72", (dateTime64.compareTo(dateTime72) == 0) == dateTime64.equals(dateTime72));
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0766");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis((long) 9);
        org.joda.time.Instant instant21 = instant19.minus(1645455060010L);
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0767");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime10.toMutableDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod18.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTimeISO();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period34 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration36 = duration25.minus(0L);
        org.joda.time.Duration duration38 = duration25.withMillis(1645455034114L);
        org.joda.time.Instant instant39 = instant22.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType51 = periodType50.withYearsRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        java.lang.Object obj58 = mutableInterval53.clone();
        org.joda.time.Chronology chronology59 = mutableInterval53.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfEra();
        org.joda.time.Period period61 = new org.joda.time.Period(1645455029672L, (long) 3, periodType51, chronology59);
        org.joda.time.DurationField durationField62 = chronology59.eras();
        org.joda.time.DateTime dateTime63 = dateTime41.toDateTime(chronology59);
        mutablePeriod18.setPeriod((org.joda.time.ReadableInstant) instant22, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Instant instant66 = instant22.withMillis(1645455043927L);
        org.joda.time.Instant instant68 = instant66.plus(1645455160151L);
        org.joda.time.Instant instant71 = instant68.withDurationAdded(1645455127185L, 2720);
        java.lang.Object obj72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period(obj72, periodType73, chronology74);
        int int76 = periodType73.size();
        org.joda.time.PeriodType periodType77 = periodType73.withWeeksRemoved();
        org.joda.time.PeriodType periodType78 = periodType73.withMonthsRemoved();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) instant68, periodType73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant22", (dateTime1.compareTo(instant22) == 0) == dateTime1.equals(instant22));
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0768");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(1645455046184L, 3);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration25 = duration14.minus(0L);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.plus((long) 8);
        org.joda.time.Duration duration34 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime.Property property38 = dateTime36.yearOfEra();
        org.joda.time.Interval interval39 = property38.toInterval();
        java.util.Locale locale40 = null;
        int int41 = property38.getMaximumTextLength(locale40);
        java.lang.String str42 = property38.getName();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period53 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration55 = duration44.minus(0L);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1L), 1L, periodType60, chronology61);
        java.lang.String str63 = periodType60.toString();
        java.lang.String str64 = periodType60.getName();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1645455029643L, periodType60);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, readableInstant56, periodType60);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        long long74 = dateTime73.getMillis();
        org.joda.time.DateTime dateTime76 = dateTime73.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime78 = dateTime76.plusSeconds((int) (byte) 10);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Duration duration80 = duration44.minus((org.joda.time.ReadableDuration) duration70);
        boolean boolean81 = property38.equals((java.lang.Object) duration44);
        int int82 = duration34.compareTo((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration83 = duration44.toDuration();
        org.joda.time.Instant instant85 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration44, 757);
        org.joda.time.Instant instant87 = instant12.minus(30325881600000L);
        org.joda.time.MutableDateTime mutableDateTime88 = instant87.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant12", (dateTime10.compareTo(instant12) == 0) == dateTime10.equals(instant12));
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0769");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean15 = period13.equals((java.lang.Object) dateTimeFieldType14);
        int int16 = dateTime10.get(dateTimeFieldType14);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateTime dateTime19 = dateTime1.withField(dateTimeFieldType14, 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getShortName(52L);
        boolean boolean25 = dateTimeZone22.isFixed();
        java.util.TimeZone timeZone26 = dateTimeZone22.toTimeZone();
        long long28 = dateTimeZone22.previousTransition(1645455122326L);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime1, dateTimeZone22);
        long long31 = dateTimeZone22.convertUTCToLocal(1645455266561L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime29", (dateTime1.compareTo(dateTime29) == 0) == dateTime1.equals(dateTime29));
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0770");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) -1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period13 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration15 = duration4.minus(0L);
        org.joda.time.Chronology chronology16 = null;
        mutablePeriod0.setPeriod((org.joda.time.ReadableDuration) duration4, chronology16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = duration21.toPeriod();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        boolean boolean30 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration32 = duration21.minus(1645455031834L);
        mutablePeriod0.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str43 = dateTimeZone41.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime44 = dateTime35.toDateTime(dateTimeZone41);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period55 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration57 = duration46.minus(0L);
        org.joda.time.Duration duration59 = duration46.withMillis(1645455034114L);
        java.lang.String str60 = duration46.toString();
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType62 = periodType61.withYearsRemoved();
        org.joda.time.PeriodType periodType63 = periodType62.withSecondsRemoved();
        org.joda.time.Period period64 = duration46.toPeriod(periodType63);
        org.joda.time.PeriodType periodType65 = periodType63.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime35, periodType65);
        mutablePeriod66.setHours((-834));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime44", (dateTime6.compareTo(dateTime44) == 0) == dateTime6.equals(dateTime44));
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0771");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears(4369741);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str13 = dateTimeZone11.getShortName(52L);
        boolean boolean14 = dateTimeZone11.isFixed();
        long long16 = dateTimeZone11.convertUTCToLocal(1645455038369L);
        java.lang.String str18 = dateTimeZone11.getName(1645455046184L);
        org.joda.time.DateTime dateTime19 = dateTime6.toDateTime(dateTimeZone11);
        boolean boolean21 = dateTimeZone11.equals((java.lang.Object) "2022-02-21T14:51:09.504Z");
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime19", (dateTime4.compareTo(dateTime19) == 0) == dateTime4.equals(dateTime19));
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0772");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Interval interval11 = interval5.withDurationAfterStart((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Interval interval12 = interval5.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        mutableInterval13.setInterval((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.Interval interval26 = interval12.gap((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        boolean boolean28 = mutableInterval27.containsNow();
        boolean boolean29 = interval12.isBefore((org.joda.time.ReadableInterval) mutableInterval27);
        boolean boolean31 = mutableInterval27.contains(1645455037444L);
        org.joda.time.Duration duration32 = mutableInterval27.toDuration();
        org.joda.time.Instant instant33 = instant0.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime34 = instant0.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant0", (dateTime2.compareTo(instant0) == 0) == dateTime2.equals(instant0));
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0773");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration9 = duration6.plus((long) 8);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period15 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.toDuration();
        boolean boolean17 = duration9.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant19 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration13, 39092882);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval30 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval31 = interval24.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Interval interval45 = interval31.gap((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.Period period46 = interval31.toPeriod();
        org.joda.time.Duration duration47 = interval31.toDuration();
        org.joda.time.Duration duration50 = new org.joda.time.Duration(1645455066480L, 1645455092278L);
        boolean boolean51 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Seconds seconds52 = duration50.toStandardSeconds();
        org.joda.time.Duration duration53 = duration13.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod56.setValue((int) (byte) 0, 100);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval60.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        mutableInterval60.setInterval(100000L, 1645455028646L);
        long long68 = mutableInterval60.getStartMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval69.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration72);
        mutableInterval60.setDurationAfterStart((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Period period75 = duration72.toPeriod();
        mutablePeriod56.add((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration78 = org.joda.time.Duration.millis(1651503052701L);
        mutablePeriod56.setPeriod((org.joda.time.ReadableDuration) duration78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Duration duration82 = new org.joda.time.Duration(1645455038369L);
        org.joda.time.Period period83 = new org.joda.time.Period(readableInstant80, (org.joda.time.ReadableDuration) duration82);
        int int84 = duration78.compareTo((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration85 = duration50.minus((org.joda.time.ReadableDuration) duration78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0774");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 4409715);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime21 = dateTime13.withZone(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.DateTime.Property property23 = dateTime21.weekyear();
        org.joda.time.DateTime dateTime24 = property23.roundCeilingCopy();
        org.joda.time.DateTime dateTime26 = dateTime24.withYearOfEra(4478865);
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears(53591103);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant5, (org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant5", (dateTime4.compareTo(instant5) == 0) == dateTime4.equals(instant5));
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0775");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        int int22 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str40 = dateTimeZone38.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime41 = dateTime32.toDateTime(dateTimeZone38);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.millisOfSecond();
        org.joda.time.DateTime dateTime44 = property43.roundFloorCopy();
        org.joda.time.DateTime dateTime45 = property43.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime.Property property49 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime50 = property49.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean52 = dateTime50.isSupported(dateTimeFieldType51);
        java.lang.String str53 = dateTimeFieldType51.getName();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        java.lang.Object obj66 = mutableInterval61.clone();
        org.joda.time.Chronology chronology67 = mutableInterval61.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 8, periodType60, chronology67);
        mutablePeriod56.setPeriod((org.joda.time.ReadableDuration) duration58, chronology67);
        org.joda.time.DateTimeField dateTimeField71 = chronology67.minuteOfHour();
        boolean boolean72 = dateTimeFieldType51.isSupported(chronology67);
        org.joda.time.DateTimeField dateTimeField73 = chronology67.monthOfYear();
        org.joda.time.DateTime dateTime74 = dateTime45.withChronology(chronology67);
        org.joda.time.DateTimeField dateTimeField75 = chronology67.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology67.dayOfWeek();
        mutablePeriod28.setPeriod(1645455255452L, 1645455420238L, chronology67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime41", (dateTime3.compareTo(dateTime41) == 0) == dateTime3.equals(dateTime41));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0776");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears(4369741);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str13 = dateTimeZone11.getShortName(52L);
        boolean boolean14 = dateTimeZone11.isFixed();
        long long16 = dateTimeZone11.convertUTCToLocal(1645455038369L);
        java.lang.String str18 = dateTimeZone11.getName(1645455046184L);
        org.joda.time.DateTime dateTime19 = dateTime6.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime19.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime19", (dateTime4.compareTo(dateTime19) == 0) == dateTime4.equals(dateTime19));
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0777");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime15 = property14.roundCeilingCopy();
        java.util.Date date16 = dateTime15.toDate();
        java.lang.Object obj17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType19 = periodType18.withMinutesRemoved();
        int int20 = periodType19.size();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime25.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Interval interval44 = interval38.withDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        boolean boolean45 = dateTime25.equals((java.lang.Object) interval38);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        boolean boolean56 = mutableInterval46.contains((org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime55.getMillisOfDay();
        org.joda.time.DateTime dateTime59 = dateTime55.plusYears(3);
        boolean boolean60 = interval38.contains((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology61 = interval38.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(obj17, periodType19, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = dateTimeField63.getType();
        org.joda.time.DateTime.Property property65 = dateTime15.property(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType64.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0778");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.Instant instant25 = instant22.plus(1645455031834L);
        org.joda.time.Instant instant27 = instant22.minus(1645455037062L);
        org.joda.time.Instant instant28 = instant22.toInstant();
        org.joda.time.Instant instant30 = instant22.withMillis(1645455280011L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0779");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration9 = duration6.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        boolean boolean23 = instant1.equals((java.lang.Object) dateTime22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        mutableInterval24.setInterval(100000L, 1645455028646L);
        long long32 = mutableInterval24.getStartMillis();
        mutableInterval24.setEndMillis(1645455047752L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration36.minus(0L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((-1L), 1L, periodType52, chronology53);
        java.lang.String str55 = periodType52.toString();
        java.lang.String str56 = periodType52.getName();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1645455029643L, periodType52);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, readableInstant48, periodType52);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval59.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime dateTime68 = dateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime70 = dateTime68.plusSeconds((int) (byte) 10);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration62, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration72 = duration36.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration75 = duration36.withDurationAdded(1645455036379L, 22);
        mutableInterval24.setDurationAfterStart((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Instant instant78 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration75, 2022);
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        long long80 = mutableInterval79.toDurationMillis();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval79.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration85 = duration82.plus((long) 8);
        org.joda.time.Instant instant87 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration85, 52);
        org.joda.time.Chronology chronology88 = instant1.getChronology();
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) 53648019, chronology88);
        org.joda.time.DateTime dateTime91 = dateTime89.minus(1645455142681L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0780");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028646L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        int int23 = dateTimeZone19.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime16.toMutableDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology25 = chronology7.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField26 = chronology7.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime24", (dateTime16.compareTo(mutableDateTime24) == 0) == dateTime16.equals(mutableDateTime24));
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0781");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        org.joda.time.DateTime dateTime7 = property3.getDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis(100);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime16.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime39 = dateTime7.withZoneRetainFields(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime38", (dateTime16.compareTo(mutableDateTime38) == 0) == dateTime16.equals(mutableDateTime38));
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0782");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028646L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        int int23 = dateTimeZone19.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime16.toMutableDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology25 = chronology7.withZone(dateTimeZone19);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone19.getName(1645455397037L, locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime24", (dateTime16.compareTo(mutableDateTime24) == 0) == dateTime16.equals(mutableDateTime24));
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0783");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(999);
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime3 = instant2.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration10 = duration7.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTime dateTime19 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.withZoneRetainFields(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        boolean boolean24 = instant2.equals((java.lang.Object) dateTime23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        mutableInterval25.setInterval(100000L, 1645455028646L);
        long long33 = mutableInterval25.getStartMillis();
        mutableInterval25.setEndMillis(1645455047752L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1L), 1L, periodType53, chronology54);
        java.lang.String str56 = periodType53.toString();
        java.lang.String str57 = periodType53.getName();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1645455029643L, periodType53);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, readableInstant49, periodType53);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval60.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime dateTime69 = dateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime71 = dateTime69.plusSeconds((int) (byte) 10);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration63, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration73 = duration37.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration76 = duration37.withDurationAdded(1645455036379L, 22);
        mutableInterval25.setDurationAfterStart((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Instant instant79 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration76, 2022);
        org.joda.time.MutableDateTime mutableDateTime80 = instant2.toMutableDateTimeISO();
        boolean boolean81 = period1.equals((java.lang.Object) mutableDateTime80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime3", (instant2.compareTo(dateTime3) == 0) == instant2.equals(dateTime3));
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0784");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        int int9 = dateTime1.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration33 = duration22.minus(0L);
        org.joda.time.DateTime dateTime35 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) (byte) 0);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        boolean boolean49 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration37);
        long long50 = duration37.getStandardMinutes();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration54.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTime dateTime66 = dateTime59.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime66.withZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTime dateTime74 = dateTime71.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime75 = dateTime74.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay76 = dateTime75.toYearMonthDay();
        int int77 = yearMonthDay76.size();
        org.joda.time.DateTime dateTime78 = dateTime66.withFields((org.joda.time.ReadablePartial) yearMonthDay76);
        org.joda.time.Chronology chronology79 = yearMonthDay76.getChronology();
        org.joda.time.Period period80 = new org.joda.time.Period((java.lang.Object) duration37, chronology79);
        org.joda.time.DurationField durationField81 = chronology79.years();
        org.joda.time.DateTime dateTime82 = dateTime1.withChronology(chronology79);
        org.joda.time.DateTimeField dateTimeField83 = chronology79.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime82", (dateTime1.compareTo(dateTime82) == 0) == dateTime1.equals(dateTime82));
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0785");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime14 = dateTime5.minusSeconds((int) ' ');
        org.joda.time.DateTime.Property property15 = dateTime5.era();
        boolean boolean16 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime5.plusSeconds(53601602);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period(1645455029672L, (long) 3, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = dateTimeField34.getLeapDurationField();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusSeconds((int) (byte) 10);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Period period60 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalTime localTime61 = dateTime58.toLocalTime();
        java.lang.String str62 = localTime61.toString();
        int int63 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localTime61);
        org.joda.time.Chronology chronology64 = localTime61.getChronology();
        org.joda.time.DateTime dateTime65 = dateTime18.toDateTime(chronology64);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1645455326422L, 1645455079096L, chronology64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime65", (dateTime18.compareTo(dateTime65) == 0) == dateTime18.equals(dateTime65));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0786");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = instant22.get(dateTimeFieldType23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology39 = chronology31.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType23.getField(chronology39);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeField41.getAsShortText(4614802, locale43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0787");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getShortName(52L);
        org.joda.time.DateTime dateTime12 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime4.plusSeconds(2022);
        org.joda.time.DateTime dateTime16 = dateTime4.plusWeeks(22);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        long long20 = dateTimeField18.roundCeiling(1645455152632L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0788");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusMinutes((int) (byte) 10);
        org.joda.time.Period period6 = period4.withHours((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMillis(100);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str28 = dateTimeZone26.getNameKey(1645455028293L);
        int int30 = dateTimeZone26.getOffset(1645455028293L);
        long long34 = dateTimeZone26.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime14.toMutableDateTime(dateTimeZone26);
        org.joda.time.Duration duration37 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Duration duration39 = duration37.minus(1645455110107L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period41.negated();
        org.joda.time.Period period44 = period41.withDays(1);
        int int45 = period41.getMillis();
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = period41.getFieldTypes();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.forFields(durationFieldTypeArray46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone50);
        org.joda.time.Period period52 = org.joda.time.Period.ZERO;
        org.joda.time.Period period54 = period52.minusSeconds((int) (short) 1);
        org.joda.time.Period period56 = period52.plusWeeks((int) (short) -1);
        org.joda.time.Period period58 = period52.minusMillis(4);
        org.joda.time.Interval interval59 = interval51.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period61 = period52.withHours((int) 'a');
        org.joda.time.DurationFieldType durationFieldType63 = period52.getFieldType(0);
        java.lang.String str64 = durationFieldType63.toString();
        boolean boolean65 = periodType47.isSupported(durationFieldType63);
        org.joda.time.PeriodType periodType66 = periodType47.withMillisRemoved();
        org.joda.time.Period period67 = duration39.toPeriodTo(readableInstant40, periodType47);
        boolean boolean69 = duration39.equals((java.lang.Object) "2022-02-22T01:16:46.607+10:22");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and mutableDateTime36", (dateTime14.compareTo(mutableDateTime36) == 0) == dateTime14.equals(mutableDateTime36));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0789");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.secondOfDay();
        org.joda.time.DurationField durationField20 = dateTimeField19.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField20, and durationField14", !(durationField14.compareTo(durationField20) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField20.compareTo(durationField14))));
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0790");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime23.toDateMidnight();
        org.joda.time.DateTime dateTime27 = dateTime23.plus(1645455035670L);
        int int28 = dateTime27.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str33 = dateTimeZone31.getShortName(52L);
        boolean boolean34 = dateTimeZone31.isFixed();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645455028293L);
        long long41 = dateTimeZone37.convertUTCToLocal(1645455035225L);
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone37, 1645455037008L);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime27, dateTimeZone37);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period55 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration57 = duration46.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.DateTime dateTime62 = dateTime59.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime(chronology63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = duration57.toPeriodTo((org.joda.time.ReadableInstant) dateTime64, periodType65);
        int int67 = dateTime64.getDayOfMonth();
        org.joda.time.DateTime dateTime69 = dateTime64.plusMinutes(0);
        org.joda.time.DateTime dateTime71 = dateTime69.withYear(141);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str79 = dateTimeZone77.getNameKey(1645455028293L);
        int int81 = dateTimeZone77.getOffset(1645455028293L);
        java.lang.String str83 = dateTimeZone77.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone77);
        long long86 = dateTimeZone74.getMillisKeepLocal(dateTimeZone77, 1645455029375L);
        org.joda.time.DateTime dateTime87 = dateTime71.toDateTime(dateTimeZone77);
        java.lang.String str88 = dateTimeZone77.getID();
        long long90 = dateTimeZone37.getMillisKeepLocal(dateTimeZone77, 1645455361519L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime84", (dateTime1.compareTo(dateTime84) == 0) == dateTime1.equals(dateTime84));
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0791");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime.Property property17 = dateTime15.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant10", (dateTime1.compareTo(instant10) == 0) == dateTime1.equals(instant10));
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0792");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.yearOfCentury();
        int int17 = dateTime6.get(dateTimeField16);
        long long18 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime6.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str34 = dateTimeZone32.getNameKey(1645455028293L);
        int int36 = dateTimeZone32.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime37 = dateTime27.toDateTime(dateTimeZone32);
        boolean boolean38 = dateTime6.equals((java.lang.Object) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property42.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTime dateTime51 = dateTime48.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str56 = dateTimeZone54.getNameKey(1645455028293L);
        int int58 = dateTimeZone54.getOffset(1645455028293L);
        long long62 = dateTimeZone54.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime63 = dateTime48.withZoneRetainFields(dateTimeZone54);
        long long67 = dateTimeZone54.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType69 = periodType68.withMinutesRemoved();
        boolean boolean70 = dateTimeZone54.equals((java.lang.Object) periodType68);
        org.joda.time.DateTime dateTime71 = dateTime43.toDateTime(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime74 = dateTime43.withField(dateTimeFieldType72, 53);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime43.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        long long83 = dateTime82.getMillis();
        org.joda.time.DateTime dateTime85 = dateTime82.plusWeeks((int) (byte) 10);
        boolean boolean86 = mutableInterval76.contains((org.joda.time.ReadableInstant) dateTime85);
        mutableInterval76.setEndMillis(1645455028293L);
        org.joda.time.Duration duration90 = new org.joda.time.Duration((java.lang.Object) 1645455040972L);
        org.joda.time.Duration duration92 = duration90.minus(1645455048468L);
        mutableInterval76.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Period period94 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration90);
        int int95 = dateTime43.getDayOfWeek();
        org.joda.time.Duration duration96 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime37", (dateTime4.compareTo(dateTime37) == 0) == dateTime4.equals(dateTime37));
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0793");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Interval interval12 = interval10.gap(readableInterval11);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Period period28 = new org.joda.time.Period(1645455029672L, (long) 3, periodType18, chronology26);
        mutablePeriod13.add(1645455030370L, chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        boolean boolean48 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property49 = dateTime34.year();
        org.joda.time.Duration duration50 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean51 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration57 = interval55.toDuration();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.Chronology chronology67 = chronology65.withUTC();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology67.getZone();
        java.util.Locale locale70 = null;
        java.lang.String str71 = dateTimeZone68.getShortName(1645455068377L, locale70);
        java.util.Locale locale73 = null;
        java.lang.String str74 = dateTimeZone68.getShortName(0L, locale73);
        org.joda.time.DateTime dateTime75 = dateTime34.withZone(dateTimeZone68);
        long long79 = dateTimeZone68.convertLocalToUTC(1645455040347L, false, 1645455056014L);
        java.lang.String str80 = dateTimeZone68.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime75", (dateTime34.compareTo(dateTime75) == 0) == dateTime34.equals(dateTime75));
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0794");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean9 = period7.equals((java.lang.Object) dateTimeFieldType8);
        int int10 = dateTime4.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime12 = dateTime4.minusMillis(9);
        int int13 = dateTime4.getMonthOfYear();
        boolean boolean15 = dateTime4.isEqual(1645455157952L);
        org.joda.time.DateTime.Property property16 = dateTime4.dayOfYear();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime32);
        mutablePeriod33.addMillis((int) '4');
        int int36 = mutablePeriod33.getWeeks();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant38.toInstant();
        mutablePeriod33.setPeriod(readableInstant37, (org.joda.time.ReadableInstant) instant39);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant38", (dateTime1.compareTo(instant38) == 0) == dateTime1.equals(instant38));
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0795");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod16.addMillis((int) '4');
        int int19 = mutablePeriod16.getWeeks();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        mutablePeriod16.setPeriod(readableInstant20, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.format.PeriodFormatter periodFormatter24 = null;
        java.lang.String str25 = mutablePeriod16.toString(periodFormatter24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant21", (dateTime8.compareTo(instant21) == 0) == dateTime8.equals(instant21));
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0796");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology11.getZone();
        org.joda.time.DurationField durationField21 = chronology11.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField21, and durationField14", !(durationField14.compareTo(durationField21) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField21.compareTo(durationField14))));
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0797");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.Instant instant3 = instant1.plus(1645488000000L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.Instant instant6 = instant3.withMillis(1645455277605L);
        org.joda.time.Instant instant8 = instant6.withMillis(1645455448444L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime4", (instant3.compareTo(mutableDateTime4) == 0) == instant3.equals(mutableDateTime4));
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0798");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property23.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean26 = dateTime24.isSupported(dateTimeFieldType25);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((-1L), 1L, periodType30, chronology31);
        java.lang.String str33 = periodType30.toString();
        java.lang.String str34 = periodType30.getName();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645455029643L, periodType30);
        org.joda.time.PeriodType periodType36 = periodType30.withWeeksRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime24, periodType30);
        org.joda.time.DateTime dateTime39 = dateTime19.minusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str49 = dateTimeZone47.getNameKey(1645455028293L);
        int int51 = dateTimeZone47.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime44.toMutableDateTime(dateTimeZone47);
        org.joda.time.DateTime.Property property53 = dateTime44.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean55 = dateTime44.isSupported(dateTimeFieldType54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int57 = dateTime44.get(dateTimeFieldType56);
        org.joda.time.DateTime.Property property58 = dateTime39.property(dateTimeFieldType56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime44 and mutableDateTime52", (dateTime44.compareTo(mutableDateTime52) == 0) == dateTime44.equals(mutableDateTime52));
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0799");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        int int13 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime18 = property17.roundFloorCopy();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean23 = period21.equals((java.lang.Object) dateTimeFieldType22);
        int int24 = dateTime18.get(dateTimeFieldType22);
        org.joda.time.DateTime.Property property25 = dateTime4.property(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.joda.time.DurationField durationField27 = property25.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0800");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime6 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(4381721);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        int int23 = dateTimeZone19.getOffset(1645455028293L);
        long long27 = dateTimeZone19.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime28 = dateTime13.withZoneRetainFields(dateTimeZone19);
        long long30 = dateTimeZone19.convertUTCToLocal(1645455040347L);
        boolean boolean31 = dateTimeZone19.isFixed();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology40.getZone();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone41.getShortName(1645455068377L, locale43);
        long long47 = dateTimeZone41.convertLocalToUTC(1645455037307L, false);
        long long49 = dateTimeZone19.getMillisKeepLocal(dateTimeZone41, 10001L);
        org.joda.time.DateTime dateTime50 = dateTime6.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        mutableInterval52.setEndMillis(10L);
        java.lang.String str56 = mutableInterval52.toString();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((java.lang.Object) mutableInterval52);
        boolean boolean58 = dateTime51.equals((java.lang.Object) mutableInterval52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime51", (dateTime6.compareTo(dateTime51) == 0) == dateTime6.equals(dateTime51));
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0801");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusSeconds((int) (byte) 10);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime37);
        long long41 = duration40.getMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = duration45.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withZoneRetainFields(dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTime dateTime65 = dateTime62.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime66 = dateTime65.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay67 = dateTime66.toYearMonthDay();
        int int68 = yearMonthDay67.size();
        org.joda.time.DateTime dateTime69 = dateTime57.withFields((org.joda.time.ReadablePartial) yearMonthDay67);
        org.joda.time.DateTime dateTime71 = dateTime57.withMonthOfYear((int) (byte) 1);
        org.joda.time.Period period72 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        boolean boolean77 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj78 = mutableInterval73.clone();
        org.joda.time.Chronology chronology79 = mutableInterval73.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfEra();
        org.joda.time.Chronology chronology81 = chronology79.withUTC();
        org.joda.time.DateTimeZone dateTimeZone82 = chronology81.getZone();
        boolean boolean83 = dateTimeZone82.isFixed();
        org.joda.time.DateTime dateTime84 = dateTime57.toDateTime(dateTimeZone82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0802");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime5 = dateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean15 = period13.equals((java.lang.Object) dateTimeFieldType14);
        int int16 = dateTime10.get(dateTimeFieldType14);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType14.getDurationType();
        org.joda.time.DateTime dateTime19 = dateTime1.withField(dateTimeFieldType14, 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getShortName(52L);
        boolean boolean25 = dateTimeZone22.isFixed();
        java.util.TimeZone timeZone26 = dateTimeZone22.toTimeZone();
        long long28 = dateTimeZone22.previousTransition(1645455122326L);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime1, dateTimeZone22);
        org.joda.time.DateTime.Property property30 = dateTime1.yearOfCentury();
        int int31 = dateTime1.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime29", (dateTime7.compareTo(dateTime29) == 0) == dateTime7.equals(dateTime29));
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0803");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.Instant instant4 = instant0.plus(1645455259268L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration28 = duration17.minus(0L);
        org.joda.time.DateTime dateTime30 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(chronology36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime40 = dateTime35.withFieldAdded(durationFieldType38, (int) (short) 0);
        int int41 = dateTime35.getDayOfWeek();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = dateTime43.toString(dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTime dateTime50 = dateTime47.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime(chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes(0);
        boolean boolean64 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property65 = dateTime50.year();
        org.joda.time.DateTime dateTime67 = dateTime50.withMinuteOfHour(22);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        long long69 = mutableInterval68.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        boolean boolean72 = mutableInterval68.overlaps((org.joda.time.ReadableInterval) mutableInterval70);
        java.lang.Object obj73 = mutableInterval68.clone();
        org.joda.time.Chronology chronology74 = mutableInterval68.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.yearOfEra();
        long long78 = dateTimeField75.addWrapField(1645455030463L, 22);
        int int79 = dateTime50.get(dateTimeField75);
        org.joda.time.Duration duration80 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType83 = periodType82.withYearsRemoved();
        org.joda.time.PeriodType periodType84 = periodType83.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(1645455064491L, periodType84);
        org.joda.time.Period period86 = duration80.toPeriod(periodType84);
        long long87 = duration80.getMillis();
        org.joda.time.Instant instant89 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration80, 53588053);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0804");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str14 = dateTimeZone12.getNameKey(1645455028293L);
        int int16 = dateTimeZone12.getOffset(1645455028293L);
        long long20 = dateTimeZone12.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str22 = dateTimeZone12.getShortName(1645455052649L);
        long long25 = dateTimeZone12.adjustOffset(1645455035866L, false);
        java.util.TimeZone timeZone26 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone27);
        java.lang.String str29 = dateTimeZone27.toString();
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone27.getName(1099699200000L, locale31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime8.toMutableDateTime(dateTimeZone27);
        java.util.Locale locale35 = null;
        java.lang.String str36 = dateTimeZone27.getName(1645455083384L, locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime28", (dateTime1.compareTo(dateTime28) == 0) == dateTime1.equals(dateTime28));
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0805");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        int int22 = property19.get();
        org.joda.time.Interval interval23 = property19.toInterval();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTimeISO();
        org.joda.time.Interval interval30 = interval23.withStart((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(chronology36);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfDay(1);
        java.lang.String str41 = dateTime38.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime dateTime46 = dateTime43.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay48 = dateTime47.toYearMonthDay();
        org.joda.time.DateTime dateTime49 = dateTime38.withFields((org.joda.time.ReadablePartial) yearMonthDay48);
        org.joda.time.DateTime.Property property50 = dateTime38.yearOfCentury();
        org.joda.time.DateTime.Property property51 = dateTime38.secondOfMinute();
        java.lang.String str52 = property51.getAsText();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        boolean boolean54 = property51.equals((java.lang.Object) durationFieldType53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.DateTime dateTime59 = dateTime56.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.toDateTime(chronology60);
        org.joda.time.DateTime dateTime62 = dateTime59.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str67 = dateTimeZone65.getNameKey(1645455028293L);
        int int69 = dateTimeZone65.getOffset(1645455028293L);
        long long73 = dateTimeZone65.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime74 = dateTime59.withZoneRetainFields(dateTimeZone65);
        long long78 = dateTimeZone65.convertLocalToUTC(1645455045823L, true, (long) 31);
        long long80 = dateTimeZone65.convertUTCToLocal(1645455037008L);
        org.joda.time.DateTime dateTime81 = org.joda.time.DateTime.now(dateTimeZone65);
        long long82 = property51.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime.Property property83 = dateTime81.weekOfWeekyear();
        org.joda.time.Interval interval84 = interval23.withEnd((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType86 = periodType85.withYearsRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withSecondsRemoved();
        org.joda.time.PeriodType periodType88 = periodType86.withMillisRemoved();
        org.joda.time.PeriodType periodType89 = periodType88.withYearsRemoved();
        org.joda.time.PeriodType periodType90 = periodType88.withHoursRemoved();
        org.joda.time.Period period91 = interval23.toPeriod(periodType90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime81", (dateTime25.compareTo(dateTime81) == 0) == dateTime25.equals(dateTime81));
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0806");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTimeISO();
        org.joda.time.Instant instant5 = instant2.minus((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean15 = period13.equals((java.lang.Object) dateTimeFieldType14);
        int int16 = dateTime10.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime18 = dateTime10.minusMillis(9);
        boolean boolean19 = instant5.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime mutableDateTime20 = instant5.toMutableDateTimeISO();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 8, periodType28, chronology35);
        mutablePeriod24.setPeriod((org.joda.time.ReadableDuration) duration26, chronology35);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        java.util.GregorianCalendar gregorianCalendar50 = dateTime42.toGregorianCalendar();
        org.joda.time.Interval interval51 = duration26.toIntervalTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.Interval interval54 = interval51.withStartMillis(1645455076956L);
        org.joda.time.Duration duration55 = interval51.toDuration();
        org.joda.time.Duration duration56 = duration55.toDuration();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadableDuration) duration56, periodType57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and instant2", (mutableDateTime1.compareTo(instant2) == 0) == mutableDateTime1.equals(instant2));
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0807");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis((long) 9);
        org.joda.time.Instant instant21 = instant19.minus(1645455060010L);
        org.joda.time.Instant instant23 = instant19.minus(1645455066597L);
        org.joda.time.MutableDateTime mutableDateTime24 = instant19.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0808");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusSeconds((int) (byte) 10);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period32 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalTime localTime33 = dateTime30.toLocalTime();
        org.joda.time.DateTime dateTime34 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime.Property property38 = dateTime36.yearOfEra();
        org.joda.time.DateTime dateTime39 = property38.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean41 = dateTime39.isSupported(dateTimeFieldType40);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645455029820L, chronology52);
        boolean boolean57 = dateTimeFieldType44.isSupported(chronology52);
        org.joda.time.DurationField durationField58 = chronology52.minutes();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType40.getField(chronology52);
        int int60 = dateTime4.get(dateTimeFieldType40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime39", (instant7.compareTo(dateTime39) == 0) == instant7.equals(dateTime39));
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0809");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = dateTimeField15.getLeapDurationField();
        org.joda.time.DurationField durationField17 = dateTimeField15.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField17, and durationField14", !(durationField14.compareTo(durationField17) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField17.compareTo(durationField14))));
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0810");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Interval interval12 = interval10.gap(readableInterval11);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfDay(1);
        java.lang.String str24 = dateTime21.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime dateTime29 = dateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.DateTime dateTime32 = dateTime21.withFields((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1645455029820L, chronology41);
        boolean boolean46 = dateTimeFieldType33.isSupported(chronology41);
        int int47 = dateTime21.get(dateTimeFieldType33);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int51 = dateTimeZone49.getOffsetFromLocal(0L);
        org.joda.time.DateTime dateTime52 = dateTime21.toDateTime(dateTimeZone49);
        boolean boolean54 = dateTime52.isEqual(5880000L);
        boolean boolean55 = interval13.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime68 = dateTime59.minusSeconds((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.toDateTime(chronology75);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTime dateTime79 = dateTime77.withMillisOfDay(1);
        org.joda.time.DateTime dateTime80 = dateTime79.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology81 = dateTime80.getChronology();
        boolean boolean82 = dateTimeFieldType69.isSupported(chronology81);
        org.joda.time.DateTime dateTime84 = dateTime68.withField(dateTimeFieldType69, 27);
        org.joda.time.DateTime dateTime86 = dateTime68.plusWeeks(53486469);
        org.joda.time.DateTime.Property property87 = dateTime86.yearOfCentury();
        org.joda.time.DateTime dateTime88 = property87.roundHalfEvenCopy();
        int int89 = dateTime88.getMillisOfSecond();
        boolean boolean90 = interval13.isBefore((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime52", (dateTime18.compareTo(dateTime52) == 0) == dateTime18.equals(dateTime52));
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0811");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1L), 1L, periodType25, chronology26);
        mutablePeriod27.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.DateTime dateTime55 = dateTime38.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 0);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration68 = duration57.minus(0L);
        boolean boolean69 = duration53.isShorterThan((org.joda.time.ReadableDuration) duration57);
        mutablePeriod27.setPeriod((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        boolean boolean75 = mutableInterval71.overlaps((org.joda.time.ReadableInterval) mutableInterval73);
        java.lang.Object obj76 = mutableInterval71.clone();
        org.joda.time.Chronology chronology77 = mutableInterval71.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.yearOfEra();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.yearOfCentury();
        org.joda.time.DurationField durationField81 = chronology77.years();
        org.joda.time.Period period82 = duration53.toPeriod(chronology77);
        org.joda.time.Instant instant84 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration53, 3);
        org.joda.time.Instant instant87 = instant22.withDurationAdded(1645455083505L, 4371255);
        org.joda.time.Instant instant88 = instant87.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0812");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime7.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTime.Property property19 = dateTime7.yearOfCentury();
        org.joda.time.DateTime.Property property20 = dateTime7.dayOfMonth();
        org.joda.time.DateTime.Property property21 = dateTime7.weekyear();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.DateTime dateTime23 = property21.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str33 = dateTimeZone31.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime34 = dateTime25.toDateTime(dateTimeZone31);
        long long35 = dateTime25.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int37 = dateTime25.get(dateTimeFieldType36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        boolean boolean44 = dateTime42.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = dateTime53.toDateTimeISO();
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes(0);
        boolean boolean63 = dateTime49.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime60);
        boolean boolean66 = mutableInterval64.contains(1L);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        boolean boolean71 = mutableInterval67.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        java.lang.Object obj72 = mutableInterval67.clone();
        org.joda.time.Chronology chronology73 = mutableInterval67.getChronology();
        mutableInterval64.setChronology(chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType36.getField(chronology73);
        int int78 = dateTime23.get(dateTimeFieldType36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime34", (dateTime1.compareTo(dateTime34) == 0) == dateTime1.equals(dateTime34));
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0813");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        int int14 = instant1.get(dateTimeField13);
        java.util.Locale locale15 = null;
        int int16 = dateTimeField13.getMaximumShortTextLength(locale15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0814");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645455034114L);
        org.joda.time.Period period15 = duration1.toPeriod();
        org.joda.time.Period period16 = period15.negated();
        org.joda.time.Period period18 = period15.plusMillis(20);
        org.joda.time.Period period20 = period18.minusMonths(32);
        org.joda.time.DurationFieldType durationFieldType22 = period20.getFieldType(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period47 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalTime localTime48 = dateTime45.toLocalTime();
        java.lang.String str49 = localTime48.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.toDateTime(chronology55);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.yearOfCentury();
        org.joda.time.DurationField durationField69 = chronology65.years();
        long long73 = chronology65.add(1645455034244L, 1645455035827L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField74 = chronology65.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType58.getField(chronology65);
        int int76 = dateTime57.get(dateTimeFieldType58);
        int int77 = localTime48.get(dateTimeFieldType58);
        java.lang.String str78 = localTime48.toString();
        java.lang.String str79 = localTime48.toString();
        org.joda.time.Chronology chronology80 = localTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.monthOfYear();
        org.joda.time.DurationField durationField82 = durationFieldType22.getField(chronology80);
        org.joda.time.DateTimeField dateTimeField83 = chronology80.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField69 and durationField82", (durationField69.compareTo(durationField82) == 0) == durationField69.equals(durationField82));
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0815");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime.Property property5 = dateTime3.yearOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval12 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval13 = interval6.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Interval interval27 = interval13.gap((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        boolean boolean29 = mutableInterval28.containsNow();
        boolean boolean30 = interval13.isBefore((org.joda.time.ReadableInterval) mutableInterval28);
        boolean boolean32 = mutableInterval28.contains(1645455037444L);
        org.joda.time.Duration duration33 = mutableInterval28.toDuration();
        org.joda.time.Instant instant34 = instant1.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) instant35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and dateTime3", (instant35.compareTo(dateTime3) == 0) == instant35.equals(dateTime3));
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0816");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod16.addMillis((int) '4');
        int int19 = mutablePeriod16.getWeeks();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        mutablePeriod16.setPeriod(readableInstant20, (org.joda.time.ReadableInstant) instant22);
        int int24 = mutablePeriod16.getMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant21", (dateTime8.compareTo(instant21) == 0) == dateTime8.equals(instant21));
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0817");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        java.util.Locale locale9 = null;
        int int10 = property3.getMaximumShortTextLength(locale9);
        java.util.Locale locale11 = null;
        int int12 = property3.getMaximumTextLength(locale11);
        org.joda.time.DurationField durationField13 = property3.getLeapDurationField();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTimeISO();
        org.joda.time.Instant instant17 = instant14.minus((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime22 = property21.roundFloorCopy();
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean27 = period25.equals((java.lang.Object) dateTimeFieldType26);
        int int28 = dateTime22.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime30 = dateTime22.minusMillis(9);
        boolean boolean31 = instant17.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableDateTime mutableDateTime32 = instant17.toMutableDateTimeISO();
        long long33 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime32);
        int int34 = mutableDateTime32.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant14", (dateTime1.compareTo(instant14) == 0) == dateTime1.equals(instant14));
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0818");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime35 = dateTime30.withFieldAdded(durationFieldType33, (int) (short) 0);
        int int36 = dateTime30.getDayOfWeek();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours(2);
        int int45 = dateTime44.getDayOfWeek();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime44);
        long long47 = duration46.getMillis();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime49.yearOfEra();
        org.joda.time.Interval interval52 = property51.toInterval();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval53.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Interval interval58 = interval52.withDurationAfterStart((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Interval interval59 = interval52.toInterval();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        boolean boolean71 = mutableInterval67.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        mutableInterval60.setInterval((org.joda.time.ReadableInterval) mutableInterval67);
        org.joda.time.Interval interval73 = interval59.gap((org.joda.time.ReadableInterval) mutableInterval60);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        boolean boolean75 = mutableInterval74.containsNow();
        boolean boolean76 = interval59.isBefore((org.joda.time.ReadableInterval) mutableInterval74);
        boolean boolean78 = mutableInterval74.contains(1645455037444L);
        boolean boolean80 = mutableInterval74.isAfter((long) (byte) 0);
        org.joda.time.Instant instant81 = new org.joda.time.Instant();
        org.joda.time.Instant instant82 = instant81.toInstant();
        org.joda.time.DateTime dateTime83 = instant81.toDateTimeISO();
        boolean boolean84 = mutableInterval74.isAfter((org.joda.time.ReadableInstant) instant81);
        org.joda.time.Interval interval85 = duration46.toIntervalTo((org.joda.time.ReadableInstant) instant81);
        boolean boolean87 = interval85.contains(1645455305186L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant81", (dateTime1.compareTo(instant81) == 0) == dateTime1.equals(instant81));
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0819");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1L), 1L, periodType28, chronology29);
        java.lang.String str31 = periodType28.toString();
        java.lang.String str32 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645455029643L, periodType28);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant24, periodType28);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusSeconds((int) (byte) 10);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration48 = duration12.minus((org.joda.time.ReadableDuration) duration38);
        boolean boolean49 = property6.equals((java.lang.Object) duration12);
        org.joda.time.Instant instant50 = instant1.plus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        java.lang.String str52 = instant50.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0820");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Interval interval12 = interval10.gap(readableInterval11);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Period period28 = new org.joda.time.Period(1645455029672L, (long) 3, periodType18, chronology26);
        mutablePeriod13.add(1645455030370L, chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        boolean boolean48 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property49 = dateTime34.year();
        org.joda.time.Duration duration50 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean51 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration57 = interval55.toDuration();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.Chronology chronology67 = chronology65.withUTC();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology67.getZone();
        java.util.Locale locale70 = null;
        java.lang.String str71 = dateTimeZone68.getShortName(1645455068377L, locale70);
        java.util.Locale locale73 = null;
        java.lang.String str74 = dateTimeZone68.getShortName(0L, locale73);
        org.joda.time.DateTime dateTime75 = dateTime34.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime77 = dateTime34.minus(1645455119785L);
        int int78 = dateTime77.getMillisOfSecond();
        java.util.Locale locale79 = null;
        java.util.Calendar calendar80 = dateTime77.toCalendar(locale79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime75", (dateTime34.compareTo(dateTime75) == 0) == dateTime34.equals(dateTime75));
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0821");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis(100);
        long long8 = dateTime7.getMillis();
        int int9 = dateTime7.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfSecond();
        boolean boolean20 = dateTimeFieldType10.isSupported(chronology17);
        int int21 = dateTime7.get(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone24);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.Period period30 = period26.plusWeeks((int) (short) -1);
        org.joda.time.Period period32 = period26.minusMillis(4);
        org.joda.time.Interval interval33 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        java.lang.String str35 = chronology34.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.halfdayOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology34);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime7.minusYears(4383442);
        org.joda.time.DateTime dateTime41 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant43 = dateTime7.toInstant();
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime7.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant43", (dateTime7.compareTo(instant43) == 0) == dateTime7.equals(instant43));
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0822");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        boolean boolean22 = dateTime4.isAfterNow();
        org.joda.time.DateTime.Property property23 = dateTime4.era();
        org.joda.time.DateTime.Property property24 = dateTime4.yearOfCentury();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration26.minus(0L);
        org.joda.time.Duration duration39 = duration26.withMillis(1645455034114L);
        java.lang.String str40 = duration26.toString();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        boolean boolean46 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        java.lang.Object obj47 = mutableInterval42.clone();
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.minuteOfDay();
        org.joda.time.DurationField durationField51 = chronology48.halfdays();
        org.joda.time.Period period52 = duration26.toPeriod(periodType41, chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.monthOfYear();
        org.joda.time.DurationField durationField54 = chronology48.centuries();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str60 = dateTimeZone58.getShortName(52L);
        boolean boolean61 = dateTimeZone58.isFixed();
        long long63 = dateTimeZone58.nextTransition(1645455028058L);
        org.joda.time.Chronology chronology64 = chronology48.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime65 = dateTime4.withZoneRetainFields(dateTimeZone58);
        org.joda.time.Instant instant66 = dateTime4.toInstant();
        long long67 = instant66.getMillis();
        org.joda.time.DateTime dateTime68 = instant66.toDateTime();
        org.joda.time.DateTime dateTime70 = dateTime68.withYearOfEra(53592010);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant66", (dateTime4.compareTo(instant66) == 0) == dateTime4.equals(instant66));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0823");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1645455038369L);
        org.joda.time.Period period3 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = duration2.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((java.lang.Object) duration2);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(4431607, 7, 4462827, 4473947, 2099, 4501667, 4566079, 52);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration23 = duration20.withDurationAdded(1645455094619L, 3);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Minutes minutes25 = duration20.toStandardMinutes();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        org.joda.time.DateTime dateTime38 = property37.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean40 = dateTime38.isSupported(dateTimeFieldType39);
        java.lang.String str41 = dateTimeFieldType39.getName();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 8, periodType48, chronology55);
        mutablePeriod44.setPeriod((org.joda.time.ReadableDuration) duration46, chronology55);
        org.joda.time.DateTimeField dateTimeField59 = chronology55.minuteOfHour();
        boolean boolean60 = dateTimeFieldType39.isSupported(chronology55);
        org.joda.time.Period period61 = new org.joda.time.Period((long) 31, (long) 3, periodType33, chronology55);
        org.joda.time.PeriodType periodType62 = periodType33.withMonthsRemoved();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        java.lang.String str67 = dateTime66.toString();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology70);
        org.joda.time.DateTime dateTime72 = dateTime66.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Period period73 = duration64.toPeriodFrom((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration75 = duration64.minus(0L);
        org.joda.time.Duration duration77 = duration64.withMillis(1645455034114L);
        java.lang.String str78 = duration64.toString();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        long long81 = mutableInterval80.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        boolean boolean84 = mutableInterval80.overlaps((org.joda.time.ReadableInterval) mutableInterval82);
        java.lang.Object obj85 = mutableInterval80.clone();
        org.joda.time.Chronology chronology86 = mutableInterval80.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.yearOfEra();
        org.joda.time.DateTimeField dateTimeField88 = chronology86.minuteOfDay();
        org.joda.time.DurationField durationField89 = chronology86.halfdays();
        org.joda.time.Period period90 = duration64.toPeriod(periodType79, chronology86);
        org.joda.time.DateTimeField dateTimeField91 = chronology86.monthOfYear();
        org.joda.time.DurationField durationField92 = chronology86.centuries();
        org.joda.time.DateTimeField dateTimeField93 = chronology86.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod(1645455065056L, 1645455090430L, periodType33, chronology86);
        org.joda.time.DateTime dateTime95 = new org.joda.time.DateTime(1645455054099L, chronology86);
        org.joda.time.MutableInterval mutableInterval96 = new org.joda.time.MutableInterval(1645401612786L, 1645455174593L, chronology86);
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration20, chronology86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime35", (dateTime18.compareTo(dateTime35) == 0) == dateTime18.equals(dateTime35));
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0824");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1L), 1L, periodType28, chronology29);
        java.lang.String str31 = periodType28.toString();
        java.lang.String str32 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645455029643L, periodType28);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant24, periodType28);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusSeconds((int) (byte) 10);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration48 = duration12.minus((org.joda.time.ReadableDuration) duration38);
        boolean boolean49 = property6.equals((java.lang.Object) duration12);
        org.joda.time.Instant instant50 = instant1.plus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.Instant instant53 = instant50.plus(1645455093800L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0825");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis((long) 9);
        org.joda.time.Instant instant21 = instant19.minus(1645455060010L);
        org.joda.time.Instant instant23 = instant19.minus(1645455066597L);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration42 = duration31.minus(0L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1L), 1L, periodType47, chronology48);
        java.lang.String str50 = periodType47.toString();
        java.lang.String str51 = periodType47.getName();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1645455029643L, periodType47);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, readableInstant43, periodType47);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime dateTime63 = dateTime60.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime65 = dateTime63.plusSeconds((int) (byte) 10);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration67 = duration31.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration70 = duration31.withDurationAdded(1645455036379L, 22);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval71.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Duration duration77 = duration74.plus((long) 8);
        org.joda.time.Seconds seconds78 = duration74.toStandardSeconds();
        org.joda.time.Duration duration79 = duration74.toDuration();
        int int80 = duration31.compareTo((org.joda.time.ReadableDuration) duration79);
        int int81 = duration27.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(dateTimeZone84);
        java.lang.String str86 = dateTime85.toString();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Period period90 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology89);
        org.joda.time.DateTime dateTime91 = dateTime85.minus((org.joda.time.ReadablePeriod) period90);
        org.joda.time.Period period92 = duration83.toPeriodFrom((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Duration duration94 = duration83.minus(0L);
        java.lang.String str95 = duration83.toString();
        boolean boolean96 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Instant instant98 = instant23.withDurationAdded((org.joda.time.ReadableDuration) duration31, 53641);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0826");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant26.toInstant();
        boolean boolean28 = dateTime25.isAfter((org.joda.time.ReadableInstant) instant27);
        org.joda.time.LocalDateTime localDateTime29 = dateTime25.toLocalDateTime();
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime29, locale30);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField15.getAsText(1645455441377L, locale33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant26", (dateTime17.compareTo(instant26) == 0) == dateTime17.equals(instant26));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0827");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime.Property property11 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths((int) (short) 10);
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        boolean boolean33 = property24.equals((java.lang.Object) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.plus(readableDuration36);
        int int38 = property24.getDifference((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 8, periodType45, chronology52);
        mutablePeriod41.setPeriod((org.joda.time.ReadableDuration) duration43, chronology52);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime59.toGregorianCalendar();
        org.joda.time.Interval interval68 = duration43.toIntervalTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        mutableInterval70.setEndMillis(10L);
        org.joda.time.Interval interval74 = mutableInterval70.toInterval();
        boolean boolean76 = interval74.isAfter(1645455029375L);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        long long78 = mutableInterval77.toDurationMillis();
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval77.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration83 = duration80.plus((long) 8);
        org.joda.time.Seconds seconds84 = duration80.toStandardSeconds();
        org.joda.time.Duration duration85 = duration80.toDuration();
        org.joda.time.Interval interval86 = interval74.withDurationAfterStart((org.joda.time.ReadableDuration) duration80);
        int int87 = duration69.compareTo((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Instant instant88 = instant20.plus((org.joda.time.ReadableDuration) duration80);
        int int89 = property11.getDifference((org.joda.time.ReadableInstant) instant88);
        java.util.Locale locale90 = null;
        int int91 = property11.getMaximumTextLength(locale90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant20", (dateTime19.compareTo(instant20) == 0) == dateTime19.equals(instant20));
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0828");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        long long12 = duration1.getStandardMinutes();
        org.joda.time.Duration duration13 = duration1.toDuration();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod16.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration34 = duration23.minus(0L);
        org.joda.time.Duration duration36 = duration23.withMillis(1645455034114L);
        org.joda.time.Instant instant37 = instant20.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType49 = periodType48.withYearsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.Period period59 = new org.joda.time.Period(1645455029672L, (long) 3, periodType49, chronology57);
        org.joda.time.DurationField durationField60 = chronology57.eras();
        org.joda.time.DateTime dateTime61 = dateTime39.toDateTime(chronology57);
        mutablePeriod16.setPeriod((org.joda.time.ReadableInstant) instant20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period63 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str68 = dateTimeZone66.getNameKey(1645455028293L);
        int int70 = dateTimeZone66.getOffset(1645455028293L);
        java.lang.String str72 = dateTimeZone66.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime75 = dateTime73.withMillis((long) ' ');
        org.joda.time.DateTime dateTime77 = dateTime73.withMillisOfDay(53504366);
        org.joda.time.DateTime dateTime79 = dateTime73.withYearOfEra(75);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime82 = dateTime73.withMillisOfSecond((int) (byte) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant20", (dateTime3.compareTo(instant20) == 0) == dateTime3.equals(instant20));
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0829");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Chronology chronology22 = chronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int26 = dateTimeZone23.getOffset((long) 7);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime4.toMutableDateTime(dateTimeZone23);
        org.joda.time.Instant instant29 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.Instant instant31 = instant29.plus(1645488000000L);
        long long32 = instant31.getMillis();
        org.joda.time.Instant instant34 = instant31.minus(1645455028417L);
        boolean boolean35 = dateTime4.isEqual((org.joda.time.ReadableInstant) instant34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and mutableDateTime27", (mutableDateTime12.compareTo(mutableDateTime27) == 0) == mutableDateTime12.equals(mutableDateTime27));
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0830");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(0L);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str6 = dateTimeZone4.getNameKey(1645455028293L);
        int int8 = dateTimeZone4.getOffset(1645455028293L);
        java.lang.String str10 = dateTimeZone4.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Period period28 = new org.joda.time.Period(1645455029672L, (long) 3, periodType18, chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField30 = chronology26.days();
        org.joda.time.Period period31 = new org.joda.time.Period(1645455034855L, 1645455043876L, chronology26);
        org.joda.time.DateTimeZone dateTimeZone32 = chronology26.getZone();
        java.lang.String str34 = dateTimeZone32.getName(0L);
        org.joda.time.DateTime dateTime35 = dateTime11.withZoneRetainFields(dateTimeZone32);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        mutableInterval36.setInterval(100000L, 1645455028646L);
        long long44 = mutableInterval36.getStartMillis();
        mutableInterval36.setEndMillis(1645455047752L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration59 = duration48.minus(0L);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((-1L), 1L, periodType64, chronology65);
        java.lang.String str67 = periodType64.toString();
        java.lang.String str68 = periodType64.getName();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(1645455029643L, periodType64);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, readableInstant60, periodType64);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval71.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        long long78 = dateTime77.getMillis();
        org.joda.time.DateTime dateTime80 = dateTime77.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime82 = dateTime80.plusSeconds((int) (byte) 10);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration74, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Duration duration84 = duration48.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Duration duration87 = duration48.withDurationAdded(1645455036379L, 22);
        mutableInterval36.setDurationAfterStart((org.joda.time.ReadableDuration) duration87);
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration87);
        org.joda.time.Duration duration90 = duration1.minus((org.joda.time.ReadableDuration) duration87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime50", (dateTime11.compareTo(dateTime50) == 0) == dateTime11.equals(dateTime50));
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0831");
        org.joda.time.Period period1 = org.joda.time.Period.days(292278993);
        org.joda.time.Period period3 = period1.plusMonths(39093577);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusSeconds((int) (byte) 10);
        int int15 = property7.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str17 = durationFieldType16.toString();
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = durationFieldType16.isSupported(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime14.withFieldAdded(durationFieldType16, 2);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds((int) (byte) 10);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period35 = period34.toPeriod();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadablePeriod) period34);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period47 = duration38.toPeriodFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Seconds seconds48 = period47.toStandardSeconds();
        int int49 = period47.getMillis();
        org.joda.time.DurationFieldType durationFieldType51 = period47.getFieldType(0);
        int int52 = period34.get(durationFieldType51);
        org.joda.time.Period period54 = period3.withField(durationFieldType51, 35);
        org.joda.time.Period period56 = period3.plusHours(4473947);
        org.joda.time.MutablePeriod mutablePeriod57 = period56.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTime dateTime62 = dateTime59.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime64 = dateTime62.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str69 = dateTimeZone67.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime70 = dateTime62.withZone(dateTimeZone67);
        org.joda.time.YearMonthDay yearMonthDay71 = dateTime70.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.DateTime dateTime76 = dateTime73.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = dateTime76.toDateTime(chronology77);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        java.lang.String str81 = dateTime80.toString();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology84);
        org.joda.time.DateTime dateTime86 = dateTime80.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.DateTime dateTime87 = dateTime80.toDateTimeISO();
        org.joda.time.DateTime dateTime89 = dateTime87.minusMinutes(0);
        boolean boolean90 = dateTime76.isEqual((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime.Property property91 = dateTime76.year();
        org.joda.time.DateTime dateTime93 = dateTime76.withMinuteOfHour(22);
        org.joda.time.PeriodType periodType94 = org.joda.time.PeriodType.time();
        org.joda.time.Period period95 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime93, periodType94);
        mutablePeriod57.setPeriod((org.joda.time.ReadablePeriod) period95);
        java.lang.String str97 = period95.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime70", (dateTime12.compareTo(dateTime70) == 0) == dateTime12.equals(dateTime70));
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0832");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Duration duration13 = duration2.minus(0L);
        org.joda.time.Duration duration15 = duration2.withMillis(1645455034114L);
        java.lang.String str16 = duration2.toString();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        org.joda.time.DurationField durationField27 = chronology24.halfdays();
        org.joda.time.Period period28 = duration2.toPeriod(periodType17, chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.monthOfYear();
        org.joda.time.DurationField durationField30 = chronology24.centuries();
        org.joda.time.DateTimeField dateTimeField31 = chronology24.millisOfSecond();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((java.lang.Object) "2022-02-21T14:51:21.736Z", chronology24);
        org.joda.time.DurationField durationField33 = chronology24.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField33, durationField27, and durationField30", !(durationField33.compareTo(durationField27) == 0) || (Math.signum(durationField33.compareTo(durationField30)) == Math.signum(durationField27.compareTo(durationField30))));
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0833");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime(chronology9);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645455028293L);
        int int18 = dateTimeZone14.getOffset(1645455028293L);
        long long22 = dateTimeZone14.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime23 = dateTime8.withZoneRetainFields(dateTimeZone14);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period34 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration36 = duration25.minus(0L);
        org.joda.time.Duration duration38 = duration25.withMillis(1645455034114L);
        java.lang.String str39 = duration25.toString();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.minuteOfDay();
        org.joda.time.DurationField durationField50 = chronology47.halfdays();
        org.joda.time.Period period51 = duration25.toPeriod(periodType40, chronology47);
        org.joda.time.DateTime dateTime52 = dateTime23.withChronology(chronology47);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1645455198769L, 1645455245661L, chronology47);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1645455071184L, 1645455085430L, chronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime52", (dateTime23.compareTo(dateTime52) == 0) == dateTime23.equals(dateTime52));
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0834");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        int int11 = periodType10.size();
        org.joda.time.PeriodType periodType12 = periodType10.withSecondsRemoved();
        org.joda.time.Period period13 = period0.normalizedStandard(periodType12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = duration26.toPeriodTo((org.joda.time.ReadableInstant) dateTime33, periodType34);
        int int36 = dateTime33.getDayOfMonth();
        org.joda.time.DateTime dateTime38 = dateTime33.plusMinutes(0);
        org.joda.time.DateTime dateTime40 = dateTime33.withMillisOfDay(8);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration43 = org.joda.time.Duration.millis(100L);
        org.joda.time.Interval interval44 = interval41.withDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period55 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime48);
        long long56 = duration46.getMillis();
        long long57 = duration46.getStandardMinutes();
        long long58 = duration46.getStandardHours();
        boolean boolean59 = duration43.isEqual((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.DateTime dateTime64 = dateTime61.withMillisOfSecond((int) (short) 10);
        boolean boolean66 = dateTime64.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str71 = dateTimeZone69.getShortName(52L);
        org.joda.time.DateTime dateTime72 = dateTime64.toDateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime74 = dateTime64.plusSeconds(2022);
        org.joda.time.Interval interval75 = duration46.toIntervalTo((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime72", (dateTime31.compareTo(dateTime72) == 0) == dateTime31.equals(dateTime72));
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0835");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(1);
        org.joda.time.Period period3 = period1.withDays((int) (byte) 10);
        org.joda.time.Period period5 = period3.withHours(72);
        org.joda.time.MutablePeriod mutablePeriod6 = period3.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfEra();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval18 = interval11.toInterval();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Interval interval32 = interval18.gap((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        boolean boolean34 = mutableInterval33.containsNow();
        boolean boolean35 = interval18.isBefore((org.joda.time.ReadableInterval) mutableInterval33);
        boolean boolean37 = mutableInterval33.contains(1645455037444L);
        org.joda.time.Duration duration38 = mutableInterval33.toDuration();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Duration duration40 = duration38.minus(readableDuration39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.toDateTime(chronology46);
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime48.withMillisOfDay(1);
        java.lang.String str51 = dateTime48.toString();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay58 = dateTime57.toYearMonthDay();
        org.joda.time.DateTime dateTime59 = dateTime48.withFields((org.joda.time.ReadablePartial) yearMonthDay58);
        org.joda.time.DateTime.Property property60 = dateTime48.yearOfCentury();
        org.joda.time.DateTime.Property property61 = dateTime48.dayOfMonth();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType63 = periodType62.withHoursRemoved();
        org.joda.time.Period period64 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime48, periodType63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime dateTime69 = dateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime71 = dateTime69.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str76 = dateTimeZone74.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime77 = dateTime69.withZone(dateTimeZone74);
        org.joda.time.DateTime dateTime79 = dateTime77.withYearOfEra(32);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime77);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval80);
        mutablePeriod6.addDays(4486176);
        mutablePeriod6.addMonths(4790358);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime69 and dateTime77", (dateTime69.compareTo(dateTime77) == 0) == dateTime69.equals(dateTime77));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0836");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        int int14 = instant1.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant1.minus(1645455086896L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration29 = duration18.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = duration29.toPeriodTo((org.joda.time.ReadableInstant) dateTime36, periodType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property42.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean45 = dateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTime.Property property46 = dateTime36.property(dateTimeFieldType44);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str52 = dateTimeZone50.getShortName(52L);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str58 = dateTimeZone56.getNameKey(1645455028293L);
        long long60 = dateTimeZone56.convertUTCToLocal(1645455035225L);
        long long62 = dateTimeZone50.getMillisKeepLocal(dateTimeZone56, 1645455037008L);
        org.joda.time.MutableDateTime mutableDateTime63 = instant1.toMutableDateTime(dateTimeZone50);
        java.lang.String str65 = dateTimeZone50.getName((long) 92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime63", (instant1.compareTo(mutableDateTime63) == 0) == instant1.equals(mutableDateTime63));
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0837");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusSeconds((int) (byte) 10);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period39 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime42 = dateTime12.withMillisOfDay(53610666);
        org.joda.time.DateTime dateTime44 = dateTime42.minusDays(891);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0838");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        long long23 = dateTimeZone15.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) periodType29);
        org.joda.time.DateTime dateTime32 = dateTime4.toDateTime(dateTimeZone15);
        java.util.TimeZone timeZone33 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime32", (dateTime4.compareTo(dateTime32) == 0) == dateTime4.equals(dateTime32));
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0839");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime dateTime14 = dateTime12.withHourOfDay(21);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getNameKey(1645455028293L);
        java.util.Locale locale23 = null;
        java.lang.String str24 = dateTimeZone19.getName((long) 342, locale23);
        org.joda.time.DateTime dateTime25 = dateTime14.toDateTime(dateTimeZone19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((-1L), 1L, periodType43, chronology44);
        java.lang.String str46 = periodType43.toString();
        java.lang.String str47 = periodType43.getName();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645455029643L, periodType43);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, readableInstant39, periodType43);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime61 = dateTime59.plusSeconds((int) (byte) 10);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration63 = duration27.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration66 = duration27.withDurationAdded(1645455036379L, 22);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration73 = duration70.plus((long) 8);
        org.joda.time.Seconds seconds74 = duration70.toStandardSeconds();
        org.joda.time.Duration duration75 = duration70.toDuration();
        int int76 = duration27.compareTo((org.joda.time.ReadableDuration) duration75);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.DateTime.Property property78 = dateTime14.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property78.getFieldType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime25", (dateTime14.compareTo(dateTime25) == 0) == dateTime14.equals(dateTime25));
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0840");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) mutableInterval44);
        mutableInterval44.setDurationAfterStart(1645455033234L);
        boolean boolean52 = mutableInterval26.isBefore((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod();
        mutablePeriod53.setMonths((int) ' ');
        java.lang.Object obj56 = mutablePeriod53.clone();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone59);
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period61.minusSeconds((int) (short) 1);
        org.joda.time.Period period65 = period61.plusWeeks((int) (short) -1);
        org.joda.time.Period period67 = period61.minusMillis(4);
        org.joda.time.Interval interval68 = interval60.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        mutablePeriod53.add((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Interval interval71 = interval68.withEndMillis(1645455034431L);
        mutableInterval26.setInterval((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = mutableInterval26.getStart();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str78 = dateTimeZone76.getNameKey(1645455028293L);
        java.lang.String str80 = dateTimeZone76.getNameKey(1645455039471L);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(dateTimeZone76);
        mutableInterval26.setEnd((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime.Property property83 = dateTime81.weekyear();
        java.util.Locale locale84 = null;
        int int85 = property83.getMaximumTextLength(locale84);
        org.joda.time.Interval interval86 = property83.toInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime81", (dateTime1.compareTo(dateTime81) == 0) == dateTime1.equals(dateTime81));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0841");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusMinutes((int) (byte) 10);
        org.joda.time.Period period6 = period4.withHours((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMillis(100);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str28 = dateTimeZone26.getNameKey(1645455028293L);
        int int30 = dateTimeZone26.getOffset(1645455028293L);
        long long34 = dateTimeZone26.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime14.toMutableDateTime(dateTimeZone26);
        org.joda.time.Duration duration37 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime dateTime48 = dateTime46.minusMinutes(0);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period59 = duration50.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration61 = duration50.minus(0L);
        org.joda.time.DateTime dateTime63 = dateTime46.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (byte) 0);
        org.joda.time.DateTime dateTime65 = dateTime63.withCenturyOfEra(9);
        org.joda.time.DateTime.Property property66 = dateTime63.minuteOfHour();
        org.joda.time.DateTime.Property property67 = dateTime63.yearOfCentury();
        java.util.Locale locale68 = null;
        java.lang.String str69 = property67.getAsShortText(locale68);
        org.joda.time.DateTime dateTime70 = property67.getDateTime();
        boolean boolean72 = property67.equals((java.lang.Object) 1645455187526L);
        org.joda.time.DateTime dateTime73 = property67.roundHalfFloorCopy();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and mutableDateTime36", (dateTime14.compareTo(mutableDateTime36) == 0) == dateTime14.equals(mutableDateTime36));
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0842");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        boolean boolean15 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime13);
        int int16 = dateTime1.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime13", (dateTime10.compareTo(dateTime13) == 0) == dateTime10.equals(dateTime13));
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0843");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.hourOfDay();
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTimeISO();
        long long21 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTime dateTime22 = property18.roundCeilingCopy();
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant19", (dateTime1.compareTo(instant19) == 0) == dateTime1.equals(instant19));
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0844");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        mutableInterval3.setInterval(100000L, 1645455028646L);
        long long11 = mutableInterval3.getStartMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes(1645455037008L);
        boolean boolean20 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration19);
        long long21 = duration15.getMillis();
        org.joda.time.Instant instant23 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration15, 52991506);
        org.joda.time.DateTime dateTime24 = instant1.toDateTime();
        java.lang.String str25 = dateTime24.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0845");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.year();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        int int5 = property3.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str19 = dateTimeZone17.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime20 = dateTime12.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.DateTime dateTime25 = property24.roundFloorCopy();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean30 = period28.equals((java.lang.Object) dateTimeFieldType29);
        int int31 = dateTime25.get(dateTimeFieldType29);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType29.getDurationType();
        boolean boolean33 = dateTime20.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645455028293L);
        int int40 = dateTimeZone36.getOffset(1645455028293L);
        long long44 = dateTimeZone36.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        long long47 = dateTimeZone36.previousTransition(1645455049993L);
        org.joda.time.DateTime dateTime48 = dateTime20.withZoneRetainFields(dateTimeZone36);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period59 = duration50.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime61 = dateTime52.minusSeconds((int) ' ');
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology64 = null;
        boolean boolean65 = dateTimeFieldType63.isSupported(chronology64);
        org.joda.time.DateTime.Property property66 = dateTime61.property(dateTimeFieldType63);
        java.lang.String str67 = dateTimeFieldType63.toString();
        boolean boolean68 = dateTime48.isSupported(dateTimeFieldType63);
        org.joda.time.DateTime dateTime69 = dateTime48.withEarlierOffsetAtOverlap();
        java.util.Date date70 = dateTime48.toDate();
        int int71 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime9", (dateTime2.compareTo(dateTime9) == 0) == dateTime2.equals(dateTime9));
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0846");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.withMinuteOfHour(22);
        int int22 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis((int) '4');
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime4.withZone(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime25", (dateTime1.compareTo(dateTime25) == 0) == dateTime1.equals(dateTime25));
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0847");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str5 = dateTimeZone3.getShortName(52L);
        boolean boolean6 = dateTimeZone3.isFixed();
        long long8 = dateTimeZone3.convertUTCToLocal(1645455038369L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str13 = dateTimeZone11.getNameKey(1645455028293L);
        int int15 = dateTimeZone11.getOffset(1645455028293L);
        long long19 = dateTimeZone11.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str21 = dateTimeZone11.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.withMillisOfDay(1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant32.toInstant();
        boolean boolean34 = dateTime31.isAfter((org.joda.time.ReadableInstant) instant33);
        org.joda.time.LocalDateTime localDateTime35 = dateTime31.toLocalDateTime();
        boolean boolean36 = dateTimeZone11.isLocalDateTimeGap(localDateTime35);
        boolean boolean37 = dateTimeZone3.isLocalDateTimeGap(localDateTime35);
        java.lang.String str39 = dateTimeZone3.getNameKey(1645455060000L);
        int int41 = dateTimeZone3.getOffsetFromLocal(1645455108346L);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 39478613, dateTimeZone3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant32", (dateTime23.compareTo(instant32) == 0) == dateTime23.equals(instant32));
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0848");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        mutablePeriod2.setMillis(4);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(1645455110782L);
        boolean boolean53 = mutablePeriod2.equals((java.lang.Object) 1645455110782L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0849");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.halfdays();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str18 = dateTimeZone16.getNameKey(1645455028293L);
        java.lang.String str20 = dateTimeZone16.getNameKey(1645455039471L);
        java.lang.String str21 = dateTimeZone16.toString();
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfDay();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        boolean boolean35 = dateTimeField33.isLeap(1645455027824L);
        java.lang.String str36 = dateTimeField33.getName();
        int int38 = dateTimeField33.get((long) (short) 0);
        long long40 = dateTimeField33.roundCeiling(90L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone43);
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period47 = period45.minusSeconds((int) (short) 1);
        org.joda.time.Period period49 = period45.plusWeeks((int) (short) -1);
        org.joda.time.Period period51 = period45.minusMillis(4);
        org.joda.time.Interval interval52 = interval44.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str60 = dateTimeZone58.getNameKey(1645455028293L);
        int int62 = dateTimeZone58.getOffset(1645455028293L);
        long long66 = dateTimeZone58.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str68 = dateTimeZone58.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        java.lang.String str71 = dateTime70.toString();
        org.joda.time.DateTime dateTime73 = dateTime70.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.toDateTime(chronology74);
        org.joda.time.DateTime dateTime76 = dateTime73.toDateTime();
        org.joda.time.DateTime dateTime78 = dateTime76.withMillisOfDay(1);
        org.joda.time.Instant instant79 = new org.joda.time.Instant();
        org.joda.time.Instant instant80 = instant79.toInstant();
        boolean boolean81 = dateTime78.isAfter((org.joda.time.ReadableInstant) instant80);
        org.joda.time.LocalDateTime localDateTime82 = dateTime78.toLocalDateTime();
        boolean boolean83 = dateTimeZone58.isLocalDateTimeGap(localDateTime82);
        int int84 = dateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localDateTime82);
        java.util.Locale locale86 = null;
        java.lang.String str87 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime82, 1, locale86);
        long long89 = chronology22.set((org.joda.time.ReadablePartial) localDateTime82, 1645455347183L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime70 and instant79", (dateTime70.compareTo(instant79) == 0) == dateTime70.equals(instant79));
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0850");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime.Property property5 = dateTime3.yearOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval12 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Interval interval13 = interval6.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Interval interval27 = interval13.gap((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        boolean boolean29 = mutableInterval28.containsNow();
        boolean boolean30 = interval13.isBefore((org.joda.time.ReadableInterval) mutableInterval28);
        boolean boolean32 = mutableInterval28.contains(1645455037444L);
        boolean boolean34 = mutableInterval28.isAfter((long) (byte) 0);
        boolean boolean35 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        long long36 = mutableInterval0.toDurationMillis();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.Duration duration42 = new org.joda.time.Duration(readableInstant37, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration45 = duration42.withDurationAdded(1645455094619L, 3);
        org.joda.time.Duration duration47 = duration42.withMillis(1645455092278L);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.format.PeriodFormatter periodFormatter49 = null;
        java.lang.String str50 = period48.toString(periodFormatter49);
        org.joda.time.Period period52 = period48.withSeconds(347);
        org.joda.time.Period period54 = period52.plusDays(72);
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableInterval0.setPeriodBeforeEnd(readablePeriod56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime40", (dateTime3.compareTo(dateTime40) == 0) == dateTime3.equals(dateTime40));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0851");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 53440972, chronology4);
        org.joda.time.Period period7 = org.joda.time.Period.seconds(1);
        org.joda.time.Period period9 = period7.withDays((int) (byte) 10);
        org.joda.time.Period period11 = period9.withHours(72);
        org.joda.time.Hours hours12 = period11.toStandardHours();
        boolean boolean13 = dateTime5.equals((java.lang.Object) hours12);
        boolean boolean14 = mutableDateTime2.equals((java.lang.Object) boolean13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0852");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = instant7.toDateTime();
        int int10 = dateTime9.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0853");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime13.minus((org.joda.time.ReadablePeriod) period20);
        int int23 = dateTime13.getWeekOfWeekyear();
        boolean boolean24 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime27 = dateTime13.withDurationAdded(1645455063488L, 4383442);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(4394936);
        org.joda.time.DateTime dateTime31 = dateTime27.withMillisOfSecond(6);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime38 = dateTime36.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str43 = dateTimeZone41.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime44 = dateTime36.withZone(dateTimeZone41);
        int int45 = dateTime36.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime.Property property49 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime50 = property49.roundFloorCopy();
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean55 = period53.equals((java.lang.Object) dateTimeFieldType54);
        int int56 = dateTime50.get(dateTimeFieldType54);
        org.joda.time.DateTime.Property property57 = dateTime36.property(dateTimeFieldType54);
        boolean boolean58 = dateTime27.isSupported(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType54.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType54.getDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime44", (dateTime11.compareTo(dateTime44) == 0) == dateTime11.equals(dateTime44));
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0854");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime4.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = dateTime18.isAfter(readableInstant20);
        boolean boolean22 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str32 = dateTimeZone30.getNameKey(1645455028293L);
        int int34 = dateTimeZone30.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime27.toMutableDateTime(dateTimeZone30);
        org.joda.time.DateTime.Property property36 = dateTime27.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean38 = dateTime27.isSupported(dateTimeFieldType37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int40 = dateTime27.get(dateTimeFieldType39);
        int int41 = dateTime18.get(dateTimeFieldType39);
        int int42 = dateTime18.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime35", (dateTime4.compareTo(mutableDateTime35) == 0) == dateTime4.equals(mutableDateTime35));
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0855");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundFloorCopy();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        int int23 = dateTime17.get(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        boolean boolean25 = dateTime12.isSupported(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        long long39 = dateTimeZone28.previousTransition(1645455049993L);
        org.joda.time.DateTime dateTime40 = dateTime12.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0856");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = instant7.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTime();
        org.joda.time.Instant instant13 = instant7.withDurationAdded((long) 73, 4493);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime23 = dateTime18.withFieldAdded(durationFieldType21, (int) (short) 0);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant7, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.MutableDateTime mutableDateTime25 = instant7.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(100);
        org.joda.time.LocalDate localDate35 = dateTime32.toLocalDate();
        long long36 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime32.plus(1651503129584L);
        java.util.GregorianCalendar gregorianCalendar39 = dateTime32.toGregorianCalendar();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant7, (org.joda.time.ReadableInstant) dateTime32);
        java.lang.String str41 = dateTime32.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0857");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645455029820L, chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField13 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645455028293L);
        int int22 = dateTimeZone18.getOffset(1645455028293L);
        long long26 = dateTimeZone18.convertLocalToUTC((long) 3, false, 1645455032819L);
        java.lang.String str28 = dateTimeZone18.getShortName(1645455052649L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.withMillisOfDay(1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant39.toInstant();
        boolean boolean41 = dateTime38.isAfter((org.joda.time.ReadableInstant) instant40);
        org.joda.time.LocalDateTime localDateTime42 = dateTime38.toLocalDateTime();
        boolean boolean43 = dateTimeZone18.isLocalDateTimeGap(localDateTime42);
        org.joda.time.Chronology chronology44 = localDateTime42.getChronology();
        long long46 = chronology7.set((org.joda.time.ReadablePartial) localDateTime42, 1645455143662L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and instant39", (dateTime30.compareTo(instant39) == 0) == dateTime30.equals(instant39));
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0858");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTime(chronology6);
        org.joda.time.DateTime dateTime8 = dateTime5.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int10 = dateTime5.get(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime15.toString(dateTimeFormatter16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645455028293L);
        int int24 = dateTimeZone20.getOffset(1645455028293L);
        java.lang.String str26 = dateTimeZone20.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime27 = dateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime28 = dateTime5.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime30 = dateTime28.withSecondOfMinute(52);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField39 = yearMonthDay37.getField(0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay37, (org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType48.getField(chronology55);
        boolean boolean60 = yearMonthDay37.isSupported(dateTimeFieldType48);
        int int61 = dateTime30.get(dateTimeFieldType48);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableInstant) dateTime30);
        int int63 = dateTime30.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime27", (dateTime5.compareTo(dateTime27) == 0) == dateTime5.equals(dateTime27));
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0859");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        long long23 = dateTimeZone15.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) periodType29);
        org.joda.time.DateTime dateTime32 = dateTime4.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime35 = dateTime4.withField(dateTimeFieldType33, 53);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillis(1645455305313L);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime32", (dateTime4.compareTo(dateTime32) == 0) == dateTime4.equals(dateTime32));
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0860");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        long long23 = dateTimeZone15.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) periodType29);
        org.joda.time.DateTime dateTime32 = dateTime4.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime35 = dateTime4.withField(dateTimeFieldType33, 53);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMillis(4690708);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime32", (dateTime4.compareTo(dateTime32) == 0) == dateTime4.equals(dateTime32));
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0861");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T10:51:32.202+20:00");
        org.joda.time.Instant instant3 = instant1.minus((-1L));
        org.joda.time.DateTime dateTime4 = instant3.toDateTimeISO();
        org.joda.time.DateTime dateTime5 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks(12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0862");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.DateTime dateTime13 = dateTime8.withYearOfEra(9);
        org.joda.time.DateTime.Property property14 = dateTime8.millisOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(997);
        boolean boolean17 = dateTime16.isAfterNow();
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime16.toYearMonthDay();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTimeISO();
        org.joda.time.Instant instant22 = instant19.minus((long) (short) 1);
        org.joda.time.DateTime dateTime23 = instant19.toDateTime();
        org.joda.time.DateTime dateTime24 = yearMonthDay18.toDateTime((org.joda.time.ReadableInstant) instant19);
        int int25 = dateTime24.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant19", (dateTime1.compareTo(instant19) == 0) == dateTime1.equals(instant19));
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0863");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Instant instant20 = dateTime4.toInstant();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1L), 1L, periodType23, chronology24);
        mutablePeriod25.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration51 = duration40.minus(0L);
        org.joda.time.DateTime dateTime53 = dateTime36.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 0);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Period period64 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration66 = duration55.minus(0L);
        boolean boolean67 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration55);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration51);
        java.lang.String str69 = duration51.toString();
        long long70 = duration51.getStandardSeconds();
        org.joda.time.Instant instant72 = instant20.withDurationAdded((org.joda.time.ReadableDuration) duration51, 4495438);
        long long73 = instant72.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant20", (dateTime4.compareTo(instant20) == 0) == dateTime4.equals(instant20));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0864");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.Instant instant52 = instant50.plus(1645455160151L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period63 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration65 = duration54.minus(0L);
        org.joda.time.Duration duration67 = duration54.withMillis(1645455034114L);
        java.lang.String str68 = duration54.toString();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType70 = periodType69.withYearsRemoved();
        org.joda.time.PeriodType periodType71 = periodType70.withSecondsRemoved();
        org.joda.time.Period period72 = duration54.toPeriod(periodType71);
        org.joda.time.Period period81 = new org.joda.time.Period(0, 3, 4371255, (-19044), 30, 14, (int) (byte) 100, (int) (byte) 100);
        boolean boolean82 = duration54.equals((java.lang.Object) (byte) 100);
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant52, (org.joda.time.ReadableDuration) duration54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0865");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Instant instant20 = dateTime4.toInstant();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1L), 1L, periodType23, chronology24);
        mutablePeriod25.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration51 = duration40.minus(0L);
        org.joda.time.DateTime dateTime53 = dateTime36.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 0);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Period period64 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration66 = duration55.minus(0L);
        boolean boolean67 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration55);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration51);
        java.lang.String str69 = duration51.toString();
        long long70 = duration51.getStandardSeconds();
        org.joda.time.Instant instant72 = instant20.withDurationAdded((org.joda.time.ReadableDuration) duration51, 4495438);
        org.joda.time.DateTime dateTime73 = instant72.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant20", (dateTime4.compareTo(instant20) == 0) == dateTime4.equals(instant20));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0866");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        int int14 = instant1.get(dateTimeField13);
        org.joda.time.Instant instant17 = instant1.withDurationAdded(1645455398235L, 4504932);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        org.joda.time.Instant instant38 = dateTime22.toInstant();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-1L), 1L, periodType41, chronology42);
        mutablePeriod43.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology51);
        org.joda.time.DateTime dateTime53 = dateTime47.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = dateTime47.toDateTimeISO();
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes(0);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration69 = duration58.minus(0L);
        org.joda.time.DateTime dateTime71 = dateTime54.withDurationAdded((org.joda.time.ReadableDuration) duration69, (int) (byte) 0);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        java.lang.String str76 = dateTime75.toString();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology79);
        org.joda.time.DateTime dateTime81 = dateTime75.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.Period period82 = duration73.toPeriodFrom((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Duration duration84 = duration73.minus(0L);
        boolean boolean85 = duration69.isShorterThan((org.joda.time.ReadableDuration) duration73);
        mutablePeriod43.setPeriod((org.joda.time.ReadableDuration) duration69);
        java.lang.String str87 = duration69.toString();
        long long88 = duration69.getStandardSeconds();
        org.joda.time.Instant instant90 = instant38.withDurationAdded((org.joda.time.ReadableDuration) duration69, 4495438);
        org.joda.time.Instant instant91 = instant17.minus((org.joda.time.ReadableDuration) duration69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0867");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long39 = dateTimeZone28.convertUTCToLocal(1645455040347L);
        boolean boolean40 = dateTimeZone28.isFixed();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.Chronology chronology49 = chronology47.withUTC();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology49.getZone();
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone50.getShortName(1645455068377L, locale52);
        long long56 = dateTimeZone50.convertLocalToUTC(1645455037307L, false);
        long long58 = dateTimeZone28.getMillisKeepLocal(dateTimeZone50, 10001L);
        int int60 = dateTimeZone50.getOffsetFromLocal(1645455112343L);
        org.joda.time.DateTime dateTime61 = dateTime8.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str66 = dateTimeZone64.getNameKey(1645455028293L);
        int int68 = dateTimeZone64.getOffset(1645455028293L);
        java.lang.String str70 = dateTimeZone64.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime.Property property72 = dateTime71.weekyear();
        java.util.Locale locale73 = null;
        java.util.Calendar calendar74 = dateTime71.toCalendar(locale73);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime71.getZone();
        org.joda.time.DateTime dateTime76 = dateTime8.withZoneRetainFields(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime61", (dateTime8.compareTo(dateTime61) == 0) == dateTime8.equals(dateTime61));
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0868");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DateTime dateTime8 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMonths((int) (short) 10);
        long long16 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property17 = dateTime13.era();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        int int19 = property17.getMinimumValue();
        long long20 = property17.remainder();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime31 = dateTime22.toDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        org.joda.time.DateTime dateTime44 = dateTime42.plusYears((int) '4');
        boolean boolean45 = dateTime22.equals((java.lang.Object) '4');
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTime dateTime50 = dateTime47.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime(chronology51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime55 = dateTime50.withFieldAdded(durationFieldType53, (int) (short) 0);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.minutes();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        long long62 = mutableInterval61.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval64 = mutableInterval63.toInterval();
        boolean boolean65 = mutableInterval61.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
        java.lang.Object obj66 = mutableInterval61.clone();
        org.joda.time.Chronology chronology67 = mutableInterval61.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.millis();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(1645455078372L, 31556952000L, chronology67);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1645455071421L, 1645455037008L, periodType58, chronology67);
        boolean boolean71 = durationFieldType53.isSupported(chronology67);
        org.joda.time.DateTime dateTime73 = dateTime22.withFieldAdded(durationFieldType53, 0);
        int int74 = property17.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField18 and durationField68", Math.signum(durationField18.compareTo(durationField68)) == -Math.signum(durationField68.compareTo(durationField18)));
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0869");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant10", (dateTime1.compareTo(instant10) == 0) == dateTime1.equals(instant10));
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0870");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (byte) 10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime11.getMillisOfDay();
        java.lang.String str14 = dateTime11.toString();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime17 = instant15.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime22 = property21.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean24 = dateTime22.isSupported(dateTimeFieldType23);
        java.lang.String str25 = dateTimeFieldType23.getName();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        java.lang.Object obj38 = mutableInterval33.clone();
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 8, periodType32, chronology39);
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration30, chronology39);
        org.joda.time.DateTimeField dateTimeField43 = chronology39.minuteOfHour();
        boolean boolean44 = dateTimeFieldType23.isSupported(chronology39);
        java.lang.String str45 = dateTimeFieldType23.getName();
        boolean boolean46 = instant15.isSupported(dateTimeFieldType23);
        int int47 = dateTime11.get(dateTimeFieldType23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant15", (dateTime6.compareTo(instant15) == 0) == dateTime6.equals(instant15));
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0871");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withDaysRemoved();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean9 = period7.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.Period period11 = period7.plusYears(10);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period12.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime24 = dateTime19.withFieldAdded(durationFieldType22, (int) (short) 0);
        boolean boolean25 = period12.isSupported(durationFieldType22);
        int int26 = period7.get(durationFieldType22);
        java.lang.String str27 = durationFieldType22.getName();
        int int28 = periodType4.indexOf(durationFieldType22);
        org.joda.time.PeriodType periodType29 = periodType4.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.DurationField durationField45 = dateTimeField44.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime dateTime50 = dateTime47.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay52 = dateTime51.toYearMonthDay();
        int int53 = yearMonthDay52.size();
        int[] intArray58 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int59 = dateTimeField44.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay52, intArray58);
        int int60 = yearMonthDay36.compareTo((org.joda.time.ReadablePartial) yearMonthDay52);
        org.joda.time.Chronology chronology61 = yearMonthDay36.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.centuries();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1645455240643L, 98727309529740000L, periodType4, chronology61);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone67);
        long long69 = dateTime68.getMillis();
        org.joda.time.Duration duration70 = new org.joda.time.Duration(readableInstant65, (org.joda.time.ReadableInstant) dateTime68);
        mutablePeriod64.add((org.joda.time.ReadableDuration) duration70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime68", (dateTime16.compareTo(dateTime68) == 0) == dateTime16.equals(dateTime68));
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0872");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Instant instant20 = dateTime4.toInstant();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1L), 1L, periodType23, chronology24);
        mutablePeriod25.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration51 = duration40.minus(0L);
        org.joda.time.DateTime dateTime53 = dateTime36.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) (byte) 0);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Period period64 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration66 = duration55.minus(0L);
        boolean boolean67 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration55);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration51);
        java.lang.String str69 = duration51.toString();
        long long70 = duration51.getStandardSeconds();
        org.joda.time.Instant instant72 = instant20.withDurationAdded((org.joda.time.ReadableDuration) duration51, 4495438);
        org.joda.time.Instant instant73 = instant72.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant20", (dateTime4.compareTo(instant20) == 0) == dateTime4.equals(instant20));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0873");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(1645455046184L, 3);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration25 = duration14.minus(0L);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.plus((long) 8);
        org.joda.time.Duration duration34 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) '4');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime.Property property38 = dateTime36.yearOfEra();
        org.joda.time.Interval interval39 = property38.toInterval();
        java.util.Locale locale40 = null;
        int int41 = property38.getMaximumTextLength(locale40);
        java.lang.String str42 = property38.getName();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period53 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration55 = duration44.minus(0L);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1L), 1L, periodType60, chronology61);
        java.lang.String str63 = periodType60.toString();
        java.lang.String str64 = periodType60.getName();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1645455029643L, periodType60);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, readableInstant56, periodType60);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        long long74 = dateTime73.getMillis();
        org.joda.time.DateTime dateTime76 = dateTime73.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime78 = dateTime76.plusSeconds((int) (byte) 10);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Duration duration80 = duration44.minus((org.joda.time.ReadableDuration) duration70);
        boolean boolean81 = property38.equals((java.lang.Object) duration44);
        int int82 = duration34.compareTo((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration83 = duration44.toDuration();
        org.joda.time.Instant instant85 = instant12.withDurationAdded((org.joda.time.ReadableDuration) duration44, 757);
        org.joda.time.Instant instant87 = instant12.minus(30325881600000L);
        org.joda.time.Instant instant90 = instant87.withDurationAdded(1645455049741L, (int) 'a');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant12", (dateTime10.compareTo(instant12) == 0) == dateTime10.equals(instant12));
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0874");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.DateTime dateTime51 = instant6.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        mutablePeriod52.addWeeks((int) (byte) -1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration67 = duration56.minus(0L);
        org.joda.time.Chronology chronology68 = null;
        mutablePeriod52.setPeriod((org.joda.time.ReadableDuration) duration56, chronology68);
        long long70 = duration56.getStandardHours();
        org.joda.time.Instant instant72 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration56, 2023);
        org.joda.time.Instant instant75 = instant72.withDurationAdded(0L, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = instant75.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0875");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis((long) 9);
        org.joda.time.Instant instant21 = instant19.minus(1645455060010L);
        org.joda.time.Instant instant23 = instant19.minus(1645455066597L);
        boolean boolean25 = instant19.isAfter(1645455192191L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0876");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1645455156863L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime7.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTime.Property property16 = dateTime7.yearOfCentury();
        int int17 = property16.getMaximumValue();
        org.joda.time.DateTime dateTime19 = property16.addWrapFieldToCopy(4365808);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and mutableDateTime15", (dateTime7.compareTo(mutableDateTime15) == 0) == dateTime7.equals(mutableDateTime15));
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0877");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime(chronology24);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str31 = dateTimeZone29.getNameKey(1645455028293L);
        int int33 = dateTimeZone29.getOffset(1645455028293L);
        long long37 = dateTimeZone29.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime38 = dateTime23.withZoneRetainFields(dateTimeZone29);
        long long40 = dateTimeZone29.convertUTCToLocal(1645455040347L);
        boolean boolean41 = dateTimeZone29.isFixed();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        boolean boolean46 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        java.lang.Object obj47 = mutableInterval42.clone();
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfEra();
        org.joda.time.Chronology chronology50 = chronology48.withUTC();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone51.getShortName(1645455068377L, locale53);
        long long57 = dateTimeZone51.convertLocalToUTC(1645455037307L, false);
        long long59 = dateTimeZone29.getMillisKeepLocal(dateTimeZone51, 10001L);
        int int61 = dateTimeZone51.getOffsetFromLocal(1645455112343L);
        org.joda.time.DateTime dateTime62 = dateTime9.withZone(dateTimeZone51);
        java.lang.String str63 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(1645455182089L, dateTimeZone51);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes(53482279);
        java.util.Date date67 = dateTime64.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime62", (dateTime9.compareTo(dateTime62) == 0) == dateTime9.equals(dateTime62));
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0878");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.minusMillis(7);
        org.joda.time.Duration duration6 = new org.joda.time.Duration((java.lang.Object) 1645455040972L);
        org.joda.time.Duration duration8 = duration6.minus(1645455048468L);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration6);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfDay();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.millisOfDay();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        java.lang.Object obj38 = mutableInterval33.clone();
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfEra();
        java.util.Locale locale41 = null;
        int int42 = dateTimeField40.getMaximumTextLength(locale41);
        boolean boolean43 = dateTimeField40.isSupported();
        java.util.Locale locale44 = null;
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology53);
        org.joda.time.DateTime dateTime55 = dateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period56 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval57.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime dateTime66 = dateTime63.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime68 = dateTime66.plusSeconds((int) (byte) 10);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period70 = duration47.toPeriodFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.LocalTime localTime71 = dateTime68.toLocalTime();
        int int72 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) localTime71);
        int[] intArray74 = chronology31.get((org.joda.time.ReadablePartial) localTime71, 1645455035272L);
        long long76 = chronology24.set((org.joda.time.ReadablePartial) localTime71, 1645455060565L);
        java.util.Locale locale78 = null;
        java.lang.String str79 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localTime71, 292278993, locale78);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(dateTimeZone80);
        java.lang.String str82 = dateTime81.toString();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Period period86 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology85);
        org.joda.time.DateTime dateTime87 = dateTime81.minus((org.joda.time.ReadablePeriod) period86);
        org.joda.time.DateTime dateTime88 = dateTime81.withEarlierOffsetAtOverlap();
        int int89 = dateTime81.getYearOfCentury();
        org.joda.time.LocalTime localTime90 = dateTime81.toLocalTime();
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime71, (org.joda.time.ReadablePartial) localTime90);
        org.joda.time.Instant instant92 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime93 = instant92.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime94 = instant92.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime95 = localTime71.toDateTime((org.joda.time.ReadableInstant) instant92);
        org.joda.time.Period period96 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateTime95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime81 and instant92", (dateTime81.compareTo(instant92) == 0) == dateTime81.equals(instant92));
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0879");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Interval interval12 = interval10.gap(readableInterval11);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Period period28 = new org.joda.time.Period(1645455029672L, (long) 3, periodType18, chronology26);
        mutablePeriod13.add(1645455030370L, chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        boolean boolean48 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property49 = dateTime34.year();
        org.joda.time.Duration duration50 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean51 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration57 = interval55.toDuration();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.Chronology chronology67 = chronology65.withUTC();
        org.joda.time.DateTimeZone dateTimeZone68 = chronology67.getZone();
        java.util.Locale locale70 = null;
        java.lang.String str71 = dateTimeZone68.getShortName(1645455068377L, locale70);
        java.util.Locale locale73 = null;
        java.lang.String str74 = dateTimeZone68.getShortName(0L, locale73);
        org.joda.time.DateTime dateTime75 = dateTime34.withZone(dateTimeZone68);
        long long77 = dateTimeZone68.convertUTCToLocal(1651503073456L);
        int int79 = dateTimeZone68.getOffsetFromLocal(1645455197511L);
        java.lang.String str81 = dateTimeZone68.getNameKey(1645455225082L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and dateTime75", (dateTime34.compareTo(dateTime75) == 0) == dateTime34.equals(dateTime75));
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0880");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(2);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        int int10 = mutablePeriod9.getYears();
        org.joda.time.DateTime dateTime12 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod9, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        java.lang.String str21 = dateTimeZone15.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfSecond();
        int int24 = dateTime22.getWeekOfWeekyear();
        org.joda.time.Duration duration25 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateTime22);
        long long26 = duration25.getMillis();
        org.joda.time.Duration duration29 = new org.joda.time.Duration(1645455036660L, 1645455042903L);
        long long30 = duration29.getMillis();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(chronology36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.yearOfCentury();
        int int48 = dateTime37.get(dateTimeField47);
        long long49 = dateTime37.getMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period60 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DurationFieldType[] durationFieldTypeArray61 = period60.getFieldTypes();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.forFields(durationFieldTypeArray61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.forFields(durationFieldTypeArray61);
        org.joda.time.PeriodType periodType64 = periodType63.withMillisRemoved();
        org.joda.time.Period period65 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37, periodType64);
        org.joda.time.DateTime dateTime67 = dateTime37.minusHours(53482054);
        org.joda.time.DateTime.Property property68 = dateTime37.millisOfSecond();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime22", (dateTime1.compareTo(dateTime22) == 0) == dateTime1.equals(dateTime22));
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0881");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645455028646L, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime25 = dateTime13.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0882");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime23.toDateMidnight();
        org.joda.time.DateTime dateTime27 = dateTime23.plus(1645455035670L);
        int int28 = dateTime27.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str33 = dateTimeZone31.getShortName(52L);
        boolean boolean34 = dateTimeZone31.isFixed();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str39 = dateTimeZone37.getNameKey(1645455028293L);
        long long41 = dateTimeZone37.convertUTCToLocal(1645455035225L);
        long long43 = dateTimeZone31.getMillisKeepLocal(dateTimeZone37, 1645455037008L);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime27, dateTimeZone37);
        java.lang.String str46 = dateTimeZone37.getName(1645455308406L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime44", (dateTime27.compareTo(dateTime44) == 0) == dateTime27.equals(dateTime44));
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0883");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        int int5 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone20);
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period22.minusSeconds((int) (short) 1);
        org.joda.time.Period period26 = period22.plusWeeks((int) (short) -1);
        org.joda.time.Period period28 = period22.minusMillis(4);
        org.joda.time.Interval interval29 = interval21.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Interval interval30 = interval9.gap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTime dateTime31 = interval9.getEnd();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str36 = dateTimeZone34.getShortName(52L);
        boolean boolean37 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime38 = dateTime31.withZone(dateTimeZone34);
        boolean boolean39 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime31);
        int int40 = dateTime4.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime38", (dateTime31.compareTo(dateTime38) == 0) == dateTime31.equals(dateTime38));
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0884");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str19 = dateTimeZone17.getNameKey(1645455028293L);
        int int21 = dateTimeZone17.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime14.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property23 = dateTime14.centuryOfEra();
        int int24 = property9.getDifference((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DurationField durationField25 = property9.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and mutableDateTime22", (dateTime14.compareTo(mutableDateTime22) == 0) == dateTime14.equals(mutableDateTime22));
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0885");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        long long23 = dateTimeZone15.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) periodType29);
        org.joda.time.DateTime dateTime32 = dateTime4.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime35 = dateTime4.withField(dateTimeFieldType33, 53);
        org.joda.time.DateTime dateTime36 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime38 = dateTime36.plusHours(4672155);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime32", (dateTime36.compareTo(dateTime32) == 0) == dateTime36.equals(dateTime32));
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0886");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.DateTime dateTime5 = dateTime2.withMillisOfSecond((int) (short) 10);
        boolean boolean7 = dateTime5.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getShortName(52L);
        org.joda.time.DateTime dateTime13 = dateTime5.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) 1645455052362L, dateTimeZone10);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone10);
        long long17 = dateTimeZone10.convertUTCToLocal(0L);
        java.lang.String str18 = dateTimeZone10.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime13", (dateTime5.compareTo(dateTime13) == 0) == dateTime5.equals(dateTime13));
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0887");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTime.Property property18 = dateTime1.dayOfYear();
        int int19 = dateTime1.getYear();
        org.joda.time.DateTime.Property property20 = dateTime1.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(4380700);
        long long25 = dateTimeZone22.adjustOffset(1645455173189L, true);
        org.joda.time.DateTime dateTime26 = dateTime1.withZone(dateTimeZone22);
        long long28 = dateTimeZone22.convertUTCToLocal(1645455222139L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime26", (dateTime1.compareTo(dateTime26) == 0) == dateTime1.equals(dateTime26));
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0888");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645455029643L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = duration1.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration40 = duration1.withDurationAdded(1645455036379L, 22);
        org.joda.time.Hours hours41 = duration1.toStandardHours();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period52 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration54 = duration43.minus(0L);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((-1L), 1L, periodType59, chronology60);
        java.lang.String str62 = periodType59.toString();
        java.lang.String str63 = periodType59.getName();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1645455029643L, periodType59);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, readableInstant55, periodType59);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval66.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime72.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.plusSeconds((int) (byte) 10);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration69, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Duration duration79 = duration43.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration82 = duration43.withDurationAdded(1645455036379L, 22);
        org.joda.time.Hours hours83 = duration43.toStandardHours();
        boolean boolean84 = duration1.isEqual((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant85 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime86 = instant85.toMutableDateTimeISO();
        org.joda.time.Interval interval87 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.DateTime dateTime88 = interval87.getEnd();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant85", (dateTime3.compareTo(instant85) == 0) == dateTime3.equals(instant85));
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0889");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology12.years();
        mutableInterval0.setChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded(1645455046184L, 3);
        int int27 = dateTime26.getMonthOfYear();
        org.joda.time.Instant instant28 = dateTime26.toInstant();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(1645455032819L);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime33 = dateTime26.minusSeconds(4499573);
        boolean boolean34 = mutableInterval0.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((java.lang.Object) mutableInterval0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and instant28", (dateTime26.compareTo(instant28) == 0) == dateTime26.equals(instant28));
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0890");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Instant instant14 = instant11.minus(1645455086172L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.millis(1645455308154L);
        org.joda.time.Instant instant18 = instant14.withDurationAdded((org.joda.time.ReadableDuration) duration16, 4791252);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant10", (dateTime1.compareTo(instant10) == 0) == dateTime1.equals(instant10));
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0891");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime20.yearOfEra();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean25 = dateTime23.isSupported(dateTimeFieldType24);
        org.joda.time.Instant instant26 = dateTime23.toInstant();
        org.joda.time.DateTime dateTime28 = dateTime23.plusYears((int) (byte) 10);
        int int29 = property18.compareTo((org.joda.time.ReadableInstant) dateTime23);
        java.lang.String str30 = property18.getAsString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant26", (dateTime23.compareTo(instant26) == 0) == dateTime23.equals(instant26));
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0892");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours(1645455075869L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfEra();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Interval interval15 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration17 = duration4.withDurationAdded((org.joda.time.ReadableDuration) duration13, 0);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        boolean boolean33 = dateTime31.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(0);
        boolean boolean52 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean55 = mutableInterval53.contains(1L);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        mutableInterval53.setChronology(chronology62);
        mutablePeriod24.setPeriod(100000L, 1645455034244L, chronology62);
        org.joda.time.DurationField durationField65 = chronology62.minutes();
        org.joda.time.DateTime dateTime66 = dateTime20.withChronology(chronology62);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime20.getZone();
        boolean boolean68 = dateTimeZone67.isFixed();
        org.joda.time.DateTime dateTime69 = dateTime2.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime71 = dateTime2.minusWeeks(4548948);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime6", (instant0.compareTo(dateTime6) == 0) == instant0.equals(dateTime6));
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0893");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        int int13 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime9.minusMinutes(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration28 = duration17.minus(0L);
        long long29 = duration17.getStandardHours();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period42 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.toDuration();
        boolean boolean44 = duration36.isEqual((org.joda.time.ReadableDuration) duration40);
        int int45 = duration17.compareTo((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology51);
        org.joda.time.DateTime dateTime53 = dateTime47.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = dateTime47.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.toDateTimeISO();
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes(0);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        java.lang.String str70 = dateTime69.toString();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology73);
        org.joda.time.DateTime dateTime75 = dateTime69.minus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Period period76 = duration67.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration78 = duration67.minus(0L);
        org.joda.time.DateTime dateTime80 = dateTime63.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) (byte) 0);
        org.joda.time.DateTime dateTime82 = dateTime80.withCenturyOfEra(9);
        int int83 = dateTime82.getMillisOfDay();
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime82, periodType84);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration17, periodType84);
        java.lang.String str87 = dateTime9.toString();
        org.joda.time.Instant instant88 = dateTime9.toInstant();
        org.joda.time.DateTime dateTime90 = dateTime9.minusYears(5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant88", (dateTime1.compareTo(instant88) == 0) == dateTime1.equals(instant88));
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0894");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.Instant instant12 = dateTime8.toInstant();
        org.joda.time.DateTime dateTime14 = dateTime8.plusSeconds(41401081);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant12", (dateTime8.compareTo(instant12) == 0) == dateTime8.equals(instant12));
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0895");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        java.util.Date date16 = dateTime1.toDate();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType23 = periodType22.withYearsRemoved();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Period period33 = new org.joda.time.Period(1645455029672L, (long) 3, periodType23, chronology31);
        mutablePeriod18.add(1645455030370L, chronology31);
        org.joda.time.Period period35 = new org.joda.time.Period(1645455035827L, chronology31);
        int int36 = period35.getMonths();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadablePeriod) period35);
        org.joda.time.Instant instant38 = dateTime1.toInstant();
        boolean boolean40 = instant38.isAfter(1645455218657L);
        org.joda.time.DateTimeZone dateTimeZone41 = instant38.getZone();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = dateTime50.toDateTimeISO();
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(0);
        boolean boolean60 = dateTime46.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property61 = dateTime46.year();
        org.joda.time.DateTime dateTime63 = dateTime46.minus(1645455041013L);
        boolean boolean64 = dateTime46.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        java.lang.String str67 = dateTime66.toString();
        org.joda.time.DateTime dateTime69 = dateTime66.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.toDateTime(chronology70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime80 = dateTime73.toDateTimeISO();
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes(0);
        boolean boolean83 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime.Property property84 = dateTime69.year();
        org.joda.time.DateTime dateTime86 = dateTime69.minus(1645455041013L);
        boolean boolean87 = dateTime69.isAfterNow();
        org.joda.time.Chronology chronology88 = dateTime69.getChronology();
        long long89 = dateTime69.getMillis();
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.DateTime dateTime91 = dateTime69.minus(readableDuration90);
        org.joda.time.DateTime dateTime93 = dateTime69.withYear(99);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalDateTime localDateTime95 = dateTime46.toLocalDateTime();
        boolean boolean96 = dateTimeZone41.isLocalDateTimeGap(localDateTime95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant38", (dateTime1.compareTo(instant38) == 0) == dateTime1.equals(instant38));
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0896");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.Instant instant3 = instant1.minus(1645492384881L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = instant1.getZone();
        long long6 = instant1.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime4", (instant1.compareTo(mutableDateTime4) == 0) == instant1.equals(mutableDateTime4));
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0897");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        java.lang.Object obj4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType6 = periodType5.withMinutesRemoved();
        int int7 = periodType6.size();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime(chronology13);
        org.joda.time.DateTime dateTime15 = dateTime12.toDateTime();
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime12.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Interval interval31 = interval25.withDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        boolean boolean32 = dateTime12.equals((java.lang.Object) interval25);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime dateTime42 = dateTime39.plusWeeks((int) (byte) 10);
        boolean boolean43 = mutableInterval33.contains((org.joda.time.ReadableInstant) dateTime42);
        int int44 = dateTime42.getMillisOfDay();
        org.joda.time.DateTime dateTime46 = dateTime42.plusYears(3);
        boolean boolean47 = interval25.contains((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology48 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(obj4, periodType6, chronology48);
        org.joda.time.PeriodType periodType50 = periodType6.withMonthsRemoved();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime55.toDateTimeISO();
        org.joda.time.DateTime dateTime58 = dateTime55.plusMillis(100);
        long long59 = dateTime58.getMillis();
        int int60 = dateTime58.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval65 = mutableInterval64.toInterval();
        boolean boolean66 = mutableInterval62.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        java.lang.Object obj67 = mutableInterval62.clone();
        org.joda.time.Chronology chronology68 = mutableInterval62.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfEra();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.millisOfSecond();
        boolean boolean71 = dateTimeFieldType61.isSupported(chronology68);
        int int72 = dateTime58.get(dateTimeFieldType61);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        boolean boolean77 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj78 = mutableInterval73.clone();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        long long80 = mutableInterval79.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean83 = mutableInterval79.overlaps((org.joda.time.ReadableInterval) mutableInterval81);
        java.lang.Object obj84 = mutableInterval79.clone();
        org.joda.time.Chronology chronology85 = mutableInterval79.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.millisOfDay();
        org.joda.time.DurationField durationField87 = chronology85.years();
        mutableInterval73.setChronology(chronology85);
        boolean boolean89 = dateTimeFieldType61.isSupported(chronology85);
        org.joda.time.Period period90 = new org.joda.time.Period(0L, periodType50, chronology85);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(1645455037307L, chronology85);
        org.joda.time.DateTime dateTime92 = instant0.toDateTime(chronology85);
        org.joda.time.DateTime dateTime94 = dateTime92.minusWeeks(812);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0898");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property11 = dateTime9.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval18 = interval12.withDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval19 = interval12.toInterval();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        mutableInterval20.setInterval((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.Interval interval33 = interval19.gap((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        boolean boolean35 = mutableInterval34.containsNow();
        boolean boolean36 = interval19.isBefore((org.joda.time.ReadableInterval) mutableInterval34);
        boolean boolean38 = mutableInterval34.contains(1645455037444L);
        boolean boolean40 = mutableInterval34.isAfter((long) (byte) 0);
        org.joda.time.DateTime dateTime41 = mutableInterval34.getEnd();
        org.joda.time.DateTime.Property property42 = dateTime41.weekOfWeekyear();
        boolean boolean43 = dateTime5.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfEra();
        org.joda.time.Chronology chronology52 = chronology50.withUTC();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology52.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        int int56 = dateTimeZone53.getOffsetFromLocal(1645455050010L);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.DateTime dateTime61 = dateTime58.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime(chronology62);
        org.joda.time.DateTime dateTime64 = dateTime61.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str69 = dateTimeZone67.getNameKey(1645455028293L);
        int int71 = dateTimeZone67.getOffset(1645455028293L);
        long long75 = dateTimeZone67.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime76 = dateTime61.withZoneRetainFields(dateTimeZone67);
        long long78 = dateTimeZone53.getMillisKeepLocal(dateTimeZone67, 1687730611190400000L);
        org.joda.time.DateTime dateTime79 = dateTime41.withZone(dateTimeZone53);
        java.util.Locale locale81 = null;
        java.lang.String str82 = dateTimeZone53.getShortName(376809227907309L, locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime58", (dateTime1.compareTo(dateTime58) == 0) == dateTime1.equals(dateTime58));
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0899");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        java.lang.String str17 = duration3.toString();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField28 = chronology25.halfdays();
        org.joda.time.Period period29 = duration3.toPeriod(periodType18, chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.monthOfYear();
        org.joda.time.DurationField durationField31 = chronology25.centuries();
        org.joda.time.DateTimeField dateTimeField32 = chronology25.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str37 = dateTimeZone35.getShortName(52L);
        boolean boolean38 = dateTimeZone35.isFixed();
        long long40 = dateTimeZone35.nextTransition(1645455028058L);
        org.joda.time.Chronology chronology41 = chronology25.withZone(dateTimeZone35);
        org.joda.time.Period period42 = new org.joda.time.Period(1645455095707L, chronology41);
        org.joda.time.DurationField durationField43 = chronology41.days();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(1645455125208L, chronology41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime44", (dateTime5.compareTo(dateTime44) == 0) == dateTime5.equals(dateTime44));
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0900");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.Duration duration8 = duration3.toDuration();
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration10 = duration8.toDuration();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMillis(100);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime(chronology28);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str35 = dateTimeZone33.getNameKey(1645455028293L);
        int int37 = dateTimeZone33.getOffset(1645455028293L);
        long long41 = dateTimeZone33.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime42 = dateTime27.withZoneRetainFields(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime21.toMutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime48.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str55 = dateTimeZone53.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime56 = dateTime48.withZone(dateTimeZone53);
        org.joda.time.YearMonthDay yearMonthDay57 = dateTime56.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.DateTime dateTime62 = dateTime59.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime(chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        java.lang.String str67 = dateTime66.toString();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology70);
        org.joda.time.DateTime dateTime72 = dateTime66.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.DateTime dateTime73 = dateTime66.toDateTimeISO();
        org.joda.time.DateTime dateTime75 = dateTime73.minusMinutes(0);
        boolean boolean76 = dateTime62.isEqual((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime.Property property77 = dateTime62.year();
        org.joda.time.DateTime dateTime79 = dateTime62.withMinuteOfHour(22);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.time();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime79, periodType80);
        org.joda.time.Period period82 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime43, periodType80);
        boolean boolean83 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration85 = duration10.plus(1319791L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime56", (dateTime18.compareTo(dateTime56) == 0) == dateTime18.equals(dateTime56));
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0901");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        int int13 = dateTimeZone9.getOffset(1645455028293L);
        java.lang.String str15 = dateTimeZone9.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds(32);
        java.lang.String str19 = dateTime18.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime16", (dateTime4.compareTo(dateTime16) == 0) == dateTime4.equals(dateTime16));
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0902");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded(1645455046184L, 3);
        int int11 = dateTime10.getMonthOfYear();
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(1645455032819L);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration14);
        int int16 = dateTime10.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone19);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.minusSeconds((int) (short) 1);
        org.joda.time.Period period25 = period21.plusWeeks((int) (short) -1);
        org.joda.time.Period period27 = period21.minusMillis(4);
        org.joda.time.Interval interval28 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone31);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period33.minusSeconds((int) (short) 1);
        org.joda.time.Period period37 = period33.plusWeeks((int) (short) -1);
        org.joda.time.Period period39 = period33.minusMillis(4);
        org.joda.time.Interval interval40 = interval32.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Interval interval41 = interval20.gap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime43.yearOfEra();
        org.joda.time.Interval interval46 = property45.toInterval();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Interval interval52 = interval46.withDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Interval interval53 = interval46.toInterval();
        org.joda.time.Interval interval55 = interval53.withEndMillis(2339679030463L);
        boolean boolean56 = interval40.isAfter((org.joda.time.ReadableInterval) interval53);
        org.joda.time.Chronology chronology57 = interval40.getChronology();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime dateTime59 = dateTime10.toDateTime(chronology57);
        org.joda.time.DateTime dateTime61 = dateTime59.plusYears(228565186);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime59 and instant12", (dateTime59.compareTo(instant12) == 0) == dateTime59.equals(instant12));
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0903");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getShortName(52L);
        org.joda.time.DateTime dateTime12 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime4.plusSeconds(2022);
        org.joda.time.DateTime.Property property15 = dateTime14.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0904");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod();
        mutablePeriod0.add((org.joda.time.ReadablePeriod) mutablePeriod3);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        mutablePeriod6.setPeriod(1645455033926L, 1645455028941L, chronology21);
        org.joda.time.DurationField durationField23 = chronology21.eras();
        mutablePeriod0.add(1645455208258L, chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField26 = chronology21.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField26, and durationField23", !(durationField23.compareTo(durationField26) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField26.compareTo(durationField23))));
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0905");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        java.lang.String str28 = dateTimeZone22.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime29.getZone();
        boolean boolean32 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str37 = dateTimeZone35.getNameKey(1645455028293L);
        int int39 = dateTimeZone35.getOffset(1645455028293L);
        long long43 = dateTimeZone35.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str49 = dateTimeZone47.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone47);
        boolean boolean51 = dateTimeZone47.isFixed();
        long long53 = dateTimeZone35.getMillisKeepLocal(dateTimeZone47, 1645455095994L);
        org.joda.time.DateTime dateTime54 = dateTime29.withZone(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime50", (dateTime8.compareTo(dateTime50) == 0) == dateTime8.equals(dateTime50));
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0906");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        boolean boolean27 = mutableInterval26.containsNow();
        boolean boolean28 = interval11.isBefore((org.joda.time.ReadableInterval) mutableInterval26);
        boolean boolean30 = mutableInterval26.contains(1645455037444L);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1L), 1L, periodType33, chronology34);
        mutablePeriod35.setSeconds((int) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        mutablePeriod35.setPeriod((long) 9, 100000L, chronology40);
        mutablePeriod35.add(1645455046500L);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime50.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period61 = period57.plusMillis((int) ' ');
        org.joda.time.Period period63 = period57.minusHours((int) (short) -1);
        org.joda.time.Period period65 = period63.minusDays(10);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) period63);
        mutableInterval26.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod35);
        java.lang.Object obj68 = mutableInterval26.clone();
        org.joda.time.Duration duration69 = org.joda.time.Duration.ZERO;
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration69);
        mutableInterval26.setDurationBeforeEnd(1645455185323L);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        java.lang.String str75 = dateTime74.toString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology78);
        org.joda.time.DateTime dateTime80 = dateTime74.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime dateTime83 = dateTime80.withDurationAdded(1645455046184L, 3);
        int int84 = dateTime83.getMonthOfYear();
        org.joda.time.Instant instant85 = dateTime83.toInstant();
        org.joda.time.Duration duration87 = org.joda.time.Duration.standardSeconds(1645455032819L);
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableDuration) duration87);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime83 and instant85", (dateTime83.compareTo(instant85) == 0) == dateTime83.equals(instant85));
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0907");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.Instant instant25 = instant22.plus(1645455031834L);
        org.joda.time.Instant instant27 = instant22.minus(1645455037062L);
        org.joda.time.Instant instant28 = instant22.toInstant();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = duration32.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = dateTime37.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime dateTime52 = dateTime49.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay54 = dateTime53.toYearMonthDay();
        int int55 = yearMonthDay54.size();
        org.joda.time.DateTime dateTime56 = dateTime44.withFields((org.joda.time.ReadablePartial) yearMonthDay54);
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfMonth();
        org.joda.time.DateTime dateTime59 = dateTime56.withDayOfWeek(5);
        org.joda.time.DateTime dateTime61 = dateTime56.plusWeeks(1970);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant28, (org.joda.time.ReadableInstant) dateTime61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant28", (dateTime4.compareTo(instant28) == 0) == dateTime4.equals(instant28));
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0908");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645455034114L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration30 = duration19.minus(0L);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.plus((long) 8);
        org.joda.time.Duration duration39 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) '4');
        long long40 = duration39.getMillis();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime45.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(100);
        org.joda.time.LocalDate localDate50 = dateTime47.toLocalDate();
        org.joda.time.Period period51 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant53 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration39, 4362217);
        java.lang.String str54 = duration39.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0909");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant3 = instant0.minus((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime8 = property7.roundFloorCopy();
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Period period11 = period9.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean13 = period11.equals((java.lang.Object) dateTimeFieldType12);
        int int14 = dateTime8.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime16 = dateTime8.minusMillis(9);
        boolean boolean17 = instant3.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutableDateTime mutableDateTime18 = instant3.toMutableDateTimeISO();
        org.joda.time.Chronology chronology19 = mutableDateTime18.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0910");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        int int14 = instant1.get(dateTimeField13);
        org.joda.time.Instant instant16 = instant1.minus(1645455086896L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration29 = duration18.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = duration29.toPeriodTo((org.joda.time.ReadableInstant) dateTime36, periodType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property42.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean45 = dateTime43.isSupported(dateTimeFieldType44);
        org.joda.time.DateTime.Property property46 = dateTime36.property(dateTimeFieldType44);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Instant instant48 = dateTime36.toInstant();
        int int49 = dateTime36.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0911");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long3 = dateTimeZone1.convertUTCToLocal(1645455035827L);
        long long6 = dateTimeZone1.adjustOffset(1645455078179L, true);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType10 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.Period period20 = new org.joda.time.Period(1645455029672L, (long) 3, periodType10, chronology18);
        org.joda.time.DurationField durationField21 = chronology18.eras();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime(chronology28);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.withMillisOfDay(1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant33.toInstant();
        boolean boolean35 = dateTime32.isAfter((org.joda.time.ReadableInstant) instant34);
        org.joda.time.LocalDateTime localDateTime36 = dateTime32.toLocalDateTime();
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime36, locale37);
        boolean boolean39 = dateTimeZone1.isLocalDateTimeGap(localDateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant33", (dateTime24.compareTo(instant33) == 0) == dateTime24.equals(instant33));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0912");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod16.addMillis((int) '4');
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        int int23 = period21.get(durationFieldType22);
        java.lang.String str24 = durationFieldType22.getName();
        mutablePeriod16.set(durationFieldType22, 26);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime42 = dateTime35.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes(0);
        boolean boolean45 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property46 = dateTime31.year();
        org.joda.time.DateTime dateTime48 = dateTime31.minus(1645455041013L);
        org.joda.time.Instant instant49 = dateTime31.toInstant();
        org.joda.time.Chronology chronology50 = instant49.getChronology();
        org.joda.time.DurationField durationField51 = durationFieldType22.getField(chronology50);
        int int53 = durationField51.getValue(1645455432104L);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration60 = duration57.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime69.withZoneRetainFields(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime dateTime77 = dateTime74.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime78 = dateTime77.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay79 = dateTime78.toYearMonthDay();
        int int80 = yearMonthDay79.size();
        org.joda.time.DateTime dateTime81 = dateTime69.withFields((org.joda.time.ReadablePartial) yearMonthDay79);
        org.joda.time.Chronology chronology82 = yearMonthDay79.getChronology();
        org.joda.time.DurationField durationField83 = chronology82.days();
        org.joda.time.DurationField durationField84 = chronology82.centuries();
        int int85 = durationField51.compareTo(durationField84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and instant49", (dateTime31.compareTo(instant49) == 0) == dateTime31.equals(instant49));
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0913");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645455038843L, 1645455049723L);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.eras();
        boolean boolean4 = mutablePeriod2.isSupported(durationFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes(0);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) '4');
        org.joda.time.Instant instant18 = dateTime15.toInstant();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime(chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime28 = dateTime23.withFieldAdded(durationFieldType26, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str33 = dateTimeZone31.getShortName(52L);
        boolean boolean34 = dateTimeZone31.isFixed();
        java.util.Locale locale36 = null;
        java.lang.String str37 = dateTimeZone31.getName(1645455042879L, locale36);
        org.joda.time.DateTime dateTime38 = dateTime28.withZoneRetainFields(dateTimeZone31);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant18, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod2, (org.joda.time.ReadableInstant) instant18);
        org.joda.time.Instant instant42 = instant18.plus(1645455426135L);
        org.joda.time.Instant instant44 = instant42.minus(1645455215913L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant18", (dateTime6.compareTo(instant18) == 0) == dateTime6.equals(instant18));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0914");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTime.Property property18 = dateTime1.dayOfYear();
        int int19 = dateTime1.getYear();
        boolean boolean21 = dateTime1.equals((java.lang.Object) "2022-02-22T01:12:48.207+10:22");
        org.joda.time.Instant instant22 = dateTime1.toInstant();
        org.joda.time.Instant instant24 = instant22.plus(1645455124875L);
        org.joda.time.DateTime dateTime25 = instant24.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant22", (dateTime1.compareTo(instant22) == 0) == dateTime1.equals(instant22));
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0915");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime4.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval23 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        boolean boolean24 = dateTime4.equals((java.lang.Object) interval17);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        boolean boolean35 = mutableInterval25.contains((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime34.getMillisOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears(3);
        boolean boolean39 = interval17.contains((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology40 = interval17.getChronology();
        org.joda.time.Interval interval42 = interval17.withStartMillis(3120000L);
        org.joda.time.DateTime dateTime43 = interval17.getEnd();
        org.joda.time.Duration duration45 = org.joda.time.Duration.millis(1651503052701L);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant46.toInstant();
        org.joda.time.DateTime dateTime48 = instant46.toDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((int) (short) 10, 53429880, (int) (short) 0, 1);
        int int54 = mutablePeriod53.getSeconds();
        org.joda.time.Period period55 = mutablePeriod53.toPeriod();
        int int56 = mutablePeriod53.getMonths();
        org.joda.time.DateTime dateTime57 = dateTime48.plus((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.Interval interval58 = duration45.toIntervalFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Interval interval59 = interval17.overlap((org.joda.time.ReadableInterval) interval58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant46", (dateTime1.compareTo(instant46) == 0) == dateTime1.equals(instant46));
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0916");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = dateTimeField15.getLeapDurationField();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds((int) (byte) 10);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period41 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalTime localTime42 = dateTime39.toLocalTime();
        java.lang.String str43 = localTime42.toString();
        int int44 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology51);
        org.joda.time.DateTime dateTime53 = dateTime47.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = dateTime47.withEarlierOffsetAtOverlap();
        int int55 = dateTime47.getYearOfCentury();
        org.joda.time.LocalTime localTime56 = dateTime47.toLocalTime();
        org.joda.time.Period period57 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime42, (org.joda.time.ReadablePartial) localTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean59 = localTime42.isSupported(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = localTime42.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField61, and durationField14", !(durationField14.compareTo(durationField61) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField61.compareTo(durationField14))));
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0917");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTime.Property property18 = dateTime1.dayOfYear();
        int int19 = dateTime1.getYear();
        boolean boolean21 = dateTime1.equals((java.lang.Object) "2022-02-22T01:12:48.207+10:22");
        org.joda.time.Instant instant22 = dateTime1.toInstant();
        boolean boolean23 = instant22.isAfterNow();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Instant instant25 = instant22.plus(readableDuration24);
        org.joda.time.Instant instant27 = instant25.withMillis(1913224690820L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant25", (dateTime1.compareTo(instant25) == 0) == dateTime1.equals(instant25));
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0918");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.hourOfDay();
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTimeISO();
        long long21 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant23 = instant19.plus(1645455190844L);
        org.joda.time.Period period25 = org.joda.time.Period.weeks(1);
        org.joda.time.Period period27 = period25.withDays((int) 'a');
        org.joda.time.Period period29 = period27.minusWeeks(4575453);
        org.joda.time.Duration duration30 = period27.toStandardDuration();
        org.joda.time.Instant instant32 = instant23.withDurationAdded((org.joda.time.ReadableDuration) duration30, 999);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant19", (dateTime1.compareTo(instant19) == 0) == dateTime1.equals(instant19));
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0919");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        mutablePeriod2.setMillis(4);
        mutablePeriod2.addSeconds(4704632);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0920");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        int int23 = dateTime4.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0921");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        int int14 = instant1.get(dateTimeField13);
        org.joda.time.Instant instant17 = instant1.withDurationAdded(1645455398235L, 4504932);
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0922");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        long long12 = duration1.getStandardMinutes();
        org.joda.time.Duration duration13 = duration1.toDuration();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod16.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration34 = duration23.minus(0L);
        org.joda.time.Duration duration36 = duration23.withMillis(1645455034114L);
        org.joda.time.Instant instant37 = instant20.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType49 = periodType48.withYearsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.Period period59 = new org.joda.time.Period(1645455029672L, (long) 3, periodType49, chronology57);
        org.joda.time.DurationField durationField60 = chronology57.eras();
        org.joda.time.DateTime dateTime61 = dateTime39.toDateTime(chronology57);
        mutablePeriod16.setPeriod((org.joda.time.ReadableInstant) instant20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period63 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str68 = dateTimeZone66.getNameKey(1645455028293L);
        int int70 = dateTimeZone66.getOffset(1645455028293L);
        java.lang.String str72 = dateTimeZone66.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime75 = dateTime73.withMillis((long) ' ');
        org.joda.time.DateTime dateTime77 = dateTime73.withMillisOfDay(53504366);
        org.joda.time.DateTime dateTime79 = dateTime73.withYearOfEra(75);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Duration duration82 = duration13.minus(readableDuration81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant20", (dateTime3.compareTo(instant20) == 0) == dateTime3.equals(instant20));
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0923");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 53429880, (int) (short) 0, 1);
        int int5 = mutablePeriod4.getSeconds();
        mutablePeriod4.addHours(53452649);
        java.lang.Object obj8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval(obj8);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.Interval interval12 = interval9.withStartMillis(1645455121638L);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(1645455050897L);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        boolean boolean24 = dateTime14.equals((java.lang.Object) chronology21);
        org.joda.time.Interval interval25 = interval9.withChronology(chronology21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Interval interval36 = interval30.withDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Interval interval37 = interval30.toInterval();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        mutableInterval38.setInterval((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.Interval interval51 = interval37.gap((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        boolean boolean53 = mutableInterval52.containsNow();
        boolean boolean54 = interval37.isBefore((org.joda.time.ReadableInterval) mutableInterval52);
        boolean boolean56 = mutableInterval52.contains(1645455037444L);
        org.joda.time.Duration duration57 = mutableInterval52.toDuration();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.minus(readableDuration58);
        org.joda.time.Interval interval60 = interval25.withDurationAfterStart((org.joda.time.ReadableDuration) duration59);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Instant instant63 = new org.joda.time.Instant(1645455118599L);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime(chronology69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology76);
        org.joda.time.DateTime dateTime78 = dateTime72.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime79 = dateTime72.toDateTimeISO();
        org.joda.time.DateTime dateTime81 = dateTime79.minusMinutes(0);
        boolean boolean82 = dateTime68.isEqual((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime.Property property83 = dateTime68.year();
        org.joda.time.DateTime dateTime85 = dateTime68.minus(1645455041013L);
        org.joda.time.Instant instant86 = dateTime68.toInstant();
        org.joda.time.Chronology chronology87 = instant86.getChronology();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) instant86);
        boolean boolean90 = instant63.equals((java.lang.Object) 2339679063799L);
        org.joda.time.Duration duration92 = org.joda.time.Duration.millis(1645455212750L);
        org.joda.time.Instant instant93 = instant63.plus((org.joda.time.ReadableDuration) duration92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime68 and instant86", (dateTime68.compareTo(instant86) == 0) == dateTime68.equals(instant86));
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0924");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645455028646L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes(1645455037008L);
        boolean boolean17 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        boolean boolean28 = mutableInterval18.contains((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime31 = dateTime27.plusYears(3);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        org.joda.time.DateTime dateTime34 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear(4605172);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and instant33", (dateTime34.compareTo(instant33) == 0) == dateTime34.equals(instant33));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0925");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime9.toLocalDateTime();
        org.joda.time.DateTime dateTime15 = dateTime9.withMillisOfSecond(20);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        java.lang.String str17 = property16.getName();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        int int20 = localDateTime19.size();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant10", (dateTime1.compareTo(instant10) == 0) == dateTime1.equals(instant10));
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0926");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = instant7.toDateTime();
        org.joda.time.DateTime dateTime10 = instant7.toDateTime();
        org.joda.time.Instant instant11 = instant7.toInstant();
        org.joda.time.Instant instant14 = instant11.withDurationAdded(1645455202321L, 1439);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant11", (dateTime4.compareTo(instant11) == 0) == dateTime4.equals(instant11));
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0927");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        boolean boolean19 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) interval18);
        boolean boolean21 = interval18.equals((java.lang.Object) "2022-02-22T01:12:44.218+10:22");
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = duration25.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.DateTime dateTime37 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime37);
        mutablePeriod38.addMillis((int) '4');
        int int41 = mutablePeriod38.getWeeks();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant43.toInstant();
        mutablePeriod38.setPeriod(readableInstant42, (org.joda.time.ReadableInstant) instant44);
        org.joda.time.Interval interval46 = interval18.withEnd((org.joda.time.ReadableInstant) instant44);
        org.joda.time.MutableInterval mutableInterval47 = interval46.toMutableInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and instant43", (dateTime30.compareTo(instant43) == 0) == dateTime30.equals(instant43));
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0928");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = instant22.get(dateTimeFieldType23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology39 = chronology31.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType23.getField(chronology39);
        java.lang.String str42 = dateTimeFieldType23.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0929");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears((int) '4');
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfCentury();
        org.joda.time.DateTime dateTime16 = dateTime10.minusSeconds(42);
        org.joda.time.DateTime.Property property17 = dateTime10.year();
        org.joda.time.DurationField durationField18 = property17.getLeapDurationField();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property17.getAsText(locale19);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.Instant instant24 = instant22.minus(1645492384881L);
        org.joda.time.MutableDateTime mutableDateTime25 = instant22.toMutableDateTime();
        long long26 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) instant22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant22", (dateTime1.compareTo(instant22) == 0) == dateTime1.equals(instant22));
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0930");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) -1);
        mutablePeriod0.addHours((int) ' ');
        mutablePeriod0.addMillis(4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        int int12 = dateTime8.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTimeISO();
        int int22 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime8.minusMinutes(8);
        org.joda.time.DateTime.Property property25 = dateTime8.dayOfYear();
        int int26 = dateTime8.getYear();
        boolean boolean28 = dateTime8.equals((java.lang.Object) "2022-02-22T01:12:48.207+10:22");
        org.joda.time.Instant instant29 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        boolean boolean48 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime49 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTime dateTime52 = dateTime49.withField(dateTimeFieldType50, 9);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType50.getDurationType();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime(chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusYears(4369741);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime62.toMutableDateTimeISO();
        org.joda.time.Chronology chronology64 = dateTime62.getChronology();
        org.joda.time.Period period66 = org.joda.time.Period.seconds(2022);
        org.joda.time.Period period68 = period66.minusWeeks(53504080);
        int[] intArray70 = chronology64.get((org.joda.time.ReadablePeriod) period68, 1645455095889L);
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType50.getField(chronology64);
        int int72 = dateTime8.get(dateTimeFieldType50);
        boolean boolean73 = mutablePeriod0.equals((java.lang.Object) dateTime8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant29", (dateTime14.compareTo(instant29) == 0) == dateTime14.equals(instant29));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0931");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.DateTime dateTime13 = dateTime8.withYearOfEra(9);
        org.joda.time.DateTime.Property property14 = dateTime8.millisOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(997);
        org.joda.time.DateTime dateTime17 = property14.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime18 = property14.withMaximumValue();
        org.joda.time.Instant instant20 = org.joda.time.Instant.parse("2022-02-22T10:51:32.202+20:00");
        org.joda.time.Instant instant22 = instant20.minus((-1L));
        org.joda.time.DateTime dateTime23 = instant22.toDateTimeISO();
        java.util.Date date24 = instant22.toDate();
        boolean boolean25 = dateTime18.isAfter((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime38 = dateTime30.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        org.joda.time.Interval interval43 = property42.toInterval();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Interval interval49 = interval43.withDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        boolean boolean50 = dateTime30.equals((java.lang.Object) interval43);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        boolean boolean61 = mutableInterval51.contains((org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime60.getMillisOfDay();
        org.joda.time.DateTime dateTime64 = dateTime60.plusYears(3);
        boolean boolean65 = interval43.contains((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology66 = interval43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone69);
        org.joda.time.Period period71 = org.joda.time.Period.ZERO;
        org.joda.time.Period period73 = period71.minusSeconds((int) (short) 1);
        org.joda.time.Period period75 = period71.plusWeeks((int) (short) -1);
        org.joda.time.Period period77 = period71.minusMillis(4);
        org.joda.time.Interval interval78 = interval70.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Chronology chronology79 = interval78.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.halfdays();
        boolean boolean81 = interval43.equals((java.lang.Object) chronology79);
        org.joda.time.DateTimeField dateTimeField82 = chronology79.centuryOfEra();
        java.lang.String str83 = chronology79.toString();
        org.joda.time.DateTime dateTime84 = dateTime18.toDateTime(chronology79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant22 and dateTime23", (instant22.compareTo(dateTime23) == 0) == instant22.equals(dateTime23));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0932");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1645455029820L, chronology11);
        boolean boolean16 = dateTimeFieldType3.isSupported(chronology11);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((java.lang.Object) duration1, chronology11);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded(1645455046184L, 3);
        int int29 = dateTime28.getMonthOfYear();
        org.joda.time.Instant instant30 = dateTime28.toInstant();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        mutableInterval31.setEndMillis(10L);
        org.joda.time.Interval interval35 = mutableInterval31.toInterval();
        boolean boolean37 = interval35.isAfter(1645455029375L);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = duration41.plus((long) 8);
        org.joda.time.Seconds seconds45 = duration41.toStandardSeconds();
        org.joda.time.Duration duration46 = duration41.toDuration();
        org.joda.time.Interval interval47 = interval35.withDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType54 = periodType53.withYearsRemoved();
        org.joda.time.PeriodType periodType55 = periodType54.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfEra();
        org.joda.time.Period period64 = new org.joda.time.Period(1645455029672L, (long) 3, periodType54, chronology62);
        mutablePeriod49.add(1645455030370L, chronology62);
        org.joda.time.Period period66 = new org.joda.time.Period(1645455035827L, chronology62);
        org.joda.time.Period period68 = period66.plusWeeks(4369741);
        org.joda.time.Interval interval69 = interval35.withPeriodAfterStart((org.joda.time.ReadablePeriod) period68);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval75 = mutableInterval74.toInterval();
        boolean boolean76 = mutableInterval72.overlaps((org.joda.time.ReadableInterval) mutableInterval74);
        java.lang.Object obj77 = mutableInterval72.clone();
        org.joda.time.Chronology chronology78 = mutableInterval72.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((long) 8, periodType71, chronology78);
        org.joda.time.Period period81 = interval69.toPeriod(periodType71);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime28, periodType71);
        int int83 = mutablePeriod82.getMinutes();
        int int84 = mutablePeriod82.getHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and instant30", (dateTime28.compareTo(instant30) == 0) == dateTime28.equals(instant30));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0933");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Interval interval12 = interval10.gap(readableInterval11);
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTime dateTime21 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfDay(1);
        java.lang.String str24 = dateTime21.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime dateTime29 = dateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.DateTime dateTime32 = dateTime21.withFields((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1645455029820L, chronology41);
        boolean boolean46 = dateTimeFieldType33.isSupported(chronology41);
        int int47 = dateTime21.get(dateTimeFieldType33);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int51 = dateTimeZone49.getOffsetFromLocal(0L);
        org.joda.time.DateTime dateTime52 = dateTime21.toDateTime(dateTimeZone49);
        boolean boolean54 = dateTime52.isEqual(5880000L);
        boolean boolean55 = interval13.isAfter((org.joda.time.ReadableInstant) dateTime52);
        java.lang.String str56 = interval13.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime18 and dateTime52", (dateTime18.compareTo(dateTime52) == 0) == dateTime18.equals(dateTime52));
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0934");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        boolean boolean4 = property3.isLeap();
        org.joda.time.DateTime dateTime6 = property3.setCopy(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfEra();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval18 = interval11.toInterval();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Interval interval32 = interval18.gap((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Period period33 = interval18.toPeriod();
        org.joda.time.Period period35 = period33.minusMonths(757);
        boolean boolean36 = property3.equals((java.lang.Object) period33);
        java.util.Locale locale37 = null;
        int int38 = property3.getMaximumTextLength(locale37);
        org.joda.time.Interval interval39 = property3.toInterval();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime8", (dateTime2.compareTo(dateTime8) == 0) == dateTime2.equals(dateTime8));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0935");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Interval interval4 = interval3.toInterval();
        org.joda.time.Duration duration5 = interval3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime10.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime20.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval29 = interval23.withDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        boolean boolean30 = dateTime10.equals((java.lang.Object) interval23);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        boolean boolean41 = mutableInterval31.contains((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime40.getMillisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime40.plusYears(3);
        boolean boolean45 = interval23.contains((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology46 = interval23.getChronology();
        org.joda.time.Period period47 = duration5.toPeriod(chronology46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.Chronology chronology50 = chronology46.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone49);
        int int53 = dateTimeZone49.getOffsetFromLocal(1645455422497L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime51", (dateTime7.compareTo(dateTime51) == 0) == dateTime7.equals(dateTime51));
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0936");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Seconds seconds13 = period12.toStandardSeconds();
        int int14 = period12.getMillis();
        org.joda.time.DurationFieldType durationFieldType16 = period12.getFieldType(0);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.Period period30 = new org.joda.time.Period(1645455029672L, (long) 3, periodType20, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfMonth();
        boolean boolean32 = durationFieldType16.isSupported(chronology28);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645455032491L, 1645455038369L, chronology28);
        mutablePeriod33.setHours(53533857);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long39 = dateTimeZone37.convertUTCToLocal(1645455035827L);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone37);
        org.joda.time.Period period42 = new org.joda.time.Period(1645455051139L);
        boolean boolean43 = dateTimeZone37.equals((java.lang.Object) period42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getDurationType();
        boolean boolean46 = period42.isSupported(durationFieldType45);
        java.lang.String str47 = durationFieldType45.getName();
        boolean boolean48 = mutablePeriod33.isSupported(durationFieldType45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime40", (dateTime5.compareTo(dateTime40) == 0) == dateTime5.equals(dateTime40));
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0937");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.hourOfDay();
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTimeISO();
        long long21 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Instant instant23 = instant19.plus(1645455190844L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks(51);
        boolean boolean33 = instant19.isAfter((org.joda.time.ReadableInstant) dateTime32);
        java.lang.String str34 = dateTime32.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant19", (dateTime1.compareTo(instant19) == 0) == dateTime1.equals(instant19));
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0938");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.Instant instant25 = instant22.plus(1645455031834L);
        org.joda.time.Instant instant27 = instant22.minus(1645455037062L);
        org.joda.time.Instant instant28 = instant22.toInstant();
        long long29 = instant22.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0939");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        int int22 = dateTime20.getHourOfDay();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period47 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalTime localTime48 = dateTime45.toLocalTime();
        java.lang.String str49 = localTime48.toString();
        org.joda.time.DateTime dateTime50 = dateTime20.withFields((org.joda.time.ReadablePartial) localTime48);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod2, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime53 = dateTime20.withYear(14);
        org.joda.time.DateTime dateTime55 = dateTime20.minusMillis(27);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str60 = dateTimeZone58.getNameKey(1645455028293L);
        java.lang.String str62 = dateTimeZone58.getNameKey(1645455039471L);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        boolean boolean67 = mutableInterval63.overlaps((org.joda.time.ReadableInterval) mutableInterval65);
        java.lang.Object obj68 = mutableInterval63.clone();
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.yearOfEra();
        org.joda.time.Chronology chronology71 = chronology69.withUTC();
        org.joda.time.DateTimeZone dateTimeZone72 = chronology71.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone72);
        int int75 = dateTimeZone72.getOffset((long) 7);
        long long77 = dateTimeZone58.getMillisKeepLocal(dateTimeZone72, 1645455040208L);
        java.lang.String str78 = dateTimeZone72.toString();
        long long81 = dateTimeZone72.adjustOffset(1645455072545L, true);
        org.joda.time.DateTime dateTime82 = dateTime20.withZone(dateTimeZone72);
        org.joda.time.Interval interval83 = new org.joda.time.Interval(1645455486616L, 1645455549860L, dateTimeZone72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime82", (dateTime20.compareTo(dateTime82) == 0) == dateTime20.equals(dateTime82));
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0940");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        int int6 = dateTimeZone2.getOffset(1645455028293L);
        java.lang.String str8 = dateTimeZone2.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfSecond();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.Period period26 = new org.joda.time.Period(1645455029672L, (long) 3, periodType16, chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfMonth();
        org.joda.time.DurationField durationField28 = chronology24.days();
        org.joda.time.Period period29 = new org.joda.time.Period(1645455034855L, 1645455043876L, chronology24);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology24.getZone();
        java.lang.String str32 = dateTimeZone30.getName(0L);
        org.joda.time.DateTime dateTime33 = dateTime9.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime9.minusMinutes(53624542);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks(4650672);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime.Property property41 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime42 = property41.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean44 = dateTime42.isSupported(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType43.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone48);
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period50.minusSeconds((int) (short) 1);
        org.joda.time.Period period54 = period50.plusWeeks((int) (short) -1);
        org.joda.time.Period period56 = period50.minusMillis(4);
        org.joda.time.Interval interval57 = interval49.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.era();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType43.getField(chronology58);
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType43.getDurationType();
        java.lang.String str63 = dateTimeFieldType43.toString();
        boolean boolean64 = dateTime35.isSupported(dateTimeFieldType43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime39", (dateTime9.compareTo(dateTime39) == 0) == dateTime9.equals(dateTime39));
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0941");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:52:41.348Z");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        java.lang.String str13 = dateTimeZone7.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone7);
        long long16 = dateTimeZone4.getMillisKeepLocal(dateTimeZone7, 1645455029375L);
        org.joda.time.MutableDateTime mutableDateTime17 = instant1.toMutableDateTime(dateTimeZone4);
        int int19 = dateTimeZone4.getOffsetFromLocal(1645455485817L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime17", (instant1.compareTo(mutableDateTime17) == 0) == instant1.equals(mutableDateTime17));
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0942");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundFloorCopy();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        int int23 = dateTime17.get(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        boolean boolean25 = dateTime12.isSupported(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        long long39 = dateTimeZone28.previousTransition(1645455049993L);
        org.joda.time.DateTime dateTime40 = dateTime12.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(347);
        long long47 = dateTimeZone42.getMillisKeepLocal(dateTimeZone45, 1645455095757L);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime dateTime52 = dateTime49.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime55 = dateTime53.plusDays((int) 'a');
        int int56 = dateTime55.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = dateTime55.toLocalDateTime();
        boolean boolean58 = dateTimeZone45.isLocalDateTimeGap(localDateTime57);
        boolean boolean59 = dateTimeZone28.isLocalDateTimeGap(localDateTime57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0943");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime6 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(4381721);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTimeISO();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.Duration duration25 = duration12.withMillis(1645455034114L);
        org.joda.time.Instant instant26 = instant9.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Instant instant28 = instant9.withMillis((long) 9);
        org.joda.time.Instant instant30 = instant28.minus(1645455060010L);
        boolean boolean31 = dateTime6.isEqual((org.joda.time.ReadableInstant) instant30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant9", (dateTime1.compareTo(instant9) == 0) == dateTime1.equals(instant9));
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0944");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1645455038369L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.toDateTime(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(0);
        boolean boolean20 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property21 = dateTime6.year();
        org.joda.time.DateTime dateTime23 = dateTime6.withMinuteOfHour(22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        long long34 = dateTimeField31.addWrapField(1645455030463L, 22);
        int int35 = dateTime6.get(dateTimeField31);
        org.joda.time.Interval interval36 = duration1.toIntervalTo((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone39);
        long long41 = interval40.getEndMillis();
        org.joda.time.Duration duration42 = interval40.toDuration();
        org.joda.time.Seconds seconds43 = duration42.toStandardSeconds();
        long long44 = duration42.getStandardHours();
        org.joda.time.Duration duration46 = duration42.withMillis(1645455089851L);
        boolean boolean47 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime49 = instant48.toMutableDateTimeISO();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period60 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration62 = duration51.minus(0L);
        org.joda.time.Duration duration64 = duration51.withMillis(1645455034114L);
        org.joda.time.Instant instant65 = instant48.minus((org.joda.time.ReadableDuration) duration64);
        int int66 = duration1.compareTo((org.joda.time.ReadableDuration) duration64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant48", (dateTime3.compareTo(instant48) == 0) == dateTime3.equals(instant48));
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0945");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.year();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        int int5 = property3.getMaximumValueOverall();
        org.joda.time.DateTime dateTime6 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime18 = dateTime8.withYear(50);
        org.joda.time.DateTime.Property property19 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) dateTime18);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1645455028646L, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.clockhourOfHalfday();
        java.lang.String str32 = chronology28.toString();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime18.toMutableDateTime(chronology28);
        long long34 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime8", (dateTime2.compareTo(dateTime8) == 0) == dateTime2.equals(dateTime8));
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0946");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean9 = dateTime7.isSupported(dateTimeFieldType8);
        java.lang.String str10 = dateTimeFieldType8.getName();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 8, periodType17, chronology24);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration15, chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.minuteOfHour();
        boolean boolean29 = dateTimeFieldType8.isSupported(chronology24);
        java.lang.String str30 = dateTimeFieldType8.getName();
        boolean boolean31 = instant0.isSupported(dateTimeFieldType8);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType8.getRangeDurationType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0947");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTime.Property property18 = dateTime1.dayOfYear();
        int int19 = dateTime1.getYear();
        boolean boolean21 = dateTime1.equals((java.lang.Object) "2022-02-22T01:12:48.207+10:22");
        org.joda.time.Instant instant22 = dateTime1.toInstant();
        org.joda.time.DateTime.Property property23 = dateTime1.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant22", (dateTime7.compareTo(instant22) == 0) == dateTime7.equals(instant22));
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0948");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        java.util.GregorianCalendar gregorianCalendar28 = dateTime20.toGregorianCalendar();
        org.joda.time.Interval interval29 = duration4.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.Interval interval32 = interval29.withStartMillis(1645455076956L);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.PeriodType periodType37 = periodType35.withMillisRemoved();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((-1L), 1L, periodType43, chronology44);
        java.lang.String str46 = periodType43.toString();
        java.lang.String str47 = periodType43.getName();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645455029643L, periodType43);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType43, chronology55);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1645455029375L, periodType35, chronology55);
        org.joda.time.Period period58 = interval32.toPeriod(periodType35);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime60 = instant59.toMutableDateTimeISO();
        org.joda.time.Interval interval61 = interval32.withEnd((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        int int65 = dateTime63.getHourOfDay();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        java.lang.String str70 = dateTime69.toString();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology73);
        org.joda.time.DateTime dateTime75 = dateTime69.minus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Period period76 = duration67.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        long long78 = mutableInterval77.toDurationMillis();
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval77.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone82);
        long long84 = dateTime83.getMillis();
        org.joda.time.DateTime dateTime86 = dateTime83.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime88 = dateTime86.plusSeconds((int) (byte) 10);
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration80, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Period period90 = duration67.toPeriodFrom((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.LocalTime localTime91 = dateTime88.toLocalTime();
        java.lang.String str92 = localTime91.toString();
        org.joda.time.DateTime dateTime93 = dateTime63.withFields((org.joda.time.ReadablePartial) localTime91);
        org.joda.time.DateTime dateTime95 = dateTime93.minusWeeks(997);
        org.joda.time.Interval interval96 = interval61.withEnd((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant59", (dateTime20.compareTo(instant59) == 0) == dateTime20.equals(instant59));
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0949");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime9 = dateTime4.plusYears((int) (byte) 10);
        org.joda.time.DateTime.Property property10 = dateTime4.centuryOfEra();
        long long11 = property10.remainder();
        java.lang.String str12 = property10.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0950");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(1);
        org.joda.time.Period period3 = period1.withDays((int) (byte) 10);
        org.joda.time.Period period5 = period3.plusMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(1);
        org.joda.time.Duration duration16 = period3.toDurationTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        boolean boolean32 = dateTime30.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.DateTime dateTime37 = dateTime34.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.toDateTime(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTime dateTime48 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes(0);
        boolean boolean51 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean54 = mutableInterval52.contains(1L);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval58 = mutableInterval57.toInterval();
        boolean boolean59 = mutableInterval55.overlaps((org.joda.time.ReadableInterval) mutableInterval57);
        java.lang.Object obj60 = mutableInterval55.clone();
        org.joda.time.Chronology chronology61 = mutableInterval55.getChronology();
        mutableInterval52.setChronology(chronology61);
        mutablePeriod23.setPeriod(100000L, 1645455034244L, chronology61);
        org.joda.time.DurationField durationField64 = chronology61.minutes();
        org.joda.time.DateTime dateTime65 = dateTime19.withChronology(chronology61);
        org.joda.time.Period period66 = duration16.toPeriodTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        long long69 = dateTime68.getMillis();
        org.joda.time.DateTime.Property property70 = dateTime68.yearOfEra();
        org.joda.time.Interval interval71 = property70.toInterval();
        java.util.Locale locale72 = null;
        int int73 = property70.getMaximumTextLength(locale72);
        java.lang.String str74 = property70.toString();
        int int75 = property70.getMinimumValueOverall();
        org.joda.time.DateTime dateTime77 = property70.addToCopy(4581563);
        boolean boolean78 = dateTime77.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str83 = dateTimeZone81.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(dateTimeZone81);
        int int86 = dateTimeZone81.getOffsetFromLocal(1645455058549L);
        long long90 = dateTimeZone81.convertLocalToUTC((long) 2023, false, (-37320000L));
        java.util.TimeZone timeZone91 = dateTimeZone81.toTimeZone();
        org.joda.time.DateTime dateTime92 = dateTime77.toDateTime(dateTimeZone81);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime84", (dateTime7.compareTo(dateTime84) == 0) == dateTime7.equals(dateTime84));
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0951");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = instant7.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTime();
        org.joda.time.Instant instant13 = instant7.withDurationAdded((long) 73, 4493);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime23 = dateTime18.withFieldAdded(durationFieldType21, (int) (short) 0);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant7, (org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getEra();
        org.joda.time.DateTime.Property property26 = dateTime23.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0952");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekOfWeekyear();
        java.lang.String str12 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.DurationField durationField29 = dateTimeField28.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay36 = dateTime35.toYearMonthDay();
        int int37 = yearMonthDay36.size();
        int[] intArray42 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int43 = dateTimeField28.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay36, intArray42);
        int int44 = yearMonthDay20.compareTo((org.joda.time.ReadablePartial) yearMonthDay36);
        org.joda.time.Chronology chronology45 = yearMonthDay20.getChronology();
        java.util.Locale locale47 = null;
        java.lang.String str48 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay20, 4505004, locale47);
        org.joda.time.Chronology chronology49 = yearMonthDay20.getChronology();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.weekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime50", (dateTime15.compareTo(dateTime50) == 0) == dateTime15.equals(dateTime50));
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0953");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds((int) (byte) 10);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = durationFieldType12.isSupported(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime10.withFieldAdded(durationFieldType12, 2);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds((int) (byte) 10);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period31 = period30.toPeriod();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) period30);
        java.lang.String str33 = interval32.toString();
        org.joda.time.Chronology chronology34 = interval32.getChronology();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Chronology chronology43 = chronology41.withUTC();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology43.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        int int47 = dateTimeZone44.getOffsetFromLocal(1645455050010L);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str60 = dateTimeZone58.getNameKey(1645455028293L);
        int int62 = dateTimeZone58.getOffset(1645455028293L);
        long long66 = dateTimeZone58.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime67 = dateTime52.withZoneRetainFields(dateTimeZone58);
        long long69 = dateTimeZone44.getMillisKeepLocal(dateTimeZone58, 1687730611190400000L);
        org.joda.time.Chronology chronology70 = chronology34.withZone(dateTimeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime49", (dateTime1.compareTo(dateTime49) == 0) == dateTime1.equals(dateTime49));
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0954");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        int int6 = dateTimeZone2.getOffset(1645455028293L);
        java.lang.String str8 = dateTimeZone2.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfSecond();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.Period period26 = new org.joda.time.Period(1645455029672L, (long) 3, periodType16, chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfMonth();
        org.joda.time.DurationField durationField28 = chronology24.days();
        org.joda.time.Period period29 = new org.joda.time.Period(1645455034855L, 1645455043876L, chronology24);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology24.getZone();
        java.lang.String str32 = dateTimeZone30.getName(0L);
        org.joda.time.DateTime dateTime33 = dateTime9.withZoneRetainFields(dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime35 = dateTime9.minus(readablePeriod34);
        org.joda.time.DateTime dateTime37 = dateTime9.plusDays(890);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        mutableInterval38.setInterval(100000L, 1645455028646L);
        long long46 = mutableInterval38.getStartMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        mutableInterval38.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes(1645455037008L);
        boolean boolean55 = duration50.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property59.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean62 = dateTime60.isSupported(dateTimeFieldType61);
        org.joda.time.Instant instant63 = dateTime60.toInstant();
        org.joda.time.DateTime dateTime64 = instant63.toDateTimeISO();
        org.joda.time.DateTime dateTime65 = instant63.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime66 = instant63.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.DateTime dateTime71 = dateTime68.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = dateTime71.toDateTime(chronology72);
        org.joda.time.DateTime dateTime74 = dateTime71.toDateTime();
        org.joda.time.DateTime dateTime76 = dateTime74.withMillisOfDay(1);
        int int77 = mutableDateTime66.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period78 = duration50.toPeriodFrom((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime79 = dateTime37.plus((org.joda.time.ReadablePeriod) period78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime57", (dateTime9.compareTo(dateTime57) == 0) == dateTime9.equals(dateTime57));
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0955");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        int int13 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime18 = property17.roundFloorCopy();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean23 = period21.equals((java.lang.Object) dateTimeFieldType22);
        int int24 = dateTime18.get(dateTimeFieldType22);
        org.joda.time.DateTime.Property property25 = dateTime4.property(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.joda.time.DateTime dateTime27 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime29 = property25.addWrapFieldToCopy(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and dateTime12", (dateTime29.compareTo(dateTime12) == 0) == dateTime29.equals(dateTime12));
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0956");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        long long23 = dateTimeZone15.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) periodType29);
        org.joda.time.DateTime dateTime32 = dateTime4.toDateTime(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime35 = dateTime4.withField(dateTimeFieldType33, 53);
        org.joda.time.DateTime dateTime36 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime38 = dateTime4.minusSeconds(39090776);
        org.joda.time.DateTime dateTime40 = dateTime4.withMillisOfDay(876);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime4", (dateTime32.compareTo(dateTime4) == 0) == dateTime32.equals(dateTime4));
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0957");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str5 = dateTimeZone3.getShortName(52L);
        boolean boolean6 = dateTimeZone3.isFixed();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        long long13 = dateTimeZone9.convertUTCToLocal(1645455035225L);
        long long15 = dateTimeZone3.getMillisKeepLocal(dateTimeZone9, 1645455037008L);
        int int17 = dateTimeZone9.getStandardOffset(1645455055418L);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(1645455119806L, dateTimeZone9);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.TimeOfDay timeOfDay20 = dateTime18.toTimeOfDay();
        java.lang.String str21 = timeOfDay20.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        boolean boolean33 = dateTime30.isAfterNow();
        org.joda.time.DateTime.Property property34 = dateTime30.year();
        org.joda.time.DateTime.Property property35 = dateTime30.year();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str48 = dateTimeZone46.getNameKey(1645455028293L);
        int int50 = dateTimeZone46.getOffset(1645455028293L);
        long long54 = dateTimeZone46.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime55 = dateTime40.withZoneRetainFields(dateTimeZone46);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration68 = duration57.minus(0L);
        org.joda.time.Duration duration70 = duration57.withMillis(1645455034114L);
        java.lang.String str71 = duration57.toString();
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        boolean boolean77 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj78 = mutableInterval73.clone();
        org.joda.time.Chronology chronology79 = mutableInterval73.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfEra();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.minuteOfDay();
        org.joda.time.DurationField durationField82 = chronology79.halfdays();
        org.joda.time.Period period83 = duration57.toPeriod(periodType72, chronology79);
        org.joda.time.DateTime dateTime84 = dateTime55.withChronology(chronology79);
        int int85 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime86 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime55 and dateTime84", (dateTime55.compareTo(dateTime84) == 0) == dateTime55.equals(dateTime84));
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0958");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.joda.time.Interval interval14 = duration6.toIntervalFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration15 = duration1.plus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        boolean boolean22 = dateTime20.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str27 = dateTimeZone25.getShortName(52L);
        org.joda.time.DateTime dateTime28 = dateTime20.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfDay(2);
        org.joda.time.DateTime dateTime32 = dateTime28.plusMillis(51);
        boolean boolean33 = dateTime32.isAfterNow();
        org.joda.time.DateTime.Property property34 = dateTime32.weekyear();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DurationFieldType[] durationFieldTypeArray36 = mutablePeriod35.getFieldTypes();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.forFields(durationFieldTypeArray36);
        int int38 = periodType37.size();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and dateTime28", (dateTime20.compareTo(dateTime28) == 0) == dateTime20.equals(dateTime28));
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0959");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.Period period12 = period8.plusMinutes((int) (byte) 10);
        org.joda.time.Period period14 = period12.withHours((-1));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = dateTime19.plusMillis(100);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str36 = dateTimeZone34.getNameKey(1645455028293L);
        int int38 = dateTimeZone34.getOffset(1645455028293L);
        long long42 = dateTimeZone34.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime43 = dateTime28.withZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime22.toMutableDateTime(dateTimeZone34);
        org.joda.time.Duration duration45 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Duration duration47 = duration45.minus(1645455110107L);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Period period49 = org.joda.time.Period.ZERO;
        org.joda.time.Period period50 = period49.negated();
        org.joda.time.Period period52 = period49.withDays(1);
        int int53 = period49.getMillis();
        org.joda.time.DurationFieldType[] durationFieldTypeArray54 = period49.getFieldTypes();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.forFields(durationFieldTypeArray54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone58);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.Period period64 = period60.plusWeeks((int) (short) -1);
        org.joda.time.Period period66 = period60.minusMillis(4);
        org.joda.time.Interval interval67 = interval59.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period69 = period60.withHours((int) 'a');
        org.joda.time.DurationFieldType durationFieldType71 = period60.getFieldType(0);
        java.lang.String str72 = durationFieldType71.toString();
        boolean boolean73 = periodType55.isSupported(durationFieldType71);
        org.joda.time.PeriodType periodType74 = periodType55.withMillisRemoved();
        org.joda.time.Period period75 = duration47.toPeriodTo(readableInstant48, periodType55);
        org.joda.time.Period period76 = new org.joda.time.Period(4835167, 4850115, 4717607, 53897682, 4713, 4828257, 4813002, 175, periodType55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and mutableDateTime44", (dateTime22.compareTo(mutableDateTime44) == 0) == dateTime22.equals(mutableDateTime44));
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0960");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean15 = dateTime4.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int17 = dateTime4.get(dateTimeFieldType16);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1L), 1L, periodType20, chronology21);
        mutablePeriod22.setSeconds((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod22.setPeriod((long) 9, 100000L, chronology27);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Period period43 = new org.joda.time.Period(1645455029672L, (long) 3, periodType33, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology41.days();
        mutablePeriod22.add(1645455035891L, chronology41);
        org.joda.time.DateTime dateTime47 = dateTime4.withChronology(chronology41);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime50 = dateTime47.plusYears(889);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime47 and mutableDateTime12", (dateTime47.compareTo(mutableDateTime12) == 0) == dateTime47.equals(mutableDateTime12));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0961");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getShortName(52L);
        org.joda.time.DateTime dateTime12 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime4.plusSeconds(2022);
        int int15 = dateTime14.getMillisOfSecond();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMillis(53857);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0962");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        long long23 = dateTimeZone10.convertLocalToUTC(1645455045823L, true, (long) 31);
        long long25 = dateTimeZone10.convertUTCToLocal(1645455037008L);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone10);
        long long28 = dateTimeZone10.previousTransition(1645455541620L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime26", (dateTime1.compareTo(dateTime26) == 0) == dateTime1.equals(dateTime26));
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0963");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        long long12 = duration1.getStandardMinutes();
        org.joda.time.Duration duration13 = duration1.toDuration();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod16.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration34 = duration23.minus(0L);
        org.joda.time.Duration duration36 = duration23.withMillis(1645455034114L);
        org.joda.time.Instant instant37 = instant20.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType49 = periodType48.withYearsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.Period period59 = new org.joda.time.Period(1645455029672L, (long) 3, periodType49, chronology57);
        org.joda.time.DurationField durationField60 = chronology57.eras();
        org.joda.time.DateTime dateTime61 = dateTime39.toDateTime(chronology57);
        mutablePeriod16.setPeriod((org.joda.time.ReadableInstant) instant20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period63 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology64 = instant20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime dateTime69 = dateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str74 = dateTimeZone72.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime75 = dateTime66.toDateTime(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 10);
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone77);
        long long79 = dateTime78.getMillis();
        boolean boolean80 = dateTime66.isEqual((org.joda.time.ReadableInstant) dateTime78);
        int int81 = instant20.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Instant instant83 = instant20.plus(1645455510594L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime75", (dateTime3.compareTo(dateTime75) == 0) == dateTime3.equals(dateTime75));
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0964");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusMinutes((int) (byte) 10);
        org.joda.time.Period period6 = period4.withHours((-1));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMillis(100);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime(chronology21);
        org.joda.time.DateTime dateTime23 = dateTime20.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str28 = dateTimeZone26.getNameKey(1645455028293L);
        int int30 = dateTimeZone26.getOffset(1645455028293L);
        long long34 = dateTimeZone26.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime14.toMutableDateTime(dateTimeZone26);
        org.joda.time.Duration duration37 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Duration duration39 = duration37.minus(1645455110107L);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period41.negated();
        org.joda.time.Period period44 = period41.withDays(1);
        int int45 = period41.getMillis();
        org.joda.time.DurationFieldType[] durationFieldTypeArray46 = period41.getFieldTypes();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.forFields(durationFieldTypeArray46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone50);
        org.joda.time.Period period52 = org.joda.time.Period.ZERO;
        org.joda.time.Period period54 = period52.minusSeconds((int) (short) 1);
        org.joda.time.Period period56 = period52.plusWeeks((int) (short) -1);
        org.joda.time.Period period58 = period52.minusMillis(4);
        org.joda.time.Interval interval59 = interval51.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period61 = period52.withHours((int) 'a');
        org.joda.time.DurationFieldType durationFieldType63 = period52.getFieldType(0);
        java.lang.String str64 = durationFieldType63.toString();
        boolean boolean65 = periodType47.isSupported(durationFieldType63);
        org.joda.time.PeriodType periodType66 = periodType47.withMillisRemoved();
        org.joda.time.Period period67 = duration39.toPeriodTo(readableInstant40, periodType47);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getDurationType();
        int int70 = periodType47.indexOf(durationFieldType69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and mutableDateTime36", (dateTime14.compareTo(mutableDateTime36) == 0) == dateTime14.equals(mutableDateTime36));
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0965");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours(1645455083019L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(1645455043186L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(1645455032819L);
        boolean boolean29 = duration26.isEqual((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfEra();
        org.joda.time.Interval interval34 = property33.toInterval();
        java.util.Locale locale35 = null;
        int int36 = property33.getMaximumTextLength(locale35);
        java.lang.String str37 = property33.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime.Property property41 = dateTime39.yearOfEra();
        org.joda.time.DateTime dateTime42 = property41.roundFloorCopy();
        long long43 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.withZoneRetainFields(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        boolean boolean68 = interval47.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType73 = periodType72.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1645455034688L, 1645455040225L, periodType72);
        org.joda.time.Period period75 = duration28.toPeriodTo((org.joda.time.ReadableInstant) dateTime66, periodType72);
        boolean boolean76 = duration24.equals((java.lang.Object) period75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0966");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Period period3 = org.joda.time.Period.years((int) (byte) 0);
        int int4 = period3.getWeeks();
        org.joda.time.Duration duration5 = period3.toStandardDuration();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str18 = dateTimeZone16.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime19 = dateTime11.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.DateTime dateTime24 = property23.roundFloorCopy();
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period25.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean29 = period27.equals((java.lang.Object) dateTimeFieldType28);
        int int30 = dateTime24.get(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType28.getDurationType();
        boolean boolean32 = dateTime19.isSupported(dateTimeFieldType28);
        int int33 = mutableDateTime1.get(dateTimeFieldType28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime8", (instant0.compareTo(dateTime8) == 0) == instant0.equals(dateTime8));
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0967");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = instant7.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(1);
        int int21 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        long long24 = duration23.getStandardMinutes();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration26.minus(0L);
        org.joda.time.Duration duration39 = duration26.withMillis(1645455034114L);
        java.lang.String str40 = duration26.toString();
        boolean boolean41 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Seconds seconds43 = duration23.toStandardSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0968");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval35 = interval29.withDurationAfterStart((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval36 = interval29.toInterval();
        org.joda.time.Interval interval38 = interval36.withEndMillis(2339679030463L);
        boolean boolean39 = interval23.isAfter((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Duration duration40 = interval36.toDuration();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime.Property property44 = dateTime42.yearOfEra();
        org.joda.time.Interval interval45 = property44.toInterval();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Interval interval51 = interval45.withDurationAfterStart((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusHours(4365808);
        org.joda.time.Period period59 = duration49.toPeriodTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.Period period64 = period60.plusWeeks((int) (short) -1);
        org.joda.time.Period period66 = period60.minusMillis(4);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = period60.withPeriodType(periodType67);
        org.joda.time.Period period69 = period68.normalizedStandard();
        org.joda.time.Period period71 = period68.plusMillis(53440972);
        org.joda.time.Period period72 = period68.toPeriod();
        org.joda.time.DateTime dateTime73 = dateTime56.minus((org.joda.time.ReadablePeriod) period68);
        boolean boolean74 = interval36.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime75 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime77 = instant76.toMutableDateTimeISO();
        boolean boolean79 = mutableDateTime77.isAfter(1645455064117L);
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        long long81 = mutableInterval80.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval83 = mutableInterval82.toInterval();
        boolean boolean84 = mutableInterval80.overlaps((org.joda.time.ReadableInterval) mutableInterval82);
        java.lang.Object obj85 = mutableInterval80.clone();
        org.joda.time.Chronology chronology86 = mutableInterval80.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.yearOfEra();
        org.joda.time.DateTimeField dateTimeField88 = chronology86.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField89 = chronology86.yearOfCentury();
        org.joda.time.DurationField durationField90 = chronology86.years();
        org.joda.time.DateTimeField dateTimeField91 = chronology86.weekOfWeekyear();
        long long94 = dateTimeField91.addWrapField(1645488000000L, (-1));
        int int96 = dateTimeField91.getLeapAmount(1645455041696L);
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = dateTimeField91.getType();
        boolean boolean98 = mutableDateTime77.isSupported(dateTimeFieldType97);
        org.joda.time.DateTime.Property property99 = dateTime75.property(dateTimeFieldType97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime42 and instant76", (dateTime42.compareTo(instant76) == 0) == dateTime42.equals(instant76));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0969");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        boolean boolean17 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long39 = dateTimeZone28.convertUTCToLocal(1645455040347L);
        boolean boolean40 = dateTimeZone28.isFixed();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.Chronology chronology49 = chronology47.withUTC();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology49.getZone();
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone50.getShortName(1645455068377L, locale52);
        long long56 = dateTimeZone50.convertLocalToUTC(1645455037307L, false);
        long long58 = dateTimeZone28.getMillisKeepLocal(dateTimeZone50, 10001L);
        int int60 = dateTimeZone50.getOffsetFromLocal(1645455112343L);
        org.joda.time.DateTime dateTime61 = dateTime8.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str66 = dateTimeZone64.getNameKey(1645455028293L);
        int int68 = dateTimeZone64.getOffset(1645455028293L);
        java.lang.String str70 = dateTimeZone64.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime71 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime.Property property72 = dateTime71.weekyear();
        java.util.Locale locale73 = null;
        java.util.Calendar calendar74 = dateTime71.toCalendar(locale73);
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime71.getZone();
        org.joda.time.DateTime dateTime76 = dateTime8.withZoneRetainFields(dateTimeZone75);
        int int77 = dateTime76.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime76 and dateTime61", (dateTime76.compareTo(dateTime61) == 0) == dateTime76.equals(dateTime61));
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0970");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod16.addMillis((int) '4');
        java.lang.Object obj19 = mutablePeriod16.clone();
        mutablePeriod16.addMillis(2023);
        mutablePeriod16.setMillis(50);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime25 = instant24.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime41 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.withZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime50.toYearMonthDay();
        int int52 = yearMonthDay51.size();
        org.joda.time.DateTime dateTime53 = dateTime41.withFields((org.joda.time.ReadablePartial) yearMonthDay51);
        org.joda.time.DateTime dateTime55 = dateTime41.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property56 = dateTime41.dayOfMonth();
        int int57 = instant24.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration58 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) instant24);
        mutablePeriod16.setHours(53679876);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant24", (dateTime8.compareTo(instant24) == 0) == dateTime8.equals(instant24));
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0971");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str6 = dateTimeZone4.getShortName(52L);
        org.joda.time.DateTime dateTime7 = dateTime1.withZone(dateTimeZone4);
        long long9 = dateTimeZone4.nextTransition(1645455197656L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime7", (dateTime1.compareTo(dateTime7) == 0) == dateTime1.equals(dateTime7));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0972");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getShortName(52L);
        org.joda.time.DateTime dateTime12 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = dateTime4.plusSeconds(2022);
        org.joda.time.DateTime dateTime16 = dateTime4.plusWeeks(22);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.DateTime dateTime19 = property17.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        boolean boolean38 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property39 = dateTime24.year();
        org.joda.time.DateTime dateTime41 = dateTime24.withMinuteOfHour(22);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime.Property property43 = dateTime41.hourOfDay();
        int int44 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime.Property property45 = dateTime41.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime12", (dateTime4.compareTo(dateTime12) == 0) == dateTime4.equals(dateTime12));
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0973");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Period period26 = interval11.toPeriod();
        org.joda.time.Duration duration27 = interval11.toDuration();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone30);
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        org.joda.time.Period period34 = period32.minusSeconds((int) (short) 1);
        org.joda.time.Period period36 = period32.plusWeeks((int) (short) -1);
        org.joda.time.Period period38 = period32.minusMillis(4);
        org.joda.time.Interval interval39 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone42);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period44.minusSeconds((int) (short) 1);
        org.joda.time.Period period48 = period44.plusWeeks((int) (short) -1);
        org.joda.time.Period period50 = period44.minusMillis(4);
        org.joda.time.Interval interval51 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Interval interval52 = interval31.gap((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTime dateTime53 = interval31.getEnd();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str58 = dateTimeZone56.getShortName(52L);
        boolean boolean59 = dateTimeZone56.isFixed();
        org.joda.time.DateTime dateTime60 = dateTime53.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = dateTime53.minusMinutes(4396737);
        boolean boolean63 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.weeks();
        org.joda.time.PeriodType periodType66 = periodType65.withMinutesRemoved();
        org.joda.time.PeriodType periodType67 = periodType65.withDaysRemoved();
        org.joda.time.Period period68 = org.joda.time.Period.ZERO;
        org.joda.time.Period period70 = period68.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean72 = period70.equals((java.lang.Object) dateTimeFieldType71);
        org.joda.time.Period period74 = period70.plusYears(10);
        org.joda.time.Period period75 = org.joda.time.Period.ZERO;
        org.joda.time.Period period77 = period75.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone78);
        java.lang.String str80 = dateTime79.toString();
        org.joda.time.DateTime dateTime82 = dateTime79.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = dateTime82.toDateTime(chronology83);
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime87 = dateTime82.withFieldAdded(durationFieldType85, (int) (short) 0);
        boolean boolean88 = period75.isSupported(durationFieldType85);
        int int89 = period70.get(durationFieldType85);
        java.lang.String str90 = durationFieldType85.getName();
        int int91 = periodType67.indexOf(durationFieldType85);
        org.joda.time.PeriodType periodType92 = periodType67.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod(951144671689L, periodType92);
        org.joda.time.PeriodType periodType94 = periodType92.withMonthsRemoved();
        org.joda.time.Period period95 = interval11.toPeriod(periodType92);
        org.joda.time.PeriodType periodType96 = periodType92.withHoursRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime53 and dateTime60", (dateTime53.compareTo(dateTime60) == 0) == dateTime53.equals(dateTime60));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0974");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645455028293L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str21 = dateTimeZone19.getShortName(52L);
        boolean boolean22 = dateTimeZone19.isFixed();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str27 = dateTimeZone25.getNameKey(1645455028293L);
        long long29 = dateTimeZone25.convertUTCToLocal(1645455035225L);
        long long31 = dateTimeZone19.getMillisKeepLocal(dateTimeZone25, 1645455037008L);
        long long33 = dateTimeZone14.getMillisKeepLocal(dateTimeZone25, 1645455044510L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone36);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.Duration duration39 = interval37.toDuration();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime44.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime52 = dateTime44.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime.Property property56 = dateTime54.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval58.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Interval interval63 = interval57.withDurationAfterStart((org.joda.time.ReadableDuration) duration61);
        boolean boolean64 = dateTime44.equals((java.lang.Object) interval57);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        long long72 = dateTime71.getMillis();
        org.joda.time.DateTime dateTime74 = dateTime71.plusWeeks((int) (byte) 10);
        boolean boolean75 = mutableInterval65.contains((org.joda.time.ReadableInstant) dateTime74);
        int int76 = dateTime74.getMillisOfDay();
        org.joda.time.DateTime dateTime78 = dateTime74.plusYears(3);
        boolean boolean79 = interval57.contains((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Chronology chronology80 = interval57.getChronology();
        org.joda.time.Period period81 = duration39.toPeriod(chronology80);
        boolean boolean82 = dateTimeZone14.equals((java.lang.Object) chronology80);
        org.joda.time.DateTime dateTime83 = dateTime9.toDateTime(dateTimeZone14);
        long long84 = dateTime9.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime74 and dateTime83", (dateTime74.compareTo(dateTime83) == 0) == dateTime74.equals(dateTime83));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0975");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.Instant instant3 = instant1.plus(1645488000000L);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfDay(1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant15.toInstant();
        boolean boolean17 = dateTime14.isAfter((org.joda.time.ReadableInstant) instant16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime14.toLocalDateTime();
        org.joda.time.DateTime dateTime20 = dateTime14.withMillisOfSecond(20);
        int int21 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant15", (dateTime6.compareTo(instant15) == 0) == dateTime6.equals(instant15));
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0976");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645455028646L, chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime25 = dateTime13.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField26 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime10", (dateTime1.compareTo(dateTime10) == 0) == dateTime1.equals(dateTime10));
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0977");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.Instant instant3 = instant1.plus(1645488000000L);
        long long4 = instant3.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone7);
        long long9 = interval8.getEndMillis();
        org.joda.time.Duration duration10 = interval8.toDuration();
        org.joda.time.Seconds seconds11 = duration10.toStandardSeconds();
        org.joda.time.Instant instant13 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration10, 4435450);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        java.lang.String str19 = property18.getAsString();
        long long20 = property18.remainder();
        org.joda.time.DateTime dateTime22 = property18.addToCopy(53592010);
        boolean boolean23 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime14.era();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime14", (instant3.compareTo(dateTime14) == 0) == instant3.equals(dateTime14));
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0978");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        boolean boolean22 = instant0.equals((java.lang.Object) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant25 = instant0.withMillis(1645455128531L);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone35);
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.Duration duration38 = interval36.toDuration();
        boolean boolean39 = mutableInterval26.isAfter((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Duration duration40 = mutableInterval26.toDuration();
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        org.joda.time.Instant instant42 = instant0.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Instant instant44 = instant0.plus(1645455077433L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant0", (dateTime1.compareTo(instant0) == 0) == dateTime1.equals(instant0));
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0979");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 53429880, (int) (short) 0, 1);
        int int5 = mutablePeriod4.getSeconds();
        mutablePeriod4.addHours(53452649);
        java.lang.Object obj8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval(obj8);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.Interval interval12 = interval9.withStartMillis(1645455121638L);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(1645455050897L);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        boolean boolean24 = dateTime14.equals((java.lang.Object) chronology21);
        org.joda.time.Interval interval25 = interval9.withChronology(chronology21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Interval interval36 = interval30.withDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Interval interval37 = interval30.toInterval();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        mutableInterval38.setInterval((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.Interval interval51 = interval37.gap((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        boolean boolean53 = mutableInterval52.containsNow();
        boolean boolean54 = interval37.isBefore((org.joda.time.ReadableInterval) mutableInterval52);
        boolean boolean56 = mutableInterval52.contains(1645455037444L);
        org.joda.time.Duration duration57 = mutableInterval52.toDuration();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Duration duration59 = duration57.minus(readableDuration58);
        org.joda.time.Interval interval60 = interval25.withDurationAfterStart((org.joda.time.ReadableDuration) duration59);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Instant instant63 = new org.joda.time.Instant(1645455118599L);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime(chronology69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology76);
        org.joda.time.DateTime dateTime78 = dateTime72.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime79 = dateTime72.toDateTimeISO();
        org.joda.time.DateTime dateTime81 = dateTime79.minusMinutes(0);
        boolean boolean82 = dateTime68.isEqual((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime.Property property83 = dateTime68.year();
        org.joda.time.DateTime dateTime85 = dateTime68.minus(1645455041013L);
        org.joda.time.Instant instant86 = dateTime68.toInstant();
        org.joda.time.Chronology chronology87 = instant86.getChronology();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) instant63, (org.joda.time.ReadableInstant) instant86);
        boolean boolean90 = instant63.equals((java.lang.Object) 2339679063799L);
        org.joda.time.Duration duration92 = org.joda.time.Duration.standardSeconds(1645455043186L);
        org.joda.time.Duration duration94 = org.joda.time.Duration.standardSeconds(1645455032819L);
        boolean boolean95 = duration92.isEqual((org.joda.time.ReadableDuration) duration94);
        org.joda.time.Duration duration97 = duration92.withMillis(1645455060010L);
        org.joda.time.Seconds seconds98 = duration97.toStandardSeconds();
        org.joda.time.Instant instant99 = instant63.plus((org.joda.time.ReadableDuration) duration97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime68 and instant86", (dateTime68.compareTo(instant86) == 0) == dateTime68.equals(instant86));
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0980");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod4.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTimeISO();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.Duration duration24 = duration11.withMillis(1645455034114L);
        org.joda.time.Instant instant25 = instant8.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType37 = periodType36.withYearsRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.Period period47 = new org.joda.time.Period(1645455029672L, (long) 3, periodType37, chronology45);
        org.joda.time.DurationField durationField48 = chronology45.eras();
        org.joda.time.DateTime dateTime49 = dateTime27.toDateTime(chronology45);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Instant instant52 = instant8.withMillis(1645455043927L);
        org.joda.time.DateTime dateTime53 = instant8.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod();
        mutablePeriod54.addWeeks((int) (byte) -1);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration69 = duration58.minus(0L);
        org.joda.time.Chronology chronology70 = null;
        mutablePeriod54.setPeriod((org.joda.time.ReadableDuration) duration58, chronology70);
        long long72 = duration58.getStandardHours();
        org.joda.time.Instant instant74 = instant8.withDurationAdded((org.joda.time.ReadableDuration) duration58, 2023);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        long long77 = dateTime76.getMillis();
        org.joda.time.DateTime dateTime79 = dateTime76.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime80 = dateTime79.toDateTimeISO();
        org.joda.time.DateTime dateTime82 = dateTime80.plusDays((int) 'a');
        org.joda.time.Interval interval83 = duration58.toIntervalTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Instant instant84 = instant1.plus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and mutableDateTime9", (instant8.compareTo(mutableDateTime9) == 0) == instant8.equals(mutableDateTime9));
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0981");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        int int4 = dateTime1.getYearOfCentury();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        int int17 = dateTimeZone14.getOffsetFromLocal(1645455050010L);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime25 = dateTime22.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        int int32 = dateTimeZone28.getOffset(1645455028293L);
        long long36 = dateTimeZone28.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone28);
        long long39 = dateTimeZone14.getMillisKeepLocal(dateTimeZone28, 1687730611190400000L);
        org.joda.time.DateTime dateTime40 = dateTime1.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime.Property property44 = dateTime42.yearOfEra();
        org.joda.time.Interval interval45 = property44.toInterval();
        org.joda.time.DateTime dateTime46 = property44.withMaximumValue();
        org.joda.time.DateTime dateTime47 = property44.roundCeilingCopy();
        org.joda.time.DateTime dateTime49 = dateTime47.withWeekyear(4381721);
        int int50 = dateTime49.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime49.getZone();
        boolean boolean52 = dateTime1.equals((java.lang.Object) dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime1", (dateTime19.compareTo(dateTime1) == 0) == dateTime19.equals(dateTime1));
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0982");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str18 = dateTimeZone16.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime19 = dateTime10.toDateTime(dateTimeZone16);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.millisOfSecond();
        org.joda.time.DateTime dateTime22 = property21.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str27 = dateTimeZone25.getNameKey(1645455028293L);
        long long29 = dateTimeZone25.convertUTCToLocal(1645455035225L);
        org.joda.time.DateTime dateTime30 = dateTime22.toDateTime(dateTimeZone25);
        boolean boolean31 = dateTime22.isBeforeNow();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime34 = dateTime22.minusMonths(4431607);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0983");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        int int26 = yearMonthDay25.size();
        org.joda.time.DateTime dateTime27 = dateTime15.withFields((org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfSecond();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property28.getAsShortText(locale29);
        java.lang.String str31 = property28.getName();
        org.joda.time.DateTime dateTime32 = property28.roundHalfEvenCopy();
        java.lang.String str33 = property28.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str45 = dateTimeZone43.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime46 = dateTime38.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime48 = dateTime46.withYearOfEra(32);
        org.joda.time.DateTime dateTime50 = dateTime48.withHourOfDay(0);
        long long51 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and dateTime46", (dateTime23.compareTo(dateTime46) == 0) == dateTime23.equals(dateTime46));
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0984");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 22, 1645455035827L);
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.setDays(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        boolean boolean14 = dateTime12.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        boolean boolean33 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean36 = mutableInterval34.contains(1L);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        mutableInterval34.setChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.clockhourOfDay();
        mutablePeriod3.add(0L, chronology43);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645455028293L, chronology43);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.toDateTime(chronology54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime58 = dateTime53.withFieldAdded(durationFieldType56, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str63 = dateTimeZone61.getShortName(52L);
        boolean boolean64 = dateTimeZone61.isFixed();
        java.util.Locale locale66 = null;
        java.lang.String str67 = dateTimeZone61.getName(1645455042879L, locale66);
        org.joda.time.DateTime dateTime68 = dateTime58.withZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        org.joda.time.Chronology chronology70 = chronology43.withZone(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime72.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone78);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.plus(readableDuration80);
        boolean boolean82 = dateTime75.isEqual((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone83);
        long long85 = dateTime84.getMillis();
        org.joda.time.DateTime dateTime87 = dateTime84.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime89 = dateTime87.plusHours(4365808);
        org.joda.time.DateTime dateTime91 = dateTime87.plusMillis(2023);
        boolean boolean92 = dateTime75.isEqual((org.joda.time.ReadableInstant) dateTime91);
        int int93 = dateTimeZone61.getOffset((org.joda.time.ReadableInstant) dateTime91);
        long long96 = dateTimeZone61.convertLocalToUTC(1645455322695L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime72", (dateTime9.compareTo(dateTime72) == 0) == dateTime9.equals(dateTime72));
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0985");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray18 = period17.getFieldTypes();
        org.joda.time.format.PeriodFormatter periodFormatter19 = null;
        java.lang.String str20 = period17.toString(periodFormatter19);
        org.joda.time.Period period22 = period17.plusHours(0);
        org.joda.time.Period period24 = period22.plusMinutes(32);
        org.joda.time.DateTime dateTime25 = dateTime8.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(1645455048164L);
        org.joda.time.Instant instant29 = instant27.plus(1645455080732L);
        org.joda.time.Instant instant32 = instant29.withDurationAdded(1645455339266L, 4101229);
        org.joda.time.MutableDateTime mutableDateTime33 = instant32.toMutableDateTimeISO();
        org.joda.time.Instant instant34 = instant32.toInstant();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) instant32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime33 and instant32", (mutableDateTime33.compareTo(instant32) == 0) == mutableDateTime33.equals(instant32));
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0986");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645455028646L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes(1645455037008L);
        boolean boolean17 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        boolean boolean28 = mutableInterval18.contains((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime dateTime31 = dateTime27.plusYears(3);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        org.joda.time.DateTime dateTime34 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime34 and instant33", (dateTime34.compareTo(instant33) == 0) == dateTime34.equals(instant33));
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0987");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Period period22 = duration12.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        boolean boolean29 = dateTime27.isBefore((-1L));
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = dateTime39.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration48 = duration12.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.toDateTime(chronology54);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateTime dateTime64 = dateTime57.toDateTimeISO();
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes(0);
        boolean boolean67 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime.Property property68 = dateTime53.year();
        org.joda.time.DateTime dateTime70 = dateTime53.minus(1645455041013L);
        org.joda.time.Instant instant71 = dateTime53.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.year();
        int int73 = instant71.get(dateTimeFieldType72);
        long long74 = instant71.getMillis();
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) instant71);
        org.joda.time.Duration duration77 = duration34.withMillis(1645455577916L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant71", (dateTime17.compareTo(instant71) == 0) == dateTime17.equals(instant71));
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0988");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withDayOfMonth((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean16 = dateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.Instant instant17 = dateTime14.toInstant();
        org.joda.time.DateTime dateTime18 = instant17.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = instant17.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime20 = instant17.toMutableDateTime();
        org.joda.time.Instant instant23 = instant17.withDurationAdded((long) 73, 4493);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime33 = dateTime28.withFieldAdded(durationFieldType31, (int) (short) 0);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant17, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration34);
        boolean boolean36 = interval35.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant17", (dateTime14.compareTo(instant17) == 0) == dateTime14.equals(instant17));
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0989");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 0);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Interval interval47 = mutableInterval0.toInterval();
        org.joda.time.Interval interval48 = mutableInterval0.toInterval();
        org.joda.time.MutableInterval mutableInterval49 = mutableInterval0.copy();
        org.joda.time.Period period50 = mutableInterval49.toPeriod();
        org.joda.time.Instant instant52 = org.joda.time.Instant.parse("2022-02-21T14:50:34.430Z");
        org.joda.time.MutableDateTime mutableDateTime53 = instant52.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime(chronology59);
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime();
        org.joda.time.DateTime dateTime63 = dateTime61.withMillisOfDay(1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant64.toInstant();
        boolean boolean66 = dateTime63.isAfter((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Instant instant68 = instant65.minus(1645455086172L);
        mutableInterval49.setInterval((org.joda.time.ReadableInstant) instant52, (org.joda.time.ReadableInstant) instant65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant65", (dateTime21.compareTo(instant65) == 0) == dateTime21.equals(instant65));
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0990");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        boolean boolean14 = dateTime12.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        boolean boolean33 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean36 = mutableInterval34.contains(1L);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        mutableInterval34.setChronology(chronology43);
        mutablePeriod5.setPeriod(100000L, 1645455034244L, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.minutes();
        org.joda.time.DateTime dateTime47 = dateTime1.withChronology(chronology43);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime1.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = dateTime1.toString(dateTimeFormatter49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = dateTime1.withZoneRetainFields(dateTimeZone51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime55 = instant54.toMutableDateTimeISO();
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime57 = instant56.toMutableDateTimeISO();
        org.joda.time.Instant instant59 = instant56.minus((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTime.Property property63 = dateTime61.yearOfEra();
        org.joda.time.DateTime dateTime64 = property63.roundFloorCopy();
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        org.joda.time.Period period67 = period65.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean69 = period67.equals((java.lang.Object) dateTimeFieldType68);
        int int70 = dateTime64.get(dateTimeFieldType68);
        org.joda.time.DateTime dateTime72 = dateTime64.minusMillis(9);
        boolean boolean73 = instant59.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.MutableDateTime mutableDateTime74 = instant59.toMutableDateTimeISO();
        org.joda.time.Duration duration75 = new org.joda.time.Duration((org.joda.time.ReadableInstant) instant54, (org.joda.time.ReadableInstant) mutableDateTime74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) instant54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime52 and instant59", (dateTime52.compareTo(instant59) == 0) == dateTime52.equals(instant59));
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0991");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime8 = instant7.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = instant7.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = instant7.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime11 = instant7.toMutableDateTimeISO();
        org.joda.time.Instant instant13 = instant7.withMillis(1645455053834L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant7", (dateTime4.compareTo(instant7) == 0) == dateTime4.equals(instant7));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0992");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.withTimeAtStartOfDay();
        boolean boolean22 = instant0.equals((java.lang.Object) dateTime21);
        org.joda.time.MutableDateTime mutableDateTime23 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant25 = instant0.withMillis(1645455128531L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone28);
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period30.minusSeconds((int) (short) 1);
        org.joda.time.Period period34 = period30.plusWeeks((int) (short) -1);
        org.joda.time.Period period36 = period30.minusMillis(4);
        org.joda.time.Interval interval37 = interval29.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period39 = period30.withHours((int) 'a');
        org.joda.time.Minutes minutes40 = period30.toStandardMinutes();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        mutableInterval41.setInterval((org.joda.time.ReadableInterval) mutableInterval48);
        mutableInterval48.setDurationAfterStart(1645455033234L);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval48.copy();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.DateTime dateTime61 = dateTime58.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime(chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology69);
        org.joda.time.DateTime dateTime71 = dateTime65.minus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.DateTime dateTime72 = dateTime65.toDateTimeISO();
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes(0);
        boolean boolean75 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime72);
        mutableInterval48.setEnd((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration77 = period30.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        long long79 = mutableInterval78.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        boolean boolean82 = mutableInterval78.overlaps((org.joda.time.ReadableInterval) mutableInterval80);
        java.lang.Object obj83 = mutableInterval78.clone();
        org.joda.time.Chronology chronology84 = mutableInterval78.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.yearOfEra();
        org.joda.time.DateTimeField dateTimeField86 = chronology84.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField87 = chronology84.dayOfWeek();
        org.joda.time.DurationField durationField88 = chronology84.halfdays();
        org.joda.time.DateTimeField dateTimeField89 = chronology84.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField90 = chronology84.millisOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology84.weekyear();
        org.joda.time.Period period92 = duration77.toPeriod(chronology84);
        org.joda.time.MutableInterval mutableInterval93 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant0, (org.joda.time.ReadablePeriod) period92);
        org.joda.time.Period period95 = period92.minusSeconds(44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0993");
        org.joda.time.Period period1 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        boolean boolean8 = mutableInterval4.overlaps((org.joda.time.ReadableInterval) mutableInterval6);
        java.lang.Object obj9 = mutableInterval4.clone();
        org.joda.time.Chronology chronology10 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.weekOfWeekyear();
        org.joda.time.Period period16 = new org.joda.time.Period((java.lang.Object) period1, periodType3, chronology10);
        org.joda.time.PeriodType periodType17 = periodType3.withHoursRemoved();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        mutableInterval18.setEndMillis(10L);
        org.joda.time.Interval interval22 = mutableInterval18.toInterval();
        org.joda.time.Period period23 = interval22.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        int int29 = dateTime25.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTimeISO();
        int int39 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime25.minusMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime dateTime46 = dateTime43.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime46.toDateTimeISO();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime41.getMillisOfDay();
        boolean boolean50 = interval22.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableInterval mutableInterval51 = interval22.toMutableInterval();
        org.joda.time.DateTime dateTime52 = interval22.getEnd();
        org.joda.time.Interval interval53 = interval22.toInterval();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.DateTime dateTime62 = dateTime55.toDateTimeISO();
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes(0);
        org.joda.time.DateTime dateTime66 = dateTime64.plusYears((int) '4');
        org.joda.time.Instant instant67 = dateTime64.toInstant();
        org.joda.time.Instant instant69 = instant67.withMillis((-37317977L));
        boolean boolean70 = interval53.isAfter((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Chronology chronology71 = interval53.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(0L, periodType17, chronology71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and instant67", (dateTime43.compareTo(instant67) == 0) == dateTime43.equals(instant67));
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0994");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.yearOfCentury();
        int int17 = dateTime6.get(dateTimeField16);
        long long18 = dateTime6.getMillis();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(4476);
        org.joda.time.DateTime dateTime21 = dateTime6.toDateTime(dateTimeZone20);
        long long23 = dateTimeZone20.convertUTCToLocal(1645455464156L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime21", (dateTime4.compareTo(dateTime21) == 0) == dateTime4.equals(dateTime21));
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0995");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = instant22.get(dateTimeFieldType23);
        long long25 = instant22.getMillis();
        org.joda.time.Instant instant27 = instant22.minus(4497242326L);
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant22", (dateTime4.compareTo(instant22) == 0) == dateTime4.equals(instant22));
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0996");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.DateTime dateTime51 = instant6.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        mutablePeriod52.addWeeks((int) (byte) -1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration67 = duration56.minus(0L);
        org.joda.time.Chronology chronology68 = null;
        mutablePeriod52.setPeriod((org.joda.time.ReadableDuration) duration56, chronology68);
        long long70 = duration56.getStandardHours();
        org.joda.time.Instant instant72 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration56, 2023);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        org.joda.time.DateTime dateTime77 = dateTime74.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime78 = dateTime77.toDateTimeISO();
        org.joda.time.DateTime dateTime80 = dateTime78.plusDays((int) 'a');
        org.joda.time.Interval interval81 = duration56.toIntervalTo((org.joda.time.ReadableInstant) dateTime78);
        long long82 = interval81.getEndMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0997");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime.Property property11 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths((int) (short) 10);
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime.Property property24 = dateTime22.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        boolean boolean33 = property24.equals((java.lang.Object) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.plus(readableDuration36);
        int int38 = property24.getDifference((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 8, periodType45, chronology52);
        mutablePeriod41.setPeriod((org.joda.time.ReadableDuration) duration43, chronology52);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        java.util.GregorianCalendar gregorianCalendar67 = dateTime59.toGregorianCalendar();
        org.joda.time.Interval interval68 = duration43.toIntervalTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        mutableInterval70.setEndMillis(10L);
        org.joda.time.Interval interval74 = mutableInterval70.toInterval();
        boolean boolean76 = interval74.isAfter(1645455029375L);
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        long long78 = mutableInterval77.toDurationMillis();
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval77.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration83 = duration80.plus((long) 8);
        org.joda.time.Seconds seconds84 = duration80.toStandardSeconds();
        org.joda.time.Duration duration85 = duration80.toDuration();
        org.joda.time.Interval interval86 = interval74.withDurationAfterStart((org.joda.time.ReadableDuration) duration80);
        int int87 = duration69.compareTo((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Instant instant88 = instant20.plus((org.joda.time.ReadableDuration) duration80);
        int int89 = property11.getDifference((org.joda.time.ReadableInstant) instant88);
        java.lang.String str90 = property11.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant20", (dateTime19.compareTo(instant20) == 0) == dateTime19.equals(instant20));
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0998");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Instant instant50 = instant6.withMillis(1645455043927L);
        org.joda.time.DateTime dateTime51 = instant6.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        mutablePeriod52.addWeeks((int) (byte) -1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period65 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Duration duration67 = duration56.minus(0L);
        org.joda.time.Chronology chronology68 = null;
        mutablePeriod52.setPeriod((org.joda.time.ReadableDuration) duration56, chronology68);
        long long70 = duration56.getStandardHours();
        org.joda.time.Instant instant72 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration56, 2023);
        org.joda.time.Instant instant75 = instant72.withDurationAdded(0L, (int) (byte) 100);
        org.joda.time.Instant instant78 = instant75.withDurationAdded(1645455060416L, 13);
        org.joda.time.DateTime dateTime79 = instant78.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and mutableDateTime7", (instant6.compareTo(mutableDateTime7) == 0) == instant6.equals(mutableDateTime7));
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test0999");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        boolean boolean11 = property9.equals((java.lang.Object) "2022-02-21T14:50:59.219Z");
        int int12 = property9.getLeapAmount();
        org.joda.time.DateTime dateTime13 = property9.withMinimumValue();
        org.joda.time.LocalDate localDate14 = dateTime13.toLocalDate();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod();
        mutablePeriod15.setMonths((int) ' ');
        java.lang.Object obj18 = mutablePeriod15.clone();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusWeeks((int) (short) -1);
        org.joda.time.Period period29 = period23.minusMillis(4);
        org.joda.time.Interval interval30 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        mutablePeriod15.add((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        int int35 = dateTime33.getHourOfDay();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime56.plusSeconds((int) (byte) 10);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Period period60 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalTime localTime61 = dateTime58.toLocalTime();
        java.lang.String str62 = localTime61.toString();
        org.joda.time.DateTime dateTime63 = dateTime33.withFields((org.joda.time.ReadablePartial) localTime61);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod15, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime66 = dateTime33.withYear(14);
        org.joda.time.DateTime dateTime68 = dateTime33.minusMillis(27);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str73 = dateTimeZone71.getNameKey(1645455028293L);
        java.lang.String str75 = dateTimeZone71.getNameKey(1645455039471L);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        java.lang.Object obj81 = mutableInterval76.clone();
        org.joda.time.Chronology chronology82 = mutableInterval76.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.yearOfEra();
        org.joda.time.Chronology chronology84 = chronology82.withUTC();
        org.joda.time.DateTimeZone dateTimeZone85 = chronology84.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone85);
        int int88 = dateTimeZone85.getOffset((long) 7);
        long long90 = dateTimeZone71.getMillisKeepLocal(dateTimeZone85, 1645455040208L);
        java.lang.String str91 = dateTimeZone85.toString();
        long long94 = dateTimeZone85.adjustOffset(1645455072545L, true);
        org.joda.time.DateTime dateTime95 = dateTime33.withZone(dateTimeZone85);
        org.joda.time.DateTime dateTime96 = dateTime13.toDateTime(dateTimeZone85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime95", (dateTime1.compareTo(dateTime95) == 0) == dateTime1.equals(dateTime95));
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest1.test1000");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) mutableInterval44);
        mutableInterval44.setDurationAfterStart(1645455033234L);
        boolean boolean52 = mutableInterval26.isBefore((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod();
        mutablePeriod53.setMonths((int) ' ');
        java.lang.Object obj56 = mutablePeriod53.clone();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone59);
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period61.minusSeconds((int) (short) 1);
        org.joda.time.Period period65 = period61.plusWeeks((int) (short) -1);
        org.joda.time.Period period67 = period61.minusMillis(4);
        org.joda.time.Interval interval68 = interval60.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        mutablePeriod53.add((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Interval interval71 = interval68.withEndMillis(1645455034431L);
        mutableInterval26.setInterval((org.joda.time.ReadableInterval) interval71);
        org.joda.time.DateTime dateTime73 = mutableInterval26.getStart();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str78 = dateTimeZone76.getNameKey(1645455028293L);
        java.lang.String str80 = dateTimeZone76.getNameKey(1645455039471L);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(dateTimeZone76);
        mutableInterval26.setEnd((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Instant instant84 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime85 = instant84.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime86 = instant84.toMutableDateTime();
        mutableInterval26.setInterval(readableInstant83, (org.joda.time.ReadableInstant) instant84);
        org.joda.time.DateTime dateTime88 = mutableInterval26.getEnd();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime81", (dateTime1.compareTo(dateTime81) == 0) == dateTime1.equals(dateTime81));
    }
}


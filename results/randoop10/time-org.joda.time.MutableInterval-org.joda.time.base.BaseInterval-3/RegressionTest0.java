import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test00001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00001");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.DurationFieldType durationFieldType1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period3 = period0.withFieldAdded(durationFieldType1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
    }

    @Test
    public void test00002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00002");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'hi!' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00003");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00004");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = new org.joda.time.Period(readablePartial0, readablePartial1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00005");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) dateTimeFieldType0, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test00006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00006");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval3 = new org.joda.time.Interval((java.lang.Object) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test00007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00007");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00008");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval7 = interval3.withStart((org.joda.time.ReadableInstant) dateTime5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T14:50:27.548Z" + "'", str6, "2022-02-21T14:50:27.548Z");
    }

    @Test
    public void test00009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00009");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.PeriodType periodType2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period3 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00010");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStart((org.joda.time.ReadableInstant) dateTime2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00011");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadablePeriod) period8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:50:28.142Z" + "'", str2, "2022-02-21T14:50:28.142Z");
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test00012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00012");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.negated();
        org.joda.time.DurationFieldType durationFieldType2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period4 = period1.withField(durationFieldType2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00013");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval13 = interval11.withStartMillis((long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test00014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00014");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0, (int) (byte) -1, (int) (short) 0, 1, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00015");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval11 = new org.joda.time.Interval((java.lang.Object) period10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:50:28.503Z" + "'", str4, "2022-02-21T14:50:28.503Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test00016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00016");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(4, (int) (byte) 100, (int) (byte) -1, 4, (int) 'a', (int) ' ', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00017");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.ReadableInterval readableInterval6 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval(readableInterval6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Interval must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test00018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00018");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime5.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455029043L + "'", long2 == 1645455029043L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T14:50:29.043Z" + "'", str6, "2022-02-21T14:50:29.043Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00019");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime4.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:50:29.263Z" + "'", str2, "2022-02-21T14:50:29.263Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test00020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00020");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime15.withEra((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:50:29.350Z" + "'", str9, "2022-02-21T14:50:29.350Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00021");
        java.lang.Object obj1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(obj1, periodType2, chronology3);
        int int5 = periodType2.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period6 = new org.joda.time.Period((java.lang.Object) "2022-02-21T14:50:28.086Z", periodType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:28.086Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test00022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00022");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = periodType1.getFieldType((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test00023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00023");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime5.withWeekOfWeekyear((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455030580L + "'", long2 == 1645455030580L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test00024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00024");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        int[] intArray17 = new int[] { 10, 1, 'a' };
        // The following exception was thrown during execution in test generation
        try {
            chronology6.validate((org.joda.time.ReadablePartial) yearMonthDay13, intArray17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645455030611L + "'", long9 == 1645455030611L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 1, 97]");
    }

    @Test
    public void test00025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00025");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = yearMonthDay6.get(dateTimeFieldType7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455031209L + "'", long2 == 1645455031209L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test00026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00026");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-21T14:50:29.197Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:29.197Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00027");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("hi!", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00028");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(4, (int) (short) 100, (int) (short) 100, (int) (short) 100, (int) (short) -1, (int) ' ', (int) (byte) 10, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test00029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00029");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval9 = interval3.withPeriodAfterStart((org.joda.time.ReadablePeriod) period8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test00030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00030");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localTime25.getValue(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:50:34.139Z" + "'", str4, "2022-02-21T14:50:34.139Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455034139L + "'", long18 == 1645455034139L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test00031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00031");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long26 = dateTimeField7.set(1645455029560L, "2022-02-21T14:50:33.730Z", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:33.730Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455036519L + "'", long11 == 1645455036519L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test00032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00032");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = durationField8.getMillis(1645455033234L, (long) 26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645455033234");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test00033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00033");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((java.lang.Object) 1645455035272L, periodType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test00034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00034");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str10 = dateTimeZone8.getNameKey(1645455028293L);
        int int12 = dateTimeZone8.getOffset(1645455028293L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((int) (byte) 100, 100, 10, 37320000, (int) (short) 0, 8, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37320000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 37320000 + "'", int12 == 37320000);
    }

    @Test
    public void test00035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00035");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((int) (byte) 1, 9, 2, 10, (int) (byte) 100, 3, 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00036");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType9 = periodType8.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = new org.joda.time.Period((int) (short) 10, (int) '#', (int) (byte) 100, 40, 40, 1, 2, (int) (byte) -1, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test00037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00037");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime17.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTimeISO();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        org.joda.time.Duration duration43 = duration30.withMillis(1645455034114L);
        org.joda.time.Instant instant44 = instant27.minus((org.joda.time.ReadableDuration) duration43);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) instant44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645455037479L + "'", long7 == 1645455037479L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455037479L + "'", long13 == 1645455037479L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-21T14:50:37.479Z" + "'", str20, "2022-02-21T14:50:37.479Z");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T14:50:37.480Z" + "'", str33, "2022-02-21T14:50:37.480Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant44);
    }

    @Test
    public void test00038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00038");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTime1.withWeekOfWeekyear((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455037887,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=37,MILLISECOND=887,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test00039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00039");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1L), 1L, periodType10, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(37320000, (int) (byte) 10, (int) '4', (-1), 37320000, (-1), (int) (short) 1, 2, periodType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test00040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00040");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfSecond();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = chronology7.getDateTimeMillis(1645455029880L, 10, (int) (short) 0, 37320000, 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37320000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00041");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1645455037307L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455037307 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00042");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str5 = dateTimeZone3.getNameKey(1645455028293L);
        int int7 = dateTimeZone3.getOffset(1645455028293L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) (-1.0d), dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Double");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37320000 + "'", int7 == 37320000);
    }

    @Test
    public void test00043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00043");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval(1645455029643L, 0L, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test00044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00044");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) 2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime9.withYearOfCentury((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:50:39.229Z" + "'", str2, "2022-02-21T14:50:39.229Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test00045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00045");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-21T14:50:35.433Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:35.433Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00046");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        boolean boolean8 = property3.isLeap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = property3.setCopy("2022-02-21T14:50:39.611Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:39.611Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455039631L + "'", long2 == 1645455039631L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00047");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = durationField14.getValue(100L, 1645455037444L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test00048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00048");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = property3.setCopy("2022-02-21T14:50:36.069Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:36.069Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455040134L + "'", long2 == 1645455040134L);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test00049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00049");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028646L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField10.set((long) 22, "2022-02-21T14:50:37.336Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:37.336Z\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test00050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00050");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getShortName(52L);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+10:22" + "'", str4, "+10:22");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00051");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-21T14:50:27.514Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:27.514Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00052");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime1.withTime(100, 1, (int) (byte) 0, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455040729L + "'", long2 == 1645455040729L);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test00053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00053");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval21 = interval17.withStartMillis(1645455040261L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P32M");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
    }

    @Test
    public void test00054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00054");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfSecond();
        boolean boolean15 = dateTimeFieldType5.isSupported(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(3, (int) (short) 100, (int) (short) 1, (int) (short) 1, 8, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00055");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = duration14.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withZoneRetainFields(dateTimeZone28);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStart((org.joda.time.ReadableInstant) dateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645455041262L + "'", long7 == 1645455041262L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-21T14:50:41.265Z" + "'", str20, "2022-02-21T14:50:41.265Z");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test00056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00056");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.minusYears(26);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = period6.getValue(22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test00057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00057");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period(1645455029672L, (long) 3, periodType11, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1), (int) ' ', (int) (byte) 10, (-1), (int) '#', (-1), (int) '#', 0, periodType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test00058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00058");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        java.lang.Class<?> wildcardClass7 = dateTime4.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455041696L + "'", long2 == 1645455041696L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test00059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00059");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        boolean boolean39 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.Period period48 = duration27.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType47);
        java.util.Locale locale50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = dateTime44.toString("", locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:50:41.734Z" + "'", str2, "2022-02-21T14:50:41.734Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21T14:50:41.734Z" + "'", str15, "2022-02-21T14:50:41.734Z");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21T14:50:41.734Z" + "'", str30, "2022-02-21T14:50:41.734Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-21T14:50:41.734Z" + "'", str42, "2022-02-21T14:50:41.734Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test00060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00060");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone22);
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.Period period28 = period24.plusWeeks((int) (short) -1);
        org.joda.time.Period period30 = period24.minusMillis(4);
        org.joda.time.Interval interval31 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period33 = period24.minusMinutes(8);
        int int34 = period33.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P32M");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test00061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00061");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00062");
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1970, 10, 2022, 0, 53429880, 0, (int) (short) 0, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53429880 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test00063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00063");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.LocalDate localDate9 = dateTime6.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDate9.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455042516L + "'", long2 == 1645455042516L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test00064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00064");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test00065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00065");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        mutableInterval26.setChronology(chronology35);
        // The following exception was thrown during execution in test generation
        try {
            long long45 = chronology35.getDateTimeMillis(3, 2, 0, 1970, (int) (byte) 1, (int) (byte) -1, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:50:43.157Z" + "'", str2, "2022-02-21T14:50:43.157Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:50:43.157Z" + "'", str9, "2022-02-21T14:50:43.157Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-21T14:50:43.157Z" + "'", str16, "2022-02-21T14:50:43.157Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test00066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00066");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-21T14:50:27.594Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:27.594Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00067");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = interval24.toDurationMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
    }

    @Test
    public void test00068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00068");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusMinutes((int) (byte) 10);
        org.joda.time.Period period6 = period4.withHours((-1));
        int int7 = period4.getMillis();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test00069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00069");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfWeek();
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField9.set(1645455029880L, "2022-02-21T14:50:27.594Z", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:27.594Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test00070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00070");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period6.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType9 = period6.getFieldType(53429880);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53429880");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
    }

    @Test
    public void test00071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00071");
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str18 = dateTimeZone16.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology19 = chronology11.withZone(dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(100, (int) ' ', 53429880, 10, 40, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test00072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00072");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval11 = new org.joda.time.Interval((java.lang.Object) dateTimeFieldType0, chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test00073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00073");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType6 = periodType5.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.Period period16 = new org.joda.time.Period(1645455029672L, (long) 3, periodType6, chronology14);
        mutablePeriod1.add(1645455030370L, chronology14);
        org.joda.time.Period period18 = new org.joda.time.Period(1645455035827L, chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) dateTimeField19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test00074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00074");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-01-01T00:00:00.000+10:22/2023-01-01T00:00:00.000+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00075");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.junit.Assert.assertNotNull(strSet0);
    }

    @Test
    public void test00076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00076");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        long long17 = dateTimeField14.add(1645455028646L, (long) 53429880);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        int int25 = yearMonthDay24.size();
        int[] intArray32 = new int[] { 0, 1, 53429880, 3, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray34 = dateTimeField14.add((org.joda.time.ReadablePartial) yearMonthDay24, (int) (byte) 10, intArray32, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4617987087028646L + "'", long17 == 4617987087028646L);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645455044573L + "'", long20 == 1645455044573L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 1, 53429880, 3, 10]");
    }

    @Test
    public void test00077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00077");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime3.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property13.setCopy(4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:12:44.591+10:22" + "'", str4, "2022-02-22T01:12:44.591+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test00078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00078");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = new org.joda.time.Interval((java.lang.Object) durationFieldType0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
    }

    @Test
    public void test00079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00079");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-21T14:50:28.528Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00080");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645455028646L);
        long long8 = mutableInterval0.getStartMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval(1645455033142L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
    }

    @Test
    public void test00081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00081");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = durationField8.add(1645492360347L, 31556952000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455045319L + "'", long2 == 1645455045319L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test00082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00082");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField8 = yearMonthDay6.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((java.lang.Object) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455045379L + "'", long2 == 1645455045379L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test00083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00083");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        boolean boolean8 = property3.isLeap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = property3.setCopy("2022-02-21T14:50:32.017Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:32.017Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455046169L + "'", long2 == 1645455046169L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00084");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = dateTimeField14.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int[] intArray27 = new int[] { '#', 40, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = dateTimeField14.set((org.joda.time.ReadablePartial) yearMonthDay22, 4365808, intArray27, 4365808);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455046352L + "'", long18 == 1645455046352L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[35, 40, 1]");
    }

    @Test
    public void test00085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00085");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = durationField9.getMillis(1645455040225L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455040225 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test00086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00086");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateTime7.toString("2022-02-21T14:50:39.907Z", locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:12:46.621+10:22" + "'", str2, "2022-02-22T01:12:46.621+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test00087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00087");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime4.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval23 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        boolean boolean24 = dateTime4.equals((java.lang.Object) interval17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime4.withDayOfWeek((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:12:46.690+10:22" + "'", str2, "2022-02-22T01:12:46.690+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645455046694L + "'", long15 == 1645455046694L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00088");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-21T14:50:30.237Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-21T14:50:30.237Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00089");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        mutableInterval26.setInterval(100000L, 1645455028646L);
        org.joda.time.Interval interval34 = interval25.gap((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.DateTime dateTime39 = dateTime36.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTime(chronology40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime44 = dateTime39.withFieldAdded(durationFieldType42, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval26.setStart((org.joda.time.ReadableInstant) dateTime39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455046744L + "'", long2 == 1645455046744L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNull(interval34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T01:12:46.744+10:22" + "'", str37, "2022-02-22T01:12:46.744+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test00090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00090");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime(chronology9);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime8.withMillis((long) 2);
        boolean boolean14 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime8);
        java.util.Date date15 = dateTime1.toDate();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T01:12:46.980+10:22" + "'", str6, "2022-02-22T01:12:46.980+10:22");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Feb 21 14:50:46 UTC 2022");
    }

    @Test
    public void test00091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00091");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        long long26 = mutableInterval12.getEndMillis();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455047025L + "'", long2 == 1645455047025L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test00092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00092");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfCentury();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime34.toYearMonthDay();
        int int36 = yearMonthDay35.size();
        org.joda.time.DateTime dateTime37 = dateTime25.withFields((org.joda.time.ReadablePartial) yearMonthDay35);
        int[] intArray44 = new int[] { 10, 53440972, 53429880, (short) 100, (-19044) };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) yearMonthDay35, (int) (byte) -1, intArray44, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T01:12:47.153+10:22" + "'", str19, "2022-02-22T01:12:47.153+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645455047154L + "'", long31 == 1645455047154L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 53440972, 53429880, 100, -19044]");
    }

    @Test
    public void test00093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00093");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField8 = yearMonthDay6.getField(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = yearMonthDay6.get(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455047228L + "'", long2 == 1645455047228L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
    }

    @Test
    public void test00094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00094");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis(100);
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateTime4.toString("2022-02-22T01:12:47.486+10:22", locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455047988L + "'", long2 == 1645455047988L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test00095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00095");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 22, 1645455041696L);
    }

    @Test
    public void test00096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00096");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645455029643L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = duration1.minus((org.joda.time.ReadableDuration) duration27);
        java.lang.Class<?> wildcardClass38 = duration37.getClass();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:12:48.256+10:22" + "'", str4, "2022-02-22T01:12:48.256+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Time]" + "'", str20, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Time" + "'", str21, "Time");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645455048257L + "'", long31 == 1645455048257L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test00097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00097");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-21T14:50:37.987Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:37.987Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00098");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStart((org.joda.time.ReadableInstant) dateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P32M");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T01:12:48.679+10:22" + "'", str22, "2022-02-22T01:12:48.679+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test00099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00099");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) "DurationField[years]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DurationField[years]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00100");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028646L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime23 = dateTime15.withZone(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        int[] intArray26 = null;
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = dateTimeField10.set((org.joda.time.ReadablePartial) yearMonthDay24, (int) (byte) 10, intArray26, "2022-02-21T14:50:39.945Z", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:39.945Z\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455049233L + "'", long13 == 1645455049233L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
    }

    @Test
    public void test00101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00101");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        mutableInterval6.setInterval(100000L, 1645455028646L);
        long long14 = mutableInterval6.getStartMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        mutableInterval6.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period21 = duration18.toPeriod();
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Minutes minutes23 = duration18.toStandardMinutes();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100000L + "'", long14 == 100000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(minutes23);
    }

    @Test
    public void test00102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00102");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        boolean boolean18 = dateTime16.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        boolean boolean37 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval38 = null; // flaky: new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean40 = false; // flaky: mutableInterval38.contains(1L);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
// flaky:         mutableInterval38.setChronology(chronology47);
        mutablePeriod10.add(1645455032491L, chronology47);
        mutablePeriod10.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = mutablePeriod10.getValue(37320000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 37320000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T01:12:49.434+10:22" + "'", str14, "2022-02-22T01:12:49.434+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T01:12:49.434+10:22" + "'", str21, "2022-02-22T01:12:49.434+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T01:12:49.434+10:22" + "'", str28, "2022-02-22T01:12:49.434+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
// flaky:         org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test00103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00103");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        java.util.Locale locale22 = null;
        int int23 = dateTimeField21.getMaximumTextLength(locale22);
        boolean boolean24 = dateTimeField21.isSupported();
        java.util.Locale locale25 = null;
        int int26 = dateTimeField21.getMaximumTextLength(locale25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalTime localTime52 = dateTime49.toLocalTime();
        int int53 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localTime52);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = yearMonthDay13.compareTo((org.joda.time.ReadablePartial) localTime52);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455049540L + "'", long2 == 1645455049540L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T01:12:49.540+10:22" + "'", str31, "2022-02-22T01:12:49.540+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645455049540L + "'", long45 == 1645455049540L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278993 + "'", int53 == 292278993);
    }

    @Test
    public void test00104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00104");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime3.era();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        boolean boolean26 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration28 = duration17.minus(1645455031834L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((-1L), 1L, periodType46, chronology47);
        java.lang.String str49 = periodType46.toString();
        java.lang.String str50 = periodType46.getName();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645455029643L, periodType46);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant42, periodType46);
        boolean boolean53 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime54 = dateTime3.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType58 = period57.getPeriodType();
        org.joda.time.Period period60 = period57.plusMillis(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) period60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:12:49.599+10:22" + "'", str4, "2022-02-22T01:12:49.599+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T01:12:49.600+10:22" + "'", str33, "2022-02-22T01:12:49.600+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PeriodType[Time]" + "'", str49, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Time" + "'", str50, "Time");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period60);
    }

    @Test
    public void test00105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00105");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(9);
        org.joda.time.DateTime.Property property28 = dateTime25.minuteOfHour();
        java.util.Locale locale30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = property28.setCopy("2022-02-22T01:12:48.579+10:22", locale30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T01:12:48.579+10:22\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:12:49.668+10:22" + "'", str2, "2022-02-22T01:12:49.668+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T01:12:49.669+10:22" + "'", str15, "2022-02-22T01:12:49.669+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test00106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00106");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        int int17 = dateTimeField14.getDifference((long) (short) 1, 1645455030370L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        int int44 = yearMonthDay43.size();
        org.joda.time.DateTime dateTime45 = dateTime33.withFields((org.joda.time.ReadablePartial) yearMonthDay43);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay43, locale46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField49 = yearMonthDay43.getField((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-19044) + "'", int17 == (-19044));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T01:12:49.799+10:22" + "'", str27, "2022-02-22T01:12:49.799+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455049800L + "'", long39 == 1645455049800L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "3" + "'", str47, "3");
    }

    @Test
    public void test00107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00107");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getSeconds();
        mutablePeriod16.setMillis((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) mutablePeriod16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T01:12:49.824+10:22" + "'", str9, "2022-02-22T01:12:49.824+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
    }

    @Test
    public void test00108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00108");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime4.withHourOfDay(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455049905L + "'", long2 == 1645455049905L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test00109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00109");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = dateTimeField14.getRangeDurationField();
        long long17 = dateTimeField14.roundHalfCeiling(1645455032491L);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField14.add(1645455031965L, 1645450680000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645450680000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645450680000L + "'", long17 == 1645450680000L);
    }

    @Test
    public void test00110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00110");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType6 = periodType5.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.Period period16 = new org.joda.time.Period(1645455029672L, (long) 3, periodType6, chronology14);
        mutablePeriod1.add(1645455030370L, chronology14);
        org.joda.time.Period period18 = new org.joda.time.Period(1645455035827L, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = durationField19.getMillis(1645455034688L, 457070L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455034688 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test00111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00111");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration24 = duration13.minus(0L);
        org.joda.time.Duration duration26 = duration13.withMillis(1645455034114L);
        java.lang.String str27 = duration13.toString();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.minuteOfDay();
        org.joda.time.DurationField durationField38 = chronology35.halfdays();
        org.joda.time.Period period39 = duration13.toPeriod(periodType28, chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period40 = new org.joda.time.Period((java.lang.Object) dateTime8, chronology35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:12:50.186+10:22" + "'", str2, "2022-02-22T01:12:50.186+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T01:12:50.186+10:22" + "'", str16, "2022-02-22T01:12:50.186+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT100S" + "'", str27, "PT100S");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test00112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00112");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int14 = dateTime9.get(dateTimeFieldType13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime19.toString(dateTimeFormatter20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getNameKey(1645455028293L);
        int int28 = dateTimeZone24.getOffset(1645455028293L);
        java.lang.String str30 = dateTimeZone24.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = dateTime9.toDateTime(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(0, (int) (short) 100, 1970, 0, 40, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T01:12:50.209+10:22" + "'", str7, "2022-02-22T01:12:50.209+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T01:12:50.209+10:22" + "'", str17, "2022-02-22T01:12:50.209+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T01:12:50.010+10:22" + "'", str21, "2022-02-22T01:12:50.010+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 37320000 + "'", int28 == 37320000);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:22" + "'", str30, "+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test00113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00113");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField8 = yearMonthDay6.getField(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay15);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusSeconds((int) (byte) 10);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period41 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalTime localTime42 = dateTime39.toLocalTime();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((-1L), 1L, periodType45, chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) localTime42, periodType45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455050257L + "'", long2 == 1645455050257L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455050257L + "'", long11 == 1645455050257L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T01:12:50.257+10:22" + "'", str21, "2022-02-22T01:12:50.257+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645455050257L + "'", long35 == 1645455050257L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(periodType45);
    }

    @Test
    public void test00114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00114");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(100);
        org.joda.time.LocalDate localDate9 = dateTime6.toLocalDate();
        int int10 = dateTime6.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = dateTime6.toString("2022-02-21T14:50:32.674Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455050282L + "'", long2 == 1645455050282L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
    }

    @Test
    public void test00115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00115");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        int int6 = dateTimeZone2.getOffset(1645455028293L);
        java.lang.String str8 = dateTimeZone2.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillis((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime9.withHourOfDay(4369741);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4369741 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 37320000 + "'", int6 == 37320000);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:22" + "'", str8, "+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test00116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00116");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.millisOfSecond();
        boolean boolean10 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime17.toYearMonthDay();
        int int19 = yearMonthDay18.size();
        java.util.Locale locale20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) yearMonthDay18, locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455050478L + "'", long14 == 1645455050478L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test00117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00117");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645455048040L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test00118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00118");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        int int17 = dateTimeField14.getDifference((long) (short) 1, 1645455030370L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        int int44 = yearMonthDay43.size();
        org.joda.time.DateTime dateTime45 = dateTime33.withFields((org.joda.time.ReadablePartial) yearMonthDay43);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay43, locale46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime dateTime52 = dateTime49.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime54 = dateTime52.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str59 = dateTimeZone57.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime60 = dateTime52.withZone(dateTimeZone57);
        org.joda.time.YearMonthDay yearMonthDay61 = dateTime60.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        boolean boolean67 = mutableInterval63.overlaps((org.joda.time.ReadableInterval) mutableInterval65);
        java.lang.Object obj68 = mutableInterval63.clone();
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.yearOfEra();
        org.joda.time.DurationField durationField71 = dateTimeField70.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        long long74 = dateTime73.getMillis();
        org.joda.time.DateTime dateTime76 = dateTime73.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime76.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay78 = dateTime77.toYearMonthDay();
        int int79 = yearMonthDay78.size();
        int[] intArray84 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int85 = dateTimeField70.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay78, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField14.addWrapPartial((org.joda.time.ReadablePartial) yearMonthDay61, 3, intArray84, 26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-19044) + "'", int17 == (-19044));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T01:12:50.648+10:22" + "'", str27, "2022-02-22T01:12:50.648+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455050648L + "'", long39 == 1645455050648L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "3" + "'", str47, "3");
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645455050649L + "'", long50 == 1645455050649L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(obj68);
// flaky:         org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1645455050649L + "'", long74 == 1645455050649L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test00119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00119");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period13 = period4.withHours((int) 'a');
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean18 = period16.equals((java.lang.Object) dateTimeFieldType17);
        org.joda.time.Period period20 = period16.minusYears(26);
        org.joda.time.Period period21 = period4.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Minutes minutes22 = period21.toStandardMinutes();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(minutes22);
    }

    @Test
    public void test00120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00120");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setStartMillis(1645455047858L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00121");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = dateTime7.toString("2022-02-21T14:50:42.329Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:12:51.180+10:22" + "'", str2, "2022-02-22T01:12:51.180+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test00122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00122");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.contains((long) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 8, periodType13, chronology20);
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration11, chronology20);
        int int24 = mutablePeriod9.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime dateTime29 = dateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str36 = dateTimeZone34.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime37 = dateTime29.withZone(dateTimeZone34);
        org.joda.time.YearMonthDay yearMonthDay38 = dateTime37.toYearMonthDay();
        org.joda.time.DateTime.Property property39 = dateTime37.weekyear();
        org.joda.time.DateTime dateTime40 = property39.roundCeilingCopy();
        org.joda.time.Duration duration41 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = mutableInterval0.equals((java.lang.Object) duration41);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645455051401L + "'", long27 == 1645455051401L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test00123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00123");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-21T14:50:42.139Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:42.139Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00124");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-22T01:12:45.808+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T01:12:45.808+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00125");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-19044), 8, 8, (int) ' ', 4369741, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00126");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds((int) (byte) 10);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) dateTime10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = property3.setCopy("2022-02-22T01:12:50.809+10:22");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T01:12:50.809+10:22\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455052005L + "'", long2 == 1645455052005L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645455052005L + "'", long6 == 1645455052005L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00127");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028646L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfHalfday();
        java.lang.String str11 = dateTimeField10.getName();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "clockhourOfHalfday" + "'", str11, "clockhourOfHalfday");
    }

    @Test
    public void test00128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00128");
        java.lang.Object obj4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(obj4, periodType5, chronology6);
        int int8 = periodType5.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.millisOfSecond();
        boolean boolean19 = dateTimeFieldType9.isSupported(chronology16);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 1645455031834L, periodType5, chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval21 = new org.joda.time.Interval(1645455051598L, 1645455039403L, chronology16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test00129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00129");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        mutableInterval6.setInterval(100000L, 1645455028646L);
        long long14 = mutableInterval6.getStartMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        mutableInterval6.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period21 = duration18.toPeriod();
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration18);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = mutablePeriod2.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100000L + "'", long14 == 100000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test00130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00130");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period1.minusSeconds((int) (short) 1);
        org.joda.time.Period period5 = period1.plusWeeks((int) (short) -1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType7 = periodType6.withMinutesRemoved();
        org.joda.time.Period period8 = period5.normalizedStandard(periodType7);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.Chronology chronology17 = chronology15.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((java.lang.Object) instant0, periodType7, chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test00131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00131");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.util.Locale locale4 = null;
        java.lang.String str5 = property3.getAsShortText(locale4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period6 = new org.joda.time.Period((java.lang.Object) property3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455052902L + "'", long2 == 1645455052902L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
    }

    @Test
    public void test00132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00132");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) '4');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00133");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        java.lang.String str8 = periodType5.toString();
        java.lang.String str9 = periodType5.getName();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1645455029643L, periodType5);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType5, chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType20 = periodType5.getFieldType(4371255);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4371255");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[Time]" + "'", str8, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Time" + "'", str9, "Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test00134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00134");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration16 = duration5.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime(chronology22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = duration16.toPeriodTo((org.joda.time.ReadableInstant) dateTime23, periodType24);
        org.joda.time.Period period27 = period25.withSeconds((int) (short) 100);
        org.joda.time.Interval interval28 = interval3.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone31);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period33.minusSeconds((int) (short) 1);
        org.joda.time.Period period37 = period33.plusWeeks((int) (short) -1);
        org.joda.time.Period period39 = period33.minusMillis(4);
        org.joda.time.Interval interval40 = interval32.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Interval interval41 = interval28.overlap((org.joda.time.ReadableInterval) interval32);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime dateTime46 = dateTime43.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMonths((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval49 = interval32.withStart((org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T14:50:53.980Z" + "'", str8, "2022-02-21T14:50:53.980Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T14:50:53.980Z" + "'", str19, "2022-02-21T14:50:53.980Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNull(interval41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645455053980L + "'", long44 == 1645455053980L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test00135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00135");
        org.joda.time.Period period8 = new org.joda.time.Period(1970, (-1), 40, 53440972, 53440972, 100, 22, 10);
        int int9 = period8.getMonths();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test00136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00136");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        java.lang.String str26 = localTime25.toString();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalTime localTime52 = dateTime49.toLocalTime();
        java.lang.String str53 = localTime52.toString();
        int int54 = localTime25.compareTo((org.joda.time.ReadablePartial) localTime52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField56 = localTime25.getField(26);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:50:54.855Z" + "'", str4, "2022-02-21T14:50:54.855Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455054855L + "'", long18 == 1645455054855L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "14:51:04.855" + "'", str26, "14:51:04.855");
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-21T14:50:54.855Z" + "'", str31, "2022-02-21T14:50:54.855Z");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645455054855L + "'", long45 == 1645455054855L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "14:51:04.855" + "'", str53, "14:51:04.855");
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test00137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00137");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration16 = duration5.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime(chronology22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = duration16.toPeriodTo((org.joda.time.ReadableInstant) dateTime23, periodType24);
        org.joda.time.Period period27 = period25.withSeconds((int) (short) 100);
        org.joda.time.Interval interval28 = interval3.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval37 = interval28.withStart((org.joda.time.ReadableInstant) dateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T14:50:54.984Z" + "'", str8, "2022-02-21T14:50:54.984Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T14:50:54.984Z" + "'", str19, "2022-02-21T14:50:54.984Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-21T14:50:54.984Z" + "'", str31, "2022-02-21T14:50:54.984Z");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test00138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00138");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withYearOfCentury((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455055035L + "'", long2 == 1645455055035L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test00139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00139");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration16 = duration5.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime(chronology22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = duration16.toPeriodTo((org.joda.time.ReadableInstant) dateTime23, periodType24);
        org.joda.time.Period period27 = period25.withSeconds((int) (short) 100);
        org.joda.time.Interval interval28 = interval3.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone31);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period33.minusSeconds((int) (short) 1);
        org.joda.time.Period period37 = period33.plusWeeks((int) (short) -1);
        org.joda.time.Period period39 = period33.minusMillis(4);
        org.joda.time.Interval interval40 = interval32.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Interval interval41 = interval28.overlap((org.joda.time.ReadableInterval) interval32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration42 = interval41.toDuration();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T14:50:55.232Z" + "'", str8, "2022-02-21T14:50:55.232Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T14:50:55.232Z" + "'", str19, "2022-02-21T14:50:55.232Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNull(interval41);
    }

    @Test
    public void test00140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00140");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645455029643L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod23.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod24.addMonths(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:50:55.402Z" + "'", str4, "2022-02-21T14:50:55.402Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Time]" + "'", str20, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Time" + "'", str21, "Time");
        org.junit.Assert.assertNotNull(mutablePeriod24);
    }

    @Test
    public void test00141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00141");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime7.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTime.Property property19 = dateTime7.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = dateTime7.toString("2022-02-22T01:12:46.668+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:50:55.474Z" + "'", str2, "2022-02-21T14:50:55.474Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T14:50:55.010Z" + "'", str10, "2022-02-21T14:50:55.010Z");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455055474L + "'", long13 == 1645455055474L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test00142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00142");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType6 = periodType5.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.Period period16 = new org.joda.time.Period(1645455029672L, (long) 3, periodType6, chronology14);
        mutablePeriod1.add(1645455030370L, chronology14);
        org.joda.time.Period period18 = new org.joda.time.Period(1645455035827L, chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.era();
        java.util.Locale locale20 = null;
        int int21 = dateTimeField19.getMaximumTextLength(locale20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTime();
        org.joda.time.DateTime dateTime32 = dateTime26.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime34 = dateTime26.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        int int41 = dateTime40.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = dateTime40.isAfter(readableInstant42);
        boolean boolean44 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = dateTime40.toString(dateTimeFormatter45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (short) 10);
        boolean boolean53 = dateTime51.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime(chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = dateTime62.toDateTimeISO();
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes(0);
        boolean boolean72 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime69);
        boolean boolean75 = mutableInterval73.contains(1L);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        java.lang.Object obj81 = mutableInterval76.clone();
        org.joda.time.Chronology chronology82 = mutableInterval76.getChronology();
        mutableInterval73.setChronology(chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology82.minuteOfHour();
        org.joda.time.DateTime dateTime85 = dateTime40.toDateTime(chronology82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period86 = new org.joda.time.Period((java.lang.Object) int21, chronology82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-21T14:50:55.718Z" + "'", str24, "2022-02-21T14:50:55.718Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645455055718L + "'", long37 == 1645455055718L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-05-02T14:50:55.718Z" + "'", str46, "2022-05-02T14:50:55.718Z");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-21T14:50:55.719Z" + "'", str49, "2022-02-21T14:50:55.719Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-21T14:50:55.719Z" + "'", str56, "2022-02-21T14:50:55.719Z");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-21T14:50:55.719Z" + "'", str63, "2022-02-21T14:50:55.719Z");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test00143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00143");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod();
        mutablePeriod7.addWeeks((int) (byte) -1);
        mutablePeriod7.addHours((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test00144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00144");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2022-02-21T14:50:42.139Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-21T14:50:42.139Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00145");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime3.era();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        boolean boolean26 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration28 = duration17.minus(1645455031834L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((-1L), 1L, periodType46, chronology47);
        java.lang.String str49 = periodType46.toString();
        java.lang.String str50 = periodType46.getName();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645455029643L, periodType46);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant42, periodType46);
        boolean boolean53 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime54 = dateTime3.plus((org.joda.time.ReadableDuration) duration28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = dateTime54.withDate((int) (byte) 0, 14, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:50:56.959Z" + "'", str4, "2022-02-21T14:50:56.959Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T14:50:56.960Z" + "'", str33, "2022-02-21T14:50:56.960Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PeriodType[Time]" + "'", str49, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Time" + "'", str50, "Time");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test00146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00146");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2022-02-21T14:50:32.960Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-21T14:50:32.960Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00147");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime1.withField(dateTimeFieldType16, 53454899);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53454899 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455057074L + "'", long2 == 1645455057074L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T14:50:57.074Z" + "'", str8, "2022-02-21T14:50:57.074Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test00148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00148");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime13 = dateTime4.minusSeconds((int) ' ');
        org.joda.time.Duration duration14 = period0.toDurationTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Hours hours15 = period0.toStandardHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration16 = new org.joda.time.Duration((java.lang.Object) period0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21T14:50:57.188Z" + "'", str5, "2022-02-21T14:50:57.188Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(hours15);
    }

    @Test
    public void test00149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00149");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval2 = mutableInterval1.toInterval();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod();
        mutablePeriod3.setMonths((int) ' ');
        java.lang.Object obj6 = mutablePeriod3.clone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval18);
        mutableInterval1.setInterval((org.joda.time.ReadableInterval) interval18);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1L), 1L, periodType23, chronology24);
        java.lang.String str26 = periodType23.toString();
        java.lang.String str27 = periodType23.getName();
        org.joda.time.Period period28 = interval18.toPeriod(periodType23);
        org.joda.time.PeriodType periodType29 = period28.getPeriodType();
        org.joda.time.PeriodType periodType30 = periodType29.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((java.lang.Object) 1645455040261L, periodType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "P32M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PeriodType[Time]" + "'", str26, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Time" + "'", str27, "Time");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test00150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00150");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        long long13 = duration1.getStandardHours();
        org.joda.time.Hours hours14 = duration1.toStandardHours();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:50:57.522Z" + "'", str4, "2022-02-21T14:50:57.522Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(hours14);
    }

    @Test
    public void test00151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00151");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        boolean boolean26 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration23);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime28 = mutableInterval7.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setStartMillis((long) 4371255);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test00152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00152");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(4369741, 72, 2022, 31, 4371255, 53455286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00153");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = yearMonthDay15.getField(53429880);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53429880");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455057869L + "'", long11 == 1645455057869L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test00154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00154");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField7.set(1645455048029L, "2022-02-21T14:50:56.314Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:56.314Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455057948L + "'", long11 == 1645455057948L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test00155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00155");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.DateTime dateTime13 = dateTime8.withYearOfEra(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime8.withMinuteOfHour(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:50:58.046Z" + "'", str2, "2022-02-21T14:50:58.046Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test00156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00156");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        int int5 = period2.getDays();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00157");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval(1645455057415L, 1645455047858L, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test00158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00158");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = dateTime3.toString("2022-05-02T14:50:54.312Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:50:58.588Z" + "'", str4, "2022-02-21T14:50:58.588Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test00159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00159");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        int int17 = dateTimeField14.getDifference((long) (short) 1, 1645455030370L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        int int44 = yearMonthDay43.size();
        org.joda.time.DateTime dateTime45 = dateTime33.withFields((org.joda.time.ReadablePartial) yearMonthDay43);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay43, locale46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTime();
        org.joda.time.DateTime dateTime57 = dateTime55.withMillisOfDay(1);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant58.toInstant();
        boolean boolean60 = dateTime57.isAfter((org.joda.time.ReadableInstant) instant59);
        org.joda.time.LocalDateTime localDateTime61 = dateTime57.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int62 = yearMonthDay43.compareTo((org.joda.time.ReadablePartial) localDateTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-19044) + "'", int17 == (-19044));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-21T14:50:58.700Z" + "'", str27, "2022-02-21T14:50:58.700Z");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455058701L + "'", long39 == 1645455058701L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2" + "'", str47, "2");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-21T14:50:58.701Z" + "'", str50, "2022-02-21T14:50:58.701Z");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test00160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00160");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        mutableInterval26.setInterval(100000L, 1645455028646L);
        org.joda.time.Interval interval34 = interval25.gap((org.joda.time.ReadableInterval) mutableInterval26);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval26.setStartMillis(1645455044510L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455058801L + "'", long2 == 1645455058801L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNull(interval34);
    }

    @Test
    public void test00161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00161");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime3.era();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        boolean boolean26 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration28 = duration17.minus(1645455031834L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((-1L), 1L, periodType46, chronology47);
        java.lang.String str49 = periodType46.toString();
        java.lang.String str50 = periodType46.getName();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1645455029643L, periodType46);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant42, periodType46);
        boolean boolean53 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime54 = dateTime3.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Minutes minutes55 = duration28.toStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:50:58.875Z" + "'", str4, "2022-02-21T14:50:58.875Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T14:50:58.876Z" + "'", str33, "2022-02-21T14:50:58.876Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PeriodType[Time]" + "'", str49, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Time" + "'", str50, "Time");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(minutes55);
    }

    @Test
    public void test00162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00162");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = new org.joda.time.Period(31, 4, 52, (int) (byte) 10, 53458, 53440972, (int) (byte) 1, (int) (byte) 100, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test00163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00163");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T01:12:50.155+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T01:12:50.155+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00164");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField18 = yearMonthDay16.getField(0);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.DurationField durationField28 = dateTimeField27.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime33.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay35 = dateTime34.toYearMonthDay();
        int int36 = yearMonthDay35.size();
        int[] intArray41 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int42 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay35, intArray41);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = dateTimeField9.set((org.joda.time.ReadablePartial) yearMonthDay16, 4365808, intArray41, 37320000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37320000 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645455059113L + "'", long12 == 1645455059113L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645455059113L + "'", long31 == 1645455059113L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test00165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00165");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime7.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = dateTime18.toString("2022-02-21T14:50:33.835Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:50:59.186Z" + "'", str2, "2022-02-21T14:50:59.186Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T14:50:59.010Z" + "'", str10, "2022-02-21T14:50:59.010Z");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455059187L + "'", long13 == 1645455059187L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00166");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime26.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        int int29 = yearMonthDay28.size();
        int int30 = property19.compareTo((org.joda.time.ReadablePartial) yearMonthDay28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType32 = yearMonthDay28.getFieldType(53440972);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53440972");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:50:59.301Z" + "'", str2, "2022-02-21T14:50:59.301Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:50:59.301Z" + "'", str9, "2022-02-21T14:50:59.301Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455059302L + "'", long24 == 1645455059302L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test00167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00167");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField13.set(1645455032096L, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test00168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00168");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 0);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType48 = periodType47.withMinutesRemoved();
        org.joda.time.Period period49 = mutableInterval0.toPeriod(periodType48);
        org.joda.time.Duration duration50 = mutableInterval0.toDuration();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.withMillisOfSecond((int) (short) 10);
        boolean boolean57 = dateTime55.isBefore((-1L));
        int int58 = dateTime55.getDayOfWeek();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Seconds seconds60 = duration50.toStandardSeconds();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P32M");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-21T14:50:59.389Z" + "'", str22, "2022-02-21T14:50:59.389Z");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-21T14:50:59.389Z" + "'", str35, "2022-02-21T14:50:59.389Z");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-21T14:50:59.399Z" + "'", str53, "2022-02-21T14:50:59.399Z");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(seconds60);
    }

    @Test
    public void test00169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00169");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-21T14:50:54.899Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00170");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T01:12:45.736+10:22");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test00171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00171");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = dateTime10.toString("2022-02-22T01:12:50.061+10:22", locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455059964L + "'", long2 == 1645455059964L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test00172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00172");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval(1645455045950L, (long) 1970);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00173");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        int int17 = dateTimeField14.getDifference((long) (short) 1, 1645455030370L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        int int44 = yearMonthDay43.size();
        org.joda.time.DateTime dateTime45 = dateTime33.withFields((org.joda.time.ReadablePartial) yearMonthDay43);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay43, locale46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology55.years();
        long long63 = chronology55.add(1645455034244L, 1645455035827L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField64 = chronology55.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType48.getField(chronology55);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = yearMonthDay43.get(dateTimeFieldType48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-19044) + "'", int17 == (-19044));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T01:13:00.102+10:22" + "'", str27, "2022-02-22T01:13:00.102+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455060103L + "'", long39 == 1645455060103L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "3" + "'", str47, "3");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
// flaky:         org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 166190958616944L + "'", long63 == 166190958616944L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test00174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00174");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime3.withDayOfWeek((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:13:00.163+10:22" + "'", str4, "2022-02-22T01:13:00.163+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test00175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00175");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0, (int) '#', 2023, (int) (byte) -1, 2022, 53458, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00176");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = yearMonthDay13.getValue(53454899);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53454899");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455060326L + "'", long2 == 1645455060326L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test00177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00177");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T01:12:47.205+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T01:12:47.205+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00178");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) -1);
        mutablePeriod0.addHours((int) ' ');
        mutablePeriod0.addMillis(4);
    }

    @Test
    public void test00179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00179");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str24 = dateTimeZone22.getNameKey(1645455028293L);
        int int26 = dateTimeZone22.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime27 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime27);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime9.toGregorianCalendar();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:01.108+10:22" + "'", str2, "2022-02-22T01:13:01.108+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T01:13:01.108+10:22" + "'", str12, "2022-02-22T01:13:01.108+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 37320000 + "'", int26 == 37320000);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
    }

    @Test
    public void test00180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00180");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property13.addToCopy(1645455051139L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 164545505113900");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:01.126+10:22" + "'", str2, "2022-02-22T01:13:01.126+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test00181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00181");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("2022-02-22T01:12:51.207+10:22", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00182");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField15 = yearMonthDay13.getField(0);
        boolean boolean16 = dateTimeField15.isLenient();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str28 = dateTimeZone26.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime29 = dateTime21.withZone(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime29.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField32 = yearMonthDay30.getField(0);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) yearMonthDay30, (int) (short) 10, locale34);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = yearMonthDay30.getValue(4365808);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4365808");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455061231L + "'", long2 == 1645455061231L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455061231L + "'", long19 == 1645455061231L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10" + "'", str35, "10");
    }

    @Test
    public void test00183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00183");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval22 = interval15.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = interval15.toMutableInterval();
        org.joda.time.Interval interval24 = interval10.gap((org.joda.time.ReadableInterval) interval15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = interval24.getStart();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455061253L + "'", long2 == 1645455061253L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455061253L + "'", long13 == 1645455061253L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNull(interval24);
    }

    @Test
    public void test00184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00184");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        mutablePeriod10.clear();
        org.joda.time.format.PeriodFormatter periodFormatter12 = null;
        java.lang.String str13 = mutablePeriod10.toString(periodFormatter12);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P0D" + "'", str13, "P0D");
    }

    @Test
    public void test00185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00185");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        mutableInterval6.setInterval(100000L, 1645455028646L);
        long long14 = mutableInterval6.getStartMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        mutableInterval6.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period21 = duration18.toPeriod();
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period21);
        boolean boolean24 = mutablePeriod2.equals((java.lang.Object) "2022-02-22T01:12:48.330+10:22");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100000L + "'", long14 == 100000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00186");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645455028293L);
        int int19 = dateTimeZone15.getOffset(1645455028293L);
        long long23 = dateTimeZone15.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone15);
        long long28 = dateTimeZone15.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType30 = periodType29.withMinutesRemoved();
        boolean boolean31 = dateTimeZone15.equals((java.lang.Object) periodType29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(0, 31, (int) (short) 10, 72, 52, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T01:13:02.186+10:22" + "'", str7, "2022-02-22T01:13:02.186+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37320000 + "'", int19 == 37320000);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-37319997L) + "'", long23 == (-37319997L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645417725823L + "'", long28 == 1645417725823L);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00187");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455062201L + "'", long2 == 1645455062201L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test00188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00188");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2022-02-21T14:50:55.417Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-21T14:50:55.417Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00189");
        org.joda.time.Period period1 = new org.joda.time.Period(1645455032819L);
        org.joda.time.Seconds seconds2 = period1.toStandardSeconds();
        org.junit.Assert.assertNotNull(seconds2);
    }

    @Test
    public void test00190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00190");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(31, 4371255, 3, (int) '#', 40, 10, (-19044), 31, periodType8);
    }

    @Test
    public void test00191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00191");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        int int12 = period10.getMillis();
        org.joda.time.DurationFieldType durationFieldType14 = period10.getFieldType(0);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Period period28 = new org.joda.time.Period(1645455029672L, (long) 3, periodType18, chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        boolean boolean30 = durationFieldType14.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = new org.joda.time.Period((java.lang.Object) chronology26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:13:02.439+10:22" + "'", str4, "2022-02-22T01:13:02.439+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test00192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00192");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime8.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:02.547+10:22" + "'", str2, "2022-02-22T01:13:02.547+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test00193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00193");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        boolean boolean19 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) interval18);
        boolean boolean21 = interval18.equals((java.lang.Object) "2022-02-22T01:12:44.218+10:22");
        boolean boolean23 = interval18.equals((java.lang.Object) "3");
        org.joda.time.Period period25 = org.joda.time.Period.hours(1);
        org.joda.time.Interval interval26 = interval18.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        int int27 = period25.getDays();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test00194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00194");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusMinutes((int) (byte) 10);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType10 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.Period period20 = new org.joda.time.Period(1645455029672L, (long) 3, periodType10, chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        org.joda.time.DurationField durationField22 = chronology18.days();
        org.joda.time.Period period23 = new org.joda.time.Period(1645455034855L, 1645455043876L, chronology18);
        boolean boolean24 = period0.equals((java.lang.Object) 1645455043876L);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00195");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        boolean boolean9 = dateTimeField7.isLeap(1645455027824L);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField7.set(1645455033234L, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00196");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime7 = property6.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean9 = dateTime7.isSupported(dateTimeFieldType8);
        java.lang.String str10 = dateTimeFieldType8.getName();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 8, periodType17, chronology24);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration15, chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.minuteOfHour();
        boolean boolean29 = dateTimeFieldType8.isSupported(chronology24);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 31, (long) 3, periodType2, chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = period30.withSeconds(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645455062864L + "'", long5 == 1645455062864L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yearOfCentury" + "'", str10, "yearOfCentury");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test00197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00197");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        boolean boolean27 = mutableInterval26.containsNow();
        boolean boolean28 = interval11.isBefore((org.joda.time.ReadableInterval) mutableInterval26);
        boolean boolean30 = mutableInterval26.contains(1645455037444L);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval26.setPeriodAfterStart((org.joda.time.ReadablePeriod) period37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455062983L + "'", long2 == 1645455062983L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T01:13:02.983+10:22" + "'", str33, "2022-02-22T01:13:02.983+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test00198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00198");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        boolean boolean11 = dateTime8.isAfterNow();
        org.joda.time.DateTime dateTime13 = dateTime8.withYearOfEra(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(1645455055418L, 37320000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455055418 * 37320000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:03.059+10:22" + "'", str2, "2022-02-22T01:13:03.059+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test00199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00199");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology6.years();
        long long14 = chronology6.add(1645455034244L, 1645455035827L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField15 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology6.hourOfDay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 166190958616944L + "'", long14 == 166190958616944L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test00200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00200");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime4.withDate(4381721, 1970, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:03.175+10:22" + "'", str2, "2022-02-22T01:13:03.175+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T01:13:03.175+10:22" + "'", str9, "2022-02-22T01:13:03.175+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T01:13:03.175+10:22" + "'", str16, "2022-02-22T01:13:03.175+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test00201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00201");
        org.joda.time.Period period2 = new org.joda.time.Period(1645492355225L, 1645455040261L);
    }

    @Test
    public void test00202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00202");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period6.minusMillis(4371255);
        int int9 = period6.getMinutes();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00203");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime35 = dateTime30.withFieldAdded(durationFieldType33, (int) (short) 0);
        int int36 = dateTime30.getDayOfWeek();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours(2);
        int int45 = dateTime44.getDayOfWeek();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = dateTime8.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:03.361+10:22" + "'", str2, "2022-02-22T01:13:03.361+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T01:13:03.361+10:22" + "'", str15, "2022-02-22T01:13:03.361+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T01:13:03.362+10:22" + "'", str28, "2022-02-22T01:13:03.362+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T01:13:03.363+10:22" + "'", str40, "2022-02-22T01:13:03.363+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test00204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00204");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        int int26 = yearMonthDay25.size();
        org.joda.time.DateTime dateTime27 = dateTime15.withFields((org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.DateTime dateTime29 = dateTime15.plusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime29.withYearOfCentury(53440972);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53440972 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T01:13:03.591+10:22" + "'", str9, "2022-02-22T01:13:03.591+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645455063591L + "'", long21 == 1645455063591L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test00205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00205");
        org.joda.time.Period period1 = org.joda.time.Period.hours(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = period1.getFieldType(53452649);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00206");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        int int7 = dateTime4.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime4.withDayOfMonth(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:03.944+10:22" + "'", str2, "2022-02-22T01:13:03.944+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test00207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00207");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period13 = period4.withHours((int) 'a');
        org.joda.time.Period period15 = period4.withDays(100);
        org.joda.time.Period period17 = period4.minusDays((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = period4.getValue(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
    }

    @Test
    public void test00208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00208");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-21T14:50:56.193Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00209");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str35 = dateTimeZone33.getNameKey(1645455028293L);
        int int37 = dateTimeZone33.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime38 = dateTime28.toDateTime(dateTimeZone33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime20);
        int int41 = dateTime20.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime20.withEra(53440972);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53440972 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:04.360+10:22" + "'", str2, "2022-02-22T01:13:04.360+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T01:13:04.361+10:22" + "'", str13, "2022-02-22T01:13:04.361+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T01:13:04.361+10:22" + "'", str23, "2022-02-22T01:13:04.361+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 37320000 + "'", int37 == 37320000);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test00210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00210");
        org.joda.time.Period period2 = new org.joda.time.Period(1645455049773L, 1645455048564L);
        org.joda.time.Period period4 = period2.minusMinutes(10);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = period4.getValue(73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 73");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test00211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00211");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        boolean boolean19 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) interval18);
        boolean boolean21 = interval18.equals((java.lang.Object) "2022-02-22T01:12:44.218+10:22");
        boolean boolean23 = interval18.equals((java.lang.Object) "3");
        org.joda.time.Period period25 = org.joda.time.Period.hours(1);
        org.joda.time.Interval interval26 = interval18.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.Period period31 = period27.plusWeeks((int) (short) -1);
        org.joda.time.Period period33 = period27.minusMillis(4);
        org.joda.time.Period period35 = period27.minusDays((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval36 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test00212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00212");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DurationField durationField9 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology6.getDateTimeMillis((int) (byte) 0, 30, 292278993, 53455286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test00213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00213");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology6.years();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period(1645455029672L, (long) 3, periodType14, chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField26 = chronology22.days();
        int int27 = durationField10.compareTo(durationField26);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test00214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00214");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        java.util.Locale locale8 = null;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        boolean boolean10 = dateTimeField7.isSupported();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField7.getMaximumTextLength(locale11);
        int int14 = dateTimeField7.getMaximumValue((long) 53440972);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField7.add(166190958616944L, 1645455064847L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645455064847");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
    }

    @Test
    public void test00215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00215");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime7.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime7.withMinuteOfHour((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:05.681+10:22" + "'", str2, "2022-02-22T01:13:05.681+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T01:13:05.010+10:22" + "'", str10, "2022-02-22T01:13:05.010+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455065681L + "'", long13 == 1645455065681L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test00216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00216");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        int int12 = period10.getMillis();
        org.joda.time.DurationFieldType durationFieldType14 = period10.getFieldType(0);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Period period28 = new org.joda.time.Period(1645455029672L, (long) 3, periodType18, chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        boolean boolean30 = durationFieldType14.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.dayOfYear();
        org.joda.time.DurationField durationField32 = chronology26.seconds();
        long long35 = durationField32.getMillis(1645455051308L, (long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = durationField32.getValue(166190958616944L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 166190958616");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:13:05.737+10:22" + "'", str4, "2022-02-22T01:13:05.737+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645455051308000L + "'", long35 == 1645455051308000L);
    }

    @Test
    public void test00217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00217");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str15 = dateTimeZone13.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology16 = chronology8.withZone(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval17 = new org.joda.time.Interval(1645455040170L, (long) '#', chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test00218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00218");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-21T14:50:31.879Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00219");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645455028646L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes(1645455037008L);
        boolean boolean17 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration16);
        long long18 = duration12.getMillis();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period(1645455029672L, (long) 3, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period35 = new org.joda.time.Period((java.lang.Object) long18, chronology30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100000L + "'", long18 == 100000L);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test00220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00220");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645455028646L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableInterval0.isBefore(readableInstant9);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval(1645455052139L, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00221");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getDays();
        int int18 = mutablePeriod16.size();
        org.joda.time.Chronology chronology20 = null;
        mutablePeriod16.setPeriod((long) 30, chronology20);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T01:13:06.108+10:22" + "'", str9, "2022-02-22T01:13:06.108+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test00222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00222");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        java.lang.String str26 = localTime25.toString();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalTime localTime52 = dateTime49.toLocalTime();
        java.lang.String str53 = localTime52.toString();
        int int54 = localTime25.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime60 = dateTime59.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay61 = dateTime60.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField63 = yearMonthDay61.getField(0);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType65 = periodType64.withYearsRemoved();
        org.joda.time.PeriodType periodType66 = periodType65.withSecondsRemoved();
        org.joda.time.PeriodType periodType67 = periodType65.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime25, (org.joda.time.ReadablePartial) yearMonthDay61, periodType67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:13:06.154+10:22" + "'", str4, "2022-02-22T01:13:06.154+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455066154L + "'", long18 == 1645455066154L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "01:13:16.154" + "'", str26, "01:13:16.154");
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T01:13:06.154+10:22" + "'", str31, "2022-02-22T01:13:06.154+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645455066154L + "'", long45 == 1645455066154L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "01:13:16.154" + "'", str53, "01:13:16.154");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645455066154L + "'", long57 == 1645455066154L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
    }

    @Test
    public void test00223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00223");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds((int) (byte) 10);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int13 = dateTime10.get(dateTimeFieldType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime10.withDate(53458, 2022, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455066180L + "'", long2 == 1645455066180L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645455066180L + "'", long6 == 1645455066180L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
    }

    @Test
    public void test00224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00224");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval3 = new org.joda.time.Interval(1645455063008L, 1645455062085L, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00225");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime7.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField10 = yearMonthDay8.getField(0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay8, (org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology26.weekyears();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1640957880000L, 1645455037008L, periodType19, chronology26);
        mutablePeriod31.addWeeks(0);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455066261L + "'", long4 == 1645455066261L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455066262L + "'", long13 == 1645455066262L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test00226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00226");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period2, readableInstant3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test00227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00227");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval4 = new org.joda.time.Interval(1651503052701L, (long) 40, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test00228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00228");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("yearOfEra", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00229");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime9.plusYears(3);
        org.joda.time.ReadableInstant readableInstant14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, readableInstant14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645455066563L + "'", long7 == 1645455066563L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4386563 + "'", int11 == 4386563);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test00230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00230");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval12 = new org.joda.time.Interval(1645455060842L, (long) (byte) 10, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test00231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00231");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1645455055762L, (long) 38089);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00232");
        org.joda.time.Period period2 = new org.joda.time.Period(1645455044839L, 1645455047567L);
    }

    @Test
    public void test00233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00233");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.LocalDateTime localDateTime13 = dateTime9.toLocalDateTime();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType17 = periodType16.withYearsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.Period period27 = new org.joda.time.Period(1645455029672L, (long) 3, periodType17, chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfMonth();
        int int31 = dateTimeField28.getDifference((long) (short) 1, 1645455030370L);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration35.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.withZoneRetainFields(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime55.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay57 = dateTime56.toYearMonthDay();
        int int58 = yearMonthDay57.size();
        org.joda.time.DateTime dateTime59 = dateTime47.withFields((org.joda.time.ReadablePartial) yearMonthDay57);
        java.util.Locale locale60 = null;
        java.lang.String str61 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay57, locale60);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = localDateTime13.compareTo((org.joda.time.ReadablePartial) yearMonthDay57);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:07.235Z" + "'", str2, "2022-02-21T14:51:07.235Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-19044) + "'", int31 == (-19044));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-21T14:51:07.235Z" + "'", str41, "2022-02-21T14:51:07.235Z");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645455067235L + "'", long53 == 1645455067235L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2" + "'", str61, "2");
    }

    @Test
    public void test00234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00234");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test00235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00235");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfDay();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        java.util.Locale locale16 = null;
        int int17 = dateTimeField15.getMaximumTextLength(locale16);
        boolean boolean18 = dateTimeField15.isSupported();
        java.util.Locale locale19 = null;
        int int20 = dateTimeField15.getMaximumTextLength(locale19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusSeconds((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period45 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalTime localTime46 = dateTime43.toLocalTime();
        int int47 = dateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) localTime46);
        int[] intArray49 = chronology6.get((org.joda.time.ReadablePartial) localTime46, 1645455035272L);
        java.lang.String str50 = localTime46.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime55.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay57 = dateTime56.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField59 = yearMonthDay57.getField(0);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        long long62 = dateTime61.getMillis();
        org.joda.time.DateTime dateTime64 = dateTime61.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime65 = dateTime64.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay66 = dateTime65.toYearMonthDay();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay57, (org.joda.time.ReadablePartial) yearMonthDay66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        java.lang.Object obj74 = mutableInterval69.clone();
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfEra();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField78 = chronology75.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType68.getField(chronology75);
        boolean boolean80 = yearMonthDay57.isSupported(dateTimeFieldType68);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = localTime46.get(dateTimeFieldType68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-21T14:51:07.405Z" + "'", str25, "2022-02-21T14:51:07.405Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455067405L + "'", long39 == 1645455067405L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292278993 + "'", int47 == 292278993);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[14, 50, 35, 272]");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "14:51:17.405" + "'", str50, "14:51:17.405");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645455067405L + "'", long53 == 1645455067405L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTimeField59);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645455067405L + "'", long62 == 1645455067405L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test00236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00236");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime47.getYearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T14:51:07.545Z" + "'", str12, "2022-02-21T14:51:07.545Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T14:51:07.545Z" + "'", str26, "2022-02-21T14:51:07.545Z");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
    }

    @Test
    public void test00237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00237");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStartMillis(1645455058141L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test00238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00238");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        java.lang.String str10 = durationField9.toString();
        long long11 = durationField9.getUnitMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DurationField[halfdays]" + "'", str10, "DurationField[halfdays]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 43200000L + "'", long11 == 43200000L);
    }

    @Test
    public void test00239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00239");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        org.joda.time.DateTime.Property property10 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:07.744Z" + "'", str2, "2022-02-21T14:51:07.744Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test00240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00240");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1L), 1L, periodType22, chronology23);
        java.lang.String str25 = periodType22.toString();
        java.lang.String str26 = periodType22.getName();
        org.joda.time.Period period27 = interval17.toPeriod(periodType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType29 = period27.getFieldType(73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P32M");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[Time]" + "'", str25, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Time" + "'", str26, "Time");
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test00241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00241");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        int int7 = dateTime3.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTimeISO();
        int int17 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime3.minusMinutes(8);
        org.joda.time.DateTime.Property property20 = dateTime3.dayOfYear();
        boolean boolean21 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime3);
        int int22 = dateTime3.getWeekyear();
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455067907L + "'", long4 == 1645455067907L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T14:51:07.907Z" + "'", str10, "2022-02-21T14:51:07.907Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
    }

    @Test
    public void test00242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00242");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property19.getAsShortText(locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = property19.addToCopy(1645455061840L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645455061840");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:07.987Z" + "'", str2, "2022-02-21T14:51:07.987Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:07.987Z" + "'", str9, "2022-02-21T14:51:07.987Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
    }

    @Test
    public void test00243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00243");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        int int15 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTimeISO();
        int int25 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime11.minusMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTimeISO();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateMidnight dateMidnight35 = dateTime33.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str48 = dateTimeZone46.getNameKey(1645455028293L);
        int int50 = dateTimeZone46.getOffset(1645455028293L);
        long long54 = dateTimeZone46.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime55 = dateTime40.withZoneRetainFields(dateTimeZone46);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration68 = duration57.minus(0L);
        org.joda.time.Duration duration70 = duration57.withMillis(1645455034114L);
        java.lang.String str71 = duration57.toString();
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        boolean boolean77 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj78 = mutableInterval73.clone();
        org.joda.time.Chronology chronology79 = mutableInterval73.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfEra();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.minuteOfDay();
        org.joda.time.DurationField durationField82 = chronology79.halfdays();
        org.joda.time.Period period83 = duration57.toPeriod(periodType72, chronology79);
        org.joda.time.DateTime dateTime84 = dateTime55.withChronology(chronology79);
        org.joda.time.DateTime dateTime86 = dateTime84.minusMinutes(53440972);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval9.setInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:08.098Z" + "'", str2, "2022-02-21T14:51:08.098Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645455068098L + "'", long12 == 1645455068098L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-21T14:51:08.098Z" + "'", str18, "2022-02-21T14:51:08.098Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645455068098L + "'", long30 == 1645455068098L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-21T14:51:08.098Z" + "'", str38, "2022-02-21T14:51:08.098Z");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 37320000 + "'", int50 == 37320000);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-37319997L) + "'", long54 == (-37319997L));
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration57);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-21T14:51:08.098Z" + "'", str60, "2022-02-21T14:51:08.098Z");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT100S" + "'", str71, "PT100S");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test00244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00244");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        mutablePeriod2.setDays(9);
        int int5 = mutablePeriod2.getWeeks();
        mutablePeriod2.setHours(2023);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setValue(728, 53454899);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 728");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00245");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = interval4.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 3, 1645455035827L, dateTimeZone15);
        boolean boolean17 = mutableInterval12.isAfter((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTimeISO();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period30 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration32 = duration21.minus(0L);
        org.joda.time.Duration duration34 = duration21.withMillis(1645455034114L);
        org.joda.time.Instant instant35 = instant18.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Instant instant37 = instant18.withMillis((long) 9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval38 = interval16.withStart((org.joda.time.ReadableInstant) instant18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455068259L + "'", long2 == 1645455068259L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-21T14:51:08.259Z" + "'", str24, "2022-02-21T14:51:08.259Z");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
    }

    @Test
    public void test00246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00246");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1L), 1L, periodType25, chronology26);
        java.lang.String str28 = periodType25.toString();
        java.lang.String str29 = periodType25.getName();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1645455029643L, periodType25);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, readableInstant21, periodType25);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusSeconds((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration45 = duration9.minus((org.joda.time.ReadableDuration) duration35);
        boolean boolean46 = property3.equals((java.lang.Object) duration9);
        long long47 = duration9.getMillis();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455068337L + "'", long2 == 1645455068337L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T14:51:08.337Z" + "'", str12, "2022-02-21T14:51:08.337Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[Time]" + "'", str28, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Time" + "'", str29, "Time");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455068339L + "'", long39 == 1645455068339L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100000L + "'", long47 == 100000L);
    }

    @Test
    public void test00247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00247");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField8 = yearMonthDay6.getField(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime21 = dateTime13.withZone(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField24 = yearMonthDay22.getField(0);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType27 = yearMonthDay22.getFieldType(38089);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 38089");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455068361L + "'", long2 == 1645455068361L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455068362L + "'", long11 == 1645455068362L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test00248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00248");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 0);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType48 = periodType47.withMinutesRemoved();
        org.joda.time.Period period49 = mutableInterval0.toPeriod(periodType48);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStartMillis(1645455058278L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P32M");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-21T14:51:08.443Z" + "'", str22, "2022-02-21T14:51:08.443Z");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-21T14:51:08.443Z" + "'", str35, "2022-02-21T14:51:08.443Z");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test00249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00249");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.halfdays();
        int int16 = durationField13.getValue(1645455033142L, 1645455051434L);
        boolean boolean17 = durationField13.isPrecise();
        java.lang.String str18 = durationField13.toString();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 38089 + "'", int16 == 38089);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DurationField[halfdays]" + "'", str18, "DurationField[halfdays]");
    }

    @Test
    public void test00250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00250");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType40 = periodType39.withYearsRemoved();
        org.joda.time.PeriodType periodType41 = periodType40.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        boolean boolean46 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        java.lang.Object obj47 = mutableInterval42.clone();
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfEra();
        org.joda.time.Period period50 = new org.joda.time.Period(1645455029672L, (long) 3, periodType40, chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.dayOfMonth();
        int int54 = dateTimeField51.getDifference((long) (short) 1, 1645455030370L);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval55.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration61 = duration58.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime70 = dateTime63.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.withZoneRetainFields(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        long long76 = dateTime75.getMillis();
        org.joda.time.DateTime dateTime78 = dateTime75.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = dateTime78.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay80 = dateTime79.toYearMonthDay();
        int int81 = yearMonthDay80.size();
        org.joda.time.DateTime dateTime82 = dateTime70.withFields((org.joda.time.ReadablePartial) yearMonthDay80);
        java.util.Locale locale83 = null;
        java.lang.String str84 = dateTimeField51.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay80, locale83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean86 = yearMonthDay80.isSupported(dateTimeFieldType85);
        org.joda.time.Period period87 = org.joda.time.Period.ZERO;
        org.joda.time.Period period89 = period87.minusSeconds((int) (short) 1);
        org.joda.time.Period period91 = period87.plusMinutes((int) (byte) 10);
        org.joda.time.Period period93 = period91.withHours((-1));
        int[] intArray94 = period93.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology35.validate((org.joda.time.ReadablePartial) yearMonthDay80, intArray94);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:08.688Z" + "'", str2, "2022-02-21T14:51:08.688Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:08.688Z" + "'", str9, "2022-02-21T14:51:08.688Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-21T14:51:08.688Z" + "'", str16, "2022-02-21T14:51:08.688Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-19044) + "'", int54 == (-19044));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration61);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-21T14:51:08.688Z" + "'", str64, "2022-02-21T14:51:08.688Z");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645455068688L + "'", long76 == 1645455068688L);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2" + "'", str84, "2");
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 0, 0, 0, -1, 10, 0, 0]");
    }

    @Test
    public void test00251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00251");
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 8, periodType13, chronology20);
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration11, chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(21, 37320000, (int) (short) 0, 8, 53469189, (int) (byte) 1, 0, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53469189 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test00252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00252");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.days();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = chronology11.getDateTimeMillis(1645455048164L, 31, 53429880, 4, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test00253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00253");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        long long10 = property9.remainder();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:09.952Z" + "'", str2, "2022-02-21T14:51:09.952Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 4459869952L + "'", long10 == 4459869952L);
    }

    @Test
    public void test00254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00254");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DurationField durationField14 = property12.getRangeDurationField();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        long long24 = dateTimeField22.roundHalfFloor((long) (byte) -1);
        long long26 = dateTimeField22.roundHalfEven(1645455035827L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField35 = yearMonthDay33.getField(0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay33, (org.joda.time.ReadablePartial) yearMonthDay42);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period44.minusSeconds((int) (short) 1);
        org.joda.time.Period period48 = period44.plusMinutes((int) (byte) 10);
        org.joda.time.Period period50 = period48.withHours((-1));
        int[] intArray51 = period50.getValues();
        int int52 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay33, intArray51);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = property12.compareTo((org.joda.time.ReadablePartial) yearMonthDay33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455069969L + "'", long2 == 1645455069969L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1640995200000L + "'", long26 == 1640995200000L);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645455069969L + "'", long29 == 1645455069969L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645455069969L + "'", long38 == 1645455069969L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, -1, 10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 292278993 + "'", int52 == 292278993);
    }

    @Test
    public void test00255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00255");
        java.lang.Object obj2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(obj2, periodType3, chronology4);
        int int6 = periodType3.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfSecond();
        boolean boolean17 = dateTimeFieldType7.isSupported(chronology14);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 1645455031834L, periodType3, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.hours();
        boolean boolean20 = durationField19.isPrecise();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test00256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00256");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1L), 1L, periodType25, chronology26);
        java.lang.String str28 = periodType25.toString();
        java.lang.String str29 = periodType25.getName();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1645455029643L, periodType25);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, readableInstant21, periodType25);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusSeconds((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration45 = duration9.minus((org.joda.time.ReadableDuration) duration35);
        boolean boolean46 = property3.equals((java.lang.Object) duration9);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone49);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        org.joda.time.Interval interval58 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period60 = period51.withHours((int) 'a');
        org.joda.time.Period period62 = period51.withDays(100);
        boolean boolean63 = property3.equals((java.lang.Object) 100);
        org.joda.time.DateTime dateTime65 = property3.setCopy(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = dateTime65.withMillisOfDay((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455070434L + "'", long2 == 1645455070434L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T14:51:10.434Z" + "'", str12, "2022-02-21T14:51:10.434Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[Time]" + "'", str28, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Time" + "'", str29, "Time");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455070434L + "'", long39 == 1645455070434L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test00257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00257");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property9.addToCopy(1645455064141L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645455064141");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:10.766Z" + "'", str2, "2022-02-21T14:51:10.766Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test00258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00258");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        mutableInterval0.setEndMillis(1645455043186L);
        boolean boolean9 = mutableInterval0.contains(1645455054899L);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test00259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00259");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Chronology chronology22 = chronology20.withUTC();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        int int26 = dateTimeZone23.getOffset((long) 7);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime4.toMutableDateTime(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:11.027Z" + "'", str2, "2022-02-21T14:51:11.027Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test00260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00260");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 0);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType48 = periodType47.withMinutesRemoved();
        org.joda.time.Period period49 = mutableInterval0.toPeriod(periodType48);
        org.joda.time.Duration duration50 = mutableInterval0.toDuration();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone53);
        org.joda.time.Interval interval55 = interval54.toInterval();
        boolean boolean56 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime dateTime61 = dateTime58.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology69);
        org.joda.time.DateTime dateTime71 = dateTime65.minus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.DateTime dateTime72 = dateTime63.minus((org.joda.time.ReadablePeriod) period70);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStart((org.joda.time.ReadableInstant) dateTime63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P32M");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-21T14:51:11.060Z" + "'", str22, "2022-02-21T14:51:11.060Z");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-21T14:51:11.060Z" + "'", str35, "2022-02-21T14:51:11.060Z");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645455071060L + "'", long59 == 1645455071060L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-21T14:51:11.060Z" + "'", str66, "2022-02-21T14:51:11.060Z");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test00261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00261");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        long long12 = duration1.getStandardMinutes();
        org.joda.time.Duration duration13 = duration1.toDuration();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod16.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration34 = duration23.minus(0L);
        org.joda.time.Duration duration36 = duration23.withMillis(1645455034114L);
        org.joda.time.Instant instant37 = instant20.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType49 = periodType48.withYearsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.Period period59 = new org.joda.time.Period(1645455029672L, (long) 3, periodType49, chronology57);
        org.joda.time.DurationField durationField60 = chronology57.eras();
        org.joda.time.DateTime dateTime61 = dateTime39.toDateTime(chronology57);
        mutablePeriod16.setPeriod((org.joda.time.ReadableInstant) instant20, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period63 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) instant20);
        java.lang.String str64 = period63.toString();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:51:11.081Z" + "'", str4, "2022-02-21T14:51:11.081Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T14:51:11.081Z" + "'", str26, "2022-02-21T14:51:11.081Z");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-21T14:51:11.081Z" + "'", str40, "2022-02-21T14:51:11.081Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT1M40S" + "'", str64, "PT1M40S");
    }

    @Test
    public void test00262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00262");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period13.plusMillis((int) ' ');
        org.joda.time.Period period19 = period13.minusHours((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType21 = period19.getFieldType(53458);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455071297L + "'", long2 == 1645455071297L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:11.297Z" + "'", str9, "2022-02-21T14:51:11.297Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test00263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00263");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period(0, 59, 4, 37320000, 0, 100, 0, 0, periodType12);
        org.joda.time.Period period15 = period13.withYears((int) (byte) 100);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1L), 1L, periodType21, chronology22);
        java.lang.String str24 = periodType21.toString();
        java.lang.String str25 = periodType21.getName();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1645455029643L, periodType21);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType21, chronology33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Seconds seconds46 = period45.toStandardSeconds();
        int int47 = period45.getMillis();
        org.joda.time.DurationFieldType durationFieldType49 = period45.getFieldType(0);
        int int50 = periodType21.indexOf(durationFieldType49);
        org.joda.time.Period period52 = period13.withFieldAdded(durationFieldType49, 38089);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period54 = period13.withMillis(32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PeriodType[Time]" + "'", str24, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Time" + "'", str25, "Time");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-21T14:51:11.524Z" + "'", str39, "2022-02-21T14:51:11.524Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test00264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00264");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        long long9 = dateTimeField7.roundHalfFloor((long) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField18 = yearMonthDay16.getField(0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay16, (org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        java.util.Locale locale36 = null;
        int int37 = dateTimeField35.getMaximumTextLength(locale36);
        boolean boolean38 = dateTimeField35.isSupported();
        java.util.Locale locale39 = null;
        int int40 = dateTimeField35.getMaximumTextLength(locale39);
        long long43 = dateTimeField35.add((long) (short) 0, (int) (byte) 10);
        int int44 = dateTimeField35.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime50.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField53 = yearMonthDay51.getField(0);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        long long56 = dateTime55.getMillis();
        org.joda.time.DateTime dateTime58 = dateTime55.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime59 = dateTime58.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay60 = dateTime59.toYearMonthDay();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay51, (org.joda.time.ReadablePartial) yearMonthDay60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        boolean boolean67 = mutableInterval63.overlaps((org.joda.time.ReadableInterval) mutableInterval65);
        java.lang.Object obj68 = mutableInterval63.clone();
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.yearOfEra();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType62.getField(chronology69);
        boolean boolean74 = yearMonthDay51.isSupported(dateTimeFieldType62);
        org.joda.time.Period period75 = org.joda.time.Period.ZERO;
        org.joda.time.Period period77 = period75.minusSeconds((int) (short) 1);
        org.joda.time.Period period79 = period75.plusMinutes((int) (byte) 10);
        org.joda.time.Period period81 = period79.withHours((-1));
        int[] intArray82 = period81.getValues();
        int int83 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay51, intArray82);
        int[] intArray85 = dateTimeField7.add((org.joda.time.ReadablePartial) yearMonthDay25, 0, intArray82, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = dateTimeField7.set(1651503047571L, "2022-02-22T01:13:03.010+10:22");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T01:13:03.010+10:22\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645455071595L + "'", long12 == 1645455071595L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645455071596L + "'", long21 == 1645455071596L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 315532800000L + "'", long43 == 315532800000L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645455071596L + "'", long47 == 1645455071596L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTimeField53);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645455071596L + "'", long56 == 1645455071596L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10, 1, 1, 0, -1, 10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 292278993 + "'", int83 == 292278993);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10, 1, 1, 0, -1, 10, 0, 0]");
    }

    @Test
    public void test00265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00265");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusHours(2);
        int int7 = dateTime6.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = dateTime6.get(dateTimeFieldType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:11.651Z" + "'", str2, "2022-02-21T14:51:11.651Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
    }

    @Test
    public void test00266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00266");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = chronology6.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = durationField8.getMillis(1645455054312L, 1645455068337L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 164545505431200");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test00267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00267");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645455062085L);
    }

    @Test
    public void test00268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00268");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear(4383442);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4383442 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455071841L + "'", long2 == 1645455071841L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test00269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00269");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = durationField8.getMillis(1640995200000L, 1645455066976L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1640995200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test00270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00270");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        mutableInterval26.setChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology35.getDateTimeMillis((int) '4', 30, 14, 728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:11.993Z" + "'", str2, "2022-02-21T14:51:11.993Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:11.993Z" + "'", str9, "2022-02-21T14:51:11.993Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-21T14:51:11.993Z" + "'", str16, "2022-02-21T14:51:11.993Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test00271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00271");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        java.lang.String str9 = durationField8.getName();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455072357L + "'", long2 == 1645455072357L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "years" + "'", str9, "years");
    }

    @Test
    public void test00272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00272");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod();
        mutablePeriod0.add((org.joda.time.ReadablePeriod) mutablePeriod3);
        mutablePeriod0.setHours(21);
    }

    @Test
    public void test00273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00273");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        mutableInterval5.setInterval((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean18 = mutableInterval12.containsNow();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = duration22.toPeriod();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = duration28.toPeriod();
        boolean boolean31 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration28);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime33 = mutableInterval12.getEnd();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(0);
        boolean boolean52 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime53 = dateTime38.withEarlierOffsetAtOverlap();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property55 = dateTime33.year();
        java.util.Locale locale56 = null;
        int int57 = property55.getMaximumTextLength(locale56);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T01:13:12.995+10:22" + "'", str36, "2022-02-22T01:13:12.995+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T01:13:12.995+10:22" + "'", str43, "2022-02-22T01:13:12.995+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
    }

    @Test
    public void test00274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00274");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean15 = dateTime4.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int17 = dateTime4.get(dateTimeFieldType16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 8, periodType25, chronology32);
        mutablePeriod21.setPeriod((org.joda.time.ReadableDuration) duration23, chronology32);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        java.util.GregorianCalendar gregorianCalendar47 = dateTime39.toGregorianCalendar();
        org.joda.time.Interval interval48 = duration23.toIntervalTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) int17, periodType18, chronology49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:13.128+10:22" + "'", str2, "2022-02-22T01:13:13.128+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T01:13:13.128+10:22" + "'", str40, "2022-02-22T01:13:13.128+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(gregorianCalendar47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test00275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00275");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.Period period29 = new org.joda.time.Period(1645455029672L, (long) 3, periodType19, chronology27);
        mutablePeriod14.add(1645455030370L, chronology27);
        org.joda.time.Period period31 = new org.joda.time.Period(1645455035827L, chronology27);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration35.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime47);
        mutablePeriod48.addMillis((int) '4');
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.seconds();
        int int55 = period53.get(durationFieldType54);
        java.lang.String str56 = durationFieldType54.getName();
        mutablePeriod48.set(durationFieldType54, 26);
        int[] intArray61 = chronology27.get((org.joda.time.ReadablePeriod) mutablePeriod48, 1645455064141L, 1645455040347L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((java.lang.Object) instant11, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:13.149+10:22" + "'", str2, "2022-02-22T01:13:13.149+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T01:13:13.149+10:22" + "'", str41, "2022-02-22T01:13:13.149+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "seconds" + "'", str56, "seconds");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, -23, -794]");
    }

    @Test
    public void test00276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00276");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645455034114L);
        java.lang.String str15 = duration1.toString();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.minuteOfDay();
        org.joda.time.DurationField durationField26 = chronology23.halfdays();
        org.joda.time.Period period27 = duration1.toPeriod(periodType16, chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.monthOfYear();
        org.joda.time.DurationField durationField29 = chronology23.centuries();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology23.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = durationField31.getMillis(1645455040261L, 1645455048164L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 164545504026100");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:13:13.400+10:22" + "'", str4, "2022-02-22T01:13:13.400+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT100S" + "'", str15, "PT100S");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test00277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00277");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime22.withMonthOfYear((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:13:13.451+10:22" + "'", str4, "2022-02-22T01:13:13.451+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455073451L + "'", long18 == 1645455073451L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test00278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00278");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        boolean boolean39 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.Period period48 = duration27.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime44.withWeekOfWeekyear((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:13.473+10:22" + "'", str2, "2022-02-22T01:13:13.473+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T01:13:13.473+10:22" + "'", str15, "2022-02-22T01:13:13.473+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T01:13:13.473+10:22" + "'", str30, "2022-02-22T01:13:13.473+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T01:13:13.473+10:22" + "'", str42, "2022-02-22T01:13:13.473+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
    }

    @Test
    public void test00279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00279");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType3 = period2.getPeriodType();
        int int4 = period2.getDays();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00280");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        java.lang.String str5 = property3.toString();
        boolean boolean6 = property3.isLeap();
        java.lang.String str7 = property3.getAsText();
        java.lang.String str8 = property3.getName();
        java.lang.String str9 = property3.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455074249L + "'", long2 == 1645455074249L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[yearOfEra]" + "'", str5, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yearOfEra" + "'", str8, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[yearOfEra]" + "'", str9, "Property[yearOfEra]");
    }

    @Test
    public void test00281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00281");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        mutableInterval26.setChronology(chronology35);
        java.lang.Object obj38 = mutableInterval26.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval26.setEndMillis(1645455052959L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:14.302+10:22" + "'", str2, "2022-02-22T01:13:14.302+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T01:13:14.302+10:22" + "'", str9, "2022-02-22T01:13:14.302+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T01:13:14.302+10:22" + "'", str16, "2022-02-22T01:13:14.302+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "2022-02-22T01:13:14.010+10:22/2022-02-22T01:13:14.302+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "2022-02-22T01:13:14.010+10:22/2022-02-22T01:13:14.302+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "2022-02-22T01:13:14.010+10:22/2022-02-22T01:13:14.302+10:22");
    }

    @Test
    public void test00282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00282");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Period period26 = interval11.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days27 = period26.toStandardDays();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Days as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455074450L + "'", long2 == 1645455074450L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test00283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00283");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645455029643L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod23.copy();
        org.joda.time.Period period25 = mutablePeriod24.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod24.setPeriod(31, (int) 'a', (int) (short) 1, 4381721, 53452649, (-1), (int) (byte) 10, 53455286);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:13:14.580+10:22" + "'", str4, "2022-02-22T01:13:14.580+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Time]" + "'", str20, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Time" + "'", str21, "Time");
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test00284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00284");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        boolean boolean22 = dateTime4.isAfterNow();
        org.joda.time.DateTime.Property property23 = dateTime4.era();
        int int24 = property23.getLeapAmount();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:14.637+10:22" + "'", str2, "2022-02-22T01:13:14.637+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T01:13:14.637+10:22" + "'", str9, "2022-02-22T01:13:14.637+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test00285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00285");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period30 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration32 = duration21.minus(0L);
        org.joda.time.Duration duration34 = duration21.withMillis(1645455034114L);
        java.lang.String str35 = duration21.toString();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfDay();
        org.joda.time.DurationField durationField46 = chronology43.halfdays();
        org.joda.time.Period period47 = duration21.toPeriod(periodType36, chronology43);
        org.joda.time.DateTime dateTime48 = dateTime19.withChronology(chronology43);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes(53440972);
        org.joda.time.DurationFieldType durationFieldType51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTime50.withFieldAdded(durationFieldType51, 53455286);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:14.828+10:22" + "'", str2, "2022-02-22T01:13:14.828+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37320000 + "'", int14 == 37320000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-37319997L) + "'", long18 == (-37319997L));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T01:13:14.828+10:22" + "'", str24, "2022-02-22T01:13:14.828+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT100S" + "'", str35, "PT100S");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test00286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00286");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(4617987087028646L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 4617987087028646 * 60000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00287");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((int) (short) 10, 53429880, (int) (short) 0, 1);
        int int42 = mutablePeriod41.getSeconds();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period53 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime dateTime63 = dateTime60.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime65 = dateTime63.plusSeconds((int) (byte) 10);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Period period67 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime65);
        mutablePeriod41.setPeriod((org.joda.time.ReadableDuration) duration44);
        mutableInterval26.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval26.copy();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval71.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        long long78 = dateTime77.getMillis();
        org.joda.time.DateTime dateTime80 = dateTime77.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime82 = dateTime80.plusSeconds((int) (byte) 10);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration74, (org.joda.time.ReadableInstant) dateTime82);
        long long84 = dateTime82.getMillis();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(dateTimeZone85);
        java.lang.String str87 = dateTime86.toString();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Period period91 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology90);
        org.joda.time.DateTime dateTime92 = dateTime86.minus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.DateTime dateTime93 = dateTime86.toDateTimeISO();
        org.joda.time.DateTime dateTime95 = dateTime93.minusMinutes(0);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval26.setInterval((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:15.262+10:22" + "'", str2, "2022-02-22T01:13:15.262+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T01:13:15.262+10:22" + "'", str9, "2022-02-22T01:13:15.262+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T01:13:15.262+10:22" + "'", str16, "2022-02-22T01:13:15.262+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T01:13:15.262+10:22" + "'", str47, "2022-02-22T01:13:15.262+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(duration57);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645455075262L + "'", long61 == 1645455075262L);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(duration74);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645455075262L + "'", long78 == 1645455075262L);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1651503085262L + "'", long84 == 1651503085262L);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022-02-22T01:13:15.262+10:22" + "'", str87, "2022-02-22T01:13:15.262+10:22");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test00288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00288");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime7.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTime.Property property19 = dateTime7.yearOfCentury();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration26 = duration23.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime44.toYearMonthDay();
        int int46 = yearMonthDay45.size();
        org.joda.time.DateTime dateTime47 = dateTime35.withFields((org.joda.time.ReadablePartial) yearMonthDay45);
        org.joda.time.Chronology chronology48 = yearMonthDay45.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.days();
        org.joda.time.DurationField durationField50 = chronology48.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((java.lang.Object) property19, chronology48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:15.292+10:22" + "'", str2, "2022-02-22T01:13:15.292+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T01:13:15.010+10:22" + "'", str10, "2022-02-22T01:13:15.010+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455075292L + "'", long13 == 1645455075292L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T01:13:15.293+10:22" + "'", str29, "2022-02-22T01:13:15.293+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645455075293L + "'", long41 == 1645455075293L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test00289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00289");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        mutableInterval5.setInterval((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean18 = mutableInterval12.containsNow();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = duration22.toPeriod();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = duration28.toPeriod();
        boolean boolean31 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration28);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime33 = mutableInterval12.getEnd();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.DateTime dateTime38 = dateTime35.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTime(chronology39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(0);
        boolean boolean52 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime53 = dateTime38.withEarlierOffsetAtOverlap();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property55 = dateTime33.year();
        org.joda.time.DateTimeField dateTimeField56 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int57 = dateTime33.get(dateTimeField56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeField must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T01:13:15.341+10:22" + "'", str36, "2022-02-22T01:13:15.341+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T01:13:15.341+10:22" + "'", str43, "2022-02-22T01:13:15.341+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test00290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00290");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime4.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = dateTime18.isAfter(readableInstant20);
        boolean boolean22 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime18.toString(dateTimeFormatter23);
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime18.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        boolean boolean35 = dateTimeField33.isLeap(1645455027824L);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = dateTimeField33.getType();
        boolean boolean37 = yearMonthDay25.isSupported(dateTimeFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType39 = yearMonthDay25.getFieldType(73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 73");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:15.503+10:22" + "'", str2, "2022-02-22T01:13:15.503+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645455075503L + "'", long15 == 1645455075503L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-05-03T01:13:15.503+10:22" + "'", str24, "2022-05-03T01:13:15.503+10:22");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test00291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00291");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.yearOfCentury();
        int int22 = dateTime11.get(dateTimeField21);
        long long23 = dateTime11.getMillis();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime11.withYearOfCentury(4386659);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4386659 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T01:13:15.935+10:22" + "'", str7, "2022-02-22T01:13:15.935+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645455075010L + "'", long23 == 1645455075010L);
    }

    @Test
    public void test00292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00292");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.plus(readableDuration2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test00293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00293");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        java.lang.Object obj3 = mutablePeriod0.clone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone6);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.Period period12 = period8.plusWeeks((int) (short) -1);
        org.joda.time.Period period14 = period8.minusMillis(4);
        org.joda.time.Interval interval15 = interval7.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period8);
        mutablePeriod0.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Interval interval18 = interval15.withEndMillis(1645455034431L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval20 = interval15.withStartMillis(1645455033234L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "P32M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval18);
    }

    @Test
    public void test00294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00294");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = dateTimeField14.getRangeDurationField();
        long long17 = dateTimeField14.roundHalfCeiling(1645455032491L);
        int int18 = dateTimeField14.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime31 = dateTime23.withZone(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField34 = yearMonthDay32.getField(0);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone41);
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period43.minusSeconds((int) (short) 1);
        org.joda.time.Period period47 = period43.plusWeeks((int) (short) -1);
        org.joda.time.Period period49 = period43.minusMillis(4);
        org.joda.time.Interval interval50 = interval42.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        mutablePeriod36.setPeriod(1645455033926L, 1645455028941L, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod();
        mutablePeriod54.addWeeks((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod();
        mutablePeriod54.add((org.joda.time.ReadablePeriod) mutablePeriod57);
        int[] intArray60 = chronology51.get((org.joda.time.ReadablePeriod) mutablePeriod57, 7199576L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray62 = dateTimeField14.set((org.joda.time.ReadablePartial) yearMonthDay32, 53452649, intArray60, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645450680000L + "'", long17 == 1645450680000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645455076344L + "'", long21 == 1645455076344L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 1, 59, 59, 576]");
    }

    @Test
    public void test00295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00295");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        int int3 = mutablePeriod2.getYears();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology12.years();
        long long20 = chronology12.add(1645455034244L, 1645455035827L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField21 = chronology12.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType5.getField(chronology12);
        mutablePeriod2.setPeriod(0L, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod2.setValue(53429880, 292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53429880");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 166190958616944L + "'", long20 == 166190958616944L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test00296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00296");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645455028646L);
        org.joda.time.Chronology chronology8 = mutableInterval0.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStartMillis(1645455046184L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test00297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00297");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = property12.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property12.getFieldType();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455077041L + "'", long2 == 1645455077041L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test00298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00298");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-21T14:50:34.976Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00299");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("2022-02-22T01:12:44.531+10:22", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00300");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        long long21 = dateTimeZone10.convertUTCToLocal(1645455040347L);
        boolean boolean22 = dateTimeZone10.isFixed();
        java.lang.String str24 = dateTimeZone10.getShortName(1645455058549L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:17.255+10:22" + "'", str2, "2022-02-22T01:13:17.255+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37320000 + "'", int14 == 37320000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-37319997L) + "'", long18 == (-37319997L));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645492360347L + "'", long21 == 1645492360347L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+10:22" + "'", str24, "+10:22");
    }

    @Test
    public void test00301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00301");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Period period26 = interval11.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours27 = period26.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Hours as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455077458L + "'", long2 == 1645455077458L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test00302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00302");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType6 = periodType5.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.Period period16 = new org.joda.time.Period(1645455029672L, (long) 3, periodType6, chronology14);
        mutablePeriod1.add(1645455030370L, chronology14);
        org.joda.time.Period period18 = new org.joda.time.Period(1645455035827L, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.halfdays();
        long long22 = durationField19.add((long) 26, 53429880);
        long long24 = durationField19.getValueAsLong((long) 10);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2308170816000026L + "'", long22 == 2308170816000026L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test00303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00303");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone16);
        org.joda.time.Interval interval18 = interval17.toInterval();
        boolean boolean19 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) interval18);
        boolean boolean21 = interval18.equals((java.lang.Object) "2022-02-22T01:12:44.218+10:22");
        boolean boolean23 = interval18.equals((java.lang.Object) "3");
        org.joda.time.Period period25 = org.joda.time.Period.hours(1);
        org.joda.time.Interval interval26 = interval18.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = duration30.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime42 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.withZoneRetainFields(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.minusMinutes(53452649);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval49 = interval26.withEnd((org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T01:13:17.596+10:22" + "'", str36, "2022-02-22T01:13:17.596+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645455077596L + "'", long46 == 1645455077596L);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test00304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00304");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        int int3 = periodType2.size();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime(chronology9);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime8.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Interval interval27 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration25);
        boolean boolean28 = dateTime8.equals((java.lang.Object) interval21);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        boolean boolean39 = mutableInterval29.contains((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime38.getMillisOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.plusYears(3);
        boolean boolean43 = interval21.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology44 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(obj0, periodType2, chronology44);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod45.add(1645455052142L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645455052142");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T01:13:18.135+10:22" + "'", str6, "2022-02-22T01:13:18.135+10:22");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455078135L + "'", long19 == 1645455078135L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645455078135L + "'", long36 == 1645455078135L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4398135 + "'", int40 == 4398135);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test00305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00305");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime3.era();
        int int14 = property13.getLeapAmount();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T01:13:18.167+10:22" + "'", str4, "2022-02-22T01:13:18.167+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test00306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00306");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval22 = interval15.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = interval15.toMutableInterval();
        org.joda.time.Interval interval24 = interval10.gap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.MutableInterval mutableInterval25 = interval15.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        int int31 = dateTime27.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        int int41 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime27.minusMinutes(8);
        boolean boolean44 = interval15.contains((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        mutableInterval45.setEndMillis(1645455043186L);
        boolean boolean53 = interval15.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval55 = interval15.withEndMillis((long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455078598L + "'", long2 == 1645455078598L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455078599L + "'", long13 == 1645455078599L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(mutableInterval25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645455078599L + "'", long28 == 1645455078599L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-21T14:51:18.599Z" + "'", str34, "2022-02-21T14:51:18.599Z");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test00307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00307");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = new org.joda.time.Interval((java.lang.Object) "2022-02-22T01:12:50.926+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T01:12:50.926+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00308");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone6);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.Period period12 = period8.plusWeeks((int) (short) -1);
        org.joda.time.Period period14 = period8.minusMillis(4);
        org.joda.time.Interval interval15 = interval7.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        mutablePeriod1.setPeriod(1645455033926L, 1645455028941L, chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod();
        mutablePeriod19.addWeeks((int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod();
        mutablePeriod19.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        int[] intArray25 = chronology16.get((org.joda.time.ReadablePeriod) mutablePeriod22, 7199576L);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval27 = new org.joda.time.Interval((java.lang.Object) 457070L, chronology16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 1, 59, 59, 576]");
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test00309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00309");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        org.joda.time.DateTime dateTime45 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) (byte) 0);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType48 = periodType47.withMinutesRemoved();
        org.joda.time.Period period49 = mutableInterval0.toPeriod(periodType48);
        org.joda.time.Duration duration50 = mutableInterval0.toDuration();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours(4365808);
        org.joda.time.DateTime dateTime59 = dateTime55.plusMillis(2023);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone62);
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.Period period66 = period64.minusSeconds((int) (short) 1);
        org.joda.time.Period period68 = period64.plusWeeks((int) (short) -1);
        org.joda.time.Period period70 = period64.minusMillis(4);
        org.joda.time.Interval interval71 = interval63.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone74);
        org.joda.time.Period period76 = org.joda.time.Period.ZERO;
        org.joda.time.Period period78 = period76.minusSeconds((int) (short) 1);
        org.joda.time.Period period80 = period76.plusWeeks((int) (short) -1);
        org.joda.time.Period period82 = period76.minusMillis(4);
        org.joda.time.Interval interval83 = interval75.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Interval interval84 = interval63.gap((org.joda.time.ReadableInterval) interval83);
        org.joda.time.DateTime dateTime85 = interval63.getEnd();
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str90 = dateTimeZone88.getShortName(52L);
        boolean boolean91 = dateTimeZone88.isFixed();
        org.joda.time.DateTime dateTime92 = dateTime85.withZone(dateTimeZone88);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P32M");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-21T14:51:19.301Z" + "'", str22, "2022-02-21T14:51:19.301Z");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-21T14:51:19.301Z" + "'", str35, "2022-02-21T14:51:19.301Z");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration50);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645455079301L + "'", long53 == 1645455079301L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+10:22" + "'", str90, "+10:22");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test00310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00310");
        org.joda.time.Period period4 = new org.joda.time.Period(22, 4, (-19044), (int) (byte) 100);
    }

    @Test
    public void test00311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00311");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis(100);
        long long8 = dateTime7.getMillis();
        int int9 = dateTime7.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.millisOfSecond();
        boolean boolean20 = dateTimeFieldType10.isSupported(chronology17);
        int int21 = dateTime7.get(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone24);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.Period period30 = period26.plusWeeks((int) (short) -1);
        org.joda.time.Period period32 = period26.minusMillis(4);
        org.joda.time.Interval interval33 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        java.lang.String str35 = chronology34.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.halfdayOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology34);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone44);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.Period period52 = period46.minusMillis(4);
        org.joda.time.Interval interval53 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        mutablePeriod39.setPeriod(1645455033926L, 1645455028941L, chronology54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455079754L + "'", long2 == 1645455079754L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1651503079854L + "'", long8 == 1651503079854L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test00312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00312");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField15.add(0L, 1645455055418L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455055418 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test00313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00313");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone5);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.Period period11 = period7.plusWeeks((int) (short) -1);
        org.joda.time.Period period13 = period7.minusMillis(4);
        org.joda.time.Interval interval14 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        mutablePeriod0.setPeriod(1645455033926L, 1645455028941L, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        java.lang.String str18 = dateTimeField17.getName();
        boolean boolean19 = dateTimeField17.isLenient();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weekyearOfCentury" + "'", str18, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00314");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.DateTime.Property property13 = dateTime3.era();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property13.setCopy("2022-02-21T14:51:10.394Z", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:51:10.394Z\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:51:20.146Z" + "'", str4, "2022-02-21T14:51:20.146Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test00315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00315");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        java.lang.String str1 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "eras" + "'", str1, "eras");
    }

    @Test
    public void test00316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00316");
        java.lang.Object obj10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(obj10, periodType11, chronology12);
        int int14 = periodType11.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.millisOfSecond();
        boolean boolean25 = dateTimeFieldType15.isSupported(chronology22);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 1645455031834L, periodType11, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) '#', 9, 4392493, 52991506, 4383442, 40, 4383442, 53455286, periodType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test00317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00317");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour(4381721);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4381721 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455080459L + "'", long2 == 1645455080459L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test00318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00318");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getSeconds();
        int int18 = mutablePeriod16.getSeconds();
        mutablePeriod16.setValue((int) (short) 0, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime31 = dateTime26.withFieldAdded(durationFieldType29, (int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 8, periodType38, chronology45);
        mutablePeriod34.setPeriod((org.joda.time.ReadableDuration) duration36, chronology45);
        org.joda.time.DurationField durationField49 = durationFieldType29.getField(chronology45);
        mutablePeriod16.add(durationFieldType29, 9);
        mutablePeriod16.setPeriod(0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:20.515Z" + "'", str9, "2022-02-21T14:51:20.515Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-21T14:51:20.515Z" + "'", str24, "2022-02-21T14:51:20.515Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test00319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00319");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property19.getAsShortText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property19.getMaximumTextLength(locale24);
        java.util.Locale locale26 = null;
        int int27 = property19.getMaximumShortTextLength(locale26);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:20.544Z" + "'", str2, "2022-02-21T14:51:20.544Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:20.544Z" + "'", str9, "2022-02-21T14:51:20.544Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
    }

    @Test
    public void test00320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00320");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean6 = dateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateTime4.toString("2022-02-21T14:50:40.244Z", locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455080585L + "'", long2 == 1645455080585L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test00321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00321");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTime6.toString("2022-02-21T14:51:07.744Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455080795L + "'", long2 == 1645455080795L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test00322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00322");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getDays();
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod16.copy();
        mutablePeriod18.addHours(52);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:20.928Z" + "'", str9, "2022-02-21T14:51:20.928Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod18);
    }

    @Test
    public void test00323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00323");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology7);
        int int13 = dateTimeField11.getLeapAmount((long) 3);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str25 = dateTimeZone23.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime26 = dateTime18.withZone(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField29 = yearMonthDay27.getField(0);
        boolean boolean30 = dateTimeField29.isLenient();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str42 = dateTimeZone40.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime43 = dateTime35.withZone(dateTimeZone40);
        org.joda.time.YearMonthDay yearMonthDay44 = dateTime43.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField46 = yearMonthDay44.getField(0);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) yearMonthDay44, (int) (short) 10, locale48);
        java.util.Locale locale50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay44, locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645455080970L + "'", long16 == 1645455080970L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645455080970L + "'", long33 == 1645455080970L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "10" + "'", str49, "10");
    }

    @Test
    public void test00324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00324");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-22T01:13:15.651+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T01:13:15.651+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00325");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime18.withEra(32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:21.127Z" + "'", str9, "2022-02-21T14:51:21.127Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test00326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00326");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DurationField durationField9 = chronology6.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant10 = new org.joda.time.Instant((java.lang.Object) durationField9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test00327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00327");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) 1645455035891L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00328");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        int int26 = yearMonthDay25.size();
        org.joda.time.DateTime dateTime27 = dateTime15.withFields((org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.Chronology chronology28 = yearMonthDay25.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        long long32 = durationField29.getValueAsLong((long) 21, 1645455045735L);
        long long33 = durationField29.getUnitMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:21.587Z" + "'", str9, "2022-02-21T14:51:21.587Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645455081587L + "'", long21 == 1645455081587L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2629746000L + "'", long33 == 2629746000L);
    }

    @Test
    public void test00329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00329");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        long long2 = mutableInterval0.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime.Property property6 = dateTime4.yearOfEra();
        org.joda.time.Interval interval7 = property6.toInterval();
        java.util.Locale locale8 = null;
        int int9 = property6.getMaximumTextLength(locale8);
        java.lang.String str10 = property6.getName();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1L), 1L, periodType28, chronology29);
        java.lang.String str31 = periodType28.toString();
        java.lang.String str32 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645455029643L, periodType28);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant24, periodType28);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusSeconds((int) (byte) 10);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration48 = duration12.minus((org.joda.time.ReadableDuration) duration38);
        boolean boolean49 = property6.equals((java.lang.Object) duration12);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = duration53.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime65.withZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime73 = dateTime70.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime74 = dateTime73.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay75 = dateTime74.toYearMonthDay();
        int int76 = yearMonthDay75.size();
        org.joda.time.DateTime dateTime77 = dateTime65.withFields((org.joda.time.ReadablePartial) yearMonthDay75);
        org.joda.time.DateTime.Property property78 = dateTime77.dayOfMonth();
        long long79 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime81 = dateTime77.minusMillis(4383442);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone82);
        java.lang.String str84 = dateTime83.toString();
        org.joda.time.DateTime dateTime86 = dateTime83.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime88 = dateTime86.plusHours(2);
        int int89 = dateTime88.getDayOfWeek();
        org.joda.time.DateTime dateTime91 = dateTime88.minusWeeks(0);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645455081630L + "'", long5 == 1645455081630L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yearOfEra" + "'", str10, "yearOfEra");
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21T14:51:21.630Z" + "'", str15, "2022-02-21T14:51:21.630Z");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PeriodType[Time]" + "'", str31, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Time" + "'", str32, "Time");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645455081630L + "'", long42 == 1645455081630L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-21T14:51:21.630Z" + "'", str59, "2022-02-21T14:51:21.630Z");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645455081630L + "'", long71 == 1645455081630L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2022-02-21T14:51:21.630Z" + "'", str84, "2022-02-21T14:51:21.630Z");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test00330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00330");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        int int5 = mutablePeriod4.getWeeks();
        int int6 = mutablePeriod4.getDays();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfEra();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Interval interval17 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = interval22.withDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval29 = interval22.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = interval22.toMutableInterval();
        org.joda.time.Interval interval31 = interval17.gap((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutableInterval mutableInterval32 = interval22.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        int int38 = dateTime34.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.toDateTimeISO();
        int int48 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime34.minusMinutes(8);
        boolean boolean51 = interval22.contains((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        mutableInterval52.setEndMillis(1645455043186L);
        boolean boolean60 = interval22.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        boolean boolean61 = mutablePeriod4.equals((java.lang.Object) boolean60);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645455081949L + "'", long9 == 1645455081949L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(interval17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645455081950L + "'", long20 == 1645455081950L);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertNull(interval31);
        org.junit.Assert.assertNotNull(mutableInterval32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645455081950L + "'", long35 == 1645455081950L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-21T14:51:21.950Z" + "'", str41, "2022-02-21T14:51:21.950Z");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test00331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00331");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(53440972, 14, 31, 40, 20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00332");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("2022-02-22T01:13:00.130+10:22", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00333");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        int int3 = periodType2.size();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime(chronology9);
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime8.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime.Property property20 = dateTime18.yearOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Interval interval27 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration25);
        boolean boolean28 = dateTime8.equals((java.lang.Object) interval21);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        boolean boolean39 = mutableInterval29.contains((org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime38.getMillisOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.plusYears(3);
        boolean boolean43 = interval21.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology44 = interval21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(obj0, periodType2, chronology44);
        int int46 = mutablePeriod45.getSeconds();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21T14:51:22.054Z" + "'", str6, "2022-02-21T14:51:22.054Z");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455082054L + "'", long19 == 1645455082054L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645455082054L + "'", long36 == 1645455082054L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53482054 + "'", int40 == 53482054);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test00334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00334");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        mutableInterval7.setDurationAfterStart(1645455033234L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Seconds seconds28 = period27.toStandardSeconds();
        int int29 = period27.getMillis();
        org.joda.time.DurationFieldType durationFieldType31 = period27.getFieldType(0);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfMonth();
        boolean boolean47 = durationFieldType31.isSupported(chronology43);
        org.joda.time.Period period48 = new org.joda.time.Period((long) (short) 100, 1645455046455L, chronology43);
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) period48);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval7.setInterval(1645492358369L, 1645455054312L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T14:51:22.419Z" + "'", str21, "2022-02-21T14:51:22.419Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test00335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00335");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        java.lang.String str5 = property3.getAsText();
        org.joda.time.DateTime dateTime7 = property3.setCopy(4371255);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = property3.setCopy("2022-02-21T14:50:39.754Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:39.754Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455082568L + "'", long2 == 1645455082568L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test00336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00336");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.halfdays();
        int int16 = durationField13.getValue(1645455033142L, 1645455051434L);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = durationField13.getMillis(1645455052051L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455052051 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 38089 + "'", int16 == 38089);
    }

    @Test
    public void test00337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00337");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfDay();
        long long9 = dateTimeField7.roundHalfCeiling((long) 4392493);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4392493L + "'", long9 == 4392493L);
    }

    @Test
    public void test00338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00338");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        java.lang.String str7 = periodType4.toString();
        java.lang.String str8 = periodType4.getName();
        org.joda.time.PeriodType periodType9 = periodType4.withDaysRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfDay();
        org.joda.time.DurationField durationField24 = chronology22.years();
        mutableInterval10.setChronology(chronology22);
        org.joda.time.Period period26 = new org.joda.time.Period((long) 53429880, 1645455045950L, periodType9, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = chronology22.getDateTimeMillis((long) 4, 40, 8, (int) (byte) 0, 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PeriodType[Time]" + "'", str7, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Time" + "'", str8, "Time");
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test00339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00339");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        boolean boolean9 = dateTimeField7.isLeap(1645455027824L);
        long long11 = dateTimeField7.roundHalfEven((long) 'a');
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField7.set(1645455069349L, "2022-02-21T14:50:53.755Z", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:53.755Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test00340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00340");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant11 = new org.joda.time.Instant((java.lang.Object) chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test00341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00341");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period7 = org.joda.time.Period.days(53452649);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period7);
        int int9 = period7.getMonths();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00342");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths(31);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        mutableInterval12.setEndMillis(10L);
        java.lang.String str16 = mutableInterval12.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration29 = duration18.minus(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1L), 1L, periodType34, chronology35);
        java.lang.String str37 = periodType34.toString();
        java.lang.String str38 = periodType34.getName();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645455029643L, periodType34);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant30, periodType34);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone44);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.Period period52 = period46.minusMillis(4);
        org.joda.time.Interval interval53 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        java.lang.String str55 = chronology54.toString();
        mutablePeriod40.add(1645455042903L, chronology54);
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutableInterval12.setDurationAfterStart(1L);
        org.joda.time.Period period60 = mutableInterval12.toPeriod();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadablePeriod) period60);
        org.joda.time.Weeks weeks62 = period60.toStandardWeeks();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:23.438Z" + "'", str2, "2022-02-21T14:51:23.438Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z" + "'", str16, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T14:51:23.438Z" + "'", str21, "2022-02-21T14:51:23.438Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[Time]" + "'", str37, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Time" + "'", str38, "Time");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(weeks62);
    }

    @Test
    public void test00343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00343");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField8 = yearMonthDay6.getField(0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime21 = dateTime13.withZone(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField24 = yearMonthDay22.getField(0);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField27 = yearMonthDay22.getField(4365808);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 4365808");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455083708L + "'", long2 == 1645455083708L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455083708L + "'", long11 == 1645455083708L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test00344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00344");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant1 = instant0.toInstant();
        org.joda.time.DateTime dateTime2 = instant0.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant5 = instant0.withDurationAdded(1645455055249L, 53455286);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455055249 * 53455286");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test00345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00345");
        org.joda.time.Period period1 = org.joda.time.Period.months(29);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00346");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField14 = chronology12.years();
        mutableInterval0.setChronology(chronology12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(0);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration39 = duration28.minus(0L);
        org.joda.time.DateTime dateTime41 = dateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime51 = dateTime46.withFieldAdded(durationFieldType49, (int) (short) 0);
        int int52 = dateTime46.getDayOfWeek();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime55 = dateTime46.minusWeeks(20);
        boolean boolean56 = mutableInterval0.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone59);
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period61.minusSeconds((int) (short) 1);
        org.joda.time.Period period65 = period61.plusWeeks((int) (short) -1);
        org.joda.time.Period period67 = period61.minusMillis(4);
        org.joda.time.Interval interval68 = interval60.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone71);
        org.joda.time.Period period73 = org.joda.time.Period.ZERO;
        org.joda.time.Period period75 = period73.minusSeconds((int) (short) 1);
        org.joda.time.Period period77 = period73.plusWeeks((int) (short) -1);
        org.joda.time.Period period79 = period73.minusMillis(4);
        org.joda.time.Interval interval80 = interval72.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period73);
        org.joda.time.Interval interval81 = interval60.gap((org.joda.time.ReadableInterval) interval80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone82);
        long long84 = dateTime83.getMillis();
        org.joda.time.DateTime.Property property85 = dateTime83.yearOfEra();
        org.joda.time.Interval interval86 = property85.toInterval();
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval();
        long long88 = mutableInterval87.toDurationMillis();
        org.joda.time.Duration duration90 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval87.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Interval interval92 = interval86.withDurationAfterStart((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Interval interval93 = interval86.toInterval();
        org.joda.time.Interval interval95 = interval93.withEndMillis(2339679030463L);
        boolean boolean96 = interval80.isAfter((org.joda.time.ReadableInterval) interval93);
        org.joda.time.Interval interval97 = interval80.toInterval();
        org.joda.time.Interval interval98 = interval97.toInterval();
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval98);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-21T14:51:23.926Z" + "'", str18, "2022-02-21T14:51:23.926Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-21T14:51:23.926Z" + "'", str31, "2022-02-21T14:51:23.926Z");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-21T14:51:23.926Z" + "'", str44, "2022-02-21T14:51:23.926Z");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNull(interval81);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1645455083937L + "'", long84 == 1645455083937L);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(interval97);
        org.junit.Assert.assertNotNull(interval98);
    }

    @Test
    public void test00347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00347");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekOfWeekyear();
        int int13 = dateTimeField11.getMaximumValue(1645455060565L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test00348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00348");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (short) 1, 0, 72, 8);
    }

    @Test
    public void test00349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00349");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(9);
        org.joda.time.DateTime.Property property28 = dateTime25.minuteOfHour();
        org.joda.time.DateTime.Property property29 = dateTime25.yearOfCentury();
        int int30 = property29.get();
        java.util.Locale locale31 = null;
        int int32 = property29.getMaximumTextLength(locale31);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:24.187Z" + "'", str2, "2022-02-21T14:51:24.187Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21T14:51:24.187Z" + "'", str15, "2022-02-21T14:51:24.187Z");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test00350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00350");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        int int9 = dateTime1.getYearOfCentury();
        org.joda.time.LocalTime localTime10 = dateTime1.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField19 = yearMonthDay17.getField(0);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay17, (org.joda.time.ReadablePartial) yearMonthDay26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType31 = period30.getPeriodType();
        org.joda.time.PeriodType periodType32 = periodType31.withMillisRemoved();
        java.lang.String str33 = periodType32.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime10, (org.joda.time.ReadablePartial) yearMonthDay17, periodType32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:24.987Z" + "'", str2, "2022-02-21T14:51:24.987Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455084987L + "'", long13 == 1645455084987L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645455084987L + "'", long22 == 1645455084987L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "StandardNoMillis" + "'", str33, "StandardNoMillis");
    }

    @Test
    public void test00351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00351");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = new org.joda.time.Period((java.lang.Object) "2022-02-21T14:50:27.594Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:27.594Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00352");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        int int12 = period10.getMillis();
        org.joda.time.DurationFieldType durationFieldType14 = period10.getFieldType(0);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType21 = periodType20.withYearsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.Period period31 = new org.joda.time.Period(1645455029672L, (long) 3, periodType21, chronology29);
        mutablePeriod16.add(1645455030370L, chronology29);
        org.joda.time.Period period33 = new org.joda.time.Period(1645455035827L, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.halfdays();
        org.joda.time.DurationField durationField35 = chronology29.days();
        org.joda.time.DurationField durationField36 = durationFieldType14.getField(chronology29);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 8, periodType43, chronology50);
        mutablePeriod39.setPeriod((org.joda.time.ReadableDuration) duration41, chronology50);
        java.lang.Object obj54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period(obj54, periodType55, chronology56);
        org.joda.time.Period period58 = duration41.toPeriod(periodType55);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period71 = duration62.toPeriodFrom((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Seconds seconds72 = period71.toStandardSeconds();
        int int73 = period71.getMillis();
        org.joda.time.DurationFieldType durationFieldType75 = period71.getFieldType(0);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType79 = periodType78.withYearsRemoved();
        org.joda.time.PeriodType periodType80 = periodType79.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        boolean boolean85 = mutableInterval81.overlaps((org.joda.time.ReadableInterval) mutableInterval83);
        java.lang.Object obj86 = mutableInterval81.clone();
        org.joda.time.Chronology chronology87 = mutableInterval81.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.yearOfEra();
        org.joda.time.Period period89 = new org.joda.time.Period(1645455029672L, (long) 3, periodType79, chronology87);
        org.joda.time.DateTimeField dateTimeField90 = chronology87.dayOfMonth();
        boolean boolean91 = durationFieldType75.isSupported(chronology87);
        org.joda.time.Period period92 = new org.joda.time.Period((long) (short) 100, 1645455046455L, chronology87);
        org.joda.time.DateTimeField dateTimeField93 = chronology87.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period94 = new org.joda.time.Period((java.lang.Object) chronology29, periodType55, chronology87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:51:25.174Z" + "'", str4, "2022-02-21T14:51:25.174Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-21T14:51:25.175Z" + "'", str65, "2022-02-21T14:51:25.175Z");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(seconds72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test00353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00353");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.Period period14 = new org.joda.time.Period(1645455029672L, (long) 3, periodType4, chronology12);
        org.joda.time.DurationField durationField15 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = dateTimeField16.getLeapDurationField();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusSeconds((int) (byte) 10);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period42 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalTime localTime43 = dateTime40.toLocalTime();
        java.lang.String str44 = localTime43.toString();
        int int45 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localTime43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = org.joda.time.Period.fieldDifference(readablePartial0, (org.joda.time.ReadablePartial) localTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-21T14:51:25.370Z" + "'", str22, "2022-02-21T14:51:25.370Z");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645455085370L + "'", long36 == 1645455085370L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "14:51:35.370" + "'", str44, "14:51:35.370");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test00354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00354");
        java.lang.Object obj2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(obj2, periodType3, chronology4);
        int int6 = periodType3.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfSecond();
        boolean boolean17 = dateTimeFieldType7.isSupported(chronology14);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 1645455031834L, periodType3, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.yearOfCentury();
        long long23 = dateTimeField20.set(1645455071689L, 0);
        long long25 = dateTimeField20.roundHalfCeiling(1645455054099L);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 951144671689L + "'", long23 == 951144671689L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1640995200000L + "'", long25 == 1640995200000L);
    }

    @Test
    public void test00355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00355");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Interval interval12 = interval10.gap(readableInterval11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod15.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTimeISO();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration33 = duration22.minus(0L);
        org.joda.time.Duration duration35 = duration22.withMillis(1645455034114L);
        org.joda.time.Instant instant36 = instant19.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType48 = periodType47.withYearsRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        boolean boolean54 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        java.lang.Object obj55 = mutableInterval50.clone();
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfEra();
        org.joda.time.Period period58 = new org.joda.time.Period(1645455029672L, (long) 3, periodType48, chronology56);
        org.joda.time.DurationField durationField59 = chronology56.eras();
        org.joda.time.DateTime dateTime60 = dateTime38.toDateTime(chronology56);
        mutablePeriod15.setPeriod((org.joda.time.ReadableInstant) instant19, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDate localDate62 = dateTime60.toLocalDate();
        boolean boolean63 = interval10.contains((org.joda.time.ReadableInstant) dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455085809L + "'", long2 == 1645455085809L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-21T14:51:25.809Z" + "'", str25, "2022-02-21T14:51:25.809Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-21T14:51:25.809Z" + "'", str39, "2022-02-21T14:51:25.809Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test00356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00356");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645455034114L);
        java.lang.String str15 = duration1.toString();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType17 = periodType16.withYearsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withSecondsRemoved();
        org.joda.time.Period period19 = duration1.toPeriod(periodType18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period30 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Seconds seconds31 = period30.toStandardSeconds();
        int int32 = period30.getMillis();
        org.joda.time.DurationFieldType durationFieldType34 = period30.getFieldType(0);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfEra();
        org.joda.time.Period period48 = new org.joda.time.Period(1645455029672L, (long) 3, periodType38, chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.dayOfMonth();
        boolean boolean50 = durationFieldType34.isSupported(chronology46);
        int int51 = period19.get(durationFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period53 = period19.withWeeks(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:51:25.872Z" + "'", str4, "2022-02-21T14:51:25.872Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT100S" + "'", str15, "PT100S");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-21T14:51:25.872Z" + "'", str24, "2022-02-21T14:51:25.872Z");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(seconds31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test00357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00357");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant10.toInstant();
        boolean boolean12 = dateTime9.isAfter((org.joda.time.ReadableInstant) instant11);
        boolean boolean14 = instant11.isBefore(1645455066522L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:25.930Z" + "'", str2, "2022-02-21T14:51:25.930Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00358");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = chronology6.centuries();
        long long11 = durationField8.subtract(1645455028058L, 2);
        long long14 = durationField8.add(1645455068205L, 0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-4665978571942L) + "'", long11 == (-4665978571942L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455068205L + "'", long14 == 1645455068205L);
    }

    @Test
    public void test00359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00359");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(876);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test00360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00360");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology6.years();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period12.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime24 = dateTime19.withFieldAdded(durationFieldType22, (int) (short) 0);
        boolean boolean25 = period12.isSupported(durationFieldType22);
        org.joda.time.DateTime dateTime27 = dateTime11.withFieldAdded(durationFieldType22, 4381721);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTime11.toString("2022-02-21T14:50:33.835Z", locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-21T14:51:26.349Z" + "'", str17, "2022-02-21T14:51:26.349Z");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test00361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00361");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Interval interval4 = interval3.toInterval();
        org.joda.time.Duration duration5 = interval3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime10.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime.Property property22 = dateTime20.yearOfEra();
        org.joda.time.Interval interval23 = property22.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval29 = interval23.withDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        boolean boolean30 = dateTime10.equals((java.lang.Object) interval23);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        boolean boolean41 = mutableInterval31.contains((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime40.getMillisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime40.plusYears(3);
        boolean boolean45 = interval23.contains((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology46 = interval23.getChronology();
        org.joda.time.Period period47 = duration5.toPeriod(chronology46);
        org.joda.time.Instant instant48 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime49 = instant48.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = duration53.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology62);
        org.joda.time.DateTime dateTime64 = dateTime58.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = dateTime65.withZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime73 = dateTime70.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime74 = dateTime73.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay75 = dateTime74.toYearMonthDay();
        int int76 = yearMonthDay75.size();
        org.joda.time.DateTime dateTime77 = dateTime65.withFields((org.joda.time.ReadablePartial) yearMonthDay75);
        org.joda.time.DateTime dateTime79 = dateTime65.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property80 = dateTime65.dayOfMonth();
        int int81 = instant48.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) instant48);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T14:51:26.469Z" + "'", str8, "2022-02-21T14:51:26.469Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645455086469L + "'", long21 == 1645455086469L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645455086469L + "'", long38 == 1645455086469L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 53486469 + "'", int42 == 53486469);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-21T14:51:26.469Z" + "'", str59, "2022-02-21T14:51:26.469Z");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645455086469L + "'", long71 == 1645455086469L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test00362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00362");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) 2);
        boolean boolean10 = dateTime9.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DateTime dateTime19 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration34 = duration23.minus(0L);
        org.joda.time.DateTime dateTime36 = dateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime(chronology42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime46 = dateTime41.withFieldAdded(durationFieldType44, (int) (short) 0);
        int int47 = dateTime41.getDayOfWeek();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime55 = dateTime53.plusHours(2);
        int int56 = dateTime55.getDayOfWeek();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime55);
        long long58 = duration57.getMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration57);
        boolean boolean61 = dateTime9.isBefore(1645455064782L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:26.641Z" + "'", str2, "2022-02-21T14:51:26.641Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T14:51:26.641Z" + "'", str13, "2022-02-21T14:51:26.641Z");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T14:51:26.641Z" + "'", str26, "2022-02-21T14:51:26.641Z");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-21T14:51:26.641Z" + "'", str39, "2022-02-21T14:51:26.641Z");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-21T14:51:26.641Z" + "'", str51, "2022-02-21T14:51:26.641Z");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 7199369L + "'", long58 == 7199369L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test00363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00363");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime10 = dateTime1.toDateTime(dateTimeZone7);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundFloorCopy();
        org.joda.time.DurationField durationField14 = property12.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property12.setCopy(53482054);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53482054 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455086834L + "'", long2 == 1645455086834L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test00364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00364");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        int int3 = mutablePeriod2.getYears();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.negated();
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) period5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = period5.getFieldType(53429880);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test00365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00365");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period13 = period4.minusMinutes(8);
        java.lang.Object obj14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(obj14, periodType15, chronology16);
        org.joda.time.Period period18 = period4.withPeriodType(periodType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = period18.plusYears(342);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test00366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00366");
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period1.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period15 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration17 = duration6.minus(0L);
        org.joda.time.Duration duration19 = duration6.withMillis(1645455034114L);
        java.lang.String str20 = duration6.toString();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology28.halfdays();
        org.joda.time.Period period32 = duration6.toPeriod(periodType21, chronology28);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.monthOfYear();
        org.joda.time.DurationField durationField34 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField35 = chronology28.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str40 = dateTimeZone38.getShortName(52L);
        boolean boolean41 = dateTimeZone38.isFixed();
        long long43 = dateTimeZone38.nextTransition(1645455028058L);
        org.joda.time.Chronology chronology44 = chronology28.withZone(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-21T14:50:37.707Z", periodType4, chronology28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:37.707Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:27.205Z" + "'", str9, "2022-02-21T14:51:27.205Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT100S" + "'", str20, "PT100S");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+10:22" + "'", str40, "+10:22");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645455028058L + "'", long43 == 1645455028058L);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test00367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00367");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period13 = period4.withHours((int) 'a');
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean18 = period16.equals((java.lang.Object) dateTimeFieldType17);
        org.joda.time.Period period20 = period16.minusYears(26);
        org.joda.time.Period period21 = period4.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period24 = period21.withFieldAdded(durationFieldType22, 40);
        int int25 = period21.getDays();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test00368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00368");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration26 = new org.joda.time.Duration(1645455034431L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration28 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration26, 53486469);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455034431 * 53486469");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:51:27.245Z" + "'", str4, "2022-02-21T14:51:27.245Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455087245L + "'", long18 == 1645455087245L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test00369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00369");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-22T01:12:52.234+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00370");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-21T14:50:55.762Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00371");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod16.addMillis((int) '4');
        int int19 = mutablePeriod16.getWeeks();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant21.toInstant();
        mutablePeriod16.setPeriod(readableInstant20, (org.joda.time.ReadableInstant) instant22);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        mutableInterval24.setInterval(100000L, 1645455028646L);
        long long32 = mutableInterval24.getStartMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        mutableInterval24.setDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period39 = duration36.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType45 = periodType44.withYearsRemoved();
        org.joda.time.PeriodType periodType46 = periodType45.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.Period period55 = new org.joda.time.Period(1645455029672L, (long) 3, periodType45, chronology53);
        mutablePeriod40.add(1645455030370L, chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.DateTime dateTime61 = dateTime58.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime(chronology62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology69);
        org.joda.time.DateTime dateTime71 = dateTime65.minus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.DateTime dateTime72 = dateTime65.toDateTimeISO();
        org.joda.time.DateTime dateTime74 = dateTime72.minusMinutes(0);
        boolean boolean75 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime.Property property76 = dateTime61.year();
        org.joda.time.Duration duration77 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration79 = duration77.minus(1645455029375L);
        boolean boolean80 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Seconds seconds81 = duration36.toStandardSeconds();
        org.joda.time.Instant instant82 = instant22.plus((org.joda.time.ReadableDuration) duration36);
        boolean boolean84 = instant22.isBefore(1645455065288L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:27.709Z" + "'", str9, "2022-02-21T14:51:27.709Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100000L + "'", long32 == 100000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-21T14:51:27.709Z" + "'", str59, "2022-02-21T14:51:27.709Z");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-21T14:51:27.709Z" + "'", str66, "2022-02-21T14:51:27.709Z");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(seconds81);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test00372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00372");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.ReadablePartial readablePartial1 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType5 = periodType4.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1645455034688L, 1645455040225L, periodType4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = new org.joda.time.Period(readablePartial0, readablePartial1, periodType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test00373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00373");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) 1645455040972L);
        org.joda.time.Duration duration3 = duration1.minus(1645455048468L);
        org.joda.time.Period period4 = duration1.toPeriod();
        int int5 = period4.getYears();
        int int6 = period4.size();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test00374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00374");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay25 = dateTime24.toYearMonthDay();
        int int26 = yearMonthDay25.size();
        org.joda.time.DateTime dateTime27 = dateTime15.withFields((org.joda.time.ReadablePartial) yearMonthDay25);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime27.withDayOfWeek(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime27.withDayOfMonth(4369741);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4369741 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T01:13:28.138+10:22" + "'", str9, "2022-02-22T01:13:28.138+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645455088138L + "'", long21 == 1645455088138L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test00375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00375");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 1, 40, 4);
        mutablePeriod4.addMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1645455046184L, 3);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod4, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes(0);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration42 = duration31.minus(0L);
        org.joda.time.DateTime dateTime44 = dateTime27.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime54 = dateTime49.withFieldAdded(durationFieldType52, (int) (short) 0);
        int int55 = dateTime49.getDayOfWeek();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.DateTime dateTime61 = dateTime58.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime63 = dateTime61.plusHours(2);
        int int64 = dateTime63.getDayOfWeek();
        org.joda.time.Duration duration65 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod4, (org.joda.time.ReadableInstant) dateTime27);
        mutablePeriod4.add(1645455083621L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T01:13:28.166+10:22" + "'", str9, "2022-02-22T01:13:28.166+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T01:13:28.166+10:22" + "'", str21, "2022-02-22T01:13:28.166+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T01:13:28.166+10:22" + "'", str34, "2022-02-22T01:13:28.166+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T01:13:28.166+10:22" + "'", str47, "2022-02-22T01:13:28.166+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T01:13:28.166+10:22" + "'", str59, "2022-02-22T01:13:28.166+10:22");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test00376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00376");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime23.toDateMidnight();
        org.joda.time.DateTime dateTime27 = dateTime23.plus(1645455035670L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime27.withYearOfEra((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455088455L + "'", long2 == 1645455088455L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T01:13:28.455+10:22" + "'", str8, "2022-02-22T01:13:28.455+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645455088455L + "'", long20 == 1645455088455L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test00377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00377");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 22, 1645455035827L);
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod();
        mutablePeriod5.setMonths((int) ' ');
        java.lang.Object obj8 = mutablePeriod5.clone();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime31 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration46 = duration35.minus(0L);
        org.joda.time.DateTime dateTime48 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) (byte) 0);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType51 = periodType50.withMinutesRemoved();
        org.joda.time.Period period52 = mutableInterval3.toPeriod(periodType51);
        org.joda.time.Days days53 = period52.toStandardDays();
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) days53);
        mutablePeriod2.setMillis(4371255);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "P32M");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T01:13:28.468+10:22" + "'", str25, "2022-02-22T01:13:28.468+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T01:13:28.468+10:22" + "'", str38, "2022-02-22T01:13:28.468+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(days53);
    }

    @Test
    public void test00378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00378");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        java.util.Locale locale8 = null;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        boolean boolean10 = dateTimeField7.isSupported();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField7.getMaximumTextLength(locale11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period37 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalTime localTime38 = dateTime35.toLocalTime();
        int int39 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime38, readablePartial40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T01:13:28.691+10:22" + "'", str17, "2022-02-22T01:13:28.691+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645455088691L + "'", long31 == 1645455088691L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
    }

    @Test
    public void test00379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00379");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((int) (short) 10, 4397307, (int) '4', 4383442, (int) (short) 0, 20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4383442 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00380");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        java.lang.String str5 = property3.toString();
        boolean boolean6 = property3.isLeap();
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Interval interval19 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.Interval interval21 = interval19.gap(readableInterval20);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType27 = periodType26.withYearsRemoved();
        org.joda.time.PeriodType periodType28 = periodType27.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.Period period37 = new org.joda.time.Period(1645455029672L, (long) 3, periodType27, chronology35);
        mutablePeriod22.add(1645455030370L, chronology35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.DateTime dateTime43 = dateTime40.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.toDateTime(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology51);
        org.joda.time.DateTime dateTime53 = dateTime47.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = dateTime47.toDateTimeISO();
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes(0);
        boolean boolean57 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property58 = dateTime43.year();
        org.joda.time.Duration duration59 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean60 = interval19.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime62 = dateTime43.withMillisOfSecond(72);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.DateTime dateTime67 = dateTime64.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.toDateTime(chronology68);
        org.joda.time.DateTime dateTime70 = dateTime67.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str75 = dateTimeZone73.getNameKey(1645455028293L);
        int int77 = dateTimeZone73.getOffset(1645455028293L);
        long long81 = dateTimeZone73.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime82 = dateTime67.withZoneRetainFields(dateTimeZone73);
        long long86 = dateTimeZone73.convertLocalToUTC(1645455045823L, true, (long) 31);
        long long88 = dateTimeZone73.convertUTCToLocal(1645455037008L);
        org.joda.time.MutableDateTime mutableDateTime89 = dateTime43.toMutableDateTime(dateTimeZone73);
        long long90 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime89);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455088767L + "'", long2 == 1645455088767L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[yearOfEra]" + "'", str5, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455088768L + "'", long11 == 1645455088768L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T01:13:28.768+10:22" + "'", str41, "2022-02-22T01:13:28.768+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T01:13:28.768+10:22" + "'", str48, "2022-02-22T01:13:28.768+10:22");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T01:13:28.768+10:22" + "'", str65, "2022-02-22T01:13:28.768+10:22");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 37320000 + "'", int77 == 37320000);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-37319997L) + "'", long81 == (-37319997L));
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645417725823L + "'", long86 == 1645417725823L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1645492357008L + "'", long88 == 1645492357008L);
        org.junit.Assert.assertNotNull(mutableDateTime89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test00381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00381");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        int int28 = yearMonthDay27.size();
        org.joda.time.DateTime dateTime29 = dateTime17.withFields((org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.DateTime dateTime31 = dateTime17.withMonthOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property32 = dateTime17.dayOfMonth();
        int int33 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-1L), 1L, periodType38, chronology39);
        java.lang.String str41 = periodType38.toString();
        java.lang.String str42 = periodType38.getName();
        int int43 = periodType38.size();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1645455057007L, periodType38);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime49 = property48.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean51 = dateTime49.isSupported(dateTimeFieldType50);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType50.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType50.getRangeDurationType();
        int int54 = periodType38.indexOf(durationFieldType53);
        boolean boolean55 = periodType34.isSupported(durationFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime17.withFieldAdded(durationFieldType53, 4369741);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 436976122 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T01:13:28.963+10:22" + "'", str11, "2022-02-22T01:13:28.963+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645455088963L + "'", long23 == 1645455088963L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PeriodType[Time]" + "'", str41, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Time" + "'", str42, "Time");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645455088963L + "'", long47 == 1645455088963L);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test00382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00382");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (short) 10, 53429880, (int) (short) 0, 1);
        int int5 = mutablePeriod4.getSeconds();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds((int) (byte) 10);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period30 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        long long43 = duration33.getMillis();
        long long44 = duration33.getStandardMinutes();
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration33);
        long long46 = duration33.getMillis();
        org.joda.time.Period period47 = duration33.toPeriod();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T01:13:29.064+10:22" + "'", str10, "2022-02-22T01:13:29.064+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455089064L + "'", long24 == 1645455089064L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T01:13:29.064+10:22" + "'", str36, "2022-02-22T01:13:29.064+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100000L + "'", long43 == 100000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100000L + "'", long46 == 100000L);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test00383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00383");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        boolean boolean39 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime dateTime49 = dateTime44.withMillis((long) 2);
        boolean boolean50 = dateTime49.isBeforeNow();
        org.joda.time.Period period51 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = dateTime49.toString("2022-02-22T01:13:01.594+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:29.102+10:22" + "'", str2, "2022-02-22T01:13:29.102+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T01:13:29.102+10:22" + "'", str15, "2022-02-22T01:13:29.102+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T01:13:29.102+10:22" + "'", str30, "2022-02-22T01:13:29.102+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T01:13:29.102+10:22" + "'", str42, "2022-02-22T01:13:29.102+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(period51);
    }

    @Test
    public void test00384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00384");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = chronology6.centuries();
        long long11 = durationField8.subtract(1645455028058L, 2);
        long long14 = durationField8.add(0L, 3);
        long long17 = durationField8.add((long) 4394936, 1970);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-4665978571942L) + "'", long11 == (-4665978571942L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9467107200000L + "'", long14 == 9467107200000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 6216719591594936L + "'", long17 == 6216719591594936L);
    }

    @Test
    public void test00385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00385");
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-1L), 1L, periodType11, chronology12);
        java.lang.String str14 = periodType11.toString();
        java.lang.String str15 = periodType11.getName();
        org.joda.time.PeriodType periodType16 = periodType11.withDaysRemoved();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DurationField durationField31 = chronology29.years();
        mutableInterval17.setChronology(chronology29);
        org.joda.time.Period period33 = new org.joda.time.Period((long) 53429880, 1645455045950L, periodType16, chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(29, (int) (short) -1, 38089, 4397307, (int) (short) 100, 41, 4365808, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4397307 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PeriodType[Time]" + "'", str14, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Time" + "'", str15, "Time");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test00386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00386");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTime.Property property18 = dateTime1.dayOfYear();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime19.withYearOfCentury(53454899);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53454899 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455089437L + "'", long2 == 1645455089437L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T01:13:29.437+10:22" + "'", str8, "2022-02-22T01:13:29.437+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test00387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00387");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str12 = dateTimeZone10.getNameKey(1645455028293L);
        int int14 = dateTimeZone10.getOffset(1645455028293L);
        long long18 = dateTimeZone10.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime19 = dateTime4.withZoneRetainFields(dateTimeZone10);
        int int20 = dateTime19.getMonthOfYear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T01:13:29.797+10:22" + "'", str2, "2022-02-22T01:13:29.797+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37320000 + "'", int14 == 37320000);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-37319997L) + "'", long18 == (-37319997L));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test00388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00388");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval25 = interval24.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
    }

    @Test
    public void test00389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00389");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        int int10 = property9.getLeapAmount();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:30.276Z" + "'", str2, "2022-02-21T14:51:30.276Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00390");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1645455043186L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds(1645455032819L);
        boolean boolean4 = duration1.isEqual((org.joda.time.ReadableDuration) duration3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes5 = duration3.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 27424250546");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00391");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(10L);
        java.lang.String str4 = mutableInterval0.toString();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period15 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration17 = duration6.minus(0L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1L), 1L, periodType22, chronology23);
        java.lang.String str25 = periodType22.toString();
        java.lang.String str26 = periodType22.getName();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645455029643L, periodType22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, readableInstant18, periodType22);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.minusSeconds((int) (short) 1);
        org.joda.time.Period period38 = period34.plusWeeks((int) (short) -1);
        org.joda.time.Period period40 = period34.minusMillis(4);
        org.joda.time.Interval interval41 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        java.lang.String str43 = chronology42.toString();
        mutablePeriod28.add(1645455042903L, chronology42);
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime(chronology56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime60 = dateTime55.withFieldAdded(durationFieldType58, (int) (short) 0);
        int int61 = period50.get(durationFieldType58);
        boolean boolean62 = mutablePeriod28.isSupported(durationFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod28.addWeeks(4396707);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z" + "'", str4, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:30.547Z" + "'", str9, "2022-02-21T14:51:30.547Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[Time]" + "'", str25, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Time" + "'", str26, "Time");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-21T14:51:30.547Z" + "'", str53, "2022-02-21T14:51:30.547Z");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test00392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00392");
        org.joda.time.ReadablePartial readablePartial0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (byte) 10);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime26 = dateTime23.toLocalTime();
        java.lang.String str27 = localTime26.toString();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime48.plusSeconds((int) (byte) 10);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period52 = duration29.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalTime localTime53 = dateTime50.toLocalTime();
        java.lang.String str54 = localTime53.toString();
        int int55 = localTime26.compareTo((org.joda.time.ReadablePartial) localTime53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period56 = org.joda.time.Period.fieldDifference(readablePartial0, (org.joda.time.ReadablePartial) localTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21T14:51:30.593Z" + "'", str5, "2022-02-21T14:51:30.593Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455090593L + "'", long19 == 1645455090593L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "14:51:40.593" + "'", str27, "14:51:40.593");
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-21T14:51:30.593Z" + "'", str32, "2022-02-21T14:51:30.593Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645455090593L + "'", long46 == 1645455090593L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(localTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "14:51:40.593" + "'", str54, "14:51:40.593");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test00393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00393");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        boolean boolean8 = property3.isLeap();
        org.joda.time.DurationField durationField9 = property3.getLeapDurationField();
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property3.setCopy("2022-02-21T14:51:10.890Z", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:51:10.890Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455090611L + "'", long2 == 1645455090611L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(durationField9);
    }

    @Test
    public void test00394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00394");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType6 = periodType5.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.Period period16 = new org.joda.time.Period(1645455029672L, (long) 3, periodType6, chronology14);
        mutablePeriod1.add(1645455030370L, chronology14);
        org.joda.time.Period period18 = new org.joda.time.Period(1645455035827L, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.halfdays();
        long long22 = durationField19.add((long) 26, 53429880);
        long long25 = durationField19.subtract((long) (-1), (long) (-1));
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2308170816000026L + "'", long22 == 2308170816000026L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 43199999L + "'", long25 == 43199999L);
    }

    @Test
    public void test00395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00395");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        int int5 = property3.getMinimumValue();
        org.joda.time.DateTime dateTime7 = property3.setCopy(30);
        int int8 = property3.getMinimumValueOverall();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455091034L + "'", long2 == 1645455091034L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test00396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00396");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.yearOfCentury();
        int int17 = dateTime6.get(dateTimeField16);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime30 = dateTime21.minusSeconds((int) ' ');
        org.joda.time.DateTime.Property property31 = dateTime21.era();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        boolean boolean42 = mutableInterval32.contains((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period53 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration55 = duration44.minus(0L);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((-1L), 1L, periodType60, chronology61);
        java.lang.String str63 = periodType60.toString();
        java.lang.String str64 = periodType60.getName();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1645455029643L, periodType60);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, readableInstant56, periodType60);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime41, periodType60);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology75);
        org.joda.time.DateTime dateTime77 = dateTime71.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period78 = duration69.toPeriodFrom((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration80 = duration69.minus(0L);
        org.joda.time.Duration duration82 = duration69.withMillis(1645455034114L);
        java.lang.String str83 = duration69.toString();
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType85 = periodType84.withYearsRemoved();
        org.joda.time.PeriodType periodType86 = periodType85.withSecondsRemoved();
        org.joda.time.Period period87 = duration69.toPeriod(periodType86);
        org.joda.time.PeriodType periodType88 = periodType86.withMillisRemoved();
        org.joda.time.Period period89 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime21, periodType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period91 = period89.minusSeconds(53487658);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T10:51:31.249+20:00" + "'", str2, "2022-02-22T10:51:31.249+20:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T10:51:31.249+20:00" + "'", str22, "2022-02-22T10:51:31.249+20:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455091249L + "'", long39 == 1645455091249L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T10:51:31.249+20:00" + "'", str47, "2022-02-22T10:51:31.249+20:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PeriodType[Time]" + "'", str63, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Time" + "'", str64, "Time");
        org.junit.Assert.assertNotNull(duration69);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T10:51:31.250+20:00" + "'", str72, "2022-02-22T10:51:31.250+20:00");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "PT100S" + "'", str83, "PT100S");
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(periodType88);
    }

    @Test
    public void test00397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00397");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod15.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTimeISO();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration33 = duration22.minus(0L);
        org.joda.time.Duration duration35 = duration22.withMillis(1645455034114L);
        org.joda.time.Instant instant36 = instant19.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType48 = periodType47.withYearsRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        boolean boolean54 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        java.lang.Object obj55 = mutableInterval50.clone();
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfEra();
        org.joda.time.Period period58 = new org.joda.time.Period(1645455029672L, (long) 3, periodType48, chronology56);
        org.joda.time.DurationField durationField59 = chronology56.eras();
        org.joda.time.DateTime dateTime60 = dateTime38.toDateTime(chronology56);
        mutablePeriod15.setPeriod((org.joda.time.ReadableInstant) instant19, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDate localDate62 = dateTime60.toLocalDate();
        java.util.Locale locale63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDate62, locale63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T10:51:31.274+20:00" + "'", str25, "2022-02-22T10:51:31.274+20:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T10:51:31.275+20:00" + "'", str39, "2022-02-22T10:51:31.275+20:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
// flaky:         org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test00398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00398");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645455060354L, 1645455058957L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval15 = interval3.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test00399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00399");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMinimumValue();
        int int5 = property3.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime18 = dateTime10.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        int int25 = dateTime24.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = dateTime24.isAfter(readableInstant26);
        boolean boolean28 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = dateTime24.toString(dateTimeFormatter29);
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime24.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = property3.compareTo((org.joda.time.ReadablePartial) yearMonthDay31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455091644L + "'", long2 == 1645455091644L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T10:51:31.644+20:00" + "'", str8, "2022-02-22T10:51:31.644+20:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645455091644L + "'", long21 == 1645455091644L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-05-03T10:51:31.644+20:00" + "'", str30, "2022-05-03T10:51:31.644+20:00");
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test00400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00400");
        org.joda.time.Period period2 = new org.joda.time.Period(1645455049773L, 1645455048564L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = period2.getFieldType(2023);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00401");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = duration3.toPeriod();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration18 = duration7.minus(0L);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1L), 1L, periodType23, chronology24);
        java.lang.String str26 = periodType23.toString();
        java.lang.String str27 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1645455029643L, periodType23);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, readableInstant19, periodType23);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime39.plusSeconds((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration43 = duration7.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration46 = duration7.withDurationAdded(1645455036379L, 22);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = duration50.plus((long) 8);
        org.joda.time.Seconds seconds54 = duration50.toStandardSeconds();
        org.joda.time.Duration duration55 = duration50.toDuration();
        int int56 = duration7.compareTo((org.joda.time.ReadableDuration) duration55);
        int int57 = duration3.compareTo((org.joda.time.ReadableDuration) duration7);
        long long58 = duration3.getMillis();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        org.joda.time.DateTime dateTime63 = property62.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime(chronology69);
        org.joda.time.DateTime dateTime71 = dateTime68.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str76 = dateTimeZone74.getNameKey(1645455028293L);
        int int78 = dateTimeZone74.getOffset(1645455028293L);
        long long82 = dateTimeZone74.convertLocalToUTC((long) 3, false, 1645455032819L);
        org.joda.time.DateTime dateTime83 = dateTime68.withZoneRetainFields(dateTimeZone74);
        long long87 = dateTimeZone74.convertLocalToUTC(1645455045823L, true, (long) 31);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType89 = periodType88.withMinutesRemoved();
        boolean boolean90 = dateTimeZone74.equals((java.lang.Object) periodType88);
        org.joda.time.DateTime dateTime91 = dateTime63.toDateTime(dateTimeZone74);
        boolean boolean92 = duration3.equals((java.lang.Object) dateTime91);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T10:51:31.716+20:00" + "'", str10, "2022-02-22T10:51:31.716+20:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PeriodType[Time]" + "'", str26, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Time" + "'", str27, "Time");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645455091717L + "'", long37 == 1645455091717L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100000L + "'", long58 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645455091717L + "'", long61 == 1645455091717L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-22T10:51:31.717+20:00" + "'", str66, "2022-02-22T10:51:31.717+20:00");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 37320000 + "'", int78 == 37320000);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-37319997L) + "'", long82 == (-37319997L));
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1645417725823L + "'", long87 == 1645417725823L);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test00402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00402");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        mutableInterval7.setDurationAfterStart(1645455033234L);
        org.joda.time.MutableInterval mutableInterval15 = mutableInterval7.copy();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime20.plusMillis(100);
        long long24 = dateTime23.getMillis();
        int int25 = dateTime23.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.millisOfSecond();
        boolean boolean36 = dateTimeFieldType26.isSupported(chronology33);
        int int37 = dateTime23.get(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Interval interval49 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        java.lang.String str51 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.halfdayOfDay();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology50);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime53);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval15.setStart((org.joda.time.ReadableInstant) dateTime23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455091830L + "'", long18 == 1645455091830L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1651503091930L + "'", long24 == 1651503091930L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
// flaky:         org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(chronology50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[+20:00]" + "'", str51, "ISOChronology[+20:00]");
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test00403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00403");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval(1645455058549L, 1645455051434L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00404");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period13.plusMillis((int) ' ');
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        int int22 = period20.get(durationFieldType21);
        org.joda.time.Period period24 = period13.withFieldAdded(durationFieldType21, 4383442);
        org.joda.time.Period period26 = period24.minusHours(4396707);
        int int28 = period26.getValue(0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455092022L + "'", long2 == 1645455092022L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T10:51:32.022+20:00" + "'", str9, "2022-02-22T10:51:32.022+20:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test00405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00405");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        java.util.Locale locale8 = null;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        boolean boolean10 = dateTimeField7.isSupported();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeField7.getAsShortText((-37320000L), locale12);
        org.joda.time.DurationField durationField14 = dateTimeField7.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime27 = dateTime19.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTimeISO();
        int int34 = dateTime33.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = dateTime33.isAfter(readableInstant35);
        boolean boolean37 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime33.toString(dateTimeFormatter38);
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime33.toYearMonthDay();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay40, 30, locale42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.millisOfDay();
        org.joda.time.DurationField durationField52 = chronology50.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((java.lang.Object) str43, chronology50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"30\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970" + "'", str13, "1970");
        org.junit.Assert.assertNull(durationField14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T10:51:32.096+20:00" + "'", str17, "2022-02-22T10:51:32.096+20:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645455092096L + "'", long30 == 1645455092096L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-05-03T10:51:32.096+20:00" + "'", str39, "2022-05-03T10:51:32.096+20:00");
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "30" + "'", str43, "30");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test00406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00406");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains(1L);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        mutableInterval26.setChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.era();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.DateTime dateTime43 = dateTime40.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = dateTime43.toDateTime(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology51);
        org.joda.time.DateTime dateTime53 = dateTime47.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = dateTime47.toDateTimeISO();
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes(0);
        boolean boolean57 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime.Property property58 = dateTime43.year();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property58.getAsText(locale59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTime dateTime65 = dateTime62.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime66 = dateTime65.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay67 = dateTime66.toYearMonthDay();
        int int68 = yearMonthDay67.size();
        int int69 = property58.compareTo((org.joda.time.ReadablePartial) yearMonthDay67);
        java.util.Locale locale70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay67, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T10:51:32.182+20:00" + "'", str2, "2022-02-22T10:51:32.182+20:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T10:51:32.182+20:00" + "'", str9, "2022-02-22T10:51:32.182+20:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T10:51:32.182+20:00" + "'", str16, "2022-02-22T10:51:32.182+20:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T10:51:32.182+20:00" + "'", str41, "2022-02-22T10:51:32.182+20:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T10:51:32.182+20:00" + "'", str48, "2022-02-22T10:51:32.182+20:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022" + "'", str60, "2022");
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645455092182L + "'", long63 == 1645455092182L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test00407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00407");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L), 1L, periodType3, chronology4);
        java.lang.String str6 = periodType3.toString();
        java.lang.String str7 = periodType3.getName();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone10);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period12.minusSeconds((int) (short) 1);
        org.joda.time.Period period16 = period12.plusWeeks((int) (short) -1);
        org.joda.time.Period period18 = period12.minusMillis(4);
        org.joda.time.Interval interval19 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.halfdays();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getNameKey(1645455028293L);
        java.lang.String str28 = dateTimeZone24.getNameKey(1645455039471L);
        java.lang.String str29 = dateTimeZone24.toString();
        org.joda.time.Chronology chronology30 = chronology20.withZone(dateTimeZone24);
        org.joda.time.Period period31 = new org.joda.time.Period(1645455061815L, periodType3, chronology30);
        org.joda.time.Period period33 = period31.multipliedBy(100);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod36.setValue((int) (byte) 0, 100);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        mutableInterval40.setInterval(100000L, 1645455028646L);
        long long48 = mutableInterval40.getStartMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        mutableInterval40.setDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Period period55 = duration52.toPeriod();
        mutablePeriod36.add((org.joda.time.ReadableDuration) duration52);
        mutablePeriod36.add(1645455060762L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period59 = period33.withFields((org.joda.time.ReadablePeriod) mutablePeriod36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:22" + "'", str29, "+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100000L + "'", long48 == 100000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test00408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00408");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str30 = dateTimeZone28.getShortName(52L);
        boolean boolean31 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime32 = dateTime25.withZone(dateTimeZone28);
        java.lang.String str33 = dateTime32.toString();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:22" + "'", str30, "+10:22");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T10:21:59.999+10:22" + "'", str33, "1970-01-01T10:21:59.999+10:22");
    }

    @Test
    public void test00409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00409");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        int int7 = yearMonthDay6.size();
        org.joda.time.DateTimeField dateTimeField9 = yearMonthDay6.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = yearMonthDay6.getFieldType(20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455092506L + "'", long2 == 1645455092506L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test00410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00410");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime7.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        boolean boolean20 = dateTime18.isEqual((long) 4380700);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime18.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T10:51:32.559+20:00" + "'", str2, "2022-02-22T10:51:32.559+20:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T10:51:32.010+20:00" + "'", str10, "2022-02-22T10:51:32.010+20:00");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455092559L + "'", long13 == 1645455092559L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00411");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTime dateTime9 = dateTime2.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withZoneRetainFields(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.minusMinutes(53452649);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T10:51:32.655+20:00" + "'", str3, "2022-02-22T10:51:32.655+20:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T10:51:32.655+20:00" + "'", str19, "2022-02-22T10:51:32.655+20:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645455092655L + "'", long29 == 1645455092655L);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test00412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00412");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        boolean boolean17 = period4.equals((java.lang.Object) dateTime16);
        int int18 = period4.getMinutes();
        org.joda.time.Period period20 = period4.withWeeks(14);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455092737L + "'", long14 == 1645455092737L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test00413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00413");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Seconds seconds13 = period12.toStandardSeconds();
        int int14 = period12.getMillis();
        org.joda.time.DurationFieldType durationFieldType16 = period12.getFieldType(0);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType20 = periodType19.withYearsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.Period period30 = new org.joda.time.Period(1645455029672L, (long) 3, periodType20, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfMonth();
        boolean boolean32 = durationFieldType16.isSupported(chronology28);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) 100, 1645455046455L, chronology28);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration46 = duration35.minus(0L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1L), 1L, periodType51, chronology52);
        java.lang.String str54 = periodType51.toString();
        java.lang.String str55 = periodType51.getName();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645455029643L, periodType51);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant47, periodType51);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone61);
        org.joda.time.Period period63 = org.joda.time.Period.ZERO;
        org.joda.time.Period period65 = period63.minusSeconds((int) (short) 1);
        org.joda.time.Period period67 = period63.plusWeeks((int) (short) -1);
        org.joda.time.Period period69 = period63.minusMillis(4);
        org.joda.time.Interval interval70 = interval62.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        java.lang.String str72 = chronology71.toString();
        mutablePeriod57.add(1645455042903L, chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval74 = new org.joda.time.Interval((java.lang.Object) period33, chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T10:51:32.992+20:00" + "'", str6, "2022-02-22T10:51:32.992+20:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T10:51:32.992+20:00" + "'", str38, "2022-02-22T10:51:32.992+20:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PeriodType[Time]" + "'", str54, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Time" + "'", str55, "Time");
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(chronology71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[+20:00]" + "'", str72, "ISOChronology[+20:00]");
    }

    @Test
    public void test00414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00414");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay34 = dateTime33.toYearMonthDay();
        int int35 = yearMonthDay34.size();
        org.joda.time.DateTime dateTime36 = dateTime24.withFields((org.joda.time.ReadablePartial) yearMonthDay34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.DurationField durationField46 = dateTimeField45.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime51.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        int int54 = yearMonthDay53.size();
        int[] intArray59 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int60 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay53, intArray59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTime dateTime65 = dateTime62.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime66 = dateTime65.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay67 = dateTime66.toYearMonthDay();
        int int68 = yearMonthDay67.size();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        java.lang.Object obj74 = mutableInterval69.clone();
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfEra();
        org.joda.time.DurationField durationField77 = dateTimeField76.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone78);
        long long80 = dateTime79.getMillis();
        org.joda.time.DateTime dateTime82 = dateTime79.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime83 = dateTime82.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay84 = dateTime83.toYearMonthDay();
        int int85 = yearMonthDay84.size();
        int[] intArray90 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int91 = dateTimeField76.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay84, intArray90);
        int int92 = dateTimeField45.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay67, intArray90);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) yearMonthDay34, (-1), intArray90, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T10:51:33.134+20:00" + "'", str18, "2022-02-22T10:51:33.134+20:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645455093134L + "'", long30 == 1645455093134L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645455093134L + "'", long49 == 1645455093134L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645455093134L + "'", long63 == 1645455093134L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
// flaky:         org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1645455093134L + "'", long80 == 1645455093134L);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test00415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00415");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.era();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField14.getDifferenceAsLong(1645455089010L, 4459867463L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test00416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00416");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0, 39092311, 4394, 141, 53482054, 53483621, 53486469);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 141 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00417");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        int int30 = yearMonthDay29.size();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.DurationField durationField39 = dateTimeField38.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        int int47 = yearMonthDay46.size();
        int[] intArray52 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int53 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay46, intArray52);
        int int54 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay29, intArray52);
        int int55 = dateTimeField7.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        java.lang.Object obj62 = mutableInterval57.clone();
        org.joda.time.Chronology chronology63 = mutableInterval57.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfEra();
        org.joda.time.DurationField durationField65 = dateTimeField64.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime dateTime70 = dateTime67.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime71 = dateTime70.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay72 = dateTime71.toYearMonthDay();
        int int73 = yearMonthDay72.size();
        int[] intArray78 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int79 = dateTimeField64.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay72, intArray78);
        int int80 = dateTimeField7.getMaximumValue(readablePartial56, intArray78);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455093376L + "'", long11 == 1645455093376L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645455093376L + "'", long25 == 1645455093376L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645455093376L + "'", long42 == 1645455093376L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(obj62);
// flaky:         org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645455093376L + "'", long68 == 1645455093376L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 292278993 + "'", int80 == 292278993);
    }

    @Test
    public void test00418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00418");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-21T14:51:23.403Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-21T14:51:23.403Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00419");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DurationField durationField9 = chronology6.years();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((-1L), 1L, periodType15, chronology16);
        java.lang.String str18 = periodType15.toString();
        java.lang.String str19 = periodType15.getName();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1645455029643L, periodType15);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType15, chronology27);
        long long31 = chronology6.add((org.joda.time.ReadablePeriod) period28, 1645455049492L, (int) ' ');
        org.joda.time.DateTimeField dateTimeField32 = chronology6.secondOfMinute();
        long long36 = chronology6.add(1645455079096L, 1645455048564L, (int) '4');
        org.joda.time.DateTimeField dateTimeField37 = chronology6.millisOfDay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PeriodType[Time]" + "'", str18, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Time" + "'", str19, "Time");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645455052372L + "'", long31 == 1645455052372L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 87209117604424L + "'", long36 == 87209117604424L);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test00420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00420");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant6 = new org.joda.time.Instant((java.lang.Object) mutableInterval0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutableInterval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
    }

    @Test
    public void test00421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00421");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime1.minusWeeks((int) (short) 1);
        org.joda.time.DateTime.Property property11 = dateTime1.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = property11.addToCopy(1645455088645L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455088645 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T10:51:34.098+20:00" + "'", str2, "2022-02-22T10:51:34.098+20:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test00422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00422");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645455028293L);
        int int6 = dateTimeZone2.getOffset(1645455028293L);
        java.lang.String str8 = dateTimeZone2.getShortName(1645455037062L);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property10.setCopy("2022-02-21T14:50:33.730Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:33.730Z\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 37320000 + "'", int6 == 37320000);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:22" + "'", str8, "+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test00423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00423");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay29 = dateTime28.toYearMonthDay();
        int int30 = yearMonthDay29.size();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.DurationField durationField39 = dateTimeField38.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        int int47 = yearMonthDay46.size();
        int[] intArray52 = new int[] { 10, ' ', (byte) 100, (byte) 100 };
        int int53 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay46, intArray52);
        int int54 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay29, intArray52);
        int int55 = dateTimeField7.getMinimumValue();
        java.lang.String str57 = dateTimeField7.getAsShortText(1645455050897L);
        long long60 = dateTimeField7.set(1645455046184L, 23);
        java.util.Locale locale63 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long64 = dateTimeField7.set(1645455063415L, "2022-02-22T10:51:32.278+20:00", locale63);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T10:51:32.278+20:00\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455094446L + "'", long11 == 1645455094446L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645455094446L + "'", long25 == 1645455094446L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645455094446L + "'", long42 == 1645455094446L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10, 32, 100, 100]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022" + "'", str57, "2022");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-61436912953816L) + "'", long60 == (-61436912953816L));
    }

    @Test
    public void test00424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00424");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.Interval interval12 = interval10.gap(readableInterval11);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Period period28 = new org.joda.time.Period(1645455029672L, (long) 3, periodType18, chronology26);
        mutablePeriod13.add(1645455030370L, chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        boolean boolean48 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property49 = dateTime34.year();
        org.joda.time.Duration duration50 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean51 = interval10.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone54);
        org.joda.time.Interval interval56 = interval55.toInterval();
        org.joda.time.Duration duration57 = interval55.toDuration();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((int) (short) 10, (int) (short) 1, 40, 4);
        mutablePeriod63.addMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology71);
        org.joda.time.DateTime dateTime73 = dateTime67.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.DateTime dateTime76 = dateTime73.withDurationAdded(1645455046184L, 3);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod63, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime.Property property78 = dateTime76.monthOfYear();
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        java.lang.String str83 = dateTime82.toString();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology86);
        org.joda.time.DateTime dateTime88 = dateTime82.minus((org.joda.time.ReadablePeriod) period87);
        org.joda.time.Period period89 = duration80.toPeriodFrom((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime91 = dateTime82.minusSeconds((int) ' ');
        org.joda.time.DateTime dateTime93 = dateTime91.withHourOfDay(21);
        org.joda.time.DateTime dateTime95 = dateTime93.withMillis(0L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval58.setInterval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455094472L + "'", long2 == 1645455094472L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T20:00:00.000+20:00/1970-01-01T20:00:00.000+20:00");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T10:51:34.472+20:00" + "'", str32, "2022-02-22T10:51:34.472+20:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T10:51:34.472+20:00" + "'", str39, "2022-02-22T10:51:34.472+20:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration57);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-22T10:51:34.472+20:00" + "'", str68, "2022-02-22T10:51:34.472+20:00");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(duration80);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-02-22T10:51:34.472+20:00" + "'", str83, "2022-02-22T10:51:34.472+20:00");
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test00425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00425");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(4381721, 37320000, 6, 37320000, 37320000, 4369741);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37320000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00426");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property11 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime12 = property11.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        boolean boolean24 = dateTime21.isAfterNow();
        org.joda.time.DateTime dateTime26 = dateTime21.withYearOfEra(9);
        org.joda.time.DateTime dateTime28 = dateTime21.plus(1645455067662L);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withDaysRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime28, periodType29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = new org.joda.time.Period(728, 52991506, 39094373, 40, 39091384, 53454899, (int) '4', 53455286, periodType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645455094605L + "'", long10 == 1645455094605L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T10:51:34.605+20:00" + "'", str15, "2022-02-22T10:51:34.605+20:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
    }

    @Test
    public void test00427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00427");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType3 = period2.getPeriodType();
        org.joda.time.Period period5 = period2.plusMillis(2);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = period2.getValue(33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test00428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00428");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-21T14:51:18.753Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-21T14:51:18.753Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00429");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) (short) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths(31);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        mutableInterval12.setEndMillis(10L);
        java.lang.String str16 = mutableInterval12.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration29 = duration18.minus(0L);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1L), 1L, periodType34, chronology35);
        java.lang.String str37 = periodType34.toString();
        java.lang.String str38 = periodType34.getName();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645455029643L, periodType34);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, readableInstant30, periodType34);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone44);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.Period period52 = period46.minusMillis(4);
        org.joda.time.Interval interval53 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        java.lang.String str55 = chronology54.toString();
        mutablePeriod40.add(1645455042903L, chronology54);
        mutableInterval12.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutableInterval12.setDurationAfterStart(1L);
        org.joda.time.Period period60 = mutableInterval12.toPeriod();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadablePeriod) period60);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology69);
        org.joda.time.DateTime dateTime71 = dateTime65.minus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.Period period72 = duration63.toPeriodFrom((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration74 = duration63.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        java.lang.String str77 = dateTime76.toString();
        org.joda.time.DateTime dateTime79 = dateTime76.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = dateTime79.toDateTime(chronology80);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = duration74.toPeriodTo((org.joda.time.ReadableInstant) dateTime81, periodType82);
        int int84 = dateTime81.getDayOfMonth();
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardSeconds(1645455032819L);
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableDuration) duration86);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime(dateTimeZone88);
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.DateTime dateTime91 = dateTime89.plus(readableDuration90);
        mutableInterval61.setInterval((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.ReadableInterval readableInterval93 = null;
        boolean boolean94 = mutableInterval61.contains(readableInterval93);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:34.944Z" + "'", str2, "2022-02-21T14:51:34.944Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z" + "'", str16, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T14:51:34.944Z" + "'", str21, "2022-02-21T14:51:34.944Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[Time]" + "'", str37, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Time" + "'", str38, "Time");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration63);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-21T14:51:34.945Z" + "'", str66, "2022-02-21T14:51:34.945Z");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration74);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-21T14:51:34.945Z" + "'", str77, "2022-02-21T14:51:34.945Z");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 21 + "'", int84 == 21);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00430");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        boolean boolean8 = property3.isLeap();
        org.joda.time.DurationField durationField9 = property3.getLeapDurationField();
        org.joda.time.DateTime dateTime10 = property3.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime10.withSecondOfMinute(53486469);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53486469 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455095048L + "'", long2 == 1645455095048L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test00431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00431");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField8 = yearMonthDay6.getField(0);
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = yearMonthDay6.compareTo(readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455095310L + "'", long2 == 1645455095310L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test00432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00432");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        java.lang.Object obj3 = mutablePeriod0.clone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone6);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.Period period12 = period8.plusWeeks((int) (short) -1);
        org.joda.time.Period period14 = period8.minusMillis(4);
        org.joda.time.Interval interval15 = interval7.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period8);
        mutablePeriod0.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval17.setEndMillis(10L);
        mutableInterval17.setEndMillis((long) (short) 0);
        mutablePeriod0.add((org.joda.time.ReadableInterval) mutableInterval17);
        mutableInterval17.setDurationAfterStart(1645455042879L);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "P32M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test00433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00433");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = instant22.get(dateTimeFieldType23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str38 = dateTimeZone36.getNameKey(1645455028293L);
        org.joda.time.Chronology chronology39 = chronology31.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType23.getField(chronology39);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType23.getRangeDurationType();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:35.501Z" + "'", str2, "2022-02-21T14:51:35.501Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:35.501Z" + "'", str9, "2022-02-21T14:51:35.501Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNull(durationFieldType42);
    }

    @Test
    public void test00434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00434");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2022-02-22T01:13:16.909+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00435");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod6.setPeriod((long) 9, 100000L, chronology11);
        mutablePeriod6.add(1645455046500L);
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod6.copy();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillisOfSecond((int) (short) 10);
        boolean boolean23 = dateTime21.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(chronology29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        boolean boolean42 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean45 = mutableInterval43.contains(1L);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        mutableInterval43.setChronology(chronology52);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (short) 10, 53429880, (int) (short) 0, 1);
        int int59 = mutablePeriod58.getSeconds();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Period period70 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval71.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        long long78 = dateTime77.getMillis();
        org.joda.time.DateTime dateTime80 = dateTime77.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime82 = dateTime80.plusSeconds((int) (byte) 10);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration74, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Period period84 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime82);
        mutablePeriod58.setPeriod((org.joda.time.ReadableDuration) duration61);
        mutableInterval43.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.Chronology chronology87 = mutableInterval43.getChronology();
        mutablePeriod15.setPeriod(1645455062085L, chronology87);
        org.joda.time.Period period89 = new org.joda.time.Period((long) '4', 1645455087945L, chronology87);
        int int90 = period89.getMillis();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod15);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T14:51:35.707Z" + "'", str19, "2022-02-21T14:51:35.707Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T14:51:35.707Z" + "'", str26, "2022-02-21T14:51:35.707Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T14:51:35.707Z" + "'", str33, "2022-02-21T14:51:35.707Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(duration61);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-21T14:51:35.707Z" + "'", str64, "2022-02-21T14:51:35.707Z");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(duration74);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645455095707L + "'", long78 == 1645455095707L);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 893 + "'", int90 == 893);
    }

    @Test
    public void test00436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00436");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1L), 1L, periodType31, chronology32);
        java.lang.String str34 = periodType31.toString();
        java.lang.String str35 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1645455029643L, periodType31);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType31, chronology43);
        org.joda.time.Interval interval45 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        boolean boolean56 = mutableInterval46.contains((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean58 = mutableInterval46.equals((java.lang.Object) 1645455046668L);
        org.joda.time.Interval interval59 = interval3.overlap((org.joda.time.ReadableInterval) mutableInterval46);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PeriodType[Time]" + "'", str34, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Time" + "'", str35, "Time");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645455095769L + "'", long53 == 1645455095769L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(interval59);
    }

    @Test
    public void test00437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00437");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = new org.joda.time.Interval((java.lang.Object) "2022-02-21T14:50:41.166Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-21T14:50:41.166Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00438");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(1645455029672L, (long) 3, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        int int17 = dateTimeField14.getDifference((long) (short) 1, 1645455030370L);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay43 = dateTime42.toYearMonthDay();
        int int44 = yearMonthDay43.size();
        org.joda.time.DateTime dateTime45 = dateTime33.withFields((org.joda.time.ReadablePartial) yearMonthDay43);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay43, locale46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField49 = yearMonthDay43.getField(4392493);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 4392493");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-19044) + "'", int17 == (-19044));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-21T14:51:35.977Z" + "'", str27, "2022-02-21T14:51:35.977Z");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455095977L + "'", long39 == 1645455095977L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2" + "'", str47, "2");
    }

    @Test
    public void test00439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00439");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Seconds seconds15 = period14.toStandardSeconds();
        int int16 = period14.getMillis();
        org.joda.time.DurationFieldType durationFieldType18 = period14.getFieldType(0);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period(1645455029672L, (long) 3, periodType22, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfMonth();
        boolean boolean34 = durationFieldType18.isSupported(chronology30);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) 100, 1645455046455L, chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.monthOfYear();
        boolean boolean37 = periodType1.equals((java.lang.Object) chronology30);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1645455083503L, periodType1);
        int int39 = periodType1.size();
        org.joda.time.PeriodType periodType40 = periodType1.withMonthsRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T14:51:36.092Z" + "'", str8, "2022-02-21T14:51:36.092Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test00440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00440");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime25 = interval3.getEnd();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1645455029820L, chronology34);
        boolean boolean39 = dateTimeFieldType26.isSupported(chronology34);
        boolean boolean40 = dateTime25.isSupported(dateTimeFieldType26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = dateTime25.toString(dateTimeFormatter41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime25.withDate(40, 4409715, 728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4409715 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str42, "1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test00441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00441");
        java.lang.Object obj8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        int int11 = periodType10.size();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime16.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime16.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval35 = interval29.withDurationAfterStart((org.joda.time.ReadableDuration) duration33);
        boolean boolean36 = dateTime16.equals((java.lang.Object) interval29);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime dateTime46 = dateTime43.plusWeeks((int) (byte) 10);
        boolean boolean47 = mutableInterval37.contains((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime46.getMillisOfDay();
        org.joda.time.DateTime dateTime50 = dateTime46.plusYears(3);
        boolean boolean51 = interval29.contains((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology52 = interval29.getChronology();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(obj8, periodType10, chronology52);
        org.joda.time.PeriodType periodType54 = periodType10.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period55 = new org.joda.time.Period(53440972, 53469189, 929, 73, 39091384, (int) (short) 1, 728, (-19044), periodType54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-21T14:51:36.226Z" + "'", str14, "2022-02-21T14:51:36.226Z");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645455096226L + "'", long27 == 1645455096226L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645455096226L + "'", long44 == 1645455096226L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53496226 + "'", int48 == 53496226);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(periodType54);
    }

    @Test
    public void test00442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00442");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod16.addMillis((int) '4');
        java.lang.Object obj19 = mutablePeriod16.clone();
        mutablePeriod16.addMillis(2023);
        mutablePeriod16.setMillis(50);
        mutablePeriod16.setMonths(53454899);
        mutablePeriod16.addMinutes(5);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:36.452Z" + "'", str9, "2022-02-21T14:51:36.452Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "P53454899MT6M40.050S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "P53454899MT6M40.050S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "P53454899MT6M40.050S");
    }

    @Test
    public void test00443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00443");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        mutableInterval0.setEndMillis(1645455043186L);
        org.joda.time.ReadableInstant readableInstant8 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStart(readableInstant8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test00444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00444");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfDay(1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str35 = dateTimeZone33.getNameKey(1645455028293L);
        int int37 = dateTimeZone33.getOffset(1645455028293L);
        org.joda.time.DateTime dateTime38 = dateTime28.toDateTime(dateTimeZone33);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime42 = dateTime20.minusSeconds(292278993);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime20.withSecondOfMinute(39091384);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39091384 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:36.544Z" + "'", str2, "2022-02-21T14:51:36.544Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T14:51:36.544Z" + "'", str13, "2022-02-21T14:51:36.544Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-21T14:51:36.544Z" + "'", str23, "2022-02-21T14:51:36.544Z");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 37320000 + "'", int37 == 37320000);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test00445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00445");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) (byte) 0);
        int int2 = period1.getWeeks();
        org.joda.time.Duration duration3 = period1.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        mutablePeriod6.setMonths((int) ' ');
        java.lang.Object obj9 = mutablePeriod6.clone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone12);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.minusSeconds((int) (short) 1);
        org.joda.time.Period period18 = period14.plusWeeks((int) (short) -1);
        org.joda.time.Period period20 = period14.minusMillis(4);
        org.joda.time.Interval interval21 = interval13.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval21);
        mutableInterval4.setInterval((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(0);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration36.minus(0L);
        org.joda.time.DateTime dateTime49 = dateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) (byte) 0);
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType52 = periodType51.withMinutesRemoved();
        org.joda.time.Period period53 = mutableInterval4.toPeriod(periodType52);
        org.joda.time.Duration duration54 = mutableInterval4.toDuration();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.DateTime dateTime59 = dateTime56.withMillisOfSecond((int) (short) 10);
        boolean boolean61 = dateTime59.isBefore((-1L));
        int int62 = dateTime59.getDayOfWeek();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime(chronology69);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime73 = dateTime68.withFieldAdded(durationFieldType71, (int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        boolean boolean85 = mutableInterval81.overlaps((org.joda.time.ReadableInterval) mutableInterval83);
        java.lang.Object obj86 = mutableInterval81.clone();
        org.joda.time.Chronology chronology87 = mutableInterval81.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 8, periodType80, chronology87);
        mutablePeriod76.setPeriod((org.joda.time.ReadableDuration) duration78, chronology87);
        org.joda.time.DurationField durationField91 = durationFieldType71.getField(chronology87);
        int int92 = period63.get(durationFieldType71);
        org.joda.time.Period period94 = period1.withFieldAdded(durationFieldType71, 39092311);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "P32M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T14:51:36.625Z" + "'", str26, "2022-02-21T14:51:36.625Z");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-21T14:51:36.625Z" + "'", str39, "2022-02-21T14:51:36.625Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-21T14:51:36.625Z" + "'", str57, "2022-02-21T14:51:36.625Z");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-21T14:51:36.625Z" + "'", str66, "2022-02-21T14:51:36.625Z");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 40 + "'", int92 == 40);
        org.junit.Assert.assertNotNull(period94);
    }

    @Test
    public void test00446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00446");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        boolean boolean11 = dateTime9.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes(0);
        boolean boolean30 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean33 = mutableInterval31.contains(1L);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        mutableInterval31.setChronology(chronology40);
        mutablePeriod2.setPeriod(100000L, 1645455034244L, chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.clockhourOfHalfday();
        int int45 = dateTimeField43.getMinimumValue(1645455034688L);
        java.util.Locale locale46 = null;
        int int47 = dateTimeField43.getMaximumTextLength(locale46);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T14:51:36.700Z" + "'", str7, "2022-02-21T14:51:36.700Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-21T14:51:36.700Z" + "'", str14, "2022-02-21T14:51:36.700Z");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T14:51:36.700Z" + "'", str21, "2022-02-21T14:51:36.700Z");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test00447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00447");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period6.getFieldTypes();
        org.joda.time.PeriodType periodType8 = period6.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withDaysRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod();
        mutablePeriod12.setMonths((int) ' ');
        java.lang.Object obj15 = mutablePeriod12.clone();
        mutablePeriod12.setDays(40);
        mutablePeriod12.addMinutes((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType25 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.Period period35 = new org.joda.time.Period(1645455029672L, (long) 3, periodType25, chronology33);
        mutablePeriod20.add(1645455030370L, chronology33);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone39);
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period41.minusSeconds((int) (short) 1);
        org.joda.time.Period period45 = period41.plusWeeks((int) (short) -1);
        org.joda.time.Period period47 = period41.minusMillis(4);
        org.joda.time.Interval interval48 = interval40.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period50 = period41.withHours((int) 'a');
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean55 = period53.equals((java.lang.Object) dateTimeFieldType54);
        org.joda.time.Period period57 = period53.minusYears(26);
        org.joda.time.Period period58 = period41.withFields((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period61 = period58.withFieldAdded(durationFieldType59, 40);
        int int62 = mutablePeriod20.get(durationFieldType59);
        mutablePeriod12.add(durationFieldType59, 728);
        boolean boolean65 = periodType11.isSupported(durationFieldType59);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P32M40DT-1M728S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P32M40DT-1M728S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P32M40DT-1M728S");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 30 + "'", int62 == 30);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test00448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00448");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration31 = duration20.minus(0L);
        org.joda.time.DateTime dateTime33 = dateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) (byte) 0);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration46 = duration35.minus(0L);
        boolean boolean47 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.months();
        org.joda.time.Period period56 = duration35.toPeriodTo((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.PeriodType periodType57 = periodType55.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(73, 53455286, (-1), (int) (byte) 10, 37320000, 32, 4369741, 53, periodType57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T14:51:37.024Z" + "'", str10, "2022-02-21T14:51:37.024Z");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-21T14:51:37.024Z" + "'", str23, "2022-02-21T14:51:37.024Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-21T14:51:37.024Z" + "'", str38, "2022-02-21T14:51:37.024Z");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-21T14:51:37.024Z" + "'", str50, "2022-02-21T14:51:37.024Z");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(periodType57);
    }

    @Test
    public void test00449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00449");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType6 = periodType5.withYearsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.Period period16 = new org.joda.time.Period(1645455029672L, (long) 3, periodType6, chronology14);
        mutablePeriod1.add(1645455030370L, chronology14);
        org.joda.time.Period period18 = new org.joda.time.Period(1645455035827L, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.halfdays();
        org.joda.time.DurationField durationField20 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.yearOfCentury();
        java.lang.String str22 = dateTimeField21.toString();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str22, "DateTimeField[yearOfCentury]");
    }

    @Test
    public void test00450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00450");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) 1645455047799L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00451");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645455029643L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod23.copy();
        org.joda.time.Period period25 = mutablePeriod24.toPeriod();
        int int26 = period25.getMillis();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:51:37.116Z" + "'", str4, "2022-02-21T14:51:37.116Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Time]" + "'", str20, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Time" + "'", str21, "Time");
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test00452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00452");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        mutablePeriod2.setValue((int) (byte) 0, 100);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.Duration duration22 = duration9.withMillis(1645455034114L);
        org.joda.time.Instant instant23 = instant6.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period(1645455029672L, (long) 3, periodType35, chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTime dateTime47 = dateTime25.toDateTime(chronology43);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) instant6, (org.joda.time.ReadableInstant) dateTime47);
        int int49 = mutablePeriod2.getSeconds();
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T14:51:37.148Z" + "'", str12, "2022-02-21T14:51:37.148Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T14:51:37.149Z" + "'", str26, "2022-02-21T14:51:37.149Z");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test00453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00453");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes(0);
        boolean boolean16 = dateTime13.isAfterNow();
        org.joda.time.DateTime dateTime18 = dateTime13.withYearOfEra(9);
        org.joda.time.DateTime dateTime20 = dateTime13.plus(1645455067662L);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType22 = periodType21.withDaysRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        int int24 = periodType21.size();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455097249L + "'", long2 == 1645455097249L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-21T14:51:37.249Z" + "'", str7, "2022-02-21T14:51:37.249Z");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
    }

    @Test
    public void test00454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00454");
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType10 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.Period period20 = new org.joda.time.Period(1645455029672L, (long) 3, periodType10, chronology18);
        org.joda.time.DurationField durationField21 = chronology18.eras();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(0L, 1645455052051L, chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(53494734, 30, (int) (short) 100, 53482279, 39091384, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53482279 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test00455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00455");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.halfdays();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str18 = dateTimeZone16.getNameKey(1645455028293L);
        java.lang.String str20 = dateTimeZone16.getNameKey(1645455039471L);
        java.lang.String str21 = dateTimeZone16.toString();
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = dateTimeField23.set(1645455035866L, 39092311);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39092311 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+10:22" + "'", str21, "+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test00456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00456");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Seconds seconds15 = period14.toStandardSeconds();
        int int16 = period14.getMillis();
        org.joda.time.DurationFieldType durationFieldType18 = period14.getFieldType(0);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period(1645455029672L, (long) 3, periodType22, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfMonth();
        boolean boolean34 = durationFieldType18.isSupported(chronology30);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) 100, 1645455046455L, chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.monthOfYear();
        boolean boolean37 = periodType1.equals((java.lang.Object) chronology30);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1645455083503L, periodType1);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration51 = duration40.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.toDateTime(chronology57);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = duration51.toPeriodTo((org.joda.time.ReadableInstant) dateTime58, periodType59);
        org.joda.time.Period period62 = period60.withSeconds((int) (short) 100);
        org.joda.time.Period period63 = period62.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod38.add((org.joda.time.ReadablePeriod) period62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T14:51:37.471Z" + "'", str8, "2022-02-21T14:51:37.471Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(duration40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-21T14:51:37.471Z" + "'", str43, "2022-02-21T14:51:37.471Z");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-21T14:51:37.471Z" + "'", str54, "2022-02-21T14:51:37.471Z");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
    }

    @Test
    public void test00457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00457");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime1.minusMinutes(8);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight25 = dateTime23.toDateMidnight();
        org.joda.time.DateTime dateTime27 = dateTime23.plus(1645455035670L);
        int int28 = dateTime27.getMinuteOfHour();
        org.joda.time.DateTime.Property property29 = dateTime27.weekyear();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455097701L + "'", long2 == 1645455097701L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T14:51:37.701Z" + "'", str8, "2022-02-21T14:51:37.701Z");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645455097701L + "'", long20 == 1645455097701L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 42 + "'", int28 == 42);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test00458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00458");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645455028293L);
        int int11 = dateTimeZone7.getOffset(1645455028293L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean15 = dateTime4.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int17 = dateTime4.get(dateTimeFieldType16);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1L), 1L, periodType20, chronology21);
        mutablePeriod22.setSeconds((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        mutablePeriod22.setPeriod((long) 9, 100000L, chronology27);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Period period43 = new org.joda.time.Period(1645455029672L, (long) 3, periodType33, chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.DurationField durationField45 = chronology41.days();
        mutablePeriod22.add(1645455035891L, chronology41);
        org.joda.time.DateTime dateTime47 = dateTime4.withChronology(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTime47.withWeekOfWeekyear(728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 728 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:37.744Z" + "'", str2, "2022-02-21T14:51:37.744Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test00459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00459");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DurationField durationField9 = chronology6.years();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType13 = periodType12.withYearsRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Period period23 = new org.joda.time.Period(1645455029672L, (long) 3, periodType13, chronology21);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType25 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.PeriodType periodType27 = periodType25.withMillisRemoved();
        org.joda.time.Period period28 = period23.withPeriodType(periodType25);
        long long31 = chronology6.add((org.joda.time.ReadablePeriod) period28, 1645455077125L, 10);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = chronology6.getDateTimeMillis(39094373, 39092882, 53454899, (-19044), 53482703, 53487658, 53482279);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19044 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-14809064922875L) + "'", long31 == (-14809064922875L));
    }

    @Test
    public void test00460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00460");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-22T01:13:16.909+10:22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00461");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTime dateTime21 = dateTime4.minus(1645455041013L);
        org.joda.time.Instant instant22 = dateTime4.toInstant();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1L), 1L, periodType25, chronology26);
        mutablePeriod27.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        org.joda.time.DateTime dateTime55 = dateTime38.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) (byte) 0);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period66 = duration57.toPeriodFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration68 = duration57.minus(0L);
        boolean boolean69 = duration53.isShorterThan((org.joda.time.ReadableDuration) duration57);
        mutablePeriod27.setPeriod((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        boolean boolean75 = mutableInterval71.overlaps((org.joda.time.ReadableInterval) mutableInterval73);
        java.lang.Object obj76 = mutableInterval71.clone();
        org.joda.time.Chronology chronology77 = mutableInterval71.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.yearOfEra();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField80 = chronology77.yearOfCentury();
        org.joda.time.DurationField durationField81 = chronology77.years();
        org.joda.time.Period period82 = duration53.toPeriod(chronology77);
        org.joda.time.Instant instant84 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration53, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int86 = instant84.get(dateTimeFieldType85);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:37.920Z" + "'", str2, "2022-02-21T14:51:37.920Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:37.920Z" + "'", str9, "2022-02-21T14:51:37.920Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(periodType25);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-21T14:51:37.920Z" + "'", str32, "2022-02-21T14:51:37.920Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-21T14:51:37.920Z" + "'", str45, "2022-02-21T14:51:37.920Z");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(duration57);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-21T14:51:37.920Z" + "'", str60, "2022-02-21T14:51:37.920Z");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test00462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00462");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime9.plusYears(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime13.withDate(22, 4, 929);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 929 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645455097974L + "'", long7 == 1645455097974L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53497974 + "'", int11 == 53497974);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test00463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00463");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Zone must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00464");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType11 = period10.getPeriodType();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period(0, 59, 4, 37320000, 0, 100, 0, 0, periodType12);
        org.joda.time.Period period15 = period13.withYears((int) (byte) 100);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1L), 1L, periodType21, chronology22);
        java.lang.String str24 = periodType21.toString();
        java.lang.String str25 = periodType21.getName();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1645455029643L, periodType21);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType21, chronology33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Seconds seconds46 = period45.toStandardSeconds();
        int int47 = period45.getMillis();
        org.joda.time.DurationFieldType durationFieldType49 = period45.getFieldType(0);
        int int50 = periodType21.indexOf(durationFieldType49);
        org.joda.time.Period period52 = period13.withFieldAdded(durationFieldType49, 38089);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period54 = period13.withMillis(4380700);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PeriodType[Time]" + "'", str24, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Time" + "'", str25, "Time");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-21T14:51:38.095Z" + "'", str39, "2022-02-21T14:51:38.095Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test00465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00465");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("2022-02-21T14:50:59.288Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00466");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(50, 72, 30, 4386659, (int) (short) -1, 39093577);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4386659 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00467");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getShortName(52L);
        org.joda.time.DateTime dateTime12 = dateTime4.toDateTime(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withMonthOfYear(4397211);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4397211 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:38.358Z" + "'", str2, "2022-02-21T14:51:38.358Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:22" + "'", str11, "+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test00468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00468");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        org.joda.time.DateTime.Property property10 = dateTime1.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property10.getFieldType();
        java.lang.String str12 = property10.getAsText();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:38.474Z" + "'", str2, "2022-02-21T14:51:38.474Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "14" + "'", str12, "14");
    }

    @Test
    public void test00469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00469");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(1645455071854L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455071854 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00470");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '4');
        long long22 = duration19.getMillis();
        org.joda.time.Duration duration24 = duration19.plus(1645455052234L);
        long long25 = duration24.getStandardMinutes();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:51:38.877Z" + "'", str4, "2022-02-21T14:51:38.877Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100008L + "'", long22 == 100008L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 27424252L + "'", long25 == 27424252L);
    }

    @Test
    public void test00471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00471");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod();
        mutablePeriod2.setMonths((int) ' ');
        java.lang.Object obj5 = mutablePeriod2.clone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone8);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        org.joda.time.Interval interval17 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval17);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1L), 1L, periodType22, chronology23);
        java.lang.String str25 = periodType22.toString();
        java.lang.String str26 = periodType22.getName();
        org.joda.time.Period period27 = interval17.toPeriod(periodType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period29 = period27.plusWeeks(100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P32M");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[Time]" + "'", str25, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Time" + "'", str26, "Time");
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test00472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00472");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.millisOfDay();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        java.util.Locale locale24 = null;
        int int25 = dateTimeField23.getMaximumTextLength(locale24);
        boolean boolean26 = dateTimeField23.isSupported();
        java.util.Locale locale27 = null;
        int int28 = dateTimeField23.getMaximumTextLength(locale27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime49.plusSeconds((int) (byte) 10);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period53 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalTime localTime54 = dateTime51.toLocalTime();
        int int55 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localTime54);
        int[] intArray57 = chronology14.get((org.joda.time.ReadablePartial) localTime54, 1645455035272L);
        long long59 = chronology7.set((org.joda.time.ReadablePartial) localTime54, 1645455060565L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((java.lang.Object) "ISOChronology[+10:22]", chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: ISOChronology[+10:22]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T14:51:39.204Z" + "'", str33, "2022-02-21T14:51:39.204Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration43);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645455099205L + "'", long47 == 1645455099205L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 292278993 + "'", int55 == 292278993);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[14, 50, 35, 272]");
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645455109205L + "'", long59 == 1645455109205L);
    }

    @Test
    public void test00473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00473");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (byte) 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        boolean boolean39 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.Period period48 = duration27.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType47);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        long long56 = dateTime55.getMillis();
        org.joda.time.DateTime dateTime58 = dateTime55.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime60 = dateTime58.plusSeconds((int) (byte) 10);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfCentury();
        org.joda.time.DateTime dateTime63 = property62.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.util.Locale locale66 = null;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        boolean boolean68 = dateTime63.isBefore((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Minutes minutes70 = duration27.toStandardMinutes();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:39.257Z" + "'", str2, "2022-02-21T14:51:39.257Z");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-21T14:51:39.257Z" + "'", str15, "2022-02-21T14:51:39.257Z");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21T14:51:39.257Z" + "'", str30, "2022-02-21T14:51:39.257Z");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-21T14:51:39.257Z" + "'", str42, "2022-02-21T14:51:39.257Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration52);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645455099257L + "'", long56 == 1645455099257L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645455099257,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=51,SECOND=39,MILLISECOND=257,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(minutes70);
    }

    @Test
    public void test00474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00474");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        java.lang.Object obj3 = mutablePeriod0.clone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone6);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.Period period12 = period8.plusWeeks((int) (short) -1);
        org.joda.time.Period period14 = period8.minusMillis(4);
        org.joda.time.Interval interval15 = interval7.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period8);
        mutablePeriod0.add((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Interval interval18 = interval15.withEndMillis(1645455034431L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval20 = interval18.withStartMillis(1645455051255L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "P32M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval18);
    }

    @Test
    public void test00475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00475");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(38089, 53455286, (int) (short) -1, (int) (byte) 10, 4409715);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4409715 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00476");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645455028646L, chronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        mutablePeriod9.add((org.joda.time.ReadableInterval) mutableInterval10);
        mutablePeriod9.setPeriod(53452649, 22, 23, 23, 38611580, 37320000, 4381721, 70);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test00477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00477");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645455028646L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes(1645455037008L);
        boolean boolean17 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration16);
        java.lang.String str18 = duration12.toString();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((java.lang.Object) 1645455040972L);
        org.joda.time.Duration duration22 = duration20.minus(1645455048468L);
        org.joda.time.Duration duration23 = duration12.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period24 = duration20.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = period24.getFieldType(141);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT100S" + "'", str18, "PT100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test00478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00478");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        java.util.Locale locale8 = null;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        boolean boolean10 = dateTimeField7.isSupported();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField7.getMaximumTextLength(locale11);
        long long15 = dateTimeField7.add((long) (short) 0, (int) (byte) 10);
        int int16 = dateTimeField7.getMinimumValue();
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField7.set(1645455028941L, "2022-02-21T14:50:59.698Z", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:50:59.698Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 315532800000L + "'", long15 == 315532800000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test00479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00479");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType10 = periodType9.withYearsRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.Period period20 = new org.joda.time.Period(1645455029672L, (long) 3, periodType10, chronology18);
        mutablePeriod5.add(1645455030370L, chronology18);
        org.joda.time.DurationField durationField22 = chronology18.minutes();
        org.joda.time.DurationField durationField23 = chronology18.minutes();
        mutableInterval2.setChronology(chronology18);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        boolean boolean43 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property44 = dateTime29.year();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setStart((org.joda.time.ReadableInstant) dateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-21T14:51:39.818Z" + "'", str27, "2022-02-21T14:51:39.818Z");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-21T14:51:39.818Z" + "'", str34, "2022-02-21T14:51:39.818Z");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test00480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00480");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-21T14:50:55.820Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:50:55.820Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00481");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime12.withDurationAdded(1645455083045L, 38611580);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645455083045 * 38611580");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455100057L + "'", long2 == 1645455100057L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test00482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00482");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        long long7 = property3.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property3.getFieldType();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455100165L + "'", long2 == 1645455100165L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4459900165L + "'", long7 == 4459900165L);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test00483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00483");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime.Property property11 = dateTime4.millisOfSecond();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = duration15.plus((long) 8);
        org.joda.time.Seconds seconds19 = duration15.toStandardSeconds();
        org.joda.time.Duration duration20 = duration15.toDuration();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = duration24.toPeriod();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = duration30.toPeriod();
        boolean boolean33 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration35 = duration24.minus(1645455031834L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration48 = duration37.minus(0L);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1L), 1L, periodType53, chronology54);
        java.lang.String str56 = periodType53.toString();
        java.lang.String str57 = periodType53.getName();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1645455029643L, periodType53);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, readableInstant49, periodType53);
        boolean boolean60 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean61 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType63 = periodType62.withMinutesRemoved();
        org.joda.time.PeriodType periodType64 = periodType62.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration35, periodType64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1645454931834");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:40.255Z" + "'", str2, "2022-02-21T14:51:40.255Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-21T14:51:40.255Z" + "'", str40, "2022-02-21T14:51:40.255Z");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PeriodType[Time]" + "'", str56, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Time" + "'", str57, "Time");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
    }

    @Test
    public void test00484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00484");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(10L);
        java.lang.String str4 = mutableInterval0.toString();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period15 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration17 = duration6.minus(0L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1L), 1L, periodType22, chronology23);
        java.lang.String str25 = periodType22.toString();
        java.lang.String str26 = periodType22.getName();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645455029643L, periodType22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, readableInstant18, periodType22);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.minusSeconds((int) (short) 1);
        org.joda.time.Period period38 = period34.plusWeeks((int) (short) -1);
        org.joda.time.Period period40 = period34.minusMillis(4);
        org.joda.time.Interval interval41 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        java.lang.String str43 = chronology42.toString();
        mutablePeriod28.add(1645455042903L, chronology42);
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod28);
        mutableInterval0.setDurationAfterStart(1L);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        mutableInterval48.setInterval(100000L, 1645455028646L);
        long long56 = mutableInterval48.getStartMillis();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval57.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration60);
        mutableInterval48.setDurationAfterStart((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Period period63 = duration60.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime dateTime68 = dateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime70 = dateTime68.plusSeconds((int) (byte) 10);
        org.joda.time.Period period71 = duration60.toPeriodFrom((org.joda.time.ReadableInstant) dateTime70);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStart((org.joda.time.ReadableInstant) dateTime70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z" + "'", str4, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:40.283Z" + "'", str9, "2022-02-21T14:51:40.283Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[Time]" + "'", str25, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Time" + "'", str26, "Time");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100000L + "'", long56 == 100000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period63);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645455100284L + "'", long66 == 1645455100284L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period71);
    }

    @Test
    public void test00485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00485");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645455028293L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = yearMonthDay13.getValue(39092311);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39092311");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455100366L + "'", long2 == 1645455100366L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test00486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00486");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) (short) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime12 = dateTime4.withYear(2);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        int int19 = dateTime18.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = dateTime18.isAfter(readableInstant20);
        boolean boolean22 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime18.toString(dateTimeFormatter23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(chronology30);
        org.joda.time.DateTime dateTime32 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.DateTime dateTime37 = dateTime34.withMillisOfSecond((int) (short) 10);
        int int38 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime34);
        int int39 = dateTime29.getMonthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime29.minusMillis(4386659);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:40.415Z" + "'", str2, "2022-02-21T14:51:40.415Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645455100416L + "'", long15 == 1645455100416L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-05-02T14:51:40.416Z" + "'", str24, "2022-05-02T14:51:40.416Z");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-21T14:51:40.416Z" + "'", str27, "2022-02-21T14:51:40.416Z");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-21T14:51:40.416Z" + "'", str35, "2022-02-21T14:51:40.416Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test00487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00487");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("2022-02-21T14:50:53.354Z", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00488");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime9 = dateTime4.withFieldAdded(durationFieldType7, (int) (short) 0);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.minutes();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.millis();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645455078372L, 31556952000L, chronology21);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1645455071421L, 1645455037008L, periodType12, chronology21);
        boolean boolean25 = durationFieldType7.isSupported(chronology21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(100);
        org.joda.time.LocalDate localDate35 = dateTime32.toLocalDate();
        int int36 = localDate35.size();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Chronology chronology45 = chronology43.withUTC();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration52 = duration49.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime61);
        mutablePeriod62.addMillis((int) '4');
        int[] intArray66 = chronology43.get((org.joda.time.ReadablePeriod) mutablePeriod62, 1645455059789L);
        // The following exception was thrown during execution in test generation
        try {
            chronology21.validate((org.joda.time.ReadablePartial) localDate35, intArray66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:40.860Z" + "'", str2, "2022-02-21T14:51:40.860Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645455100860L + "'", long28 == 1645455100860L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration52);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-21T14:51:40.860Z" + "'", str55, "2022-02-21T14:51:40.860Z");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 2720, 4, 14, 50, 59, 789]");
    }

    @Test
    public void test00489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00489");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(1);
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime7.withFields((org.joda.time.ReadablePartial) yearMonthDay17);
        org.joda.time.DateTime.Property property19 = dateTime7.yearOfCentury();
        org.joda.time.DateTime.Property property20 = dateTime7.secondOfMinute();
        java.lang.String str21 = property20.getAsText();
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.hours();
        boolean boolean23 = property20.equals((java.lang.Object) durationFieldType22);
        int int24 = property20.getLeapAmount();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:40.920Z" + "'", str2, "2022-02-21T14:51:40.920Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T14:51:40.010Z" + "'", str10, "2022-02-21T14:51:40.010Z");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455100920L + "'", long13 == 1645455100920L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40" + "'", str21, "40");
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test00490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00490");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(2);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00491");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.negated();
        org.joda.time.Period period3 = period1.plusSeconds(53440972);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = period3.getValue(53495141);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53495141");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test00492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00492");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(38611580);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test00493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00493");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = period0.withPeriodType(periodType7);
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period8.withHours(42);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test00494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00494");
        org.joda.time.Chronology chronology5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(53469189, (int) (byte) 10, 53482054, 4409715, 53483621, chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4409715 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00495");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645455028646L);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setStartMillis(1645455089200L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
    }

    @Test
    public void test00496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00496");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime24.plusMillis(100);
        long long28 = dateTime27.getMillis();
        int int29 = dateTime27.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.millisOfSecond();
        boolean boolean40 = dateTimeFieldType30.isSupported(chronology37);
        int int41 = dateTime27.get(dateTimeFieldType30);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1645455028293L, 1645455027824L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (short) 10);
        boolean boolean53 = dateTime51.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime(chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = dateTime62.toDateTimeISO();
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes(0);
        boolean boolean72 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime69);
        boolean boolean75 = mutableInterval73.contains(1L);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        java.lang.Object obj81 = mutableInterval76.clone();
        org.joda.time.Chronology chronology82 = mutableInterval76.getChronology();
        mutableInterval73.setChronology(chronology82);
        mutablePeriod44.setPeriod(100000L, 1645455034244L, chronology82);
        org.joda.time.DurationField durationField85 = chronology82.millis();
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType30.getField(chronology82);
        boolean boolean87 = dateTime4.isSupported(dateTimeFieldType30);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-21T14:51:41.504Z" + "'", str2, "2022-02-21T14:51:41.504Z");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:41.504Z" + "'", str9, "2022-02-21T14:51:41.504Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645455101505L + "'", long22 == 1645455101505L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1651503101605L + "'", long28 == 1651503101605L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-21T14:51:41.505Z" + "'", str49, "2022-02-21T14:51:41.505Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-21T14:51:41.505Z" + "'", str56, "2022-02-21T14:51:41.505Z");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-21T14:51:41.505Z" + "'", str63, "2022-02-21T14:51:41.505Z");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test00497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00497");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime17 = dateTime15.withSecondOfMinute(4);
        java.lang.Class<?> wildcardClass18 = dateTime15.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455101574L + "'", long2 == 1645455101574L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21T14:51:41.574Z" + "'", str9, "2022-02-21T14:51:41.574Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00498");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1645455081061L, 1645455058141L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00499");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = property9.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean12 = dateTime10.isSupported(dateTimeFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType11.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone16);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.Period period22 = period18.plusWeeks((int) (short) -1);
        org.joda.time.Period period24 = period18.minusMillis(4);
        org.joda.time.Interval interval25 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType11.getField(chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((int) (byte) 10, 53486469, 40, 53498199, (int) (byte) 100, 53, chronology26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53498199 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645455102002L + "'", long8 == 1645455102002L);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test00500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00500");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        java.util.Locale locale8 = null;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        boolean boolean10 = dateTimeField7.isSupported();
        boolean boolean11 = dateTimeField7.isSupported();
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField7.set(1645455096110L, "2022-02-22T01:13:14.637+10:22", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T01:13:14.637+10:22\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }
}
